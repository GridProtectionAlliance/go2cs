// Code generated by mklockrank.go; DO NOT EDIT.
namespace go;

partial class runtime_package {

[GoType("num:nint")] partial struct lockRank;

// Constants representing the ranks of all non-leaf runtime locks, in rank order.
// Locks with lower rank must be taken before locks with higher rank,
// in addition to satisfying the partial order in lockPartialOrder.
// A few ranks allow self-cycles, which are specified in lockPartialOrder.
internal static readonly lockRank lockRankUnknown = /* iota */ 0;

internal static readonly lockRank lockRankSysmon = 1;

internal static readonly lockRank lockRankScavenge = 2;

internal static readonly lockRank lockRankForcegc = 3;

internal static readonly lockRank lockRankDefer = 4;

internal static readonly lockRank lockRankSweepWaiters = 5;

internal static readonly lockRank lockRankAssistQueue = 6;

internal static readonly lockRank lockRankSweep = 7;

internal static readonly lockRank lockRankTestR = 8;

internal static readonly lockRank lockRankTestW = 9;

internal static readonly lockRank lockRankTimerSend = 10;

internal static readonly lockRank lockRankAllocmW = 11;

internal static readonly lockRank lockRankExecW = 12;

internal static readonly lockRank lockRankCpuprof = 13;

internal static readonly lockRank lockRankPollCache = 14;

internal static readonly lockRank lockRankPollDesc = 15;

internal static readonly lockRank lockRankWakeableSleep = 16;

internal static readonly lockRank lockRankHchan = 17;

internal static readonly lockRank lockRankAllocmR = 18;

internal static readonly lockRank lockRankExecR = 19;

internal static readonly lockRank lockRankSched = 20;

internal static readonly lockRank lockRankAllg = 21;

internal static readonly lockRank lockRankAllp = 22;

internal static readonly lockRank lockRankNotifyList = 23;

internal static readonly lockRank lockRankSudog = 24;

internal static readonly lockRank lockRankTimers = 25;

internal static readonly lockRank lockRankTimer = 26;

internal static readonly lockRank lockRankNetpollInit = 27;

internal static readonly lockRank lockRankRoot = 28;

internal static readonly lockRank lockRankItab = 29;

internal static readonly lockRank lockRankReflectOffs = 30;

internal static readonly lockRank lockRankUserArenaState = 31;

internal static readonly lockRank lockRankTraceBuf = 32;

internal static readonly lockRank lockRankTraceStrings = 33;

internal static readonly lockRank lockRankFin = 34;

internal static readonly lockRank lockRankSpanSetSpine = 35;

internal static readonly lockRank lockRankMspanSpecial = 36;

internal static readonly lockRank lockRankTraceTypeTab = 37;

internal static readonly lockRank lockRankGcBitsArenas = 38;

internal static readonly lockRank lockRankProfInsert = 39;

internal static readonly lockRank lockRankProfBlock = 40;

internal static readonly lockRank lockRankProfMemActive = 41;

internal static readonly lockRank lockRankProfMemFuture = 42;

internal static readonly lockRank lockRankGscan = 43;

internal static readonly lockRank lockRankStackpool = 44;

internal static readonly lockRank lockRankStackLarge = 45;

internal static readonly lockRank lockRankHchanLeaf = 46;

internal static readonly lockRank lockRankWbufSpans = 47;

internal static readonly lockRank lockRankMheap = 48;

internal static readonly lockRank lockRankMheapSpecial = 49;

internal static readonly lockRank lockRankGlobalAlloc = 50;

internal static readonly lockRank lockRankTrace = 51;

internal static readonly lockRank lockRankTraceStackTab = 52;

internal static readonly lockRank lockRankPanic = 53;

internal static readonly lockRank lockRankDeadlock = 54;

internal static readonly lockRank lockRankRaceFini = 55;

internal static readonly lockRank lockRankAllocmRInternal = 56;

internal static readonly lockRank lockRankExecRInternal = 57;

internal static readonly lockRank lockRankTestRInternal = 58;

// lockRankLeafRank is the rank of lock that does not have a declared rank,
// and hence is a leaf lock.
internal static readonly lockRank lockRankLeafRank = 1000;

// lockNames gives the names associated with each of the above ranks.
internal static slice<@string> lockNames = new runtime.SparseArray<@string>{
    [lockRankSysmon] = "sysmon"u8,
    [lockRankScavenge] = "scavenge"u8,
    [lockRankForcegc] = "forcegc"u8,
    [lockRankDefer] = "defer"u8,
    [lockRankSweepWaiters] = "sweepWaiters"u8,
    [lockRankAssistQueue] = "assistQueue"u8,
    [lockRankSweep] = "sweep"u8,
    [lockRankTestR] = "testR"u8,
    [lockRankTestW] = "testW"u8,
    [lockRankTimerSend] = "timerSend"u8,
    [lockRankAllocmW] = "allocmW"u8,
    [lockRankExecW] = "execW"u8,
    [lockRankCpuprof] = "cpuprof"u8,
    [lockRankPollCache] = "pollCache"u8,
    [lockRankPollDesc] = "pollDesc"u8,
    [lockRankWakeableSleep] = "wakeableSleep"u8,
    [lockRankHchan] = "hchan"u8,
    [lockRankAllocmR] = "allocmR"u8,
    [lockRankExecR] = "execR"u8,
    [lockRankSched] = "sched"u8,
    [lockRankAllg] = "allg"u8,
    [lockRankAllp] = "allp"u8,
    [lockRankNotifyList] = "notifyList"u8,
    [lockRankSudog] = "sudog"u8,
    [lockRankTimers] = "timers"u8,
    [lockRankTimer] = "timer"u8,
    [lockRankNetpollInit] = "netpollInit"u8,
    [lockRankRoot] = "root"u8,
    [lockRankItab] = "itab"u8,
    [lockRankReflectOffs] = "reflectOffs"u8,
    [lockRankUserArenaState] = "userArenaState"u8,
    [lockRankTraceBuf] = "traceBuf"u8,
    [lockRankTraceStrings] = "traceStrings"u8,
    [lockRankFin] = "fin"u8,
    [lockRankSpanSetSpine] = "spanSetSpine"u8,
    [lockRankMspanSpecial] = "mspanSpecial"u8,
    [lockRankTraceTypeTab] = "traceTypeTab"u8,
    [lockRankGcBitsArenas] = "gcBitsArenas"u8,
    [lockRankProfInsert] = "profInsert"u8,
    [lockRankProfBlock] = "profBlock"u8,
    [lockRankProfMemActive] = "profMemActive"u8,
    [lockRankProfMemFuture] = "profMemFuture"u8,
    [lockRankGscan] = "gscan"u8,
    [lockRankStackpool] = "stackpool"u8,
    [lockRankStackLarge] = "stackLarge"u8,
    [lockRankHchanLeaf] = "hchanLeaf"u8,
    [lockRankWbufSpans] = "wbufSpans"u8,
    [lockRankMheap] = "mheap"u8,
    [lockRankMheapSpecial] = "mheapSpecial"u8,
    [lockRankGlobalAlloc] = "globalAlloc"u8,
    [lockRankTrace] = "trace"u8,
    [lockRankTraceStackTab] = "traceStackTab"u8,
    [lockRankPanic] = "panic"u8,
    [lockRankDeadlock] = "deadlock"u8,
    [lockRankRaceFini] = "raceFini"u8,
    [lockRankAllocmRInternal] = "allocmRInternal"u8,
    [lockRankExecRInternal] = "execRInternal"u8,
    [lockRankTestRInternal] = "testRInternal"u8
}.slice();

internal static @string String(this lockRank rank) {
    if (rank == 0) {
        return "UNKNOWN"u8;
    }
    if (rank == lockRankLeafRank) {
        return "LEAF"u8;
    }
    if (rank < 0 || ((nint)rank) >= len(lockNames)) {
        return "BAD RANK"u8;
    }
    return lockNames[rank];
}

// lockPartialOrder is the transitive closure of the lock rank graph.
// An entry for rank X lists all of the ranks that can already be held
// when rank X is acquired.
//
// Lock ranks that allow self-cycles list themselves.
internal static slice<slice<lockRank>> lockPartialOrder = new runtime.SparseArray<slice<lockRank>>{
    [lockRankSysmon] = new(),
    [lockRankScavenge] = new(lockRankSysmon),
    [lockRankForcegc] = new(lockRankSysmon),
    [lockRankDefer] = new(),
    [lockRankSweepWaiters] = new(),
    [lockRankAssistQueue] = new(),
    [lockRankSweep] = new(),
    [lockRankTestR] = new(),
    [lockRankTestW] = new(),
    [lockRankTimerSend] = new(),
    [lockRankAllocmW] = new(),
    [lockRankExecW] = new(),
    [lockRankCpuprof] = new(),
    [lockRankPollCache] = new(),
    [lockRankPollDesc] = new(),
    [lockRankWakeableSleep] = new(),
    [lockRankHchan] = new(lockRankSysmon, lockRankScavenge, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankWakeableSleep, lockRankHchan),
    [lockRankAllocmR] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan),
    [lockRankExecR] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan),
    [lockRankSched] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankAllocmR, lockRankExecR),
    [lockRankAllg] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankAllocmR, lockRankExecR, lockRankSched),
    [lockRankAllp] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankAllocmR, lockRankExecR, lockRankSched),
    [lockRankNotifyList] = new(),
    [lockRankSudog] = new(lockRankSysmon, lockRankScavenge, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankWakeableSleep, lockRankHchan, lockRankNotifyList),
    [lockRankTimers] = new(lockRankSysmon, lockRankScavenge, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankTimers),
    [lockRankTimer] = new(lockRankSysmon, lockRankScavenge, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankTimers),
    [lockRankNetpollInit] = new(lockRankSysmon, lockRankScavenge, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankTimers, lockRankTimer),
    [lockRankRoot] = new(),
    [lockRankItab] = new(),
    [lockRankReflectOffs] = new(lockRankItab),
    [lockRankUserArenaState] = new(),
    [lockRankTraceBuf] = new(lockRankSysmon, lockRankScavenge),
    [lockRankTraceStrings] = new(lockRankSysmon, lockRankScavenge, lockRankTraceBuf),
    [lockRankFin] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankNotifyList, lockRankTimers, lockRankTimer, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings),
    [lockRankSpanSetSpine] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankNotifyList, lockRankTimers, lockRankTimer, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings),
    [lockRankMspanSpecial] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankNotifyList, lockRankTimers, lockRankTimer, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings),
    [lockRankTraceTypeTab] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankNotifyList, lockRankTimers, lockRankTimer, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings),
    [lockRankGcBitsArenas] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankNotifyList, lockRankTimers, lockRankTimer, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings, lockRankMspanSpecial),
    [lockRankProfInsert] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankNotifyList, lockRankTimers, lockRankTimer, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings),
    [lockRankProfBlock] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankNotifyList, lockRankTimers, lockRankTimer, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings),
    [lockRankProfMemActive] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankNotifyList, lockRankTimers, lockRankTimer, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings),
    [lockRankProfMemFuture] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankNotifyList, lockRankTimers, lockRankTimer, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings, lockRankProfMemActive),
    [lockRankGscan] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankNotifyList, lockRankTimers, lockRankTimer, lockRankNetpollInit, lockRankRoot, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings, lockRankFin, lockRankSpanSetSpine, lockRankMspanSpecial, lockRankGcBitsArenas, lockRankProfInsert, lockRankProfBlock, lockRankProfMemActive, lockRankProfMemFuture),
    [lockRankStackpool] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankNotifyList, lockRankTimers, lockRankTimer, lockRankNetpollInit, lockRankRoot, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings, lockRankFin, lockRankSpanSetSpine, lockRankMspanSpecial, lockRankGcBitsArenas, lockRankProfInsert, lockRankProfBlock, lockRankProfMemActive, lockRankProfMemFuture, lockRankGscan),
    [lockRankStackLarge] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankNotifyList, lockRankTimers, lockRankTimer, lockRankNetpollInit, lockRankRoot, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings, lockRankFin, lockRankSpanSetSpine, lockRankMspanSpecial, lockRankGcBitsArenas, lockRankProfInsert, lockRankProfBlock, lockRankProfMemActive, lockRankProfMemFuture, lockRankGscan),
    [lockRankHchanLeaf] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankNotifyList, lockRankTimers, lockRankTimer, lockRankNetpollInit, lockRankRoot, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings, lockRankFin, lockRankSpanSetSpine, lockRankMspanSpecial, lockRankGcBitsArenas, lockRankProfInsert, lockRankProfBlock, lockRankProfMemActive, lockRankProfMemFuture, lockRankGscan, lockRankHchanLeaf),
    [lockRankWbufSpans] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankDefer, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankExecW, lockRankCpuprof, lockRankPollCache, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankNotifyList, lockRankSudog, lockRankTimers, lockRankTimer, lockRankNetpollInit, lockRankRoot, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings, lockRankFin, lockRankSpanSetSpine, lockRankMspanSpecial, lockRankGcBitsArenas, lockRankProfInsert, lockRankProfBlock, lockRankProfMemActive, lockRankProfMemFuture, lockRankGscan),
    [lockRankMheap] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankDefer, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankExecW, lockRankCpuprof, lockRankPollCache, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankNotifyList, lockRankSudog, lockRankTimers, lockRankTimer, lockRankNetpollInit, lockRankRoot, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings, lockRankFin, lockRankSpanSetSpine, lockRankMspanSpecial, lockRankGcBitsArenas, lockRankProfInsert, lockRankProfBlock, lockRankProfMemActive, lockRankProfMemFuture, lockRankGscan, lockRankStackpool, lockRankStackLarge, lockRankWbufSpans),
    [lockRankMheapSpecial] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankDefer, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankExecW, lockRankCpuprof, lockRankPollCache, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankNotifyList, lockRankSudog, lockRankTimers, lockRankTimer, lockRankNetpollInit, lockRankRoot, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings, lockRankFin, lockRankSpanSetSpine, lockRankMspanSpecial, lockRankGcBitsArenas, lockRankProfInsert, lockRankProfBlock, lockRankProfMemActive, lockRankProfMemFuture, lockRankGscan, lockRankStackpool, lockRankStackLarge, lockRankWbufSpans, lockRankMheap),
    [lockRankGlobalAlloc] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankDefer, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankExecW, lockRankCpuprof, lockRankPollCache, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankNotifyList, lockRankSudog, lockRankTimers, lockRankTimer, lockRankNetpollInit, lockRankRoot, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings, lockRankFin, lockRankSpanSetSpine, lockRankMspanSpecial, lockRankGcBitsArenas, lockRankProfInsert, lockRankProfBlock, lockRankProfMemActive, lockRankProfMemFuture, lockRankGscan, lockRankStackpool, lockRankStackLarge, lockRankWbufSpans, lockRankMheap, lockRankMheapSpecial),
    [lockRankTrace] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankDefer, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankExecW, lockRankCpuprof, lockRankPollCache, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankNotifyList, lockRankSudog, lockRankTimers, lockRankTimer, lockRankNetpollInit, lockRankRoot, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings, lockRankFin, lockRankSpanSetSpine, lockRankMspanSpecial, lockRankGcBitsArenas, lockRankProfInsert, lockRankProfBlock, lockRankProfMemActive, lockRankProfMemFuture, lockRankGscan, lockRankStackpool, lockRankStackLarge, lockRankWbufSpans, lockRankMheap),
    [lockRankTraceStackTab] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankDefer, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankExecW, lockRankCpuprof, lockRankPollCache, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankNotifyList, lockRankSudog, lockRankTimers, lockRankTimer, lockRankNetpollInit, lockRankRoot, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings, lockRankFin, lockRankSpanSetSpine, lockRankMspanSpecial, lockRankGcBitsArenas, lockRankProfInsert, lockRankProfBlock, lockRankProfMemActive, lockRankProfMemFuture, lockRankGscan, lockRankStackpool, lockRankStackLarge, lockRankWbufSpans, lockRankMheap, lockRankTrace),
    [lockRankPanic] = new(),
    [lockRankDeadlock] = new(lockRankPanic, lockRankDeadlock),
    [lockRankRaceFini] = new(lockRankPanic),
    [lockRankAllocmRInternal] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankAllocmW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankAllocmR),
    [lockRankExecRInternal] = new(lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankTimerSend, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankHchan, lockRankExecR),
    [lockRankTestRInternal] = new(lockRankTestR, lockRankTestW)
}.slice();

} // end runtime_package
