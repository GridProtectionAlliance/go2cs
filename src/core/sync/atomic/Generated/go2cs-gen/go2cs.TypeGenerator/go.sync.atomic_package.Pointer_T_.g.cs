//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.sync;

public static partial class atomic_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct Pointer<T>
    {
        // Promoted Struct References
        // -- Pointer has no promoted structs

        // Field References
        public static ref global::go.array<global::go.ж<T>> Ꮡ_(ref Pointer<T> instance) => ref instance._;
        internal static ref global::go.sync.atomic_package.noCopy Ꮡ__(ref Pointer<T> instance) => ref instance.__;
        public static ref global::go.unsafe_package.Pointer Ꮡv(ref Pointer<T> instance) => ref instance.v;
        
        // Constructors
        public Pointer(NilType _)
        {
            this._ = default!;
            this.__ = default!;
            this.v = default!;
        }

        public Pointer(global::go.array<global::go.ж<T>> _ = default!, global::go.sync.atomic_package.noCopy __ = default!)
        {
            this._ = _;
            this.__ = __;
        }

        internal Pointer(global::go.array<global::go.ж<T>> _ = default!, global::go.sync.atomic_package.noCopy __ = default!, global::go.unsafe_package.Pointer v = default!)
        {
            this._ = _;
            this.__ = __;
            this.v = v;
        }
        
        // Handle comparisons between struct 'Pointer' instances
        public bool Equals(Pointer<T> other) =>
            false /* missing equality constraints */;
        
        public override bool Equals(object? obj) => obj is Pointer<T> other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            _,
            __,
            v);
        
        public static bool operator ==(Pointer<T> left, Pointer<T> right) => left.Equals(right);
        
        public static bool operator !=(Pointer<T> left, Pointer<T> right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'Pointer'
        public static bool operator ==(Pointer<T> value, NilType nil) => value.Equals(default(Pointer<T>));

        public static bool operator !=(Pointer<T> value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Pointer<T> value) => value == nil;

        public static bool operator !=(NilType nil, Pointer<T> value) => value != nil;

        public static implicit operator Pointer<T>(NilType nil) => default(Pointer<T>);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            _.ToString(),
            __.ToString(),
            v?.ToString() ?? "<nil>"
        ]), "}");
    }
}
