// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
// Code generated by go run gen.go -output md5block.go; DO NOT EDIT.
namespace go.crypto;

using byteorder = @internal.byteorder_package;
using bits = math.bits_package;
using @internal;
using math;

partial class md5_package {

internal static void blockGeneric(ж<digest> Ꮡdig, slice<byte> p) {
    ref var dig = ref Ꮡdig.val;

    // load state
    var (a, b, c, d) = (dig.s[0], dig.s[1], dig.s[2], dig.s[3]);
    for (nint i = 0; i <= len(p) - ΔBlockSize; i += ΔBlockSize) {
        // eliminate bounds checks on p
        var q = p[(int)(i)..];
        q = q.slice(-1, ΔBlockSize, ΔBlockSize);
        // save current state
        var (aa, bb, cc, dd) = (a, b, c, d);
        // load input block
        var x0 = byteorder.LeUint32(q[(int)(4 * 0)..]);
        var x1 = byteorder.LeUint32(q[(int)(4 * 1)..]);
        var x2 = byteorder.LeUint32(q[(int)(4 * 2)..]);
        var x3 = byteorder.LeUint32(q[(int)(4 * 3)..]);
        var x4 = byteorder.LeUint32(q[(int)(4 * 4)..]);
        var x5 = byteorder.LeUint32(q[(int)(4 * 5)..]);
        var x6 = byteorder.LeUint32(q[(int)(4 * 6)..]);
        var x7 = byteorder.LeUint32(q[(int)(4 * 7)..]);
        var x8 = byteorder.LeUint32(q[(int)(4 * 8)..]);
        var x9 = byteorder.LeUint32(q[(int)(4 * 9)..]);
        var xa = byteorder.LeUint32(q[(int)(4 * 10)..]);
        var xb = byteorder.LeUint32(q[(int)(4 * 11)..]);
        var xc = byteorder.LeUint32(q[(int)(4 * 12)..]);
        var xd = byteorder.LeUint32(q[(int)(4 * 13)..]);
        var xe = byteorder.LeUint32(q[(int)(4 * 14)..]);
        var xf = byteorder.LeUint32(q[(int)(4 * 15)..]);
        // round 1
        a = b + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(c ^ d)) & b)) ^ d)) + a + x0 + (nint)3614090360L, 7);
        d = a + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(b ^ c)) & a)) ^ c)) + d + x1 + (nint)3905402710L, 12);
        c = d + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(a ^ b)) & d)) ^ b)) + c + x2 + 606105819, 17);
        b = c + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(d ^ a)) & c)) ^ a)) + b + x3 + (nint)3250441966L, 22);
        a = b + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(c ^ d)) & b)) ^ d)) + a + x4 + (nint)4118548399L, 7);
        d = a + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(b ^ c)) & a)) ^ c)) + d + x5 + 1200080426, 12);
        c = d + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(a ^ b)) & d)) ^ b)) + c + x6 + (nint)2821735955L, 17);
        b = c + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(d ^ a)) & c)) ^ a)) + b + x7 + (nint)4249261313L, 22);
        a = b + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(c ^ d)) & b)) ^ d)) + a + x8 + 1770035416, 7);
        d = a + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(b ^ c)) & a)) ^ c)) + d + x9 + (nint)2336552879L, 12);
        c = d + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(a ^ b)) & d)) ^ b)) + c + xa + (nint)4294925233L, 17);
        b = c + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(d ^ a)) & c)) ^ a)) + b + xb + (nint)2304563134L, 22);
        a = b + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(c ^ d)) & b)) ^ d)) + a + xc + 1804603682, 7);
        d = a + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(b ^ c)) & a)) ^ c)) + d + xd + (nint)4254626195L, 12);
        c = d + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(a ^ b)) & d)) ^ b)) + c + xe + (nint)2792965006L, 17);
        b = c + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(d ^ a)) & c)) ^ a)) + b + xf + 1236535329, 22);
        // round 2
        a = b + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(b ^ c)) & d)) ^ c)) + a + x1 + (nint)4129170786L, 5);
        d = a + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(a ^ b)) & c)) ^ b)) + d + x6 + (nint)3225465664L, 9);
        c = d + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(d ^ a)) & b)) ^ a)) + c + xb + 643717713, 14);
        b = c + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(c ^ d)) & a)) ^ d)) + b + x0 + (nint)3921069994L, 20);
        a = b + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(b ^ c)) & d)) ^ c)) + a + x5 + (nint)3593408605L, 5);
        d = a + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(a ^ b)) & c)) ^ b)) + d + xa + 38016083, 9);
        c = d + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(d ^ a)) & b)) ^ a)) + c + xf + (nint)3634488961L, 14);
        b = c + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(c ^ d)) & a)) ^ d)) + b + x4 + (nint)3889429448L, 20);
        a = b + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(b ^ c)) & d)) ^ c)) + a + x9 + 568446438, 5);
        d = a + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(a ^ b)) & c)) ^ b)) + d + xe + (nint)3275163606L, 9);
        c = d + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(d ^ a)) & b)) ^ a)) + c + x3 + (nint)4107603335L, 14);
        b = c + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(c ^ d)) & a)) ^ d)) + b + x8 + 1163531501, 20);
        a = b + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(b ^ c)) & d)) ^ c)) + a + xd + (nint)2850285829L, 5);
        d = a + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(a ^ b)) & c)) ^ b)) + d + x2 + (nint)4243563512L, 9);
        c = d + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(d ^ a)) & b)) ^ a)) + c + x7 + 1735328473, 14);
        b = c + bits.RotateLeft32(((uint32)(((uint32)(((uint32)(c ^ d)) & a)) ^ d)) + b + xc + (nint)2368359562L, 20);
        // round 3
        a = b + bits.RotateLeft32(((uint32)((uint32)(b ^ c) ^ d)) + a + x5 + (nint)4294588738L, 4);
        d = a + bits.RotateLeft32(((uint32)((uint32)(a ^ b) ^ c)) + d + x8 + (nint)2272392833L, 11);
        c = d + bits.RotateLeft32(((uint32)((uint32)(d ^ a) ^ b)) + c + xb + 1839030562, 16);
        b = c + bits.RotateLeft32(((uint32)((uint32)(c ^ d) ^ a)) + b + xe + (nint)4259657740L, 23);
        a = b + bits.RotateLeft32(((uint32)((uint32)(b ^ c) ^ d)) + a + x1 + (nint)2763975236L, 4);
        d = a + bits.RotateLeft32(((uint32)((uint32)(a ^ b) ^ c)) + d + x4 + 1272893353, 11);
        c = d + bits.RotateLeft32(((uint32)((uint32)(d ^ a) ^ b)) + c + x7 + (nint)4139469664L, 16);
        b = c + bits.RotateLeft32(((uint32)((uint32)(c ^ d) ^ a)) + b + xa + (nint)3200236656L, 23);
        a = b + bits.RotateLeft32(((uint32)((uint32)(b ^ c) ^ d)) + a + xd + 681279174, 4);
        d = a + bits.RotateLeft32(((uint32)((uint32)(a ^ b) ^ c)) + d + x0 + (nint)3936430074L, 11);
        c = d + bits.RotateLeft32(((uint32)((uint32)(d ^ a) ^ b)) + c + x3 + (nint)3572445317L, 16);
        b = c + bits.RotateLeft32(((uint32)((uint32)(c ^ d) ^ a)) + b + x6 + 76029189, 23);
        a = b + bits.RotateLeft32(((uint32)((uint32)(b ^ c) ^ d)) + a + x9 + (nint)3654602809L, 4);
        d = a + bits.RotateLeft32(((uint32)((uint32)(a ^ b) ^ c)) + d + xc + (nint)3873151461L, 11);
        c = d + bits.RotateLeft32(((uint32)((uint32)(d ^ a) ^ b)) + c + xf + 530742520, 16);
        b = c + bits.RotateLeft32(((uint32)((uint32)(c ^ d) ^ a)) + b + x2 + (nint)3299628645L, 23);
        // round 4
        a = b + bits.RotateLeft32(((uint32)(c ^ ((uint32)(b | ~d)))) + a + x0 + (nint)4096336452L, 6);
        d = a + bits.RotateLeft32(((uint32)(b ^ ((uint32)(a | ~c)))) + d + x7 + 1126891415, 10);
        c = d + bits.RotateLeft32(((uint32)(a ^ ((uint32)(d | ~b)))) + c + xe + (nint)2878612391L, 15);
        b = c + bits.RotateLeft32(((uint32)(d ^ ((uint32)(c | ~a)))) + b + x5 + (nint)4237533241L, 21);
        a = b + bits.RotateLeft32(((uint32)(c ^ ((uint32)(b | ~d)))) + a + xc + 1700485571, 6);
        d = a + bits.RotateLeft32(((uint32)(b ^ ((uint32)(a | ~c)))) + d + x3 + (nint)2399980690L, 10);
        c = d + bits.RotateLeft32(((uint32)(a ^ ((uint32)(d | ~b)))) + c + xa + (nint)4293915773L, 15);
        b = c + bits.RotateLeft32(((uint32)(d ^ ((uint32)(c | ~a)))) + b + x1 + (nint)2240044497L, 21);
        a = b + bits.RotateLeft32(((uint32)(c ^ ((uint32)(b | ~d)))) + a + x8 + 1873313359, 6);
        d = a + bits.RotateLeft32(((uint32)(b ^ ((uint32)(a | ~c)))) + d + xf + (nint)4264355552L, 10);
        c = d + bits.RotateLeft32(((uint32)(a ^ ((uint32)(d | ~b)))) + c + x6 + (nint)2734768916L, 15);
        b = c + bits.RotateLeft32(((uint32)(d ^ ((uint32)(c | ~a)))) + b + xd + 1309151649, 21);
        a = b + bits.RotateLeft32(((uint32)(c ^ ((uint32)(b | ~d)))) + a + x4 + (nint)4149444226L, 6);
        d = a + bits.RotateLeft32(((uint32)(b ^ ((uint32)(a | ~c)))) + d + xb + (nint)3174756917L, 10);
        c = d + bits.RotateLeft32(((uint32)(a ^ ((uint32)(d | ~b)))) + c + x2 + 718787259, 15);
        b = c + bits.RotateLeft32(((uint32)(d ^ ((uint32)(c | ~a)))) + b + x9 + (nint)3951481745L, 21);
        // add saved state
        a += aa;
        b += bb;
        c += cc;
        d += dd;
    }
    // save state
    (dig.s[0], dig.s[1], dig.s[2], dig.s[3]) = (a, b, c, d);
}

} // end md5_package
