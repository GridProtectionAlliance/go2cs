// Code generated by "go test -run=Generate -write=all"; DO NOT EDIT.
// Source: ../../cmd/compile/internal/types2/typelists.go
// Copyright 2021 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
namespace go.go;

partial class types_package {

// TypeParamList holds a list of type parameters.
[GoType] partial struct TypeParamList {
    internal slice<ж<TypeParam>> tparams;
}

// Len returns the number of type parameters in the list.
// It is safe to call on a nil receiver.
[GoRecv] public static nint Len(this ref TypeParamList l) {
    return len(l.list());
}

// At returns the i'th type parameter in the list.
[GoRecv] public static ж<TypeParam> At(this ref TypeParamList l, nint i) {
    return l.tparams[i];
}

// list is for internal use where we expect a []*TypeParam.
// TODO(rfindley): list should probably be eliminated: we can pass around a
// TypeParamList instead.
[GoRecv] internal static slice<ж<TypeParam>> list(this ref TypeParamList l) {
    if (l == nil) {
        return default!;
    }
    return l.tparams;
}

// TypeList holds a list of types.
[GoType] partial struct TypeList {
    internal slice<ΔType> types;
}

// newTypeList returns a new TypeList with the types in list.
internal static ж<TypeList> newTypeList(slice<ΔType> list) {
    if (len(list) == 0) {
        return default!;
    }
    return Ꮡ(new TypeList(list));
}

// Len returns the number of types in the list.
// It is safe to call on a nil receiver.
[GoRecv] public static nint Len(this ref TypeList l) {
    return len(l.list());
}

// At returns the i'th type in the list.
[GoRecv] public static ΔType At(this ref TypeList l, nint i) {
    return l.types[i];
}

// list is for internal use where we expect a []Type.
// TODO(rfindley): list should probably be eliminated: we can pass around a
// TypeList instead.
[GoRecv] internal static slice<ΔType> list(this ref TypeList l) {
    if (l == nil) {
        return default!;
    }
    return l.types;
}

// ----------------------------------------------------------------------------
// Implementation
internal static ж<TypeParamList> bindTParams(slice<ж<TypeParam>> list) {
    if (len(list) == 0) {
        return default!;
    }
    foreach (var (i, typ) in list) {
        if ((~typ).index >= 0) {
            throw panic("type parameter bound more than once");
        }
        typ.val.index = i;
    }
    return Ꮡ(new TypeParamList(tparams: list));
}

} // end types_package
