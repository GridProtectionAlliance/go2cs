// Code generated by "go test -run=Generate -write=all"; DO NOT EDIT.
// Source: ../../cmd/compile/internal/types2/tuple.go
// Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
namespace go.go;

using ꓸꓸꓸж<Var> = Span<ж<Var>>;

partial class types_package {

// A Tuple represents an ordered list of variables; a nil *Tuple is a valid (empty) tuple.
// Tuples are used as components of signatures and to represent the type of multiple
// assignments; they are not first class types of Go.
[GoType] partial struct Tuple {
    internal slice<ж<Var>> vars;
}

// NewTuple returns a new tuple for the given variables.
public static ж<Tuple> NewTuple(params ꓸꓸꓸж<Var> xʗp) {
    var x = xʗp.slice();

    if (len(x) > 0) {
        return Ꮡ(new Tuple(vars: x));
    }
    return default!;
}

// Len returns the number variables of tuple t.
[GoRecv] public static nint Len(this ref Tuple t) {
    if (t != nil) {
        return len(t.vars);
    }
    return 0;
}

// At returns the i'th variable of tuple t.
[GoRecv] public static ж<Var> At(this ref Tuple t, nint i) {
    return t.vars[i];
}

[GoRecv("capture")] public static ΔType Underlying(this ref Tuple t) {
    return ~t;
}

[GoRecv] public static @string String(this ref Tuple t) {
    return TypeString(~t, default!);
}

} // end types_package
