// Code generated by "go test -run=Generate -write=all"; DO NOT EDIT.
// Source: ../../cmd/compile/internal/types2/chan.go
// Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
namespace go.go;

partial class types_package {

// A Chan represents a channel type.
[GoType] partial struct Chan {
    internal ChanDir dir;
    internal ΔType elem;
}

[GoType("num:nint")] partial struct ChanDir;

// The direction of a channel is indicated by one of these constants.
public static readonly ChanDir SendRecv = /* iota */ 0;

public static readonly ChanDir SendOnly = 1;

public static readonly ChanDir RecvOnly = 2;

// NewChan returns a new channel type for the given direction and element type.
public static ж<Chan> NewChan(ChanDir dir, ΔType elem) {
    return Ꮡ(new Chan(dir: dir, elem: elem));
}

// Dir returns the direction of channel c.
[GoRecv] public static ChanDir Dir(this ref Chan c) {
    return c.dir;
}

// Elem returns the element type of channel c.
[GoRecv] public static ΔType Elem(this ref Chan c) {
    return c.elem;
}

[GoRecv("capture")] public static ΔType Underlying(this ref Chan c) {
    return ~c;
}

[GoRecv] public static @string String(this ref Chan c) {
    return TypeString(~c, default!);
}

} // end types_package
