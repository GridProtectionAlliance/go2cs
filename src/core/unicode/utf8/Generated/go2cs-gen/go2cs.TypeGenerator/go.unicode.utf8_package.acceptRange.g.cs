//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.unicode;

public static partial class utf8_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    internal partial struct acceptRange
    {
        // Promoted Struct References
        // -- acceptRange has no promoted structs

        // Field References
        internal static ref byte Ꮡlo(ref acceptRange instance) => ref instance.lo;
        internal static ref byte Ꮡhi(ref acceptRange instance) => ref instance.hi;
        
        // Constructors
        public acceptRange(NilType _)
        {
            this.lo = default!;
            this.hi = default!;
        }


        internal acceptRange(byte lo = default!, byte hi = default!)
        {
            this.lo = lo;
            this.hi = hi;
        }
        
        // Handle comparisons between struct 'acceptRange' instances
        public bool Equals(acceptRange other) =>
            lo == other.lo &&
            hi == other.hi;
        
        public override bool Equals(object? obj) => obj is acceptRange other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            lo,
            hi);
        
        public static bool operator ==(acceptRange left, acceptRange right) => left.Equals(right);
        
        public static bool operator !=(acceptRange left, acceptRange right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'acceptRange'
        public static bool operator ==(acceptRange value, NilType nil) => value.Equals(default(acceptRange));

        public static bool operator !=(acceptRange value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, acceptRange value) => value == nil;

        public static bool operator !=(NilType nil, acceptRange value) => value != nil;

        public static implicit operator acceptRange(NilType nil) => default(acceptRange);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            lo.ToString(),
            hi.ToString()
        ]), "}");
    }
}
