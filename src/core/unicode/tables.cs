// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.
namespace go;

partial class unicode_package {

// Version is the Unicode edition from which the tables are derived.
public static readonly @string Version = "15.0.0"u8;

// Categories is the set of Unicode category tables.
public static map<@string, ж<RangeTable>> Categories = new map<@string, ж<RangeTable>>{
    ["C"u8] = C,
    ["Cc"u8] = Cc,
    ["Cf"u8] = Cf,
    ["Co"u8] = Co,
    ["Cs"u8] = Cs,
    ["L"u8] = L,
    ["Ll"u8] = Ll,
    ["Lm"u8] = Lm,
    ["Lo"u8] = Lo,
    ["Lt"u8] = Lt,
    ["Lu"u8] = Lu,
    ["M"u8] = M,
    ["Mc"u8] = Mc,
    ["Me"u8] = Me,
    ["Mn"u8] = Mn,
    ["N"u8] = N,
    ["Nd"u8] = Nd,
    ["Nl"u8] = Nl,
    ["No"u8] = No,
    ["P"u8] = P,
    ["Pc"u8] = Pc,
    ["Pd"u8] = Pd,
    ["Pe"u8] = Pe,
    ["Pf"u8] = Pf,
    ["Pi"u8] = Pi,
    ["Po"u8] = Po,
    ["Ps"u8] = Ps,
    ["S"u8] = S,
    ["Sc"u8] = Sc,
    ["Sk"u8] = Sk,
    ["Sm"u8] = Sm,
    ["So"u8] = So,
    ["Z"u8] = Z,
    ["Zl"u8] = Zl,
    ["Zp"u8] = Zp,
    ["Zs"u8] = Zs
};

internal static ж<RangeTable> _C = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(0, 31, 1),
        new(127, 159, 1),
        new(173, 1536, 1363),
        new(1537, 1541, 1),
        new(1564, 1757, 193),
        new(1807, 2192, 385),
        new(2193, 2274, 81),
        new(6158, 8203, 2045),
        new(8204, 8207, 1),
        new(8234, 8238, 1),
        new(8288, 8292, 1),
        new(8294, 8303, 1),
        new(55296, 63743, 1),
        new(65279, 65529, 250),
        new(65530, 65531, 1)
    }.slice(),
    R32: new Range32[]{
        new(69821, 69837, 16),
        new(78896, 78911, 1),
        new(113824, 113827, 1),
        new(119155, 119162, 1),
        new(917505, 917536, 31),
        new(917537, 917631, 1),
        new(983040, 1048573, 1),
        new(1048576, 1114109, 1)
    }.slice(),
    LatinOffset: 2
));

internal static ж<RangeTable> _Cc = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(0, 31, 1),
        new(127, 159, 1)
    }.slice(),
    LatinOffset: 2
));

internal static ж<RangeTable> _Cf = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(173, 1536, 1363),
        new(1537, 1541, 1),
        new(1564, 1757, 193),
        new(1807, 2192, 385),
        new(2193, 2274, 81),
        new(6158, 8203, 2045),
        new(8204, 8207, 1),
        new(8234, 8238, 1),
        new(8288, 8292, 1),
        new(8294, 8303, 1),
        new(65279, 65529, 250),
        new(65530, 65531, 1)
    }.slice(),
    R32: new Range32[]{
        new(69821, 69837, 16),
        new(78896, 78911, 1),
        new(113824, 113827, 1),
        new(119155, 119162, 1),
        new(917505, 917536, 31),
        new(917537, 917631, 1)
    }.slice()
));

internal static ж<RangeTable> _Co = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(57344, 63743, 1)
    }.slice(),
    R32: new Range32[]{
        new(983040, 1048573, 1),
        new(1048576, 1114109, 1)
    }.slice()
));

internal static ж<RangeTable> _Cs = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(55296, 57343, 1)
    }.slice()
));

internal static ж<RangeTable> _L = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(65, 90, 1),
        new(97, 122, 1),
        new(170, 181, 11),
        new(186, 192, 6),
        new(193, 214, 1),
        new(216, 246, 1),
        new(248, 705, 1),
        new(710, 721, 1),
        new(736, 740, 1),
        new(748, 750, 2),
        new(880, 884, 1),
        new(886, 887, 1),
        new(890, 893, 1),
        new(895, 902, 7),
        new(904, 906, 1),
        new(908, 910, 2),
        new(911, 929, 1),
        new(931, 1013, 1),
        new(1015, 1153, 1),
        new(1162, 1327, 1),
        new(1329, 1366, 1),
        new(1369, 1376, 7),
        new(1377, 1416, 1),
        new(1488, 1514, 1),
        new(1519, 1522, 1),
        new(1568, 1610, 1),
        new(1646, 1647, 1),
        new(1649, 1747, 1),
        new(1749, 1765, 16),
        new(1766, 1774, 8),
        new(1775, 1786, 11),
        new(1787, 1788, 1),
        new(1791, 1808, 17),
        new(1810, 1839, 1),
        new(1869, 1957, 1),
        new(1969, 1994, 25),
        new(1995, 2026, 1),
        new(2036, 2037, 1),
        new(2042, 2048, 6),
        new(2049, 2069, 1),
        new(2074, 2084, 10),
        new(2088, 2112, 24),
        new(2113, 2136, 1),
        new(2144, 2154, 1),
        new(2160, 2183, 1),
        new(2185, 2190, 1),
        new(2208, 2249, 1),
        new(2308, 2361, 1),
        new(2365, 2384, 19),
        new(2392, 2401, 1),
        new(2417, 2432, 1),
        new(2437, 2444, 1),
        new(2447, 2448, 1),
        new(2451, 2472, 1),
        new(2474, 2480, 1),
        new(2482, 2486, 4),
        new(2487, 2489, 1),
        new(2493, 2510, 17),
        new(2524, 2525, 1),
        new(2527, 2529, 1),
        new(2544, 2545, 1),
        new(2556, 2565, 9),
        new(2566, 2570, 1),
        new(2575, 2576, 1),
        new(2579, 2600, 1),
        new(2602, 2608, 1),
        new(2610, 2611, 1),
        new(2613, 2614, 1),
        new(2616, 2617, 1),
        new(2649, 2652, 1),
        new(2654, 2674, 20),
        new(2675, 2676, 1),
        new(2693, 2701, 1),
        new(2703, 2705, 1),
        new(2707, 2728, 1),
        new(2730, 2736, 1),
        new(2738, 2739, 1),
        new(2741, 2745, 1),
        new(2749, 2768, 19),
        new(2784, 2785, 1),
        new(2809, 2821, 12),
        new(2822, 2828, 1),
        new(2831, 2832, 1),
        new(2835, 2856, 1),
        new(2858, 2864, 1),
        new(2866, 2867, 1),
        new(2869, 2873, 1),
        new(2877, 2908, 31),
        new(2909, 2911, 2),
        new(2912, 2913, 1),
        new(2929, 2947, 18),
        new(2949, 2954, 1),
        new(2958, 2960, 1),
        new(2962, 2965, 1),
        new(2969, 2970, 1),
        new(2972, 2974, 2),
        new(2975, 2979, 4),
        new(2980, 2984, 4),
        new(2985, 2986, 1),
        new(2990, 3001, 1),
        new(3024, 3077, 53),
        new(3078, 3084, 1),
        new(3086, 3088, 1),
        new(3090, 3112, 1),
        new(3114, 3129, 1),
        new(3133, 3160, 27),
        new(3161, 3162, 1),
        new(3165, 3168, 3),
        new(3169, 3200, 31),
        new(3205, 3212, 1),
        new(3214, 3216, 1),
        new(3218, 3240, 1),
        new(3242, 3251, 1),
        new(3253, 3257, 1),
        new(3261, 3293, 32),
        new(3294, 3296, 2),
        new(3297, 3313, 16),
        new(3314, 3332, 18),
        new(3333, 3340, 1),
        new(3342, 3344, 1),
        new(3346, 3386, 1),
        new(3389, 3406, 17),
        new(3412, 3414, 1),
        new(3423, 3425, 1),
        new(3450, 3455, 1),
        new(3461, 3478, 1),
        new(3482, 3505, 1),
        new(3507, 3515, 1),
        new(3517, 3520, 3),
        new(3521, 3526, 1),
        new(3585, 3632, 1),
        new(3634, 3635, 1),
        new(3648, 3654, 1),
        new(3713, 3714, 1),
        new(3716, 3718, 2),
        new(3719, 3722, 1),
        new(3724, 3747, 1),
        new(3749, 3751, 2),
        new(3752, 3760, 1),
        new(3762, 3763, 1),
        new(3773, 3776, 3),
        new(3777, 3780, 1),
        new(3782, 3804, 22),
        new(3805, 3807, 1),
        new(3840, 3904, 64),
        new(3905, 3911, 1),
        new(3913, 3948, 1),
        new(3976, 3980, 1),
        new(4096, 4138, 1),
        new(4159, 4176, 17),
        new(4177, 4181, 1),
        new(4186, 4189, 1),
        new(4193, 4197, 4),
        new(4198, 4206, 8),
        new(4207, 4208, 1),
        new(4213, 4225, 1),
        new(4238, 4256, 18),
        new(4257, 4293, 1),
        new(4295, 4301, 6),
        new(4304, 4346, 1),
        new(4348, 4680, 1),
        new(4682, 4685, 1),
        new(4688, 4694, 1),
        new(4696, 4698, 2),
        new(4699, 4701, 1),
        new(4704, 4744, 1),
        new(4746, 4749, 1),
        new(4752, 4784, 1),
        new(4786, 4789, 1),
        new(4792, 4798, 1),
        new(4800, 4802, 2),
        new(4803, 4805, 1),
        new(4808, 4822, 1),
        new(4824, 4880, 1),
        new(4882, 4885, 1),
        new(4888, 4954, 1),
        new(4992, 5007, 1),
        new(5024, 5109, 1),
        new(5112, 5117, 1),
        new(5121, 5740, 1),
        new(5743, 5759, 1),
        new(5761, 5786, 1),
        new(5792, 5866, 1),
        new(5873, 5880, 1),
        new(5888, 5905, 1),
        new(5919, 5937, 1),
        new(5952, 5969, 1),
        new(5984, 5996, 1),
        new(5998, 6000, 1),
        new(6016, 6067, 1),
        new(6103, 6108, 5),
        new(6176, 6264, 1),
        new(6272, 6276, 1),
        new(6279, 6312, 1),
        new(6314, 6320, 6),
        new(6321, 6389, 1),
        new(6400, 6430, 1),
        new(6480, 6509, 1),
        new(6512, 6516, 1),
        new(6528, 6571, 1),
        new(6576, 6601, 1),
        new(6656, 6678, 1),
        new(6688, 6740, 1),
        new(6823, 6917, 94),
        new(6918, 6963, 1),
        new(6981, 6988, 1),
        new(7043, 7072, 1),
        new(7086, 7087, 1),
        new(7098, 7141, 1),
        new(7168, 7203, 1),
        new(7245, 7247, 1),
        new(7258, 7293, 1),
        new(7296, 7304, 1),
        new(7312, 7354, 1),
        new(7357, 7359, 1),
        new(7401, 7404, 1),
        new(7406, 7411, 1),
        new(7413, 7414, 1),
        new(7418, 7424, 6),
        new(7425, 7615, 1),
        new(7680, 7957, 1),
        new(7960, 7965, 1),
        new(7968, 8005, 1),
        new(8008, 8013, 1),
        new(8016, 8023, 1),
        new(8025, 8031, 2),
        new(8032, 8061, 1),
        new(8064, 8116, 1),
        new(8118, 8124, 1),
        new(8126, 8130, 4),
        new(8131, 8132, 1),
        new(8134, 8140, 1),
        new(8144, 8147, 1),
        new(8150, 8155, 1),
        new(8160, 8172, 1),
        new(8178, 8180, 1),
        new(8182, 8188, 1),
        new(8305, 8319, 14),
        new(8336, 8348, 1),
        new(8450, 8455, 5),
        new(8458, 8467, 1),
        new(8469, 8473, 4),
        new(8474, 8477, 1),
        new(8484, 8490, 2),
        new(8491, 8493, 1),
        new(8495, 8505, 1),
        new(8508, 8511, 1),
        new(8517, 8521, 1),
        new(8526, 8579, 53),
        new(8580, 11264, 2684),
        new(11265, 11492, 1),
        new(11499, 11502, 1),
        new(11506, 11507, 1),
        new(11520, 11557, 1),
        new(11559, 11565, 6),
        new(11568, 11623, 1),
        new(11631, 11648, 17),
        new(11649, 11670, 1),
        new(11680, 11686, 1),
        new(11688, 11694, 1),
        new(11696, 11702, 1),
        new(11704, 11710, 1),
        new(11712, 11718, 1),
        new(11720, 11726, 1),
        new(11728, 11734, 1),
        new(11736, 11742, 1),
        new(11823, 12293, 470),
        new(12294, 12337, 43),
        new(12338, 12341, 1),
        new(12347, 12348, 1),
        new(12353, 12438, 1),
        new(12445, 12447, 1),
        new(12449, 12538, 1),
        new(12540, 12543, 1),
        new(12549, 12591, 1),
        new(12593, 12686, 1),
        new(12704, 12735, 1),
        new(12784, 12799, 1),
        new(13312, 19903, 1),
        new(19968, 42124, 1),
        new(42192, 42237, 1),
        new(42240, 42508, 1),
        new(42512, 42527, 1),
        new(42538, 42539, 1),
        new(42560, 42606, 1),
        new(42623, 42653, 1),
        new(42656, 42725, 1),
        new(42775, 42783, 1),
        new(42786, 42888, 1),
        new(42891, 42954, 1),
        new(42960, 42961, 1),
        new(42963, 42965, 2),
        new(42966, 42969, 1),
        new(42994, 43009, 1),
        new(43011, 43013, 1),
        new(43015, 43018, 1),
        new(43020, 43042, 1),
        new(43072, 43123, 1),
        new(43138, 43187, 1),
        new(43250, 43255, 1),
        new(43259, 43261, 2),
        new(43262, 43274, 12),
        new(43275, 43301, 1),
        new(43312, 43334, 1),
        new(43360, 43388, 1),
        new(43396, 43442, 1),
        new(43471, 43488, 17),
        new(43489, 43492, 1),
        new(43494, 43503, 1),
        new(43514, 43518, 1),
        new(43520, 43560, 1),
        new(43584, 43586, 1),
        new(43588, 43595, 1),
        new(43616, 43638, 1),
        new(43642, 43646, 4),
        new(43647, 43695, 1),
        new(43697, 43701, 4),
        new(43702, 43705, 3),
        new(43706, 43709, 1),
        new(43712, 43714, 2),
        new(43739, 43741, 1),
        new(43744, 43754, 1),
        new(43762, 43764, 1),
        new(43777, 43782, 1),
        new(43785, 43790, 1),
        new(43793, 43798, 1),
        new(43808, 43814, 1),
        new(43816, 43822, 1),
        new(43824, 43866, 1),
        new(43868, 43881, 1),
        new(43888, 44002, 1),
        new(44032, 55203, 1),
        new(55216, 55238, 1),
        new(55243, 55291, 1),
        new(63744, 64109, 1),
        new(64112, 64217, 1),
        new(64256, 64262, 1),
        new(64275, 64279, 1),
        new(64285, 64287, 2),
        new(64288, 64296, 1),
        new(64298, 64310, 1),
        new(64312, 64316, 1),
        new(64318, 64320, 2),
        new(64321, 64323, 2),
        new(64324, 64326, 2),
        new(64327, 64433, 1),
        new(64467, 64829, 1),
        new(64848, 64911, 1),
        new(64914, 64967, 1),
        new(65008, 65019, 1),
        new(65136, 65140, 1),
        new(65142, 65276, 1),
        new(65313, 65338, 1),
        new(65345, 65370, 1),
        new(65382, 65470, 1),
        new(65474, 65479, 1),
        new(65482, 65487, 1),
        new(65490, 65495, 1),
        new(65498, 65500, 1)
    }.slice(),
    R32: new Range32[]{
        new(65536, 65547, 1),
        new(65549, 65574, 1),
        new(65576, 65594, 1),
        new(65596, 65597, 1),
        new(65599, 65613, 1),
        new(65616, 65629, 1),
        new(65664, 65786, 1),
        new(66176, 66204, 1),
        new(66208, 66256, 1),
        new(66304, 66335, 1),
        new(66349, 66368, 1),
        new(66370, 66377, 1),
        new(66384, 66421, 1),
        new(66432, 66461, 1),
        new(66464, 66499, 1),
        new(66504, 66511, 1),
        new(66560, 66717, 1),
        new(66736, 66771, 1),
        new(66776, 66811, 1),
        new(66816, 66855, 1),
        new(66864, 66915, 1),
        new(66928, 66938, 1),
        new(66940, 66954, 1),
        new(66956, 66962, 1),
        new(66964, 66965, 1),
        new(66967, 66977, 1),
        new(66979, 66993, 1),
        new(66995, 67001, 1),
        new(67003, 67004, 1),
        new(67072, 67382, 1),
        new(67392, 67413, 1),
        new(67424, 67431, 1),
        new(67456, 67461, 1),
        new(67463, 67504, 1),
        new(67506, 67514, 1),
        new(67584, 67589, 1),
        new(67592, 67594, 2),
        new(67595, 67637, 1),
        new(67639, 67640, 1),
        new(67644, 67647, 3),
        new(67648, 67669, 1),
        new(67680, 67702, 1),
        new(67712, 67742, 1),
        new(67808, 67826, 1),
        new(67828, 67829, 1),
        new(67840, 67861, 1),
        new(67872, 67897, 1),
        new(67968, 68023, 1),
        new(68030, 68031, 1),
        new(68096, 68112, 16),
        new(68113, 68115, 1),
        new(68117, 68119, 1),
        new(68121, 68149, 1),
        new(68192, 68220, 1),
        new(68224, 68252, 1),
        new(68288, 68295, 1),
        new(68297, 68324, 1),
        new(68352, 68405, 1),
        new(68416, 68437, 1),
        new(68448, 68466, 1),
        new(68480, 68497, 1),
        new(68608, 68680, 1),
        new(68736, 68786, 1),
        new(68800, 68850, 1),
        new(68864, 68899, 1),
        new(69248, 69289, 1),
        new(69296, 69297, 1),
        new(69376, 69404, 1),
        new(69415, 69424, 9),
        new(69425, 69445, 1),
        new(69488, 69505, 1),
        new(69552, 69572, 1),
        new(69600, 69622, 1),
        new(69635, 69687, 1),
        new(69745, 69746, 1),
        new(69749, 69763, 14),
        new(69764, 69807, 1),
        new(69840, 69864, 1),
        new(69891, 69926, 1),
        new(69956, 69959, 3),
        new(69968, 70002, 1),
        new(70006, 70019, 13),
        new(70020, 70066, 1),
        new(70081, 70084, 1),
        new(70106, 70108, 2),
        new(70144, 70161, 1),
        new(70163, 70187, 1),
        new(70207, 70208, 1),
        new(70272, 70278, 1),
        new(70280, 70282, 2),
        new(70283, 70285, 1),
        new(70287, 70301, 1),
        new(70303, 70312, 1),
        new(70320, 70366, 1),
        new(70405, 70412, 1),
        new(70415, 70416, 1),
        new(70419, 70440, 1),
        new(70442, 70448, 1),
        new(70450, 70451, 1),
        new(70453, 70457, 1),
        new(70461, 70480, 19),
        new(70493, 70497, 1),
        new(70656, 70708, 1),
        new(70727, 70730, 1),
        new(70751, 70753, 1),
        new(70784, 70831, 1),
        new(70852, 70853, 1),
        new(70855, 71040, 185),
        new(71041, 71086, 1),
        new(71128, 71131, 1),
        new(71168, 71215, 1),
        new(71236, 71296, 60),
        new(71297, 71338, 1),
        new(71352, 71424, 72),
        new(71425, 71450, 1),
        new(71488, 71494, 1),
        new(71680, 71723, 1),
        new(71840, 71903, 1),
        new(71935, 71942, 1),
        new(71945, 71948, 3),
        new(71949, 71955, 1),
        new(71957, 71958, 1),
        new(71960, 71983, 1),
        new(71999, 72001, 2),
        new(72096, 72103, 1),
        new(72106, 72144, 1),
        new(72161, 72163, 2),
        new(72192, 72203, 11),
        new(72204, 72242, 1),
        new(72250, 72272, 22),
        new(72284, 72329, 1),
        new(72349, 72368, 19),
        new(72369, 72440, 1),
        new(72704, 72712, 1),
        new(72714, 72750, 1),
        new(72768, 72818, 50),
        new(72819, 72847, 1),
        new(72960, 72966, 1),
        new(72968, 72969, 1),
        new(72971, 73008, 1),
        new(73030, 73056, 26),
        new(73057, 73061, 1),
        new(73063, 73064, 1),
        new(73066, 73097, 1),
        new(73112, 73440, 328),
        new(73441, 73458, 1),
        new(73474, 73476, 2),
        new(73477, 73488, 1),
        new(73490, 73523, 1),
        new(73648, 73728, 80),
        new(73729, 74649, 1),
        new(74880, 75075, 1),
        new(77712, 77808, 1),
        new(77824, 78895, 1),
        new(78913, 78918, 1),
        new(82944, 83526, 1),
        new(92160, 92728, 1),
        new(92736, 92766, 1),
        new(92784, 92862, 1),
        new(92880, 92909, 1),
        new(92928, 92975, 1),
        new(92992, 92995, 1),
        new(93027, 93047, 1),
        new(93053, 93071, 1),
        new(93760, 93823, 1),
        new(93952, 94026, 1),
        new(94032, 94099, 67),
        new(94100, 94111, 1),
        new(94176, 94177, 1),
        new(94179, 94208, 29),
        new(94209, 100343, 1),
        new(100352, 101589, 1),
        new(101632, 101640, 1),
        new(110576, 110579, 1),
        new(110581, 110587, 1),
        new(110589, 110590, 1),
        new(110592, 110882, 1),
        new(110898, 110928, 30),
        new(110929, 110930, 1),
        new(110933, 110948, 15),
        new(110949, 110951, 1),
        new(110960, 111355, 1),
        new(113664, 113770, 1),
        new(113776, 113788, 1),
        new(113792, 113800, 1),
        new(113808, 113817, 1),
        new(119808, 119892, 1),
        new(119894, 119964, 1),
        new(119966, 119967, 1),
        new(119970, 119973, 3),
        new(119974, 119977, 3),
        new(119978, 119980, 1),
        new(119982, 119993, 1),
        new(119995, 119997, 2),
        new(119998, 120003, 1),
        new(120005, 120069, 1),
        new(120071, 120074, 1),
        new(120077, 120084, 1),
        new(120086, 120092, 1),
        new(120094, 120121, 1),
        new(120123, 120126, 1),
        new(120128, 120132, 1),
        new(120134, 120138, 4),
        new(120139, 120144, 1),
        new(120146, 120485, 1),
        new(120488, 120512, 1),
        new(120514, 120538, 1),
        new(120540, 120570, 1),
        new(120572, 120596, 1),
        new(120598, 120628, 1),
        new(120630, 120654, 1),
        new(120656, 120686, 1),
        new(120688, 120712, 1),
        new(120714, 120744, 1),
        new(120746, 120770, 1),
        new(120772, 120779, 1),
        new(122624, 122654, 1),
        new(122661, 122666, 1),
        new(122928, 122989, 1),
        new(123136, 123180, 1),
        new(123191, 123197, 1),
        new(123214, 123536, 322),
        new(123537, 123565, 1),
        new(123584, 123627, 1),
        new(124112, 124139, 1),
        new(124896, 124902, 1),
        new(124904, 124907, 1),
        new(124909, 124910, 1),
        new(124912, 124926, 1),
        new(124928, 125124, 1),
        new(125184, 125251, 1),
        new(125259, 126464, 1205),
        new(126465, 126467, 1),
        new(126469, 126495, 1),
        new(126497, 126498, 1),
        new(126500, 126503, 3),
        new(126505, 126514, 1),
        new(126516, 126519, 1),
        new(126521, 126523, 2),
        new(126530, 126535, 5),
        new(126537, 126541, 2),
        new(126542, 126543, 1),
        new(126545, 126546, 1),
        new(126548, 126551, 3),
        new(126553, 126561, 2),
        new(126562, 126564, 2),
        new(126567, 126570, 1),
        new(126572, 126578, 1),
        new(126580, 126583, 1),
        new(126585, 126588, 1),
        new(126590, 126592, 2),
        new(126593, 126601, 1),
        new(126603, 126619, 1),
        new(126625, 126627, 1),
        new(126629, 126633, 1),
        new(126635, 126651, 1),
        new(131072, 173791, 1),
        new(173824, 177977, 1),
        new(177984, 178205, 1),
        new(178208, 183969, 1),
        new(183984, 191456, 1),
        new(194560, 195101, 1),
        new(196608, 201546, 1),
        new(201552, 205743, 1)
    }.slice(),
    LatinOffset: 6
));

internal static ж<RangeTable> _Ll = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(97, 122, 1),
        new(181, 223, 42),
        new(224, 246, 1),
        new(248, 255, 1),
        new(257, 311, 2),
        new(312, 328, 2),
        new(329, 375, 2),
        new(378, 382, 2),
        new(383, 384, 1),
        new(387, 389, 2),
        new(392, 396, 4),
        new(397, 402, 5),
        new(405, 409, 4),
        new(410, 411, 1),
        new(414, 417, 3),
        new(419, 421, 2),
        new(424, 426, 2),
        new(427, 429, 2),
        new(432, 436, 4),
        new(438, 441, 3),
        new(442, 445, 3),
        new(446, 447, 1),
        new(454, 460, 3),
        new(462, 476, 2),
        new(477, 495, 2),
        new(496, 499, 3),
        new(501, 505, 4),
        new(507, 563, 2),
        new(564, 569, 1),
        new(572, 575, 3),
        new(576, 578, 2),
        new(583, 591, 2),
        new(592, 659, 1),
        new(661, 687, 1),
        new(881, 883, 2),
        new(887, 891, 4),
        new(892, 893, 1),
        new(912, 940, 28),
        new(941, 974, 1),
        new(976, 977, 1),
        new(981, 983, 1),
        new(985, 1007, 2),
        new(1008, 1011, 1),
        new(1013, 1019, 3),
        new(1020, 1072, 52),
        new(1073, 1119, 1),
        new(1121, 1153, 2),
        new(1163, 1215, 2),
        new(1218, 1230, 2),
        new(1231, 1327, 2),
        new(1376, 1416, 1),
        new(4304, 4346, 1),
        new(4349, 4351, 1),
        new(5112, 5117, 1),
        new(7296, 7304, 1),
        new(7424, 7467, 1),
        new(7531, 7543, 1),
        new(7545, 7578, 1),
        new(7681, 7829, 2),
        new(7830, 7837, 1),
        new(7839, 7935, 2),
        new(7936, 7943, 1),
        new(7952, 7957, 1),
        new(7968, 7975, 1),
        new(7984, 7991, 1),
        new(8000, 8005, 1),
        new(8016, 8023, 1),
        new(8032, 8039, 1),
        new(8048, 8061, 1),
        new(8064, 8071, 1),
        new(8080, 8087, 1),
        new(8096, 8103, 1),
        new(8112, 8116, 1),
        new(8118, 8119, 1),
        new(8126, 8130, 4),
        new(8131, 8132, 1),
        new(8134, 8135, 1),
        new(8144, 8147, 1),
        new(8150, 8151, 1),
        new(8160, 8167, 1),
        new(8178, 8180, 1),
        new(8182, 8183, 1),
        new(8458, 8462, 4),
        new(8463, 8467, 4),
        new(8495, 8505, 5),
        new(8508, 8509, 1),
        new(8518, 8521, 1),
        new(8526, 8580, 54),
        new(11312, 11359, 1),
        new(11361, 11365, 4),
        new(11366, 11372, 2),
        new(11377, 11379, 2),
        new(11380, 11382, 2),
        new(11383, 11387, 1),
        new(11393, 11491, 2),
        new(11492, 11500, 8),
        new(11502, 11507, 5),
        new(11520, 11557, 1),
        new(11559, 11565, 6),
        new(42561, 42605, 2),
        new(42625, 42651, 2),
        new(42787, 42799, 2),
        new(42800, 42801, 1),
        new(42803, 42865, 2),
        new(42866, 42872, 1),
        new(42874, 42876, 2),
        new(42879, 42887, 2),
        new(42892, 42894, 2),
        new(42897, 42899, 2),
        new(42900, 42901, 1),
        new(42903, 42921, 2),
        new(42927, 42933, 6),
        new(42935, 42947, 2),
        new(42952, 42954, 2),
        new(42961, 42969, 2),
        new(42998, 43002, 4),
        new(43824, 43866, 1),
        new(43872, 43880, 1),
        new(43888, 43967, 1),
        new(64256, 64262, 1),
        new(64275, 64279, 1),
        new(65345, 65370, 1)
    }.slice(),
    R32: new Range32[]{
        new(66600, 66639, 1),
        new(66776, 66811, 1),
        new(66967, 66977, 1),
        new(66979, 66993, 1),
        new(66995, 67001, 1),
        new(67003, 67004, 1),
        new(68800, 68850, 1),
        new(71872, 71903, 1),
        new(93792, 93823, 1),
        new(119834, 119859, 1),
        new(119886, 119892, 1),
        new(119894, 119911, 1),
        new(119938, 119963, 1),
        new(119990, 119993, 1),
        new(119995, 119997, 2),
        new(119998, 120003, 1),
        new(120005, 120015, 1),
        new(120042, 120067, 1),
        new(120094, 120119, 1),
        new(120146, 120171, 1),
        new(120198, 120223, 1),
        new(120250, 120275, 1),
        new(120302, 120327, 1),
        new(120354, 120379, 1),
        new(120406, 120431, 1),
        new(120458, 120485, 1),
        new(120514, 120538, 1),
        new(120540, 120545, 1),
        new(120572, 120596, 1),
        new(120598, 120603, 1),
        new(120630, 120654, 1),
        new(120656, 120661, 1),
        new(120688, 120712, 1),
        new(120714, 120719, 1),
        new(120746, 120770, 1),
        new(120772, 120777, 1),
        new(120779, 122624, 1845),
        new(122625, 122633, 1),
        new(122635, 122654, 1),
        new(122661, 122666, 1),
        new(125218, 125251, 1)
    }.slice(),
    LatinOffset: 4
));

internal static ж<RangeTable> _Lm = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(688, 705, 1),
        new(710, 721, 1),
        new(736, 740, 1),
        new(748, 750, 2),
        new(884, 890, 6),
        new(1369, 1600, 231),
        new(1765, 1766, 1),
        new(2036, 2037, 1),
        new(2042, 2074, 32),
        new(2084, 2088, 4),
        new(2249, 2417, 168),
        new(3654, 3782, 128),
        new(4348, 6103, 1755),
        new(6211, 6823, 612),
        new(7288, 7293, 1),
        new(7468, 7530, 1),
        new(7544, 7579, 35),
        new(7580, 7615, 1),
        new(8305, 8319, 14),
        new(8336, 8348, 1),
        new(11388, 11389, 1),
        new(11631, 11823, 192),
        new(12293, 12337, 44),
        new(12338, 12341, 1),
        new(12347, 12445, 98),
        new(12446, 12540, 94),
        new(12541, 12542, 1),
        new(40981, 42232, 1251),
        new(42233, 42237, 1),
        new(42508, 42623, 115),
        new(42652, 42653, 1),
        new(42775, 42783, 1),
        new(42864, 42888, 24),
        new(42994, 42996, 1),
        new(43000, 43001, 1),
        new(43471, 43494, 23),
        new(43632, 43741, 109),
        new(43763, 43764, 1),
        new(43868, 43871, 1),
        new(43881, 65392, 21511),
        new(65438, 65439, 1)
    }.slice(),
    R32: new Range32[]{
        new(67456, 67461, 1),
        new(67463, 67504, 1),
        new(67506, 67514, 1),
        new(92992, 92995, 1),
        new(94099, 94111, 1),
        new(94176, 94177, 1),
        new(94179, 110576, 16397),
        new(110577, 110579, 1),
        new(110581, 110587, 1),
        new(110589, 110590, 1),
        new(122928, 122989, 1),
        new(123191, 123197, 1),
        new(124139, 125259, 1120)
    }.slice()
));

internal static ж<RangeTable> _Lo = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(170, 186, 16),
        new(443, 448, 5),
        new(449, 451, 1),
        new(660, 1488, 828),
        new(1489, 1514, 1),
        new(1519, 1522, 1),
        new(1568, 1599, 1),
        new(1601, 1610, 1),
        new(1646, 1647, 1),
        new(1649, 1747, 1),
        new(1749, 1774, 25),
        new(1775, 1786, 11),
        new(1787, 1788, 1),
        new(1791, 1808, 17),
        new(1810, 1839, 1),
        new(1869, 1957, 1),
        new(1969, 1994, 25),
        new(1995, 2026, 1),
        new(2048, 2069, 1),
        new(2112, 2136, 1),
        new(2144, 2154, 1),
        new(2160, 2183, 1),
        new(2185, 2190, 1),
        new(2208, 2248, 1),
        new(2308, 2361, 1),
        new(2365, 2384, 19),
        new(2392, 2401, 1),
        new(2418, 2432, 1),
        new(2437, 2444, 1),
        new(2447, 2448, 1),
        new(2451, 2472, 1),
        new(2474, 2480, 1),
        new(2482, 2486, 4),
        new(2487, 2489, 1),
        new(2493, 2510, 17),
        new(2524, 2525, 1),
        new(2527, 2529, 1),
        new(2544, 2545, 1),
        new(2556, 2565, 9),
        new(2566, 2570, 1),
        new(2575, 2576, 1),
        new(2579, 2600, 1),
        new(2602, 2608, 1),
        new(2610, 2611, 1),
        new(2613, 2614, 1),
        new(2616, 2617, 1),
        new(2649, 2652, 1),
        new(2654, 2674, 20),
        new(2675, 2676, 1),
        new(2693, 2701, 1),
        new(2703, 2705, 1),
        new(2707, 2728, 1),
        new(2730, 2736, 1),
        new(2738, 2739, 1),
        new(2741, 2745, 1),
        new(2749, 2768, 19),
        new(2784, 2785, 1),
        new(2809, 2821, 12),
        new(2822, 2828, 1),
        new(2831, 2832, 1),
        new(2835, 2856, 1),
        new(2858, 2864, 1),
        new(2866, 2867, 1),
        new(2869, 2873, 1),
        new(2877, 2908, 31),
        new(2909, 2911, 2),
        new(2912, 2913, 1),
        new(2929, 2947, 18),
        new(2949, 2954, 1),
        new(2958, 2960, 1),
        new(2962, 2965, 1),
        new(2969, 2970, 1),
        new(2972, 2974, 2),
        new(2975, 2979, 4),
        new(2980, 2984, 4),
        new(2985, 2986, 1),
        new(2990, 3001, 1),
        new(3024, 3077, 53),
        new(3078, 3084, 1),
        new(3086, 3088, 1),
        new(3090, 3112, 1),
        new(3114, 3129, 1),
        new(3133, 3160, 27),
        new(3161, 3162, 1),
        new(3165, 3168, 3),
        new(3169, 3200, 31),
        new(3205, 3212, 1),
        new(3214, 3216, 1),
        new(3218, 3240, 1),
        new(3242, 3251, 1),
        new(3253, 3257, 1),
        new(3261, 3293, 32),
        new(3294, 3296, 2),
        new(3297, 3313, 16),
        new(3314, 3332, 18),
        new(3333, 3340, 1),
        new(3342, 3344, 1),
        new(3346, 3386, 1),
        new(3389, 3406, 17),
        new(3412, 3414, 1),
        new(3423, 3425, 1),
        new(3450, 3455, 1),
        new(3461, 3478, 1),
        new(3482, 3505, 1),
        new(3507, 3515, 1),
        new(3517, 3520, 3),
        new(3521, 3526, 1),
        new(3585, 3632, 1),
        new(3634, 3635, 1),
        new(3648, 3653, 1),
        new(3713, 3714, 1),
        new(3716, 3718, 2),
        new(3719, 3722, 1),
        new(3724, 3747, 1),
        new(3749, 3751, 2),
        new(3752, 3760, 1),
        new(3762, 3763, 1),
        new(3773, 3776, 3),
        new(3777, 3780, 1),
        new(3804, 3807, 1),
        new(3840, 3904, 64),
        new(3905, 3911, 1),
        new(3913, 3948, 1),
        new(3976, 3980, 1),
        new(4096, 4138, 1),
        new(4159, 4176, 17),
        new(4177, 4181, 1),
        new(4186, 4189, 1),
        new(4193, 4197, 4),
        new(4198, 4206, 8),
        new(4207, 4208, 1),
        new(4213, 4225, 1),
        new(4238, 4352, 114),
        new(4353, 4680, 1),
        new(4682, 4685, 1),
        new(4688, 4694, 1),
        new(4696, 4698, 2),
        new(4699, 4701, 1),
        new(4704, 4744, 1),
        new(4746, 4749, 1),
        new(4752, 4784, 1),
        new(4786, 4789, 1),
        new(4792, 4798, 1),
        new(4800, 4802, 2),
        new(4803, 4805, 1),
        new(4808, 4822, 1),
        new(4824, 4880, 1),
        new(4882, 4885, 1),
        new(4888, 4954, 1),
        new(4992, 5007, 1),
        new(5121, 5740, 1),
        new(5743, 5759, 1),
        new(5761, 5786, 1),
        new(5792, 5866, 1),
        new(5873, 5880, 1),
        new(5888, 5905, 1),
        new(5919, 5937, 1),
        new(5952, 5969, 1),
        new(5984, 5996, 1),
        new(5998, 6000, 1),
        new(6016, 6067, 1),
        new(6108, 6176, 68),
        new(6177, 6210, 1),
        new(6212, 6264, 1),
        new(6272, 6276, 1),
        new(6279, 6312, 1),
        new(6314, 6320, 6),
        new(6321, 6389, 1),
        new(6400, 6430, 1),
        new(6480, 6509, 1),
        new(6512, 6516, 1),
        new(6528, 6571, 1),
        new(6576, 6601, 1),
        new(6656, 6678, 1),
        new(6688, 6740, 1),
        new(6917, 6963, 1),
        new(6981, 6988, 1),
        new(7043, 7072, 1),
        new(7086, 7087, 1),
        new(7098, 7141, 1),
        new(7168, 7203, 1),
        new(7245, 7247, 1),
        new(7258, 7287, 1),
        new(7401, 7404, 1),
        new(7406, 7411, 1),
        new(7413, 7414, 1),
        new(7418, 8501, 1083),
        new(8502, 8504, 1),
        new(11568, 11623, 1),
        new(11648, 11670, 1),
        new(11680, 11686, 1),
        new(11688, 11694, 1),
        new(11696, 11702, 1),
        new(11704, 11710, 1),
        new(11712, 11718, 1),
        new(11720, 11726, 1),
        new(11728, 11734, 1),
        new(11736, 11742, 1),
        new(12294, 12348, 54),
        new(12353, 12438, 1),
        new(12447, 12449, 2),
        new(12450, 12538, 1),
        new(12543, 12549, 6),
        new(12550, 12591, 1),
        new(12593, 12686, 1),
        new(12704, 12735, 1),
        new(12784, 12799, 1),
        new(13312, 19903, 1),
        new(19968, 40980, 1),
        new(40982, 42124, 1),
        new(42192, 42231, 1),
        new(42240, 42507, 1),
        new(42512, 42527, 1),
        new(42538, 42539, 1),
        new(42606, 42656, 50),
        new(42657, 42725, 1),
        new(42895, 42999, 104),
        new(43003, 43009, 1),
        new(43011, 43013, 1),
        new(43015, 43018, 1),
        new(43020, 43042, 1),
        new(43072, 43123, 1),
        new(43138, 43187, 1),
        new(43250, 43255, 1),
        new(43259, 43261, 2),
        new(43262, 43274, 12),
        new(43275, 43301, 1),
        new(43312, 43334, 1),
        new(43360, 43388, 1),
        new(43396, 43442, 1),
        new(43488, 43492, 1),
        new(43495, 43503, 1),
        new(43514, 43518, 1),
        new(43520, 43560, 1),
        new(43584, 43586, 1),
        new(43588, 43595, 1),
        new(43616, 43631, 1),
        new(43633, 43638, 1),
        new(43642, 43646, 4),
        new(43647, 43695, 1),
        new(43697, 43701, 4),
        new(43702, 43705, 3),
        new(43706, 43709, 1),
        new(43712, 43714, 2),
        new(43739, 43740, 1),
        new(43744, 43754, 1),
        new(43762, 43777, 15),
        new(43778, 43782, 1),
        new(43785, 43790, 1),
        new(43793, 43798, 1),
        new(43808, 43814, 1),
        new(43816, 43822, 1),
        new(43968, 44002, 1),
        new(44032, 55203, 1),
        new(55216, 55238, 1),
        new(55243, 55291, 1),
        new(63744, 64109, 1),
        new(64112, 64217, 1),
        new(64285, 64287, 2),
        new(64288, 64296, 1),
        new(64298, 64310, 1),
        new(64312, 64316, 1),
        new(64318, 64320, 2),
        new(64321, 64323, 2),
        new(64324, 64326, 2),
        new(64327, 64433, 1),
        new(64467, 64829, 1),
        new(64848, 64911, 1),
        new(64914, 64967, 1),
        new(65008, 65019, 1),
        new(65136, 65140, 1),
        new(65142, 65276, 1),
        new(65382, 65391, 1),
        new(65393, 65437, 1),
        new(65440, 65470, 1),
        new(65474, 65479, 1),
        new(65482, 65487, 1),
        new(65490, 65495, 1),
        new(65498, 65500, 1)
    }.slice(),
    R32: new Range32[]{
        new(65536, 65547, 1),
        new(65549, 65574, 1),
        new(65576, 65594, 1),
        new(65596, 65597, 1),
        new(65599, 65613, 1),
        new(65616, 65629, 1),
        new(65664, 65786, 1),
        new(66176, 66204, 1),
        new(66208, 66256, 1),
        new(66304, 66335, 1),
        new(66349, 66368, 1),
        new(66370, 66377, 1),
        new(66384, 66421, 1),
        new(66432, 66461, 1),
        new(66464, 66499, 1),
        new(66504, 66511, 1),
        new(66640, 66717, 1),
        new(66816, 66855, 1),
        new(66864, 66915, 1),
        new(67072, 67382, 1),
        new(67392, 67413, 1),
        new(67424, 67431, 1),
        new(67584, 67589, 1),
        new(67592, 67594, 2),
        new(67595, 67637, 1),
        new(67639, 67640, 1),
        new(67644, 67647, 3),
        new(67648, 67669, 1),
        new(67680, 67702, 1),
        new(67712, 67742, 1),
        new(67808, 67826, 1),
        new(67828, 67829, 1),
        new(67840, 67861, 1),
        new(67872, 67897, 1),
        new(67968, 68023, 1),
        new(68030, 68031, 1),
        new(68096, 68112, 16),
        new(68113, 68115, 1),
        new(68117, 68119, 1),
        new(68121, 68149, 1),
        new(68192, 68220, 1),
        new(68224, 68252, 1),
        new(68288, 68295, 1),
        new(68297, 68324, 1),
        new(68352, 68405, 1),
        new(68416, 68437, 1),
        new(68448, 68466, 1),
        new(68480, 68497, 1),
        new(68608, 68680, 1),
        new(68864, 68899, 1),
        new(69248, 69289, 1),
        new(69296, 69297, 1),
        new(69376, 69404, 1),
        new(69415, 69424, 9),
        new(69425, 69445, 1),
        new(69488, 69505, 1),
        new(69552, 69572, 1),
        new(69600, 69622, 1),
        new(69635, 69687, 1),
        new(69745, 69746, 1),
        new(69749, 69763, 14),
        new(69764, 69807, 1),
        new(69840, 69864, 1),
        new(69891, 69926, 1),
        new(69956, 69959, 3),
        new(69968, 70002, 1),
        new(70006, 70019, 13),
        new(70020, 70066, 1),
        new(70081, 70084, 1),
        new(70106, 70108, 2),
        new(70144, 70161, 1),
        new(70163, 70187, 1),
        new(70207, 70208, 1),
        new(70272, 70278, 1),
        new(70280, 70282, 2),
        new(70283, 70285, 1),
        new(70287, 70301, 1),
        new(70303, 70312, 1),
        new(70320, 70366, 1),
        new(70405, 70412, 1),
        new(70415, 70416, 1),
        new(70419, 70440, 1),
        new(70442, 70448, 1),
        new(70450, 70451, 1),
        new(70453, 70457, 1),
        new(70461, 70480, 19),
        new(70493, 70497, 1),
        new(70656, 70708, 1),
        new(70727, 70730, 1),
        new(70751, 70753, 1),
        new(70784, 70831, 1),
        new(70852, 70853, 1),
        new(70855, 71040, 185),
        new(71041, 71086, 1),
        new(71128, 71131, 1),
        new(71168, 71215, 1),
        new(71236, 71296, 60),
        new(71297, 71338, 1),
        new(71352, 71424, 72),
        new(71425, 71450, 1),
        new(71488, 71494, 1),
        new(71680, 71723, 1),
        new(71935, 71942, 1),
        new(71945, 71948, 3),
        new(71949, 71955, 1),
        new(71957, 71958, 1),
        new(71960, 71983, 1),
        new(71999, 72001, 2),
        new(72096, 72103, 1),
        new(72106, 72144, 1),
        new(72161, 72163, 2),
        new(72192, 72203, 11),
        new(72204, 72242, 1),
        new(72250, 72272, 22),
        new(72284, 72329, 1),
        new(72349, 72368, 19),
        new(72369, 72440, 1),
        new(72704, 72712, 1),
        new(72714, 72750, 1),
        new(72768, 72818, 50),
        new(72819, 72847, 1),
        new(72960, 72966, 1),
        new(72968, 72969, 1),
        new(72971, 73008, 1),
        new(73030, 73056, 26),
        new(73057, 73061, 1),
        new(73063, 73064, 1),
        new(73066, 73097, 1),
        new(73112, 73440, 328),
        new(73441, 73458, 1),
        new(73474, 73476, 2),
        new(73477, 73488, 1),
        new(73490, 73523, 1),
        new(73648, 73728, 80),
        new(73729, 74649, 1),
        new(74880, 75075, 1),
        new(77712, 77808, 1),
        new(77824, 78895, 1),
        new(78913, 78918, 1),
        new(82944, 83526, 1),
        new(92160, 92728, 1),
        new(92736, 92766, 1),
        new(92784, 92862, 1),
        new(92880, 92909, 1),
        new(92928, 92975, 1),
        new(93027, 93047, 1),
        new(93053, 93071, 1),
        new(93952, 94026, 1),
        new(94032, 94208, 176),
        new(94209, 100343, 1),
        new(100352, 101589, 1),
        new(101632, 101640, 1),
        new(110592, 110882, 1),
        new(110898, 110928, 30),
        new(110929, 110930, 1),
        new(110933, 110948, 15),
        new(110949, 110951, 1),
        new(110960, 111355, 1),
        new(113664, 113770, 1),
        new(113776, 113788, 1),
        new(113792, 113800, 1),
        new(113808, 113817, 1),
        new(122634, 123136, 502),
        new(123137, 123180, 1),
        new(123214, 123536, 322),
        new(123537, 123565, 1),
        new(123584, 123627, 1),
        new(124112, 124138, 1),
        new(124896, 124902, 1),
        new(124904, 124907, 1),
        new(124909, 124910, 1),
        new(124912, 124926, 1),
        new(124928, 125124, 1),
        new(126464, 126467, 1),
        new(126469, 126495, 1),
        new(126497, 126498, 1),
        new(126500, 126503, 3),
        new(126505, 126514, 1),
        new(126516, 126519, 1),
        new(126521, 126523, 2),
        new(126530, 126535, 5),
        new(126537, 126541, 2),
        new(126542, 126543, 1),
        new(126545, 126546, 1),
        new(126548, 126551, 3),
        new(126553, 126561, 2),
        new(126562, 126564, 2),
        new(126567, 126570, 1),
        new(126572, 126578, 1),
        new(126580, 126583, 1),
        new(126585, 126588, 1),
        new(126590, 126592, 2),
        new(126593, 126601, 1),
        new(126603, 126619, 1),
        new(126625, 126627, 1),
        new(126629, 126633, 1),
        new(126635, 126651, 1),
        new(131072, 173791, 1),
        new(173824, 177977, 1),
        new(177984, 178205, 1),
        new(178208, 183969, 1),
        new(183984, 191456, 1),
        new(194560, 195101, 1),
        new(196608, 201546, 1),
        new(201552, 205743, 1)
    }.slice(),
    LatinOffset: 1
));

internal static ж<RangeTable> _Lt = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(453, 459, 3),
        new(498, 8072, 7574),
        new(8073, 8079, 1),
        new(8088, 8095, 1),
        new(8104, 8111, 1),
        new(8124, 8140, 16),
        new(8188, 8188, 1)
    }.slice()
));

internal static ж<RangeTable> _Lu = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(65, 90, 1),
        new(192, 214, 1),
        new(216, 222, 1),
        new(256, 310, 2),
        new(313, 327, 2),
        new(330, 376, 2),
        new(377, 381, 2),
        new(385, 386, 1),
        new(388, 390, 2),
        new(391, 393, 2),
        new(394, 395, 1),
        new(398, 401, 1),
        new(403, 404, 1),
        new(406, 408, 1),
        new(412, 413, 1),
        new(415, 416, 1),
        new(418, 422, 2),
        new(423, 425, 2),
        new(428, 430, 2),
        new(431, 433, 2),
        new(434, 435, 1),
        new(437, 439, 2),
        new(440, 444, 4),
        new(452, 461, 3),
        new(463, 475, 2),
        new(478, 494, 2),
        new(497, 500, 3),
        new(502, 504, 1),
        new(506, 562, 2),
        new(570, 571, 1),
        new(573, 574, 1),
        new(577, 579, 2),
        new(580, 582, 1),
        new(584, 590, 2),
        new(880, 882, 2),
        new(886, 895, 9),
        new(902, 904, 2),
        new(905, 906, 1),
        new(908, 910, 2),
        new(911, 913, 2),
        new(914, 929, 1),
        new(931, 939, 1),
        new(975, 978, 3),
        new(979, 980, 1),
        new(984, 1006, 2),
        new(1012, 1015, 3),
        new(1017, 1018, 1),
        new(1021, 1071, 1),
        new(1120, 1152, 2),
        new(1162, 1216, 2),
        new(1217, 1229, 2),
        new(1232, 1326, 2),
        new(1329, 1366, 1),
        new(4256, 4293, 1),
        new(4295, 4301, 6),
        new(5024, 5109, 1),
        new(7312, 7354, 1),
        new(7357, 7359, 1),
        new(7680, 7828, 2),
        new(7838, 7934, 2),
        new(7944, 7951, 1),
        new(7960, 7965, 1),
        new(7976, 7983, 1),
        new(7992, 7999, 1),
        new(8008, 8013, 1),
        new(8025, 8031, 2),
        new(8040, 8047, 1),
        new(8120, 8123, 1),
        new(8136, 8139, 1),
        new(8152, 8155, 1),
        new(8168, 8172, 1),
        new(8184, 8187, 1),
        new(8450, 8455, 5),
        new(8459, 8461, 1),
        new(8464, 8466, 1),
        new(8469, 8473, 4),
        new(8474, 8477, 1),
        new(8484, 8490, 2),
        new(8491, 8493, 1),
        new(8496, 8499, 1),
        new(8510, 8511, 1),
        new(8517, 8579, 62),
        new(11264, 11311, 1),
        new(11360, 11362, 2),
        new(11363, 11364, 1),
        new(11367, 11373, 2),
        new(11374, 11376, 1),
        new(11378, 11381, 3),
        new(11390, 11392, 1),
        new(11394, 11490, 2),
        new(11499, 11501, 2),
        new(11506, 42560, 31054),
        new(42562, 42604, 2),
        new(42624, 42650, 2),
        new(42786, 42798, 2),
        new(42802, 42862, 2),
        new(42873, 42877, 2),
        new(42878, 42886, 2),
        new(42891, 42893, 2),
        new(42896, 42898, 2),
        new(42902, 42922, 2),
        new(42923, 42926, 1),
        new(42928, 42932, 1),
        new(42934, 42948, 2),
        new(42949, 42951, 1),
        new(42953, 42960, 7),
        new(42966, 42968, 2),
        new(42997, 65313, 22316),
        new(65314, 65338, 1)
    }.slice(),
    R32: new Range32[]{
        new(66560, 66599, 1),
        new(66736, 66771, 1),
        new(66928, 66938, 1),
        new(66940, 66954, 1),
        new(66956, 66962, 1),
        new(66964, 66965, 1),
        new(68736, 68786, 1),
        new(71840, 71871, 1),
        new(93760, 93791, 1),
        new(119808, 119833, 1),
        new(119860, 119885, 1),
        new(119912, 119937, 1),
        new(119964, 119966, 2),
        new(119967, 119973, 3),
        new(119974, 119977, 3),
        new(119978, 119980, 1),
        new(119982, 119989, 1),
        new(120016, 120041, 1),
        new(120068, 120069, 1),
        new(120071, 120074, 1),
        new(120077, 120084, 1),
        new(120086, 120092, 1),
        new(120120, 120121, 1),
        new(120123, 120126, 1),
        new(120128, 120132, 1),
        new(120134, 120138, 4),
        new(120139, 120144, 1),
        new(120172, 120197, 1),
        new(120224, 120249, 1),
        new(120276, 120301, 1),
        new(120328, 120353, 1),
        new(120380, 120405, 1),
        new(120432, 120457, 1),
        new(120488, 120512, 1),
        new(120546, 120570, 1),
        new(120604, 120628, 1),
        new(120662, 120686, 1),
        new(120720, 120744, 1),
        new(120778, 125184, 4406),
        new(125185, 125217, 1)
    }.slice(),
    LatinOffset: 3
));

internal static ж<RangeTable> _M = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(768, 879, 1),
        new(1155, 1161, 1),
        new(1425, 1469, 1),
        new(1471, 1473, 2),
        new(1474, 1476, 2),
        new(1477, 1479, 2),
        new(1552, 1562, 1),
        new(1611, 1631, 1),
        new(1648, 1750, 102),
        new(1751, 1756, 1),
        new(1759, 1764, 1),
        new(1767, 1768, 1),
        new(1770, 1773, 1),
        new(1809, 1840, 31),
        new(1841, 1866, 1),
        new(1958, 1968, 1),
        new(2027, 2035, 1),
        new(2045, 2070, 25),
        new(2071, 2073, 1),
        new(2075, 2083, 1),
        new(2085, 2087, 1),
        new(2089, 2093, 1),
        new(2137, 2139, 1),
        new(2200, 2207, 1),
        new(2250, 2273, 1),
        new(2275, 2307, 1),
        new(2362, 2364, 1),
        new(2366, 2383, 1),
        new(2385, 2391, 1),
        new(2402, 2403, 1),
        new(2433, 2435, 1),
        new(2492, 2494, 2),
        new(2495, 2500, 1),
        new(2503, 2504, 1),
        new(2507, 2509, 1),
        new(2519, 2530, 11),
        new(2531, 2558, 27),
        new(2561, 2563, 1),
        new(2620, 2622, 2),
        new(2623, 2626, 1),
        new(2631, 2632, 1),
        new(2635, 2637, 1),
        new(2641, 2672, 31),
        new(2673, 2677, 4),
        new(2689, 2691, 1),
        new(2748, 2750, 2),
        new(2751, 2757, 1),
        new(2759, 2761, 1),
        new(2763, 2765, 1),
        new(2786, 2787, 1),
        new(2810, 2815, 1),
        new(2817, 2819, 1),
        new(2876, 2878, 2),
        new(2879, 2884, 1),
        new(2887, 2888, 1),
        new(2891, 2893, 1),
        new(2901, 2903, 1),
        new(2914, 2915, 1),
        new(2946, 3006, 60),
        new(3007, 3010, 1),
        new(3014, 3016, 1),
        new(3018, 3021, 1),
        new(3031, 3072, 41),
        new(3073, 3076, 1),
        new(3132, 3134, 2),
        new(3135, 3140, 1),
        new(3142, 3144, 1),
        new(3146, 3149, 1),
        new(3157, 3158, 1),
        new(3170, 3171, 1),
        new(3201, 3203, 1),
        new(3260, 3262, 2),
        new(3263, 3268, 1),
        new(3270, 3272, 1),
        new(3274, 3277, 1),
        new(3285, 3286, 1),
        new(3298, 3299, 1),
        new(3315, 3328, 13),
        new(3329, 3331, 1),
        new(3387, 3388, 1),
        new(3390, 3396, 1),
        new(3398, 3400, 1),
        new(3402, 3405, 1),
        new(3415, 3426, 11),
        new(3427, 3457, 30),
        new(3458, 3459, 1),
        new(3530, 3535, 5),
        new(3536, 3540, 1),
        new(3542, 3544, 2),
        new(3545, 3551, 1),
        new(3570, 3571, 1),
        new(3633, 3636, 3),
        new(3637, 3642, 1),
        new(3655, 3662, 1),
        new(3761, 3764, 3),
        new(3765, 3772, 1),
        new(3784, 3790, 1),
        new(3864, 3865, 1),
        new(3893, 3897, 2),
        new(3902, 3903, 1),
        new(3953, 3972, 1),
        new(3974, 3975, 1),
        new(3981, 3991, 1),
        new(3993, 4028, 1),
        new(4038, 4139, 101),
        new(4140, 4158, 1),
        new(4182, 4185, 1),
        new(4190, 4192, 1),
        new(4194, 4196, 1),
        new(4199, 4205, 1),
        new(4209, 4212, 1),
        new(4226, 4237, 1),
        new(4239, 4250, 11),
        new(4251, 4253, 1),
        new(4957, 4959, 1),
        new(5906, 5909, 1),
        new(5938, 5940, 1),
        new(5970, 5971, 1),
        new(6002, 6003, 1),
        new(6068, 6099, 1),
        new(6109, 6155, 46),
        new(6156, 6157, 1),
        new(6159, 6277, 118),
        new(6278, 6313, 35),
        new(6432, 6443, 1),
        new(6448, 6459, 1),
        new(6679, 6683, 1),
        new(6741, 6750, 1),
        new(6752, 6780, 1),
        new(6783, 6832, 49),
        new(6833, 6862, 1),
        new(6912, 6916, 1),
        new(6964, 6980, 1),
        new(7019, 7027, 1),
        new(7040, 7042, 1),
        new(7073, 7085, 1),
        new(7142, 7155, 1),
        new(7204, 7223, 1),
        new(7376, 7378, 1),
        new(7380, 7400, 1),
        new(7405, 7412, 7),
        new(7415, 7417, 1),
        new(7616, 7679, 1),
        new(8400, 8432, 1),
        new(11503, 11505, 1),
        new(11647, 11744, 97),
        new(11745, 11775, 1),
        new(12330, 12335, 1),
        new(12441, 12442, 1),
        new(42607, 42610, 1),
        new(42612, 42621, 1),
        new(42654, 42655, 1),
        new(42736, 42737, 1),
        new(43010, 43014, 4),
        new(43019, 43043, 24),
        new(43044, 43047, 1),
        new(43052, 43136, 84),
        new(43137, 43188, 51),
        new(43189, 43205, 1),
        new(43232, 43249, 1),
        new(43263, 43302, 39),
        new(43303, 43309, 1),
        new(43335, 43347, 1),
        new(43392, 43395, 1),
        new(43443, 43456, 1),
        new(43493, 43561, 68),
        new(43562, 43574, 1),
        new(43587, 43596, 9),
        new(43597, 43643, 46),
        new(43644, 43645, 1),
        new(43696, 43698, 2),
        new(43699, 43700, 1),
        new(43703, 43704, 1),
        new(43710, 43711, 1),
        new(43713, 43755, 42),
        new(43756, 43759, 1),
        new(43765, 43766, 1),
        new(44003, 44010, 1),
        new(44012, 44013, 1),
        new(64286, 65024, 738),
        new(65025, 65039, 1),
        new(65056, 65071, 1)
    }.slice(),
    R32: new Range32[]{
        new(66045, 66272, 227),
        new(66422, 66426, 1),
        new(68097, 68099, 1),
        new(68101, 68102, 1),
        new(68108, 68111, 1),
        new(68152, 68154, 1),
        new(68159, 68325, 166),
        new(68326, 68900, 574),
        new(68901, 68903, 1),
        new(69291, 69292, 1),
        new(69373, 69375, 1),
        new(69446, 69456, 1),
        new(69506, 69509, 1),
        new(69632, 69634, 1),
        new(69688, 69702, 1),
        new(69744, 69747, 3),
        new(69748, 69759, 11),
        new(69760, 69762, 1),
        new(69808, 69818, 1),
        new(69826, 69888, 62),
        new(69889, 69890, 1),
        new(69927, 69940, 1),
        new(69957, 69958, 1),
        new(70003, 70016, 13),
        new(70017, 70018, 1),
        new(70067, 70080, 1),
        new(70089, 70092, 1),
        new(70094, 70095, 1),
        new(70188, 70199, 1),
        new(70206, 70209, 3),
        new(70367, 70378, 1),
        new(70400, 70403, 1),
        new(70459, 70460, 1),
        new(70462, 70468, 1),
        new(70471, 70472, 1),
        new(70475, 70477, 1),
        new(70487, 70498, 11),
        new(70499, 70502, 3),
        new(70503, 70508, 1),
        new(70512, 70516, 1),
        new(70709, 70726, 1),
        new(70750, 70832, 82),
        new(70833, 70851, 1),
        new(71087, 71093, 1),
        new(71096, 71104, 1),
        new(71132, 71133, 1),
        new(71216, 71232, 1),
        new(71339, 71351, 1),
        new(71453, 71467, 1),
        new(71724, 71738, 1),
        new(71984, 71989, 1),
        new(71991, 71992, 1),
        new(71995, 71998, 1),
        new(72000, 72002, 2),
        new(72003, 72145, 142),
        new(72146, 72151, 1),
        new(72154, 72160, 1),
        new(72164, 72193, 29),
        new(72194, 72202, 1),
        new(72243, 72249, 1),
        new(72251, 72254, 1),
        new(72263, 72273, 10),
        new(72274, 72283, 1),
        new(72330, 72345, 1),
        new(72751, 72758, 1),
        new(72760, 72767, 1),
        new(72850, 72871, 1),
        new(72873, 72886, 1),
        new(73009, 73014, 1),
        new(73018, 73020, 2),
        new(73021, 73023, 2),
        new(73024, 73029, 1),
        new(73031, 73098, 67),
        new(73099, 73102, 1),
        new(73104, 73105, 1),
        new(73107, 73111, 1),
        new(73459, 73462, 1),
        new(73472, 73473, 1),
        new(73475, 73524, 49),
        new(73525, 73530, 1),
        new(73534, 73538, 1),
        new(78912, 78919, 7),
        new(78920, 78933, 1),
        new(92912, 92916, 1),
        new(92976, 92982, 1),
        new(94031, 94033, 2),
        new(94034, 94087, 1),
        new(94095, 94098, 1),
        new(94180, 94192, 12),
        new(94193, 113821, 19628),
        new(113822, 118528, 4706),
        new(118529, 118573, 1),
        new(118576, 118598, 1),
        new(119141, 119145, 1),
        new(119149, 119154, 1),
        new(119163, 119170, 1),
        new(119173, 119179, 1),
        new(119210, 119213, 1),
        new(119362, 119364, 1),
        new(121344, 121398, 1),
        new(121403, 121452, 1),
        new(121461, 121476, 15),
        new(121499, 121503, 1),
        new(121505, 121519, 1),
        new(122880, 122886, 1),
        new(122888, 122904, 1),
        new(122907, 122913, 1),
        new(122915, 122916, 1),
        new(122918, 122922, 1),
        new(123023, 123184, 161),
        new(123185, 123190, 1),
        new(123566, 123628, 62),
        new(123629, 123631, 1),
        new(124140, 124143, 1),
        new(125136, 125142, 1),
        new(125252, 125258, 1),
        new(917760, 917999, 1)
    }.slice()
));

internal static ж<RangeTable> _Mc = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(2307, 2363, 56),
        new(2366, 2368, 1),
        new(2377, 2380, 1),
        new(2382, 2383, 1),
        new(2434, 2435, 1),
        new(2494, 2496, 1),
        new(2503, 2504, 1),
        new(2507, 2508, 1),
        new(2519, 2563, 44),
        new(2622, 2624, 1),
        new(2691, 2750, 59),
        new(2751, 2752, 1),
        new(2761, 2763, 2),
        new(2764, 2818, 54),
        new(2819, 2878, 59),
        new(2880, 2887, 7),
        new(2888, 2891, 3),
        new(2892, 2903, 11),
        new(3006, 3007, 1),
        new(3009, 3010, 1),
        new(3014, 3016, 1),
        new(3018, 3020, 1),
        new(3031, 3073, 42),
        new(3074, 3075, 1),
        new(3137, 3140, 1),
        new(3202, 3203, 1),
        new(3262, 3264, 2),
        new(3265, 3268, 1),
        new(3271, 3272, 1),
        new(3274, 3275, 1),
        new(3285, 3286, 1),
        new(3315, 3330, 15),
        new(3331, 3390, 59),
        new(3391, 3392, 1),
        new(3398, 3400, 1),
        new(3402, 3404, 1),
        new(3415, 3458, 43),
        new(3459, 3535, 76),
        new(3536, 3537, 1),
        new(3544, 3551, 1),
        new(3570, 3571, 1),
        new(3902, 3903, 1),
        new(3967, 4139, 172),
        new(4140, 4145, 5),
        new(4152, 4155, 3),
        new(4156, 4182, 26),
        new(4183, 4194, 11),
        new(4195, 4196, 1),
        new(4199, 4205, 1),
        new(4227, 4228, 1),
        new(4231, 4236, 1),
        new(4239, 4250, 11),
        new(4251, 4252, 1),
        new(5909, 5940, 31),
        new(6070, 6078, 8),
        new(6079, 6085, 1),
        new(6087, 6088, 1),
        new(6435, 6438, 1),
        new(6441, 6443, 1),
        new(6448, 6449, 1),
        new(6451, 6456, 1),
        new(6681, 6682, 1),
        new(6741, 6743, 2),
        new(6753, 6755, 2),
        new(6756, 6765, 9),
        new(6766, 6770, 1),
        new(6916, 6965, 49),
        new(6971, 6973, 2),
        new(6974, 6977, 1),
        new(6979, 6980, 1),
        new(7042, 7073, 31),
        new(7078, 7079, 1),
        new(7082, 7143, 61),
        new(7146, 7148, 1),
        new(7150, 7154, 4),
        new(7155, 7204, 49),
        new(7205, 7211, 1),
        new(7220, 7221, 1),
        new(7393, 7415, 22),
        new(12334, 12335, 1),
        new(43043, 43044, 1),
        new(43047, 43136, 89),
        new(43137, 43188, 51),
        new(43189, 43203, 1),
        new(43346, 43347, 1),
        new(43395, 43444, 49),
        new(43445, 43450, 5),
        new(43451, 43454, 3),
        new(43455, 43456, 1),
        new(43567, 43568, 1),
        new(43571, 43572, 1),
        new(43597, 43643, 46),
        new(43645, 43755, 110),
        new(43758, 43759, 1),
        new(43765, 44003, 238),
        new(44004, 44006, 2),
        new(44007, 44009, 2),
        new(44010, 44012, 2)
    }.slice(),
    R32: new Range32[]{
        new(69632, 69634, 2),
        new(69762, 69808, 46),
        new(69809, 69810, 1),
        new(69815, 69816, 1),
        new(69932, 69957, 25),
        new(69958, 70018, 60),
        new(70067, 70069, 1),
        new(70079, 70080, 1),
        new(70094, 70188, 94),
        new(70189, 70190, 1),
        new(70194, 70195, 1),
        new(70197, 70368, 171),
        new(70369, 70370, 1),
        new(70402, 70403, 1),
        new(70462, 70463, 1),
        new(70465, 70468, 1),
        new(70471, 70472, 1),
        new(70475, 70477, 1),
        new(70487, 70498, 11),
        new(70499, 70709, 210),
        new(70710, 70711, 1),
        new(70720, 70721, 1),
        new(70725, 70832, 107),
        new(70833, 70834, 1),
        new(70841, 70843, 2),
        new(70844, 70846, 1),
        new(70849, 71087, 238),
        new(71088, 71089, 1),
        new(71096, 71099, 1),
        new(71102, 71216, 114),
        new(71217, 71218, 1),
        new(71227, 71228, 1),
        new(71230, 71340, 110),
        new(71342, 71343, 1),
        new(71350, 71456, 106),
        new(71457, 71462, 5),
        new(71724, 71726, 1),
        new(71736, 71984, 248),
        new(71985, 71989, 1),
        new(71991, 71992, 1),
        new(71997, 72000, 3),
        new(72002, 72145, 143),
        new(72146, 72147, 1),
        new(72156, 72159, 1),
        new(72164, 72249, 85),
        new(72279, 72280, 1),
        new(72343, 72751, 408),
        new(72766, 72873, 107),
        new(72881, 72884, 3),
        new(73098, 73102, 1),
        new(73107, 73108, 1),
        new(73110, 73461, 351),
        new(73462, 73475, 13),
        new(73524, 73525, 1),
        new(73534, 73535, 1),
        new(73537, 94033, 20496),
        new(94034, 94087, 1),
        new(94192, 94193, 1),
        new(119141, 119142, 1),
        new(119149, 119154, 1)
    }.slice()
));

internal static ж<RangeTable> _Me = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(1160, 1161, 1),
        new(6846, 8413, 1567),
        new(8414, 8416, 1),
        new(8418, 8420, 1),
        new(42608, 42610, 1)
    }.slice()
));

internal static ж<RangeTable> _Mn = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(768, 879, 1),
        new(1155, 1159, 1),
        new(1425, 1469, 1),
        new(1471, 1473, 2),
        new(1474, 1476, 2),
        new(1477, 1479, 2),
        new(1552, 1562, 1),
        new(1611, 1631, 1),
        new(1648, 1750, 102),
        new(1751, 1756, 1),
        new(1759, 1764, 1),
        new(1767, 1768, 1),
        new(1770, 1773, 1),
        new(1809, 1840, 31),
        new(1841, 1866, 1),
        new(1958, 1968, 1),
        new(2027, 2035, 1),
        new(2045, 2070, 25),
        new(2071, 2073, 1),
        new(2075, 2083, 1),
        new(2085, 2087, 1),
        new(2089, 2093, 1),
        new(2137, 2139, 1),
        new(2200, 2207, 1),
        new(2250, 2273, 1),
        new(2275, 2306, 1),
        new(2362, 2364, 2),
        new(2369, 2376, 1),
        new(2381, 2385, 4),
        new(2386, 2391, 1),
        new(2402, 2403, 1),
        new(2433, 2492, 59),
        new(2497, 2500, 1),
        new(2509, 2530, 21),
        new(2531, 2558, 27),
        new(2561, 2562, 1),
        new(2620, 2625, 5),
        new(2626, 2631, 5),
        new(2632, 2635, 3),
        new(2636, 2637, 1),
        new(2641, 2672, 31),
        new(2673, 2677, 4),
        new(2689, 2690, 1),
        new(2748, 2753, 5),
        new(2754, 2757, 1),
        new(2759, 2760, 1),
        new(2765, 2786, 21),
        new(2787, 2810, 23),
        new(2811, 2815, 1),
        new(2817, 2876, 59),
        new(2879, 2881, 2),
        new(2882, 2884, 1),
        new(2893, 2901, 8),
        new(2902, 2914, 12),
        new(2915, 2946, 31),
        new(3008, 3021, 13),
        new(3072, 3076, 4),
        new(3132, 3134, 2),
        new(3135, 3136, 1),
        new(3142, 3144, 1),
        new(3146, 3149, 1),
        new(3157, 3158, 1),
        new(3170, 3171, 1),
        new(3201, 3260, 59),
        new(3263, 3270, 7),
        new(3276, 3277, 1),
        new(3298, 3299, 1),
        new(3328, 3329, 1),
        new(3387, 3388, 1),
        new(3393, 3396, 1),
        new(3405, 3426, 21),
        new(3427, 3457, 30),
        new(3530, 3538, 8),
        new(3539, 3540, 1),
        new(3542, 3633, 91),
        new(3636, 3642, 1),
        new(3655, 3662, 1),
        new(3761, 3764, 3),
        new(3765, 3772, 1),
        new(3784, 3790, 1),
        new(3864, 3865, 1),
        new(3893, 3897, 2),
        new(3953, 3966, 1),
        new(3968, 3972, 1),
        new(3974, 3975, 1),
        new(3981, 3991, 1),
        new(3993, 4028, 1),
        new(4038, 4141, 103),
        new(4142, 4144, 1),
        new(4146, 4151, 1),
        new(4153, 4154, 1),
        new(4157, 4158, 1),
        new(4184, 4185, 1),
        new(4190, 4192, 1),
        new(4209, 4212, 1),
        new(4226, 4229, 3),
        new(4230, 4237, 7),
        new(4253, 4957, 704),
        new(4958, 4959, 1),
        new(5906, 5908, 1),
        new(5938, 5939, 1),
        new(5970, 5971, 1),
        new(6002, 6003, 1),
        new(6068, 6069, 1),
        new(6071, 6077, 1),
        new(6086, 6089, 3),
        new(6090, 6099, 1),
        new(6109, 6155, 46),
        new(6156, 6157, 1),
        new(6159, 6277, 118),
        new(6278, 6313, 35),
        new(6432, 6434, 1),
        new(6439, 6440, 1),
        new(6450, 6457, 7),
        new(6458, 6459, 1),
        new(6679, 6680, 1),
        new(6683, 6742, 59),
        new(6744, 6750, 1),
        new(6752, 6754, 2),
        new(6757, 6764, 1),
        new(6771, 6780, 1),
        new(6783, 6832, 49),
        new(6833, 6845, 1),
        new(6847, 6862, 1),
        new(6912, 6915, 1),
        new(6964, 6966, 2),
        new(6967, 6970, 1),
        new(6972, 6978, 6),
        new(7019, 7027, 1),
        new(7040, 7041, 1),
        new(7074, 7077, 1),
        new(7080, 7081, 1),
        new(7083, 7085, 1),
        new(7142, 7144, 2),
        new(7145, 7149, 4),
        new(7151, 7153, 1),
        new(7212, 7219, 1),
        new(7222, 7223, 1),
        new(7376, 7378, 1),
        new(7380, 7392, 1),
        new(7394, 7400, 1),
        new(7405, 7412, 7),
        new(7416, 7417, 1),
        new(7616, 7679, 1),
        new(8400, 8412, 1),
        new(8417, 8421, 4),
        new(8422, 8432, 1),
        new(11503, 11505, 1),
        new(11647, 11744, 97),
        new(11745, 11775, 1),
        new(12330, 12333, 1),
        new(12441, 12442, 1),
        new(42607, 42612, 5),
        new(42613, 42621, 1),
        new(42654, 42655, 1),
        new(42736, 42737, 1),
        new(43010, 43014, 4),
        new(43019, 43045, 26),
        new(43046, 43052, 6),
        new(43204, 43205, 1),
        new(43232, 43249, 1),
        new(43263, 43302, 39),
        new(43303, 43309, 1),
        new(43335, 43345, 1),
        new(43392, 43394, 1),
        new(43443, 43446, 3),
        new(43447, 43449, 1),
        new(43452, 43453, 1),
        new(43493, 43561, 68),
        new(43562, 43566, 1),
        new(43569, 43570, 1),
        new(43573, 43574, 1),
        new(43587, 43596, 9),
        new(43644, 43696, 52),
        new(43698, 43700, 1),
        new(43703, 43704, 1),
        new(43710, 43711, 1),
        new(43713, 43756, 43),
        new(43757, 43766, 9),
        new(44005, 44008, 3),
        new(44013, 64286, 20273),
        new(65024, 65039, 1),
        new(65056, 65071, 1)
    }.slice(),
    R32: new Range32[]{
        new(66045, 66272, 227),
        new(66422, 66426, 1),
        new(68097, 68099, 1),
        new(68101, 68102, 1),
        new(68108, 68111, 1),
        new(68152, 68154, 1),
        new(68159, 68325, 166),
        new(68326, 68900, 574),
        new(68901, 68903, 1),
        new(69291, 69292, 1),
        new(69373, 69375, 1),
        new(69446, 69456, 1),
        new(69506, 69509, 1),
        new(69633, 69688, 55),
        new(69689, 69702, 1),
        new(69744, 69747, 3),
        new(69748, 69759, 11),
        new(69760, 69761, 1),
        new(69811, 69814, 1),
        new(69817, 69818, 1),
        new(69826, 69888, 62),
        new(69889, 69890, 1),
        new(69927, 69931, 1),
        new(69933, 69940, 1),
        new(70003, 70016, 13),
        new(70017, 70070, 53),
        new(70071, 70078, 1),
        new(70089, 70092, 1),
        new(70095, 70191, 96),
        new(70192, 70193, 1),
        new(70196, 70198, 2),
        new(70199, 70206, 7),
        new(70209, 70367, 158),
        new(70371, 70378, 1),
        new(70400, 70401, 1),
        new(70459, 70460, 1),
        new(70464, 70502, 38),
        new(70503, 70508, 1),
        new(70512, 70516, 1),
        new(70712, 70719, 1),
        new(70722, 70724, 1),
        new(70726, 70750, 24),
        new(70835, 70840, 1),
        new(70842, 70847, 5),
        new(70848, 70850, 2),
        new(70851, 71090, 239),
        new(71091, 71093, 1),
        new(71100, 71101, 1),
        new(71103, 71104, 1),
        new(71132, 71133, 1),
        new(71219, 71226, 1),
        new(71229, 71231, 2),
        new(71232, 71339, 107),
        new(71341, 71344, 3),
        new(71345, 71349, 1),
        new(71351, 71453, 102),
        new(71454, 71455, 1),
        new(71458, 71461, 1),
        new(71463, 71467, 1),
        new(71727, 71735, 1),
        new(71737, 71738, 1),
        new(71995, 71996, 1),
        new(71998, 72003, 5),
        new(72148, 72151, 1),
        new(72154, 72155, 1),
        new(72160, 72193, 33),
        new(72194, 72202, 1),
        new(72243, 72248, 1),
        new(72251, 72254, 1),
        new(72263, 72273, 10),
        new(72274, 72278, 1),
        new(72281, 72283, 1),
        new(72330, 72342, 1),
        new(72344, 72345, 1),
        new(72752, 72758, 1),
        new(72760, 72765, 1),
        new(72767, 72850, 83),
        new(72851, 72871, 1),
        new(72874, 72880, 1),
        new(72882, 72883, 1),
        new(72885, 72886, 1),
        new(73009, 73014, 1),
        new(73018, 73020, 2),
        new(73021, 73023, 2),
        new(73024, 73029, 1),
        new(73031, 73104, 73),
        new(73105, 73109, 4),
        new(73111, 73459, 348),
        new(73460, 73472, 12),
        new(73473, 73526, 53),
        new(73527, 73530, 1),
        new(73536, 73538, 2),
        new(78912, 78919, 7),
        new(78920, 78933, 1),
        new(92912, 92916, 1),
        new(92976, 92982, 1),
        new(94031, 94095, 64),
        new(94096, 94098, 1),
        new(94180, 113821, 19641),
        new(113822, 118528, 4706),
        new(118529, 118573, 1),
        new(118576, 118598, 1),
        new(119143, 119145, 1),
        new(119163, 119170, 1),
        new(119173, 119179, 1),
        new(119210, 119213, 1),
        new(119362, 119364, 1),
        new(121344, 121398, 1),
        new(121403, 121452, 1),
        new(121461, 121476, 15),
        new(121499, 121503, 1),
        new(121505, 121519, 1),
        new(122880, 122886, 1),
        new(122888, 122904, 1),
        new(122907, 122913, 1),
        new(122915, 122916, 1),
        new(122918, 122922, 1),
        new(123023, 123184, 161),
        new(123185, 123190, 1),
        new(123566, 123628, 62),
        new(123629, 123631, 1),
        new(124140, 124143, 1),
        new(125136, 125142, 1),
        new(125252, 125258, 1),
        new(917760, 917999, 1)
    }.slice()
));

internal static ж<RangeTable> _N = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(48, 57, 1),
        new(178, 179, 1),
        new(185, 188, 3),
        new(189, 190, 1),
        new(1632, 1641, 1),
        new(1776, 1785, 1),
        new(1984, 1993, 1),
        new(2406, 2415, 1),
        new(2534, 2543, 1),
        new(2548, 2553, 1),
        new(2662, 2671, 1),
        new(2790, 2799, 1),
        new(2918, 2927, 1),
        new(2930, 2935, 1),
        new(3046, 3058, 1),
        new(3174, 3183, 1),
        new(3192, 3198, 1),
        new(3302, 3311, 1),
        new(3416, 3422, 1),
        new(3430, 3448, 1),
        new(3558, 3567, 1),
        new(3664, 3673, 1),
        new(3792, 3801, 1),
        new(3872, 3891, 1),
        new(4160, 4169, 1),
        new(4240, 4249, 1),
        new(4969, 4988, 1),
        new(5870, 5872, 1),
        new(6112, 6121, 1),
        new(6128, 6137, 1),
        new(6160, 6169, 1),
        new(6470, 6479, 1),
        new(6608, 6618, 1),
        new(6784, 6793, 1),
        new(6800, 6809, 1),
        new(6992, 7001, 1),
        new(7088, 7097, 1),
        new(7232, 7241, 1),
        new(7248, 7257, 1),
        new(8304, 8308, 4),
        new(8309, 8313, 1),
        new(8320, 8329, 1),
        new(8528, 8578, 1),
        new(8581, 8585, 1),
        new(9312, 9371, 1),
        new(9450, 9471, 1),
        new(10102, 10131, 1),
        new(11517, 12295, 778),
        new(12321, 12329, 1),
        new(12344, 12346, 1),
        new(12690, 12693, 1),
        new(12832, 12841, 1),
        new(12872, 12879, 1),
        new(12881, 12895, 1),
        new(12928, 12937, 1),
        new(12977, 12991, 1),
        new(42528, 42537, 1),
        new(42726, 42735, 1),
        new(43056, 43061, 1),
        new(43216, 43225, 1),
        new(43264, 43273, 1),
        new(43472, 43481, 1),
        new(43504, 43513, 1),
        new(43600, 43609, 1),
        new(44016, 44025, 1),
        new(65296, 65305, 1)
    }.slice(),
    R32: new Range32[]{
        new(65799, 65843, 1),
        new(65856, 65912, 1),
        new(65930, 65931, 1),
        new(66273, 66299, 1),
        new(66336, 66339, 1),
        new(66369, 66378, 9),
        new(66513, 66517, 1),
        new(66720, 66729, 1),
        new(67672, 67679, 1),
        new(67705, 67711, 1),
        new(67751, 67759, 1),
        new(67835, 67839, 1),
        new(67862, 67867, 1),
        new(68028, 68029, 1),
        new(68032, 68047, 1),
        new(68050, 68095, 1),
        new(68160, 68168, 1),
        new(68221, 68222, 1),
        new(68253, 68255, 1),
        new(68331, 68335, 1),
        new(68440, 68447, 1),
        new(68472, 68479, 1),
        new(68521, 68527, 1),
        new(68858, 68863, 1),
        new(68912, 68921, 1),
        new(69216, 69246, 1),
        new(69405, 69414, 1),
        new(69457, 69460, 1),
        new(69573, 69579, 1),
        new(69714, 69743, 1),
        new(69872, 69881, 1),
        new(69942, 69951, 1),
        new(70096, 70105, 1),
        new(70113, 70132, 1),
        new(70384, 70393, 1),
        new(70736, 70745, 1),
        new(70864, 70873, 1),
        new(71248, 71257, 1),
        new(71360, 71369, 1),
        new(71472, 71483, 1),
        new(71904, 71922, 1),
        new(72016, 72025, 1),
        new(72784, 72812, 1),
        new(73040, 73049, 1),
        new(73120, 73129, 1),
        new(73552, 73561, 1),
        new(73664, 73684, 1),
        new(74752, 74862, 1),
        new(92768, 92777, 1),
        new(92864, 92873, 1),
        new(93008, 93017, 1),
        new(93019, 93025, 1),
        new(93824, 93846, 1),
        new(119488, 119507, 1),
        new(119520, 119539, 1),
        new(119648, 119672, 1),
        new(120782, 120831, 1),
        new(123200, 123209, 1),
        new(123632, 123641, 1),
        new(124144, 124153, 1),
        new(125127, 125135, 1),
        new(125264, 125273, 1),
        new(126065, 126123, 1),
        new(126125, 126127, 1),
        new(126129, 126132, 1),
        new(126209, 126253, 1),
        new(126255, 126269, 1),
        new(127232, 127244, 1),
        new(130032, 130041, 1)
    }.slice(),
    LatinOffset: 4
));

internal static ж<RangeTable> _Nd = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(48, 57, 1),
        new(1632, 1641, 1),
        new(1776, 1785, 1),
        new(1984, 1993, 1),
        new(2406, 2415, 1),
        new(2534, 2543, 1),
        new(2662, 2671, 1),
        new(2790, 2799, 1),
        new(2918, 2927, 1),
        new(3046, 3055, 1),
        new(3174, 3183, 1),
        new(3302, 3311, 1),
        new(3430, 3439, 1),
        new(3558, 3567, 1),
        new(3664, 3673, 1),
        new(3792, 3801, 1),
        new(3872, 3881, 1),
        new(4160, 4169, 1),
        new(4240, 4249, 1),
        new(6112, 6121, 1),
        new(6160, 6169, 1),
        new(6470, 6479, 1),
        new(6608, 6617, 1),
        new(6784, 6793, 1),
        new(6800, 6809, 1),
        new(6992, 7001, 1),
        new(7088, 7097, 1),
        new(7232, 7241, 1),
        new(7248, 7257, 1),
        new(42528, 42537, 1),
        new(43216, 43225, 1),
        new(43264, 43273, 1),
        new(43472, 43481, 1),
        new(43504, 43513, 1),
        new(43600, 43609, 1),
        new(44016, 44025, 1),
        new(65296, 65305, 1)
    }.slice(),
    R32: new Range32[]{
        new(66720, 66729, 1),
        new(68912, 68921, 1),
        new(69734, 69743, 1),
        new(69872, 69881, 1),
        new(69942, 69951, 1),
        new(70096, 70105, 1),
        new(70384, 70393, 1),
        new(70736, 70745, 1),
        new(70864, 70873, 1),
        new(71248, 71257, 1),
        new(71360, 71369, 1),
        new(71472, 71481, 1),
        new(71904, 71913, 1),
        new(72016, 72025, 1),
        new(72784, 72793, 1),
        new(73040, 73049, 1),
        new(73120, 73129, 1),
        new(73552, 73561, 1),
        new(92768, 92777, 1),
        new(92864, 92873, 1),
        new(93008, 93017, 1),
        new(120782, 120831, 1),
        new(123200, 123209, 1),
        new(123632, 123641, 1),
        new(124144, 124153, 1),
        new(125264, 125273, 1),
        new(130032, 130041, 1)
    }.slice(),
    LatinOffset: 1
));

internal static ж<RangeTable> _Nl = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(5870, 5872, 1),
        new(8544, 8578, 1),
        new(8581, 8584, 1),
        new(12295, 12321, 26),
        new(12322, 12329, 1),
        new(12344, 12346, 1),
        new(42726, 42735, 1)
    }.slice(),
    R32: new Range32[]{
        new(65856, 65908, 1),
        new(66369, 66378, 9),
        new(66513, 66517, 1),
        new(74752, 74862, 1)
    }.slice()
));

internal static ж<RangeTable> _No = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(178, 179, 1),
        new(185, 188, 3),
        new(189, 190, 1),
        new(2548, 2553, 1),
        new(2930, 2935, 1),
        new(3056, 3058, 1),
        new(3192, 3198, 1),
        new(3416, 3422, 1),
        new(3440, 3448, 1),
        new(3882, 3891, 1),
        new(4969, 4988, 1),
        new(6128, 6137, 1),
        new(6618, 8304, 1686),
        new(8308, 8313, 1),
        new(8320, 8329, 1),
        new(8528, 8543, 1),
        new(8585, 9312, 727),
        new(9313, 9371, 1),
        new(9450, 9471, 1),
        new(10102, 10131, 1),
        new(11517, 12690, 1173),
        new(12691, 12693, 1),
        new(12832, 12841, 1),
        new(12872, 12879, 1),
        new(12881, 12895, 1),
        new(12928, 12937, 1),
        new(12977, 12991, 1),
        new(43056, 43061, 1)
    }.slice(),
    R32: new Range32[]{
        new(65799, 65843, 1),
        new(65909, 65912, 1),
        new(65930, 65931, 1),
        new(66273, 66299, 1),
        new(66336, 66339, 1),
        new(67672, 67679, 1),
        new(67705, 67711, 1),
        new(67751, 67759, 1),
        new(67835, 67839, 1),
        new(67862, 67867, 1),
        new(68028, 68029, 1),
        new(68032, 68047, 1),
        new(68050, 68095, 1),
        new(68160, 68168, 1),
        new(68221, 68222, 1),
        new(68253, 68255, 1),
        new(68331, 68335, 1),
        new(68440, 68447, 1),
        new(68472, 68479, 1),
        new(68521, 68527, 1),
        new(68858, 68863, 1),
        new(69216, 69246, 1),
        new(69405, 69414, 1),
        new(69457, 69460, 1),
        new(69573, 69579, 1),
        new(69714, 69733, 1),
        new(70113, 70132, 1),
        new(71482, 71483, 1),
        new(71914, 71922, 1),
        new(72794, 72812, 1),
        new(73664, 73684, 1),
        new(93019, 93025, 1),
        new(93824, 93846, 1),
        new(119488, 119507, 1),
        new(119520, 119539, 1),
        new(119648, 119672, 1),
        new(125127, 125135, 1),
        new(126065, 126123, 1),
        new(126125, 126127, 1),
        new(126129, 126132, 1),
        new(126209, 126253, 1),
        new(126255, 126269, 1),
        new(127232, 127244, 1)
    }.slice(),
    LatinOffset: 3
));

internal static ж<RangeTable> _P = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(33, 35, 1),
        new(37, 42, 1),
        new(44, 47, 1),
        new(58, 59, 1),
        new(63, 64, 1),
        new(91, 93, 1),
        new(95, 123, 28),
        new(125, 161, 36),
        new(167, 171, 4),
        new(182, 183, 1),
        new(187, 191, 4),
        new(894, 903, 9),
        new(1370, 1375, 1),
        new(1417, 1418, 1),
        new(1470, 1472, 2),
        new(1475, 1478, 3),
        new(1523, 1524, 1),
        new(1545, 1546, 1),
        new(1548, 1549, 1),
        new(1563, 1565, 2),
        new(1566, 1567, 1),
        new(1642, 1645, 1),
        new(1748, 1792, 44),
        new(1793, 1805, 1),
        new(2039, 2041, 1),
        new(2096, 2110, 1),
        new(2142, 2404, 262),
        new(2405, 2416, 11),
        new(2557, 2678, 121),
        new(2800, 3191, 391),
        new(3204, 3572, 368),
        new(3663, 3674, 11),
        new(3675, 3844, 169),
        new(3845, 3858, 1),
        new(3860, 3898, 38),
        new(3899, 3901, 1),
        new(3973, 4048, 75),
        new(4049, 4052, 1),
        new(4057, 4058, 1),
        new(4170, 4175, 1),
        new(4347, 4960, 613),
        new(4961, 4968, 1),
        new(5120, 5742, 622),
        new(5787, 5788, 1),
        new(5867, 5869, 1),
        new(5941, 5942, 1),
        new(6100, 6102, 1),
        new(6104, 6106, 1),
        new(6144, 6154, 1),
        new(6468, 6469, 1),
        new(6686, 6687, 1),
        new(6816, 6822, 1),
        new(6824, 6829, 1),
        new(7002, 7008, 1),
        new(7037, 7038, 1),
        new(7164, 7167, 1),
        new(7227, 7231, 1),
        new(7294, 7295, 1),
        new(7360, 7367, 1),
        new(7379, 8208, 829),
        new(8209, 8231, 1),
        new(8240, 8259, 1),
        new(8261, 8273, 1),
        new(8275, 8286, 1),
        new(8317, 8318, 1),
        new(8333, 8334, 1),
        new(8968, 8971, 1),
        new(9001, 9002, 1),
        new(10088, 10101, 1),
        new(10181, 10182, 1),
        new(10214, 10223, 1),
        new(10627, 10648, 1),
        new(10712, 10715, 1),
        new(10748, 10749, 1),
        new(11513, 11516, 1),
        new(11518, 11519, 1),
        new(11632, 11776, 144),
        new(11777, 11822, 1),
        new(11824, 11855, 1),
        new(11858, 11869, 1),
        new(12289, 12291, 1),
        new(12296, 12305, 1),
        new(12308, 12319, 1),
        new(12336, 12349, 13),
        new(12448, 12539, 91),
        new(42238, 42239, 1),
        new(42509, 42511, 1),
        new(42611, 42622, 11),
        new(42738, 42743, 1),
        new(43124, 43127, 1),
        new(43214, 43215, 1),
        new(43256, 43258, 1),
        new(43260, 43310, 50),
        new(43311, 43359, 48),
        new(43457, 43469, 1),
        new(43486, 43487, 1),
        new(43612, 43615, 1),
        new(43742, 43743, 1),
        new(43760, 43761, 1),
        new(44011, 64830, 20819),
        new(64831, 65040, 209),
        new(65041, 65049, 1),
        new(65072, 65106, 1),
        new(65108, 65121, 1),
        new(65123, 65128, 5),
        new(65130, 65131, 1),
        new(65281, 65283, 1),
        new(65285, 65290, 1),
        new(65292, 65295, 1),
        new(65306, 65307, 1),
        new(65311, 65312, 1),
        new(65339, 65341, 1),
        new(65343, 65371, 28),
        new(65373, 65375, 2),
        new(65376, 65381, 1)
    }.slice(),
    R32: new Range32[]{
        new(65792, 65794, 1),
        new(66463, 66512, 49),
        new(66927, 67671, 744),
        new(67871, 67903, 32),
        new(68176, 68184, 1),
        new(68223, 68336, 113),
        new(68337, 68342, 1),
        new(68409, 68415, 1),
        new(68505, 68508, 1),
        new(69293, 69461, 168),
        new(69462, 69465, 1),
        new(69510, 69513, 1),
        new(69703, 69709, 1),
        new(69819, 69820, 1),
        new(69822, 69825, 1),
        new(69952, 69955, 1),
        new(70004, 70005, 1),
        new(70085, 70088, 1),
        new(70093, 70107, 14),
        new(70109, 70111, 1),
        new(70200, 70205, 1),
        new(70313, 70731, 418),
        new(70732, 70735, 1),
        new(70746, 70747, 1),
        new(70749, 70854, 105),
        new(71105, 71127, 1),
        new(71233, 71235, 1),
        new(71264, 71276, 1),
        new(71353, 71484, 131),
        new(71485, 71486, 1),
        new(71739, 72004, 265),
        new(72005, 72006, 1),
        new(72162, 72255, 93),
        new(72256, 72262, 1),
        new(72346, 72348, 1),
        new(72350, 72354, 1),
        new(72448, 72457, 1),
        new(72769, 72773, 1),
        new(72816, 72817, 1),
        new(73463, 73464, 1),
        new(73539, 73551, 1),
        new(73727, 74864, 1137),
        new(74865, 74868, 1),
        new(77809, 77810, 1),
        new(92782, 92783, 1),
        new(92917, 92983, 66),
        new(92984, 92987, 1),
        new(92996, 93847, 851),
        new(93848, 93850, 1),
        new(94178, 113823, 19645),
        new(121479, 121483, 1),
        new(125278, 125279, 1)
    }.slice(),
    LatinOffset: 11
));

internal static ж<RangeTable> _Pc = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(95, 8255, 8160),
        new(8256, 8276, 20),
        new(65075, 65076, 1),
        new(65101, 65103, 1),
        new(65343, 65343, 1)
    }.slice()
));

internal static ж<RangeTable> _Pd = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(45, 1418, 1373),
        new(1470, 5120, 3650),
        new(6150, 8208, 2058),
        new(8209, 8213, 1),
        new(11799, 11802, 3),
        new(11834, 11835, 1),
        new(11840, 11869, 29),
        new(12316, 12336, 20),
        new(12448, 65073, 52625),
        new(65074, 65112, 38),
        new(65123, 65293, 170)
    }.slice(),
    R32: new Range32[]{
        new(69293, 69293, 1)
    }.slice()
));

internal static ж<RangeTable> _Pe = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(41, 93, 52),
        new(125, 3899, 3774),
        new(3901, 5788, 1887),
        new(8262, 8318, 56),
        new(8334, 8969, 635),
        new(8971, 9002, 31),
        new(10089, 10101, 2),
        new(10182, 10215, 33),
        new(10217, 10223, 2),
        new(10628, 10648, 2),
        new(10713, 10715, 2),
        new(10749, 11811, 1062),
        new(11813, 11817, 2),
        new(11862, 11868, 2),
        new(12297, 12305, 2),
        new(12309, 12315, 2),
        new(12318, 12319, 1),
        new(64830, 65048, 218),
        new(65078, 65092, 2),
        new(65096, 65114, 18),
        new(65116, 65118, 2),
        new(65289, 65341, 52),
        new(65373, 65379, 3)
    }.slice(),
    LatinOffset: 1
));

internal static ж<RangeTable> _Pf = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(187, 8217, 8030),
        new(8221, 8250, 29),
        new(11779, 11781, 2),
        new(11786, 11789, 3),
        new(11805, 11809, 4)
    }.slice()
));

internal static ж<RangeTable> _Pi = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(171, 8216, 8045),
        new(8219, 8220, 1),
        new(8223, 8249, 26),
        new(11778, 11780, 2),
        new(11785, 11788, 3),
        new(11804, 11808, 4)
    }.slice()
));

internal static ж<RangeTable> _Po = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(33, 35, 1),
        new(37, 39, 1),
        new(42, 46, 2),
        new(47, 58, 11),
        new(59, 63, 4),
        new(64, 92, 28),
        new(161, 167, 6),
        new(182, 183, 1),
        new(191, 894, 703),
        new(903, 1370, 467),
        new(1371, 1375, 1),
        new(1417, 1472, 55),
        new(1475, 1478, 3),
        new(1523, 1524, 1),
        new(1545, 1546, 1),
        new(1548, 1549, 1),
        new(1563, 1565, 2),
        new(1566, 1567, 1),
        new(1642, 1645, 1),
        new(1748, 1792, 44),
        new(1793, 1805, 1),
        new(2039, 2041, 1),
        new(2096, 2110, 1),
        new(2142, 2404, 262),
        new(2405, 2416, 11),
        new(2557, 2678, 121),
        new(2800, 3191, 391),
        new(3204, 3572, 368),
        new(3663, 3674, 11),
        new(3675, 3844, 169),
        new(3845, 3858, 1),
        new(3860, 3973, 113),
        new(4048, 4052, 1),
        new(4057, 4058, 1),
        new(4170, 4175, 1),
        new(4347, 4960, 613),
        new(4961, 4968, 1),
        new(5742, 5867, 125),
        new(5868, 5869, 1),
        new(5941, 5942, 1),
        new(6100, 6102, 1),
        new(6104, 6106, 1),
        new(6144, 6149, 1),
        new(6151, 6154, 1),
        new(6468, 6469, 1),
        new(6686, 6687, 1),
        new(6816, 6822, 1),
        new(6824, 6829, 1),
        new(7002, 7008, 1),
        new(7037, 7038, 1),
        new(7164, 7167, 1),
        new(7227, 7231, 1),
        new(7294, 7295, 1),
        new(7360, 7367, 1),
        new(7379, 8214, 835),
        new(8215, 8224, 9),
        new(8225, 8231, 1),
        new(8240, 8248, 1),
        new(8251, 8254, 1),
        new(8257, 8259, 1),
        new(8263, 8273, 1),
        new(8275, 8277, 2),
        new(8278, 8286, 1),
        new(11513, 11516, 1),
        new(11518, 11519, 1),
        new(11632, 11776, 144),
        new(11777, 11782, 5),
        new(11783, 11784, 1),
        new(11787, 11790, 3),
        new(11791, 11798, 1),
        new(11800, 11801, 1),
        new(11803, 11806, 3),
        new(11807, 11818, 11),
        new(11819, 11822, 1),
        new(11824, 11833, 1),
        new(11836, 11839, 1),
        new(11841, 11843, 2),
        new(11844, 11855, 1),
        new(11858, 11860, 1),
        new(12289, 12291, 1),
        new(12349, 12539, 190),
        new(42238, 42239, 1),
        new(42509, 42511, 1),
        new(42611, 42622, 11),
        new(42738, 42743, 1),
        new(43124, 43127, 1),
        new(43214, 43215, 1),
        new(43256, 43258, 1),
        new(43260, 43310, 50),
        new(43311, 43359, 48),
        new(43457, 43469, 1),
        new(43486, 43487, 1),
        new(43612, 43615, 1),
        new(43742, 43743, 1),
        new(43760, 43761, 1),
        new(44011, 65040, 21029),
        new(65041, 65046, 1),
        new(65049, 65072, 23),
        new(65093, 65094, 1),
        new(65097, 65100, 1),
        new(65104, 65106, 1),
        new(65108, 65111, 1),
        new(65119, 65121, 1),
        new(65128, 65130, 2),
        new(65131, 65281, 150),
        new(65282, 65283, 1),
        new(65285, 65287, 1),
        new(65290, 65294, 2),
        new(65295, 65306, 11),
        new(65307, 65311, 4),
        new(65312, 65340, 28),
        new(65377, 65380, 3),
        new(65381, 65381, 1)
    }.slice(),
    R32: new Range32[]{
        new(65792, 65794, 1),
        new(66463, 66512, 49),
        new(66927, 67671, 744),
        new(67871, 67903, 32),
        new(68176, 68184, 1),
        new(68223, 68336, 113),
        new(68337, 68342, 1),
        new(68409, 68415, 1),
        new(68505, 68508, 1),
        new(69461, 69465, 1),
        new(69510, 69513, 1),
        new(69703, 69709, 1),
        new(69819, 69820, 1),
        new(69822, 69825, 1),
        new(69952, 69955, 1),
        new(70004, 70005, 1),
        new(70085, 70088, 1),
        new(70093, 70107, 14),
        new(70109, 70111, 1),
        new(70200, 70205, 1),
        new(70313, 70731, 418),
        new(70732, 70735, 1),
        new(70746, 70747, 1),
        new(70749, 70854, 105),
        new(71105, 71127, 1),
        new(71233, 71235, 1),
        new(71264, 71276, 1),
        new(71353, 71484, 131),
        new(71485, 71486, 1),
        new(71739, 72004, 265),
        new(72005, 72006, 1),
        new(72162, 72255, 93),
        new(72256, 72262, 1),
        new(72346, 72348, 1),
        new(72350, 72354, 1),
        new(72448, 72457, 1),
        new(72769, 72773, 1),
        new(72816, 72817, 1),
        new(73463, 73464, 1),
        new(73539, 73551, 1),
        new(73727, 74864, 1137),
        new(74865, 74868, 1),
        new(77809, 77810, 1),
        new(92782, 92783, 1),
        new(92917, 92983, 66),
        new(92984, 92987, 1),
        new(92996, 93847, 851),
        new(93848, 93850, 1),
        new(94178, 113823, 19645),
        new(121479, 121483, 1),
        new(125278, 125279, 1)
    }.slice(),
    LatinOffset: 8
));

internal static ж<RangeTable> _Ps = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(40, 91, 51),
        new(123, 3898, 3775),
        new(3900, 5787, 1887),
        new(8218, 8222, 4),
        new(8261, 8317, 56),
        new(8333, 8968, 635),
        new(8970, 9001, 31),
        new(10088, 10100, 2),
        new(10181, 10214, 33),
        new(10216, 10222, 2),
        new(10627, 10647, 2),
        new(10712, 10714, 2),
        new(10748, 11810, 1062),
        new(11812, 11816, 2),
        new(11842, 11861, 19),
        new(11863, 11867, 2),
        new(12296, 12304, 2),
        new(12308, 12314, 2),
        new(12317, 64831, 52514),
        new(65047, 65077, 30),
        new(65079, 65091, 2),
        new(65095, 65113, 18),
        new(65115, 65117, 2),
        new(65288, 65339, 51),
        new(65371, 65375, 4),
        new(65378, 65378, 1)
    }.slice(),
    LatinOffset: 1
));

internal static ж<RangeTable> _S = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(36, 43, 7),
        new(60, 62, 1),
        new(94, 96, 2),
        new(124, 126, 2),
        new(162, 166, 1),
        new(168, 169, 1),
        new(172, 174, 2),
        new(175, 177, 1),
        new(180, 184, 4),
        new(215, 247, 32),
        new(706, 709, 1),
        new(722, 735, 1),
        new(741, 747, 1),
        new(749, 751, 2),
        new(752, 767, 1),
        new(885, 900, 15),
        new(901, 1014, 113),
        new(1154, 1421, 267),
        new(1422, 1423, 1),
        new(1542, 1544, 1),
        new(1547, 1550, 3),
        new(1551, 1758, 207),
        new(1769, 1789, 20),
        new(1790, 2038, 248),
        new(2046, 2047, 1),
        new(2184, 2546, 362),
        new(2547, 2554, 7),
        new(2555, 2801, 246),
        new(2928, 3059, 131),
        new(3060, 3066, 1),
        new(3199, 3407, 208),
        new(3449, 3647, 198),
        new(3841, 3843, 1),
        new(3859, 3861, 2),
        new(3862, 3863, 1),
        new(3866, 3871, 1),
        new(3892, 3896, 2),
        new(4030, 4037, 1),
        new(4039, 4044, 1),
        new(4046, 4047, 1),
        new(4053, 4056, 1),
        new(4254, 4255, 1),
        new(5008, 5017, 1),
        new(5741, 6107, 366),
        new(6464, 6622, 158),
        new(6623, 6655, 1),
        new(7009, 7018, 1),
        new(7028, 7036, 1),
        new(8125, 8127, 2),
        new(8128, 8129, 1),
        new(8141, 8143, 1),
        new(8157, 8159, 1),
        new(8173, 8175, 1),
        new(8189, 8190, 1),
        new(8260, 8274, 14),
        new(8314, 8316, 1),
        new(8330, 8332, 1),
        new(8352, 8384, 1),
        new(8448, 8449, 1),
        new(8451, 8454, 1),
        new(8456, 8457, 1),
        new(8468, 8470, 2),
        new(8471, 8472, 1),
        new(8478, 8483, 1),
        new(8485, 8489, 2),
        new(8494, 8506, 12),
        new(8507, 8512, 5),
        new(8513, 8516, 1),
        new(8522, 8525, 1),
        new(8527, 8586, 59),
        new(8587, 8592, 5),
        new(8593, 8967, 1),
        new(8972, 9000, 1),
        new(9003, 9254, 1),
        new(9280, 9290, 1),
        new(9372, 9449, 1),
        new(9472, 10087, 1),
        new(10132, 10180, 1),
        new(10183, 10213, 1),
        new(10224, 10626, 1),
        new(10649, 10711, 1),
        new(10716, 10747, 1),
        new(10750, 11123, 1),
        new(11126, 11157, 1),
        new(11159, 11263, 1),
        new(11493, 11498, 1),
        new(11856, 11857, 1),
        new(11904, 11929, 1),
        new(11931, 12019, 1),
        new(12032, 12245, 1),
        new(12272, 12283, 1),
        new(12292, 12306, 14),
        new(12307, 12320, 13),
        new(12342, 12343, 1),
        new(12350, 12351, 1),
        new(12443, 12444, 1),
        new(12688, 12689, 1),
        new(12694, 12703, 1),
        new(12736, 12771, 1),
        new(12800, 12830, 1),
        new(12842, 12871, 1),
        new(12880, 12896, 16),
        new(12897, 12927, 1),
        new(12938, 12976, 1),
        new(12992, 13311, 1),
        new(19904, 19967, 1),
        new(42128, 42182, 1),
        new(42752, 42774, 1),
        new(42784, 42785, 1),
        new(42889, 42890, 1),
        new(43048, 43051, 1),
        new(43062, 43065, 1),
        new(43639, 43641, 1),
        new(43867, 43882, 15),
        new(43883, 64297, 20414),
        new(64434, 64450, 1),
        new(64832, 64847, 1),
        new(64975, 65020, 45),
        new(65021, 65023, 1),
        new(65122, 65124, 2),
        new(65125, 65126, 1),
        new(65129, 65284, 155),
        new(65291, 65308, 17),
        new(65309, 65310, 1),
        new(65342, 65344, 2),
        new(65372, 65374, 2),
        new(65504, 65510, 1),
        new(65512, 65518, 1),
        new(65532, 65533, 1)
    }.slice(),
    R32: new Range32[]{
        new(65847, 65855, 1),
        new(65913, 65929, 1),
        new(65932, 65934, 1),
        new(65936, 65948, 1),
        new(65952, 66000, 48),
        new(66001, 66044, 1),
        new(67703, 67704, 1),
        new(68296, 71487, 3191),
        new(73685, 73713, 1),
        new(92988, 92991, 1),
        new(92997, 113820, 20823),
        new(118608, 118723, 1),
        new(118784, 119029, 1),
        new(119040, 119078, 1),
        new(119081, 119140, 1),
        new(119146, 119148, 1),
        new(119171, 119172, 1),
        new(119180, 119209, 1),
        new(119214, 119274, 1),
        new(119296, 119361, 1),
        new(119365, 119552, 187),
        new(119553, 119638, 1),
        new(120513, 120539, 26),
        new(120571, 120597, 26),
        new(120629, 120655, 26),
        new(120687, 120713, 26),
        new(120745, 120771, 26),
        new(120832, 121343, 1),
        new(121399, 121402, 1),
        new(121453, 121460, 1),
        new(121462, 121475, 1),
        new(121477, 121478, 1),
        new(123215, 123647, 432),
        new(126124, 126128, 4),
        new(126254, 126704, 450),
        new(126705, 126976, 271),
        new(126977, 127019, 1),
        new(127024, 127123, 1),
        new(127136, 127150, 1),
        new(127153, 127167, 1),
        new(127169, 127183, 1),
        new(127185, 127221, 1),
        new(127245, 127405, 1),
        new(127462, 127490, 1),
        new(127504, 127547, 1),
        new(127552, 127560, 1),
        new(127568, 127569, 1),
        new(127584, 127589, 1),
        new(127744, 128727, 1),
        new(128732, 128748, 1),
        new(128752, 128764, 1),
        new(128768, 128886, 1),
        new(128891, 128985, 1),
        new(128992, 129003, 1),
        new(129008, 129024, 16),
        new(129025, 129035, 1),
        new(129040, 129095, 1),
        new(129104, 129113, 1),
        new(129120, 129159, 1),
        new(129168, 129197, 1),
        new(129200, 129201, 1),
        new(129280, 129619, 1),
        new(129632, 129645, 1),
        new(129648, 129660, 1),
        new(129664, 129672, 1),
        new(129680, 129725, 1),
        new(129727, 129733, 1),
        new(129742, 129755, 1),
        new(129760, 129768, 1),
        new(129776, 129784, 1),
        new(129792, 129938, 1),
        new(129940, 129994, 1)
    }.slice(),
    LatinOffset: 10
));

internal static ж<RangeTable> _Sc = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(36, 162, 126),
        new(163, 165, 1),
        new(1423, 1547, 124),
        new(2046, 2047, 1),
        new(2546, 2547, 1),
        new(2555, 2801, 246),
        new(3065, 3647, 582),
        new(6107, 8352, 2245),
        new(8353, 8384, 1),
        new(43064, 65020, 21956),
        new(65129, 65284, 155),
        new(65504, 65505, 1),
        new(65509, 65510, 1)
    }.slice(),
    R32: new Range32[]{
        new(73693, 73696, 1),
        new(123647, 126128, 2481)
    }.slice(),
    LatinOffset: 2
));

internal static ж<RangeTable> _Sk = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(94, 96, 2),
        new(168, 175, 7),
        new(180, 184, 4),
        new(706, 709, 1),
        new(722, 735, 1),
        new(741, 747, 1),
        new(749, 751, 2),
        new(752, 767, 1),
        new(885, 900, 15),
        new(901, 2184, 1283),
        new(8125, 8127, 2),
        new(8128, 8129, 1),
        new(8141, 8143, 1),
        new(8157, 8159, 1),
        new(8173, 8175, 1),
        new(8189, 8190, 1),
        new(12443, 12444, 1),
        new(42752, 42774, 1),
        new(42784, 42785, 1),
        new(42889, 42890, 1),
        new(43867, 43882, 15),
        new(43883, 64434, 20551),
        new(64435, 64450, 1),
        new(65342, 65344, 2),
        new(65507, 65507, 1)
    }.slice(),
    R32: new Range32[]{
        new(127995, 127999, 1)
    }.slice(),
    LatinOffset: 3
));

internal static ж<RangeTable> _Sm = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(43, 60, 17),
        new(61, 62, 1),
        new(124, 126, 2),
        new(172, 177, 5),
        new(215, 247, 32),
        new(1014, 1542, 528),
        new(1543, 1544, 1),
        new(8260, 8274, 14),
        new(8314, 8316, 1),
        new(8330, 8332, 1),
        new(8472, 8512, 40),
        new(8513, 8516, 1),
        new(8523, 8592, 69),
        new(8593, 8596, 1),
        new(8602, 8603, 1),
        new(8608, 8614, 3),
        new(8622, 8654, 32),
        new(8655, 8658, 3),
        new(8660, 8692, 32),
        new(8693, 8959, 1),
        new(8992, 8993, 1),
        new(9084, 9115, 31),
        new(9116, 9139, 1),
        new(9180, 9185, 1),
        new(9655, 9665, 10),
        new(9720, 9727, 1),
        new(9839, 10176, 337),
        new(10177, 10180, 1),
        new(10183, 10213, 1),
        new(10224, 10239, 1),
        new(10496, 10626, 1),
        new(10649, 10711, 1),
        new(10716, 10747, 1),
        new(10750, 11007, 1),
        new(11056, 11076, 1),
        new(11079, 11084, 1),
        new(64297, 65122, 825),
        new(65124, 65126, 1),
        new(65291, 65308, 17),
        new(65309, 65310, 1),
        new(65372, 65374, 2),
        new(65506, 65513, 7),
        new(65514, 65516, 1)
    }.slice(),
    R32: new Range32[]{
        new(120513, 120539, 26),
        new(120571, 120597, 26),
        new(120629, 120655, 26),
        new(120687, 120713, 26),
        new(120745, 120771, 26),
        new(126704, 126705, 1)
    }.slice(),
    LatinOffset: 5
));

internal static ж<RangeTable> _So = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(166, 169, 3),
        new(174, 176, 2),
        new(1154, 1421, 267),
        new(1422, 1550, 128),
        new(1551, 1758, 207),
        new(1769, 1789, 20),
        new(1790, 2038, 248),
        new(2554, 2928, 374),
        new(3059, 3064, 1),
        new(3066, 3199, 133),
        new(3407, 3449, 42),
        new(3841, 3843, 1),
        new(3859, 3861, 2),
        new(3862, 3863, 1),
        new(3866, 3871, 1),
        new(3892, 3896, 2),
        new(4030, 4037, 1),
        new(4039, 4044, 1),
        new(4046, 4047, 1),
        new(4053, 4056, 1),
        new(4254, 4255, 1),
        new(5008, 5017, 1),
        new(5741, 6464, 723),
        new(6622, 6655, 1),
        new(7009, 7018, 1),
        new(7028, 7036, 1),
        new(8448, 8449, 1),
        new(8451, 8454, 1),
        new(8456, 8457, 1),
        new(8468, 8470, 2),
        new(8471, 8478, 7),
        new(8479, 8483, 1),
        new(8485, 8489, 2),
        new(8494, 8506, 12),
        new(8507, 8522, 15),
        new(8524, 8525, 1),
        new(8527, 8586, 59),
        new(8587, 8597, 10),
        new(8598, 8601, 1),
        new(8604, 8607, 1),
        new(8609, 8610, 1),
        new(8612, 8613, 1),
        new(8615, 8621, 1),
        new(8623, 8653, 1),
        new(8656, 8657, 1),
        new(8659, 8661, 2),
        new(8662, 8691, 1),
        new(8960, 8967, 1),
        new(8972, 8991, 1),
        new(8994, 9000, 1),
        new(9003, 9083, 1),
        new(9085, 9114, 1),
        new(9140, 9179, 1),
        new(9186, 9254, 1),
        new(9280, 9290, 1),
        new(9372, 9449, 1),
        new(9472, 9654, 1),
        new(9656, 9664, 1),
        new(9666, 9719, 1),
        new(9728, 9838, 1),
        new(9840, 10087, 1),
        new(10132, 10175, 1),
        new(10240, 10495, 1),
        new(11008, 11055, 1),
        new(11077, 11078, 1),
        new(11085, 11123, 1),
        new(11126, 11157, 1),
        new(11159, 11263, 1),
        new(11493, 11498, 1),
        new(11856, 11857, 1),
        new(11904, 11929, 1),
        new(11931, 12019, 1),
        new(12032, 12245, 1),
        new(12272, 12283, 1),
        new(12292, 12306, 14),
        new(12307, 12320, 13),
        new(12342, 12343, 1),
        new(12350, 12351, 1),
        new(12688, 12689, 1),
        new(12694, 12703, 1),
        new(12736, 12771, 1),
        new(12800, 12830, 1),
        new(12842, 12871, 1),
        new(12880, 12896, 16),
        new(12897, 12927, 1),
        new(12938, 12976, 1),
        new(12992, 13311, 1),
        new(19904, 19967, 1),
        new(42128, 42182, 1),
        new(43048, 43051, 1),
        new(43062, 43063, 1),
        new(43065, 43639, 574),
        new(43640, 43641, 1),
        new(64832, 64847, 1),
        new(64975, 65021, 46),
        new(65022, 65023, 1),
        new(65508, 65512, 4),
        new(65517, 65518, 1),
        new(65532, 65533, 1)
    }.slice(),
    R32: new Range32[]{
        new(65847, 65855, 1),
        new(65913, 65929, 1),
        new(65932, 65934, 1),
        new(65936, 65948, 1),
        new(65952, 66000, 48),
        new(66001, 66044, 1),
        new(67703, 67704, 1),
        new(68296, 71487, 3191),
        new(73685, 73692, 1),
        new(73697, 73713, 1),
        new(92988, 92991, 1),
        new(92997, 113820, 20823),
        new(118608, 118723, 1),
        new(118784, 119029, 1),
        new(119040, 119078, 1),
        new(119081, 119140, 1),
        new(119146, 119148, 1),
        new(119171, 119172, 1),
        new(119180, 119209, 1),
        new(119214, 119274, 1),
        new(119296, 119361, 1),
        new(119365, 119552, 187),
        new(119553, 119638, 1),
        new(120832, 121343, 1),
        new(121399, 121402, 1),
        new(121453, 121460, 1),
        new(121462, 121475, 1),
        new(121477, 121478, 1),
        new(123215, 126124, 2909),
        new(126254, 126976, 722),
        new(126977, 127019, 1),
        new(127024, 127123, 1),
        new(127136, 127150, 1),
        new(127153, 127167, 1),
        new(127169, 127183, 1),
        new(127185, 127221, 1),
        new(127245, 127405, 1),
        new(127462, 127490, 1),
        new(127504, 127547, 1),
        new(127552, 127560, 1),
        new(127568, 127569, 1),
        new(127584, 127589, 1),
        new(127744, 127994, 1),
        new(128000, 128727, 1),
        new(128732, 128748, 1),
        new(128752, 128764, 1),
        new(128768, 128886, 1),
        new(128891, 128985, 1),
        new(128992, 129003, 1),
        new(129008, 129024, 16),
        new(129025, 129035, 1),
        new(129040, 129095, 1),
        new(129104, 129113, 1),
        new(129120, 129159, 1),
        new(129168, 129197, 1),
        new(129200, 129201, 1),
        new(129280, 129619, 1),
        new(129632, 129645, 1),
        new(129648, 129660, 1),
        new(129664, 129672, 1),
        new(129680, 129725, 1),
        new(129727, 129733, 1),
        new(129742, 129755, 1),
        new(129760, 129768, 1),
        new(129776, 129784, 1),
        new(129792, 129938, 1),
        new(129940, 129994, 1)
    }.slice(),
    LatinOffset: 2
));

internal static ж<RangeTable> _Z = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(32, 160, 128),
        new(5760, 8192, 2432),
        new(8193, 8202, 1),
        new(8232, 8233, 1),
        new(8239, 8287, 48),
        new(12288, 12288, 1)
    }.slice(),
    LatinOffset: 1
));

internal static ж<RangeTable> _Zl = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(8232, 8232, 1)
    }.slice()
));

internal static ж<RangeTable> _Zp = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(8233, 8233, 1)
    }.slice()
));

internal static ж<RangeTable> _Zs = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(32, 160, 128),
        new(5760, 8192, 2432),
        new(8193, 8202, 1),
        new(8239, 8287, 48),
        new(12288, 12288, 1)
    }.slice(),
    LatinOffset: 1
));

// These variables have type *RangeTable.
public static ж<RangeTable> Cc = _Cc; // Cc is the set of Unicode characters in category Cc (Other, control).

public static ж<RangeTable> Cf = _Cf; // Cf is the set of Unicode characters in category Cf (Other, format).

public static ж<RangeTable> Co = _Co; // Co is the set of Unicode characters in category Co (Other, private use).

public static ж<RangeTable> Cs = _Cs; // Cs is the set of Unicode characters in category Cs (Other, surrogate).

public static ж<RangeTable> Digit = _Nd; // Digit is the set of Unicode characters with the "decimal digit" property.

public static ж<RangeTable> Nd = _Nd; // Nd is the set of Unicode characters in category Nd (Number, decimal digit).

public static ж<RangeTable> Letter = _L; // Letter/L is the set of Unicode letters, category L.

public static ж<RangeTable> L = _L;

public static ж<RangeTable> Lm = _Lm; // Lm is the set of Unicode characters in category Lm (Letter, modifier).

public static ж<RangeTable> Lo = _Lo; // Lo is the set of Unicode characters in category Lo (Letter, other).

public static ж<RangeTable> Lower = _Ll; // Lower is the set of Unicode lower case letters.

public static ж<RangeTable> Ll = _Ll; // Ll is the set of Unicode characters in category Ll (Letter, lowercase).

public static ж<RangeTable> Mark = _M; // Mark/M is the set of Unicode mark characters, category M.

public static ж<RangeTable> M = _M;

public static ж<RangeTable> Mc = _Mc; // Mc is the set of Unicode characters in category Mc (Mark, spacing combining).

public static ж<RangeTable> Me = _Me; // Me is the set of Unicode characters in category Me (Mark, enclosing).

public static ж<RangeTable> Mn = _Mn; // Mn is the set of Unicode characters in category Mn (Mark, nonspacing).

public static ж<RangeTable> Nl = _Nl; // Nl is the set of Unicode characters in category Nl (Number, letter).

public static ж<RangeTable> No = _No; // No is the set of Unicode characters in category No (Number, other).

public static ж<RangeTable> Number = _N; // Number/N is the set of Unicode number characters, category N.

public static ж<RangeTable> N = _N;

public static ж<RangeTable> Other = _C; // Other/C is the set of Unicode control and special characters, category C.

public static ж<RangeTable> C = _C;

public static ж<RangeTable> Pc = _Pc; // Pc is the set of Unicode characters in category Pc (Punctuation, connector).

public static ж<RangeTable> Pd = _Pd; // Pd is the set of Unicode characters in category Pd (Punctuation, dash).

public static ж<RangeTable> Pe = _Pe; // Pe is the set of Unicode characters in category Pe (Punctuation, close).

public static ж<RangeTable> Pf = _Pf; // Pf is the set of Unicode characters in category Pf (Punctuation, final quote).

public static ж<RangeTable> Pi = _Pi; // Pi is the set of Unicode characters in category Pi (Punctuation, initial quote).

public static ж<RangeTable> Po = _Po; // Po is the set of Unicode characters in category Po (Punctuation, other).

public static ж<RangeTable> Ps = _Ps; // Ps is the set of Unicode characters in category Ps (Punctuation, open).

public static ж<RangeTable> Punct = _P; // Punct/P is the set of Unicode punctuation characters, category P.

public static ж<RangeTable> P = _P;

public static ж<RangeTable> Sc = _Sc; // Sc is the set of Unicode characters in category Sc (Symbol, currency).

public static ж<RangeTable> Sk = _Sk; // Sk is the set of Unicode characters in category Sk (Symbol, modifier).

public static ж<RangeTable> Sm = _Sm; // Sm is the set of Unicode characters in category Sm (Symbol, math).

public static ж<RangeTable> So = _So; // So is the set of Unicode characters in category So (Symbol, other).

public static ж<RangeTable> Space = _Z; // Space/Z is the set of Unicode space characters, category Z.

public static ж<RangeTable> Z = _Z;

public static ж<RangeTable> Symbol = _S; // Symbol/S is the set of Unicode symbol characters, category S.

public static ж<RangeTable> S = _S;

public static ж<RangeTable> Title = _Lt; // Title is the set of Unicode title case letters.

public static ж<RangeTable> Lt = _Lt; // Lt is the set of Unicode characters in category Lt (Letter, titlecase).

public static ж<RangeTable> Upper = _Lu; // Upper is the set of Unicode upper case letters.

public static ж<RangeTable> Lu = _Lu; // Lu is the set of Unicode characters in category Lu (Letter, uppercase).

public static ж<RangeTable> Zl = _Zl; // Zl is the set of Unicode characters in category Zl (Separator, line).

public static ж<RangeTable> Zp = _Zp; // Zp is the set of Unicode characters in category Zp (Separator, paragraph).

public static ж<RangeTable> Zs = _Zs; // Zs is the set of Unicode characters in category Zs (Separator, space).

// Scripts is the set of Unicode script tables.
public static map<@string, ж<RangeTable>> Scripts = new map<@string, ж<RangeTable>>{
    ["Adlam"u8] = Adlam,
    ["Ahom"u8] = Ahom,
    ["Anatolian_Hieroglyphs"u8] = Anatolian_Hieroglyphs,
    ["Arabic"u8] = Arabic,
    ["Armenian"u8] = Armenian,
    ["Avestan"u8] = Avestan,
    ["Balinese"u8] = Balinese,
    ["Bamum"u8] = Bamum,
    ["Bassa_Vah"u8] = Bassa_Vah,
    ["Batak"u8] = Batak,
    ["Bengali"u8] = Bengali,
    ["Bhaiksuki"u8] = Bhaiksuki,
    ["Bopomofo"u8] = Bopomofo,
    ["Brahmi"u8] = Brahmi,
    ["Braille"u8] = Braille,
    ["Buginese"u8] = Buginese,
    ["Buhid"u8] = Buhid,
    ["Canadian_Aboriginal"u8] = Canadian_Aboriginal,
    ["Carian"u8] = Carian,
    ["Caucasian_Albanian"u8] = Caucasian_Albanian,
    ["Chakma"u8] = Chakma,
    ["Cham"u8] = Cham,
    ["Cherokee"u8] = Cherokee,
    ["Chorasmian"u8] = Chorasmian,
    ["Common"u8] = Common,
    ["Coptic"u8] = Coptic,
    ["Cuneiform"u8] = Cuneiform,
    ["Cypriot"u8] = Cypriot,
    ["Cypro_Minoan"u8] = Cypro_Minoan,
    ["Cyrillic"u8] = Cyrillic,
    ["Deseret"u8] = Deseret,
    ["Devanagari"u8] = Devanagari,
    ["Dives_Akuru"u8] = Dives_Akuru,
    ["Dogra"u8] = Dogra,
    ["Duployan"u8] = Duployan,
    ["Egyptian_Hieroglyphs"u8] = Egyptian_Hieroglyphs,
    ["Elbasan"u8] = Elbasan,
    ["Elymaic"u8] = Elymaic,
    ["Ethiopic"u8] = Ethiopic,
    ["Georgian"u8] = Georgian,
    ["Glagolitic"u8] = Glagolitic,
    ["Gothic"u8] = Gothic,
    ["Grantha"u8] = Grantha,
    ["Greek"u8] = Greek,
    ["Gujarati"u8] = Gujarati,
    ["Gunjala_Gondi"u8] = Gunjala_Gondi,
    ["Gurmukhi"u8] = Gurmukhi,
    ["Han"u8] = Han,
    ["Hangul"u8] = Hangul,
    ["Hanifi_Rohingya"u8] = Hanifi_Rohingya,
    ["Hanunoo"u8] = Hanunoo,
    ["Hatran"u8] = Hatran,
    ["Hebrew"u8] = Hebrew,
    ["Hiragana"u8] = Hiragana,
    ["Imperial_Aramaic"u8] = Imperial_Aramaic,
    ["Inherited"u8] = Inherited,
    ["Inscriptional_Pahlavi"u8] = Inscriptional_Pahlavi,
    ["Inscriptional_Parthian"u8] = Inscriptional_Parthian,
    ["Javanese"u8] = Javanese,
    ["Kaithi"u8] = Kaithi,
    ["Kannada"u8] = Kannada,
    ["Katakana"u8] = Katakana,
    ["Kawi"u8] = Kawi,
    ["Kayah_Li"u8] = Kayah_Li,
    ["Kharoshthi"u8] = Kharoshthi,
    ["Khitan_Small_Script"u8] = Khitan_Small_Script,
    ["Khmer"u8] = Khmer,
    ["Khojki"u8] = Khojki,
    ["Khudawadi"u8] = Khudawadi,
    ["Lao"u8] = Lao,
    ["Latin"u8] = Latin,
    ["Lepcha"u8] = Lepcha,
    ["Limbu"u8] = Limbu,
    ["Linear_A"u8] = Linear_A,
    ["Linear_B"u8] = Linear_B,
    ["Lisu"u8] = Lisu,
    ["Lycian"u8] = Lycian,
    ["Lydian"u8] = Lydian,
    ["Mahajani"u8] = Mahajani,
    ["Makasar"u8] = Makasar,
    ["Malayalam"u8] = Malayalam,
    ["Mandaic"u8] = Mandaic,
    ["Manichaean"u8] = Manichaean,
    ["Marchen"u8] = Marchen,
    ["Masaram_Gondi"u8] = Masaram_Gondi,
    ["Medefaidrin"u8] = Medefaidrin,
    ["Meetei_Mayek"u8] = Meetei_Mayek,
    ["Mende_Kikakui"u8] = Mende_Kikakui,
    ["Meroitic_Cursive"u8] = Meroitic_Cursive,
    ["Meroitic_Hieroglyphs"u8] = Meroitic_Hieroglyphs,
    ["Miao"u8] = Miao,
    ["Modi"u8] = Modi,
    ["Mongolian"u8] = Mongolian,
    ["Mro"u8] = Mro,
    ["Multani"u8] = Multani,
    ["Myanmar"u8] = Myanmar,
    ["Nabataean"u8] = Nabataean,
    ["Nag_Mundari"u8] = Nag_Mundari,
    ["Nandinagari"u8] = Nandinagari,
    ["New_Tai_Lue"u8] = New_Tai_Lue,
    ["Newa"u8] = Newa,
    ["Nko"u8] = Nko,
    ["Nushu"u8] = Nushu,
    ["Nyiakeng_Puachue_Hmong"u8] = Nyiakeng_Puachue_Hmong,
    ["Ogham"u8] = Ogham,
    ["Ol_Chiki"u8] = Ol_Chiki,
    ["Old_Hungarian"u8] = Old_Hungarian,
    ["Old_Italic"u8] = Old_Italic,
    ["Old_North_Arabian"u8] = Old_North_Arabian,
    ["Old_Permic"u8] = Old_Permic,
    ["Old_Persian"u8] = Old_Persian,
    ["Old_Sogdian"u8] = Old_Sogdian,
    ["Old_South_Arabian"u8] = Old_South_Arabian,
    ["Old_Turkic"u8] = Old_Turkic,
    ["Old_Uyghur"u8] = Old_Uyghur,
    ["Oriya"u8] = Oriya,
    ["Osage"u8] = Osage,
    ["Osmanya"u8] = Osmanya,
    ["Pahawh_Hmong"u8] = Pahawh_Hmong,
    ["Palmyrene"u8] = Palmyrene,
    ["Pau_Cin_Hau"u8] = Pau_Cin_Hau,
    ["Phags_Pa"u8] = Phags_Pa,
    ["Phoenician"u8] = Phoenician,
    ["Psalter_Pahlavi"u8] = Psalter_Pahlavi,
    ["Rejang"u8] = Rejang,
    ["Runic"u8] = Runic,
    ["Samaritan"u8] = Samaritan,
    ["Saurashtra"u8] = Saurashtra,
    ["Sharada"u8] = Sharada,
    ["Shavian"u8] = Shavian,
    ["Siddham"u8] = Siddham,
    ["SignWriting"u8] = SignWriting,
    ["Sinhala"u8] = Sinhala,
    ["Sogdian"u8] = Sogdian,
    ["Sora_Sompeng"u8] = Sora_Sompeng,
    ["Soyombo"u8] = Soyombo,
    ["Sundanese"u8] = Sundanese,
    ["Syloti_Nagri"u8] = Syloti_Nagri,
    ["Syriac"u8] = Syriac,
    ["Tagalog"u8] = Tagalog,
    ["Tagbanwa"u8] = Tagbanwa,
    ["Tai_Le"u8] = Tai_Le,
    ["Tai_Tham"u8] = Tai_Tham,
    ["Tai_Viet"u8] = Tai_Viet,
    ["Takri"u8] = Takri,
    ["Tamil"u8] = Tamil,
    ["Tangsa"u8] = Tangsa,
    ["Tangut"u8] = Tangut,
    ["Telugu"u8] = Telugu,
    ["Thaana"u8] = Thaana,
    ["Thai"u8] = Thai,
    ["Tibetan"u8] = Tibetan,
    ["Tifinagh"u8] = Tifinagh,
    ["Tirhuta"u8] = Tirhuta,
    ["Toto"u8] = Toto,
    ["Ugaritic"u8] = Ugaritic,
    ["Vai"u8] = Vai,
    ["Vithkuqi"u8] = Vithkuqi,
    ["Wancho"u8] = Wancho,
    ["Warang_Citi"u8] = Warang_Citi,
    ["Yezidi"u8] = Yezidi,
    ["Yi"u8] = Yi,
    ["Zanabazar_Square"u8] = Zanabazar_Square
};

internal static ж<RangeTable> _Adlam = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(125184, 125259, 1),
        new(125264, 125273, 1),
        new(125278, 125279, 1)
    }.slice()
));

internal static ж<RangeTable> _Ahom = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(71424, 71450, 1),
        new(71453, 71467, 1),
        new(71472, 71494, 1)
    }.slice()
));

internal static ж<RangeTable> _Anatolian_Hieroglyphs = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(82944, 83526, 1)
    }.slice()
));

internal static ж<RangeTable> _Arabic = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(1536, 1540, 1),
        new(1542, 1547, 1),
        new(1549, 1562, 1),
        new(1564, 1566, 1),
        new(1568, 1599, 1),
        new(1601, 1610, 1),
        new(1622, 1647, 1),
        new(1649, 1756, 1),
        new(1758, 1791, 1),
        new(1872, 1919, 1),
        new(2160, 2190, 1),
        new(2192, 2193, 1),
        new(2200, 2273, 1),
        new(2275, 2303, 1),
        new(64336, 64450, 1),
        new(64467, 64829, 1),
        new(64832, 64911, 1),
        new(64914, 64967, 1),
        new(64975, 65008, 33),
        new(65009, 65023, 1),
        new(65136, 65140, 1),
        new(65142, 65276, 1)
    }.slice(),
    R32: new Range32[]{
        new(69216, 69246, 1),
        new(69373, 69375, 1),
        new(126464, 126467, 1),
        new(126469, 126495, 1),
        new(126497, 126498, 1),
        new(126500, 126503, 3),
        new(126505, 126514, 1),
        new(126516, 126519, 1),
        new(126521, 126523, 2),
        new(126530, 126535, 5),
        new(126537, 126541, 2),
        new(126542, 126543, 1),
        new(126545, 126546, 1),
        new(126548, 126551, 3),
        new(126553, 126561, 2),
        new(126562, 126564, 2),
        new(126567, 126570, 1),
        new(126572, 126578, 1),
        new(126580, 126583, 1),
        new(126585, 126588, 1),
        new(126590, 126592, 2),
        new(126593, 126601, 1),
        new(126603, 126619, 1),
        new(126625, 126627, 1),
        new(126629, 126633, 1),
        new(126635, 126651, 1),
        new(126704, 126705, 1)
    }.slice()
));

internal static ж<RangeTable> _Armenian = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(1329, 1366, 1),
        new(1369, 1418, 1),
        new(1421, 1423, 1),
        new(64275, 64279, 1)
    }.slice()
));

internal static ж<RangeTable> _Avestan = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(68352, 68405, 1),
        new(68409, 68415, 1)
    }.slice()
));

internal static ж<RangeTable> _Balinese = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(6912, 6988, 1),
        new(6992, 7038, 1)
    }.slice()
));

internal static ж<RangeTable> _Bamum = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(42656, 42743, 1)
    }.slice(),
    R32: new Range32[]{
        new(92160, 92728, 1)
    }.slice()
));

internal static ж<RangeTable> _Bassa_Vah = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(92880, 92909, 1),
        new(92912, 92917, 1)
    }.slice()
));

internal static ж<RangeTable> _Batak = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(7104, 7155, 1),
        new(7164, 7167, 1)
    }.slice()
));

internal static ж<RangeTable> _Bengali = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(2432, 2435, 1),
        new(2437, 2444, 1),
        new(2447, 2448, 1),
        new(2451, 2472, 1),
        new(2474, 2480, 1),
        new(2482, 2486, 4),
        new(2487, 2489, 1),
        new(2492, 2500, 1),
        new(2503, 2504, 1),
        new(2507, 2510, 1),
        new(2519, 2524, 5),
        new(2525, 2527, 2),
        new(2528, 2531, 1),
        new(2534, 2558, 1)
    }.slice()
));

internal static ж<RangeTable> _Bhaiksuki = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(72704, 72712, 1),
        new(72714, 72758, 1),
        new(72760, 72773, 1),
        new(72784, 72812, 1)
    }.slice()
));

internal static ж<RangeTable> _Bopomofo = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(746, 747, 1),
        new(12549, 12591, 1),
        new(12704, 12735, 1)
    }.slice()
));

internal static ж<RangeTable> _Brahmi = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(69632, 69709, 1),
        new(69714, 69749, 1),
        new(69759, 69759, 1)
    }.slice()
));

internal static ж<RangeTable> _Braille = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(10240, 10495, 1)
    }.slice()
));

internal static ж<RangeTable> _Buginese = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(6656, 6683, 1),
        new(6686, 6687, 1)
    }.slice()
));

internal static ж<RangeTable> _Buhid = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(5952, 5971, 1)
    }.slice()
));

internal static ж<RangeTable> _Canadian_Aboriginal = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(5120, 5759, 1),
        new(6320, 6389, 1)
    }.slice(),
    R32: new Range32[]{
        new(72368, 72383, 1)
    }.slice()
));

internal static ж<RangeTable> _Carian = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(66208, 66256, 1)
    }.slice()
));

internal static ж<RangeTable> _Caucasian_Albanian = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(66864, 66915, 1),
        new(66927, 66927, 1)
    }.slice()
));

internal static ж<RangeTable> _Chakma = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(69888, 69940, 1),
        new(69942, 69959, 1)
    }.slice()
));

internal static ж<RangeTable> _Cham = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(43520, 43574, 1),
        new(43584, 43597, 1),
        new(43600, 43609, 1),
        new(43612, 43615, 1)
    }.slice()
));

internal static ж<RangeTable> _Cherokee = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(5024, 5109, 1),
        new(5112, 5117, 1),
        new(43888, 43967, 1)
    }.slice()
));

internal static ж<RangeTable> _Chorasmian = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(69552, 69579, 1)
    }.slice()
));

internal static ж<RangeTable> _Common = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(0, 64, 1),
        new(91, 96, 1),
        new(123, 169, 1),
        new(171, 185, 1),
        new(187, 191, 1),
        new(215, 247, 32),
        new(697, 735, 1),
        new(741, 745, 1),
        new(748, 767, 1),
        new(884, 894, 10),
        new(901, 903, 2),
        new(1541, 1548, 7),
        new(1563, 1567, 4),
        new(1600, 1757, 157),
        new(2274, 2404, 130),
        new(2405, 3647, 1242),
        new(4053, 4056, 1),
        new(4347, 5867, 1520),
        new(5868, 5869, 1),
        new(5941, 5942, 1),
        new(6146, 6147, 1),
        new(6149, 7379, 1230),
        new(7393, 7401, 8),
        new(7402, 7404, 1),
        new(7406, 7411, 1),
        new(7413, 7415, 1),
        new(7418, 8192, 774),
        new(8193, 8203, 1),
        new(8206, 8292, 1),
        new(8294, 8304, 1),
        new(8308, 8318, 1),
        new(8320, 8334, 1),
        new(8352, 8384, 1),
        new(8448, 8485, 1),
        new(8487, 8489, 1),
        new(8492, 8497, 1),
        new(8499, 8525, 1),
        new(8527, 8543, 1),
        new(8585, 8587, 1),
        new(8592, 9254, 1),
        new(9280, 9290, 1),
        new(9312, 10239, 1),
        new(10496, 11123, 1),
        new(11126, 11157, 1),
        new(11159, 11263, 1),
        new(11776, 11869, 1),
        new(12272, 12283, 1),
        new(12288, 12292, 1),
        new(12294, 12296, 2),
        new(12297, 12320, 1),
        new(12336, 12343, 1),
        new(12348, 12351, 1),
        new(12443, 12444, 1),
        new(12448, 12539, 91),
        new(12540, 12688, 148),
        new(12689, 12703, 1),
        new(12736, 12771, 1),
        new(12832, 12895, 1),
        new(12927, 13007, 1),
        new(13055, 13144, 89),
        new(13145, 13311, 1),
        new(19904, 19967, 1),
        new(42752, 42785, 1),
        new(42888, 42890, 1),
        new(43056, 43065, 1),
        new(43310, 43471, 161),
        new(43867, 43882, 15),
        new(43883, 64830, 20947),
        new(64831, 65040, 209),
        new(65041, 65049, 1),
        new(65072, 65106, 1),
        new(65108, 65126, 1),
        new(65128, 65131, 1),
        new(65279, 65281, 2),
        new(65282, 65312, 1),
        new(65339, 65344, 1),
        new(65371, 65381, 1),
        new(65392, 65438, 46),
        new(65439, 65504, 65),
        new(65505, 65510, 1),
        new(65512, 65518, 1),
        new(65529, 65533, 1)
    }.slice(),
    R32: new Range32[]{
        new(65792, 65794, 1),
        new(65799, 65843, 1),
        new(65847, 65855, 1),
        new(65936, 65948, 1),
        new(66000, 66044, 1),
        new(66273, 66299, 1),
        new(113824, 113827, 1),
        new(118608, 118723, 1),
        new(118784, 119029, 1),
        new(119040, 119078, 1),
        new(119081, 119142, 1),
        new(119146, 119162, 1),
        new(119171, 119172, 1),
        new(119180, 119209, 1),
        new(119214, 119274, 1),
        new(119488, 119507, 1),
        new(119520, 119539, 1),
        new(119552, 119638, 1),
        new(119648, 119672, 1),
        new(119808, 119892, 1),
        new(119894, 119964, 1),
        new(119966, 119967, 1),
        new(119970, 119973, 3),
        new(119974, 119977, 3),
        new(119978, 119980, 1),
        new(119982, 119993, 1),
        new(119995, 119997, 2),
        new(119998, 120003, 1),
        new(120005, 120069, 1),
        new(120071, 120074, 1),
        new(120077, 120084, 1),
        new(120086, 120092, 1),
        new(120094, 120121, 1),
        new(120123, 120126, 1),
        new(120128, 120132, 1),
        new(120134, 120138, 4),
        new(120139, 120144, 1),
        new(120146, 120485, 1),
        new(120488, 120779, 1),
        new(120782, 120831, 1),
        new(126065, 126132, 1),
        new(126209, 126269, 1),
        new(126976, 127019, 1),
        new(127024, 127123, 1),
        new(127136, 127150, 1),
        new(127153, 127167, 1),
        new(127169, 127183, 1),
        new(127185, 127221, 1),
        new(127232, 127405, 1),
        new(127462, 127487, 1),
        new(127489, 127490, 1),
        new(127504, 127547, 1),
        new(127552, 127560, 1),
        new(127568, 127569, 1),
        new(127584, 127589, 1),
        new(127744, 128727, 1),
        new(128732, 128748, 1),
        new(128752, 128764, 1),
        new(128768, 128886, 1),
        new(128891, 128985, 1),
        new(128992, 129003, 1),
        new(129008, 129024, 16),
        new(129025, 129035, 1),
        new(129040, 129095, 1),
        new(129104, 129113, 1),
        new(129120, 129159, 1),
        new(129168, 129197, 1),
        new(129200, 129201, 1),
        new(129280, 129619, 1),
        new(129632, 129645, 1),
        new(129648, 129660, 1),
        new(129664, 129672, 1),
        new(129680, 129725, 1),
        new(129727, 129733, 1),
        new(129742, 129755, 1),
        new(129760, 129768, 1),
        new(129776, 129784, 1),
        new(129792, 129938, 1),
        new(129940, 129994, 1),
        new(130032, 130041, 1),
        new(917505, 917536, 31),
        new(917537, 917631, 1)
    }.slice(),
    LatinOffset: 6
));

internal static ж<RangeTable> _Coptic = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(994, 1007, 1),
        new(11392, 11507, 1),
        new(11513, 11519, 1)
    }.slice()
));

internal static ж<RangeTable> _Cuneiform = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(73728, 74649, 1),
        new(74752, 74862, 1),
        new(74864, 74868, 1),
        new(74880, 75075, 1)
    }.slice()
));

internal static ж<RangeTable> _Cypriot = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(67584, 67589, 1),
        new(67592, 67594, 2),
        new(67595, 67637, 1),
        new(67639, 67640, 1),
        new(67644, 67647, 3)
    }.slice()
));

internal static ж<RangeTable> _Cypro_Minoan = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(77712, 77810, 1)
    }.slice()
));

internal static ж<RangeTable> _Cyrillic = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(1024, 1156, 1),
        new(1159, 1327, 1),
        new(7296, 7304, 1),
        new(7467, 7544, 77),
        new(11744, 11775, 1),
        new(42560, 42655, 1),
        new(65070, 65071, 1)
    }.slice(),
    R32: new Range32[]{
        new(122928, 122989, 1),
        new(123023, 123023, 1)
    }.slice()
));

internal static ж<RangeTable> _Deseret = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(66560, 66639, 1)
    }.slice()
));

internal static ж<RangeTable> _Devanagari = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(2304, 2384, 1),
        new(2389, 2403, 1),
        new(2406, 2431, 1),
        new(43232, 43263, 1)
    }.slice(),
    R32: new Range32[]{
        new(72448, 72457, 1)
    }.slice()
));

internal static ж<RangeTable> _Dives_Akuru = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(71936, 71942, 1),
        new(71945, 71948, 3),
        new(71949, 71955, 1),
        new(71957, 71958, 1),
        new(71960, 71989, 1),
        new(71991, 71992, 1),
        new(71995, 72006, 1),
        new(72016, 72025, 1)
    }.slice()
));

internal static ж<RangeTable> _Dogra = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(71680, 71739, 1)
    }.slice()
));

internal static ж<RangeTable> _Duployan = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(113664, 113770, 1),
        new(113776, 113788, 1),
        new(113792, 113800, 1),
        new(113808, 113817, 1),
        new(113820, 113823, 1)
    }.slice()
));

internal static ж<RangeTable> _Egyptian_Hieroglyphs = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(77824, 78933, 1)
    }.slice()
));

internal static ж<RangeTable> _Elbasan = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(66816, 66855, 1)
    }.slice()
));

internal static ж<RangeTable> _Elymaic = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(69600, 69622, 1)
    }.slice()
));

internal static ж<RangeTable> _Ethiopic = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(4608, 4680, 1),
        new(4682, 4685, 1),
        new(4688, 4694, 1),
        new(4696, 4698, 2),
        new(4699, 4701, 1),
        new(4704, 4744, 1),
        new(4746, 4749, 1),
        new(4752, 4784, 1),
        new(4786, 4789, 1),
        new(4792, 4798, 1),
        new(4800, 4802, 2),
        new(4803, 4805, 1),
        new(4808, 4822, 1),
        new(4824, 4880, 1),
        new(4882, 4885, 1),
        new(4888, 4954, 1),
        new(4957, 4988, 1),
        new(4992, 5017, 1),
        new(11648, 11670, 1),
        new(11680, 11686, 1),
        new(11688, 11694, 1),
        new(11696, 11702, 1),
        new(11704, 11710, 1),
        new(11712, 11718, 1),
        new(11720, 11726, 1),
        new(11728, 11734, 1),
        new(11736, 11742, 1),
        new(43777, 43782, 1),
        new(43785, 43790, 1),
        new(43793, 43798, 1),
        new(43808, 43814, 1),
        new(43816, 43822, 1)
    }.slice(),
    R32: new Range32[]{
        new(124896, 124902, 1),
        new(124904, 124907, 1),
        new(124909, 124910, 1),
        new(124912, 124926, 1)
    }.slice()
));

internal static ж<RangeTable> _Georgian = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(4256, 4293, 1),
        new(4295, 4301, 6),
        new(4304, 4346, 1),
        new(4348, 4351, 1),
        new(7312, 7354, 1),
        new(7357, 7359, 1),
        new(11520, 11557, 1),
        new(11559, 11565, 6)
    }.slice()
));

internal static ж<RangeTable> _Glagolitic = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(11264, 11359, 1)
    }.slice(),
    R32: new Range32[]{
        new(122880, 122886, 1),
        new(122888, 122904, 1),
        new(122907, 122913, 1),
        new(122915, 122916, 1),
        new(122918, 122922, 1)
    }.slice()
));

internal static ж<RangeTable> _Gothic = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(66352, 66378, 1)
    }.slice()
));

internal static ж<RangeTable> _Grantha = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(70400, 70403, 1),
        new(70405, 70412, 1),
        new(70415, 70416, 1),
        new(70419, 70440, 1),
        new(70442, 70448, 1),
        new(70450, 70451, 1),
        new(70453, 70457, 1),
        new(70460, 70468, 1),
        new(70471, 70472, 1),
        new(70475, 70477, 1),
        new(70480, 70487, 7),
        new(70493, 70499, 1),
        new(70502, 70508, 1),
        new(70512, 70516, 1)
    }.slice()
));

internal static ж<RangeTable> _Greek = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(880, 883, 1),
        new(885, 887, 1),
        new(890, 893, 1),
        new(895, 900, 5),
        new(902, 904, 2),
        new(905, 906, 1),
        new(908, 910, 2),
        new(911, 929, 1),
        new(931, 993, 1),
        new(1008, 1023, 1),
        new(7462, 7466, 1),
        new(7517, 7521, 1),
        new(7526, 7530, 1),
        new(7615, 7936, 321),
        new(7937, 7957, 1),
        new(7960, 7965, 1),
        new(7968, 8005, 1),
        new(8008, 8013, 1),
        new(8016, 8023, 1),
        new(8025, 8031, 2),
        new(8032, 8061, 1),
        new(8064, 8116, 1),
        new(8118, 8132, 1),
        new(8134, 8147, 1),
        new(8150, 8155, 1),
        new(8157, 8175, 1),
        new(8178, 8180, 1),
        new(8182, 8190, 1),
        new(8486, 43877, 35391)
    }.slice(),
    R32: new Range32[]{
        new(65856, 65934, 1),
        new(65952, 119296, 53344),
        new(119297, 119365, 1)
    }.slice()
));

internal static ж<RangeTable> _Gujarati = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(2689, 2691, 1),
        new(2693, 2701, 1),
        new(2703, 2705, 1),
        new(2707, 2728, 1),
        new(2730, 2736, 1),
        new(2738, 2739, 1),
        new(2741, 2745, 1),
        new(2748, 2757, 1),
        new(2759, 2761, 1),
        new(2763, 2765, 1),
        new(2768, 2784, 16),
        new(2785, 2787, 1),
        new(2790, 2801, 1),
        new(2809, 2815, 1)
    }.slice()
));

internal static ж<RangeTable> _Gunjala_Gondi = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(73056, 73061, 1),
        new(73063, 73064, 1),
        new(73066, 73102, 1),
        new(73104, 73105, 1),
        new(73107, 73112, 1),
        new(73120, 73129, 1)
    }.slice()
));

internal static ж<RangeTable> _Gurmukhi = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(2561, 2563, 1),
        new(2565, 2570, 1),
        new(2575, 2576, 1),
        new(2579, 2600, 1),
        new(2602, 2608, 1),
        new(2610, 2611, 1),
        new(2613, 2614, 1),
        new(2616, 2617, 1),
        new(2620, 2622, 2),
        new(2623, 2626, 1),
        new(2631, 2632, 1),
        new(2635, 2637, 1),
        new(2641, 2649, 8),
        new(2650, 2652, 1),
        new(2654, 2662, 8),
        new(2663, 2678, 1)
    }.slice()
));

internal static ж<RangeTable> _Han = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(11904, 11929, 1),
        new(11931, 12019, 1),
        new(12032, 12245, 1),
        new(12293, 12295, 2),
        new(12321, 12329, 1),
        new(12344, 12347, 1),
        new(13312, 19903, 1),
        new(19968, 40959, 1),
        new(63744, 64109, 1),
        new(64112, 64217, 1)
    }.slice(),
    R32: new Range32[]{
        new(94178, 94179, 1),
        new(94192, 94193, 1),
        new(131072, 173791, 1),
        new(173824, 177977, 1),
        new(177984, 178205, 1),
        new(178208, 183969, 1),
        new(183984, 191456, 1),
        new(194560, 195101, 1),
        new(196608, 201546, 1),
        new(201552, 205743, 1)
    }.slice()
));

internal static ж<RangeTable> _Hangul = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(4352, 4607, 1),
        new(12334, 12335, 1),
        new(12593, 12686, 1),
        new(12800, 12830, 1),
        new(12896, 12926, 1),
        new(43360, 43388, 1),
        new(44032, 55203, 1),
        new(55216, 55238, 1),
        new(55243, 55291, 1),
        new(65440, 65470, 1),
        new(65474, 65479, 1),
        new(65482, 65487, 1),
        new(65490, 65495, 1),
        new(65498, 65500, 1)
    }.slice()
));

internal static ж<RangeTable> _Hanifi_Rohingya = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(68864, 68903, 1),
        new(68912, 68921, 1)
    }.slice()
));

internal static ж<RangeTable> _Hanunoo = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(5920, 5940, 1)
    }.slice()
));

internal static ж<RangeTable> _Hatran = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(67808, 67826, 1),
        new(67828, 67829, 1),
        new(67835, 67839, 1)
    }.slice()
));

internal static ж<RangeTable> _Hebrew = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(1425, 1479, 1),
        new(1488, 1514, 1),
        new(1519, 1524, 1),
        new(64285, 64310, 1),
        new(64312, 64316, 1),
        new(64318, 64320, 2),
        new(64321, 64323, 2),
        new(64324, 64326, 2),
        new(64327, 64335, 1)
    }.slice()
));

internal static ж<RangeTable> _Hiragana = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(12353, 12438, 1),
        new(12445, 12447, 1)
    }.slice(),
    R32: new Range32[]{
        new(110593, 110879, 1),
        new(110898, 110928, 30),
        new(110929, 110930, 1),
        new(127488, 127488, 1)
    }.slice()
));

internal static ж<RangeTable> _Imperial_Aramaic = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(67648, 67669, 1),
        new(67671, 67679, 1)
    }.slice()
));

internal static ж<RangeTable> _Inherited = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(768, 879, 1),
        new(1157, 1158, 1),
        new(1611, 1621, 1),
        new(1648, 2385, 737),
        new(2386, 2388, 1),
        new(6832, 6862, 1),
        new(7376, 7378, 1),
        new(7380, 7392, 1),
        new(7394, 7400, 1),
        new(7405, 7412, 7),
        new(7416, 7417, 1),
        new(7616, 7679, 1),
        new(8204, 8205, 1),
        new(8400, 8432, 1),
        new(12330, 12333, 1),
        new(12441, 12442, 1),
        new(65024, 65039, 1),
        new(65056, 65069, 1)
    }.slice(),
    R32: new Range32[]{
        new(66045, 66272, 227),
        new(70459, 118528, 48069),
        new(118529, 118573, 1),
        new(118576, 118598, 1),
        new(119143, 119145, 1),
        new(119163, 119170, 1),
        new(119173, 119179, 1),
        new(119210, 119213, 1),
        new(917760, 917999, 1)
    }.slice()
));

internal static ж<RangeTable> _Inscriptional_Pahlavi = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(68448, 68466, 1),
        new(68472, 68479, 1)
    }.slice()
));

internal static ж<RangeTable> _Inscriptional_Parthian = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(68416, 68437, 1),
        new(68440, 68447, 1)
    }.slice()
));

internal static ж<RangeTable> _Javanese = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(43392, 43469, 1),
        new(43472, 43481, 1),
        new(43486, 43487, 1)
    }.slice()
));

internal static ж<RangeTable> _Kaithi = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(69760, 69826, 1),
        new(69837, 69837, 1)
    }.slice()
));

internal static ж<RangeTable> _Kannada = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(3200, 3212, 1),
        new(3214, 3216, 1),
        new(3218, 3240, 1),
        new(3242, 3251, 1),
        new(3253, 3257, 1),
        new(3260, 3268, 1),
        new(3270, 3272, 1),
        new(3274, 3277, 1),
        new(3285, 3286, 1),
        new(3293, 3294, 1),
        new(3296, 3299, 1),
        new(3302, 3311, 1),
        new(3313, 3315, 1)
    }.slice()
));

internal static ж<RangeTable> _Katakana = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(12449, 12538, 1),
        new(12541, 12543, 1),
        new(12784, 12799, 1),
        new(13008, 13054, 1),
        new(13056, 13143, 1),
        new(65382, 65391, 1),
        new(65393, 65437, 1)
    }.slice(),
    R32: new Range32[]{
        new(110576, 110579, 1),
        new(110581, 110587, 1),
        new(110589, 110590, 1),
        new(110592, 110880, 288),
        new(110881, 110882, 1),
        new(110933, 110948, 15),
        new(110949, 110951, 1)
    }.slice()
));

internal static ж<RangeTable> _Kawi = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(73472, 73488, 1),
        new(73490, 73530, 1),
        new(73534, 73561, 1)
    }.slice()
));

internal static ж<RangeTable> _Kayah_Li = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(43264, 43309, 1),
        new(43311, 43311, 1)
    }.slice()
));

internal static ж<RangeTable> _Kharoshthi = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(68096, 68099, 1),
        new(68101, 68102, 1),
        new(68108, 68115, 1),
        new(68117, 68119, 1),
        new(68121, 68149, 1),
        new(68152, 68154, 1),
        new(68159, 68168, 1),
        new(68176, 68184, 1)
    }.slice()
));

internal static ж<RangeTable> _Khitan_Small_Script = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(94180, 101120, 6940),
        new(101121, 101589, 1)
    }.slice()
));

internal static ж<RangeTable> _Khmer = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(6016, 6109, 1),
        new(6112, 6121, 1),
        new(6128, 6137, 1),
        new(6624, 6655, 1)
    }.slice()
));

internal static ж<RangeTable> _Khojki = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(70144, 70161, 1),
        new(70163, 70209, 1)
    }.slice()
));

internal static ж<RangeTable> _Khudawadi = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(70320, 70378, 1),
        new(70384, 70393, 1)
    }.slice()
));

internal static ж<RangeTable> _Lao = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(3713, 3714, 1),
        new(3716, 3718, 2),
        new(3719, 3722, 1),
        new(3724, 3747, 1),
        new(3749, 3751, 2),
        new(3752, 3773, 1),
        new(3776, 3780, 1),
        new(3782, 3784, 2),
        new(3785, 3790, 1),
        new(3792, 3801, 1),
        new(3804, 3807, 1)
    }.slice()
));

internal static ж<RangeTable> _Latin = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(65, 90, 1),
        new(97, 122, 1),
        new(170, 186, 16),
        new(192, 214, 1),
        new(216, 246, 1),
        new(248, 696, 1),
        new(736, 740, 1),
        new(7424, 7461, 1),
        new(7468, 7516, 1),
        new(7522, 7525, 1),
        new(7531, 7543, 1),
        new(7545, 7614, 1),
        new(7680, 7935, 1),
        new(8305, 8319, 14),
        new(8336, 8348, 1),
        new(8490, 8491, 1),
        new(8498, 8526, 28),
        new(8544, 8584, 1),
        new(11360, 11391, 1),
        new(42786, 42887, 1),
        new(42891, 42954, 1),
        new(42960, 42961, 1),
        new(42963, 42965, 2),
        new(42966, 42969, 1),
        new(42994, 43007, 1),
        new(43824, 43866, 1),
        new(43868, 43876, 1),
        new(43878, 43881, 1),
        new(64256, 64262, 1),
        new(65313, 65338, 1),
        new(65345, 65370, 1)
    }.slice(),
    R32: new Range32[]{
        new(67456, 67461, 1),
        new(67463, 67504, 1),
        new(67506, 67514, 1),
        new(122624, 122654, 1),
        new(122661, 122666, 1)
    }.slice(),
    LatinOffset: 5
));

internal static ж<RangeTable> _Lepcha = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(7168, 7223, 1),
        new(7227, 7241, 1),
        new(7245, 7247, 1)
    }.slice()
));

internal static ж<RangeTable> _Limbu = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(6400, 6430, 1),
        new(6432, 6443, 1),
        new(6448, 6459, 1),
        new(6464, 6468, 4),
        new(6469, 6479, 1)
    }.slice()
));

internal static ж<RangeTable> _Linear_A = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(67072, 67382, 1),
        new(67392, 67413, 1),
        new(67424, 67431, 1)
    }.slice()
));

internal static ж<RangeTable> _Linear_B = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(65536, 65547, 1),
        new(65549, 65574, 1),
        new(65576, 65594, 1),
        new(65596, 65597, 1),
        new(65599, 65613, 1),
        new(65616, 65629, 1),
        new(65664, 65786, 1)
    }.slice()
));

internal static ж<RangeTable> _Lisu = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(42192, 42239, 1)
    }.slice(),
    R32: new Range32[]{
        new(73648, 73648, 1)
    }.slice()
));

internal static ж<RangeTable> _Lycian = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(66176, 66204, 1)
    }.slice()
));

internal static ж<RangeTable> _Lydian = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(67872, 67897, 1),
        new(67903, 67903, 1)
    }.slice()
));

internal static ж<RangeTable> _Mahajani = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(69968, 70006, 1)
    }.slice()
));

internal static ж<RangeTable> _Makasar = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(73440, 73464, 1)
    }.slice()
));

internal static ж<RangeTable> _Malayalam = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(3328, 3340, 1),
        new(3342, 3344, 1),
        new(3346, 3396, 1),
        new(3398, 3400, 1),
        new(3402, 3407, 1),
        new(3412, 3427, 1),
        new(3430, 3455, 1)
    }.slice()
));

internal static ж<RangeTable> _Mandaic = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(2112, 2139, 1),
        new(2142, 2142, 1)
    }.slice()
));

internal static ж<RangeTable> _Manichaean = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(68288, 68326, 1),
        new(68331, 68342, 1)
    }.slice()
));

internal static ж<RangeTable> _Marchen = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(72816, 72847, 1),
        new(72850, 72871, 1),
        new(72873, 72886, 1)
    }.slice()
));

internal static ж<RangeTable> _Masaram_Gondi = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(72960, 72966, 1),
        new(72968, 72969, 1),
        new(72971, 73014, 1),
        new(73018, 73020, 2),
        new(73021, 73023, 2),
        new(73024, 73031, 1),
        new(73040, 73049, 1)
    }.slice()
));

internal static ж<RangeTable> _Medefaidrin = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(93760, 93850, 1)
    }.slice()
));

internal static ж<RangeTable> _Meetei_Mayek = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(43744, 43766, 1),
        new(43968, 44013, 1),
        new(44016, 44025, 1)
    }.slice()
));

internal static ж<RangeTable> _Mende_Kikakui = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(124928, 125124, 1),
        new(125127, 125142, 1)
    }.slice()
));

internal static ж<RangeTable> _Meroitic_Cursive = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(68000, 68023, 1),
        new(68028, 68047, 1),
        new(68050, 68095, 1)
    }.slice()
));

internal static ж<RangeTable> _Meroitic_Hieroglyphs = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(67968, 67999, 1)
    }.slice()
));

internal static ж<RangeTable> _Miao = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(93952, 94026, 1),
        new(94031, 94087, 1),
        new(94095, 94111, 1)
    }.slice()
));

internal static ж<RangeTable> _Modi = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(71168, 71236, 1),
        new(71248, 71257, 1)
    }.slice()
));

internal static ж<RangeTable> _Mongolian = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(6144, 6145, 1),
        new(6148, 6150, 2),
        new(6151, 6169, 1),
        new(6176, 6264, 1),
        new(6272, 6314, 1)
    }.slice(),
    R32: new Range32[]{
        new(71264, 71276, 1)
    }.slice()
));

internal static ж<RangeTable> _Mro = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(92736, 92766, 1),
        new(92768, 92777, 1),
        new(92782, 92783, 1)
    }.slice()
));

internal static ж<RangeTable> _Multani = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(70272, 70278, 1),
        new(70280, 70282, 2),
        new(70283, 70285, 1),
        new(70287, 70301, 1),
        new(70303, 70313, 1)
    }.slice()
));

internal static ж<RangeTable> _Myanmar = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(4096, 4255, 1),
        new(43488, 43518, 1),
        new(43616, 43647, 1)
    }.slice()
));

internal static ж<RangeTable> _Nabataean = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(67712, 67742, 1),
        new(67751, 67759, 1)
    }.slice()
));

internal static ж<RangeTable> _Nag_Mundari = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(124112, 124153, 1)
    }.slice()
));

internal static ж<RangeTable> _Nandinagari = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(72096, 72103, 1),
        new(72106, 72151, 1),
        new(72154, 72164, 1)
    }.slice()
));

internal static ж<RangeTable> _New_Tai_Lue = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(6528, 6571, 1),
        new(6576, 6601, 1),
        new(6608, 6618, 1),
        new(6622, 6623, 1)
    }.slice()
));

internal static ж<RangeTable> _Newa = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(70656, 70747, 1),
        new(70749, 70753, 1)
    }.slice()
));

internal static ж<RangeTable> _Nko = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(1984, 2042, 1),
        new(2045, 2047, 1)
    }.slice()
));

internal static ж<RangeTable> _Nushu = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(94177, 110960, 16783),
        new(110961, 111355, 1)
    }.slice()
));

internal static ж<RangeTable> _Nyiakeng_Puachue_Hmong = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(123136, 123180, 1),
        new(123184, 123197, 1),
        new(123200, 123209, 1),
        new(123214, 123215, 1)
    }.slice()
));

internal static ж<RangeTable> _Ogham = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(5760, 5788, 1)
    }.slice()
));

internal static ж<RangeTable> _Ol_Chiki = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(7248, 7295, 1)
    }.slice()
));

internal static ж<RangeTable> _Old_Hungarian = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(68736, 68786, 1),
        new(68800, 68850, 1),
        new(68858, 68863, 1)
    }.slice()
));

internal static ж<RangeTable> _Old_Italic = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(66304, 66339, 1),
        new(66349, 66351, 1)
    }.slice()
));

internal static ж<RangeTable> _Old_North_Arabian = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(68224, 68255, 1)
    }.slice()
));

internal static ж<RangeTable> _Old_Permic = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(66384, 66426, 1)
    }.slice()
));

internal static ж<RangeTable> _Old_Persian = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(66464, 66499, 1),
        new(66504, 66517, 1)
    }.slice()
));

internal static ж<RangeTable> _Old_Sogdian = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(69376, 69415, 1)
    }.slice()
));

internal static ж<RangeTable> _Old_South_Arabian = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(68192, 68223, 1)
    }.slice()
));

internal static ж<RangeTable> _Old_Turkic = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(68608, 68680, 1)
    }.slice()
));

internal static ж<RangeTable> _Old_Uyghur = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(69488, 69513, 1)
    }.slice()
));

internal static ж<RangeTable> _Oriya = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(2817, 2819, 1),
        new(2821, 2828, 1),
        new(2831, 2832, 1),
        new(2835, 2856, 1),
        new(2858, 2864, 1),
        new(2866, 2867, 1),
        new(2869, 2873, 1),
        new(2876, 2884, 1),
        new(2887, 2888, 1),
        new(2891, 2893, 1),
        new(2901, 2903, 1),
        new(2908, 2909, 1),
        new(2911, 2915, 1),
        new(2918, 2935, 1)
    }.slice()
));

internal static ж<RangeTable> _Osage = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(66736, 66771, 1),
        new(66776, 66811, 1)
    }.slice()
));

internal static ж<RangeTable> _Osmanya = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(66688, 66717, 1),
        new(66720, 66729, 1)
    }.slice()
));

internal static ж<RangeTable> _Pahawh_Hmong = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(92928, 92997, 1),
        new(93008, 93017, 1),
        new(93019, 93025, 1),
        new(93027, 93047, 1),
        new(93053, 93071, 1)
    }.slice()
));

internal static ж<RangeTable> _Palmyrene = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(67680, 67711, 1)
    }.slice()
));

internal static ж<RangeTable> _Pau_Cin_Hau = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(72384, 72440, 1)
    }.slice()
));

internal static ж<RangeTable> _Phags_Pa = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(43072, 43127, 1)
    }.slice()
));

internal static ж<RangeTable> _Phoenician = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(67840, 67867, 1),
        new(67871, 67871, 1)
    }.slice()
));

internal static ж<RangeTable> _Psalter_Pahlavi = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(68480, 68497, 1),
        new(68505, 68508, 1),
        new(68521, 68527, 1)
    }.slice()
));

internal static ж<RangeTable> _Rejang = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(43312, 43347, 1),
        new(43359, 43359, 1)
    }.slice()
));

internal static ж<RangeTable> _Runic = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(5792, 5866, 1),
        new(5870, 5880, 1)
    }.slice()
));

internal static ж<RangeTable> _Samaritan = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(2048, 2093, 1),
        new(2096, 2110, 1)
    }.slice()
));

internal static ж<RangeTable> _Saurashtra = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(43136, 43205, 1),
        new(43214, 43225, 1)
    }.slice()
));

internal static ж<RangeTable> _Sharada = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(70016, 70111, 1)
    }.slice()
));

internal static ж<RangeTable> _Shavian = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(66640, 66687, 1)
    }.slice()
));

internal static ж<RangeTable> _Siddham = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(71040, 71093, 1),
        new(71096, 71133, 1)
    }.slice()
));

internal static ж<RangeTable> _SignWriting = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(120832, 121483, 1),
        new(121499, 121503, 1),
        new(121505, 121519, 1)
    }.slice()
));

internal static ж<RangeTable> _Sinhala = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(3457, 3459, 1),
        new(3461, 3478, 1),
        new(3482, 3505, 1),
        new(3507, 3515, 1),
        new(3517, 3520, 3),
        new(3521, 3526, 1),
        new(3530, 3535, 5),
        new(3536, 3540, 1),
        new(3542, 3544, 2),
        new(3545, 3551, 1),
        new(3558, 3567, 1),
        new(3570, 3572, 1)
    }.slice(),
    R32: new Range32[]{
        new(70113, 70132, 1)
    }.slice()
));

internal static ж<RangeTable> _Sogdian = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(69424, 69465, 1)
    }.slice()
));

internal static ж<RangeTable> _Sora_Sompeng = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(69840, 69864, 1),
        new(69872, 69881, 1)
    }.slice()
));

internal static ж<RangeTable> _Soyombo = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(72272, 72354, 1)
    }.slice()
));

internal static ж<RangeTable> _Sundanese = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(7040, 7103, 1),
        new(7360, 7367, 1)
    }.slice()
));

internal static ж<RangeTable> _Syloti_Nagri = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(43008, 43052, 1)
    }.slice()
));

internal static ж<RangeTable> _Syriac = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(1792, 1805, 1),
        new(1807, 1866, 1),
        new(1869, 1871, 1),
        new(2144, 2154, 1)
    }.slice()
));

internal static ж<RangeTable> _Tagalog = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(5888, 5909, 1),
        new(5919, 5919, 1)
    }.slice()
));

internal static ж<RangeTable> _Tagbanwa = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(5984, 5996, 1),
        new(5998, 6000, 1),
        new(6002, 6003, 1)
    }.slice()
));

internal static ж<RangeTable> _Tai_Le = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(6480, 6509, 1),
        new(6512, 6516, 1)
    }.slice()
));

internal static ж<RangeTable> _Tai_Tham = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(6688, 6750, 1),
        new(6752, 6780, 1),
        new(6783, 6793, 1),
        new(6800, 6809, 1),
        new(6816, 6829, 1)
    }.slice()
));

internal static ж<RangeTable> _Tai_Viet = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(43648, 43714, 1),
        new(43739, 43743, 1)
    }.slice()
));

internal static ж<RangeTable> _Takri = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(71296, 71353, 1),
        new(71360, 71369, 1)
    }.slice()
));

internal static ж<RangeTable> _Tamil = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(2946, 2947, 1),
        new(2949, 2954, 1),
        new(2958, 2960, 1),
        new(2962, 2965, 1),
        new(2969, 2970, 1),
        new(2972, 2974, 2),
        new(2975, 2979, 4),
        new(2980, 2984, 4),
        new(2985, 2986, 1),
        new(2990, 3001, 1),
        new(3006, 3010, 1),
        new(3014, 3016, 1),
        new(3018, 3021, 1),
        new(3024, 3031, 7),
        new(3046, 3066, 1)
    }.slice(),
    R32: new Range32[]{
        new(73664, 73713, 1),
        new(73727, 73727, 1)
    }.slice()
));

internal static ж<RangeTable> _Tangsa = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(92784, 92862, 1),
        new(92864, 92873, 1)
    }.slice()
));

internal static ж<RangeTable> _Tangut = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(94176, 94208, 32),
        new(94209, 100343, 1),
        new(100352, 101119, 1),
        new(101632, 101640, 1)
    }.slice()
));

internal static ж<RangeTable> _Telugu = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(3072, 3084, 1),
        new(3086, 3088, 1),
        new(3090, 3112, 1),
        new(3114, 3129, 1),
        new(3132, 3140, 1),
        new(3142, 3144, 1),
        new(3146, 3149, 1),
        new(3157, 3158, 1),
        new(3160, 3162, 1),
        new(3165, 3168, 3),
        new(3169, 3171, 1),
        new(3174, 3183, 1),
        new(3191, 3199, 1)
    }.slice()
));

internal static ж<RangeTable> _Thaana = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(1920, 1969, 1)
    }.slice()
));

internal static ж<RangeTable> _Thai = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(3585, 3642, 1),
        new(3648, 3675, 1)
    }.slice()
));

internal static ж<RangeTable> _Tibetan = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(3840, 3911, 1),
        new(3913, 3948, 1),
        new(3953, 3991, 1),
        new(3993, 4028, 1),
        new(4030, 4044, 1),
        new(4046, 4052, 1),
        new(4057, 4058, 1)
    }.slice()
));

internal static ж<RangeTable> _Tifinagh = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(11568, 11623, 1),
        new(11631, 11632, 1),
        new(11647, 11647, 1)
    }.slice()
));

internal static ж<RangeTable> _Tirhuta = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(70784, 70855, 1),
        new(70864, 70873, 1)
    }.slice()
));

internal static ж<RangeTable> _Toto = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(123536, 123566, 1)
    }.slice()
));

internal static ж<RangeTable> _Ugaritic = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(66432, 66461, 1),
        new(66463, 66463, 1)
    }.slice()
));

internal static ж<RangeTable> _Vai = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(42240, 42539, 1)
    }.slice()
));

internal static ж<RangeTable> _Vithkuqi = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(66928, 66938, 1),
        new(66940, 66954, 1),
        new(66956, 66962, 1),
        new(66964, 66965, 1),
        new(66967, 66977, 1),
        new(66979, 66993, 1),
        new(66995, 67001, 1),
        new(67003, 67004, 1)
    }.slice()
));

internal static ж<RangeTable> _Wancho = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(123584, 123641, 1),
        new(123647, 123647, 1)
    }.slice()
));

internal static ж<RangeTable> _Warang_Citi = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(71840, 71922, 1),
        new(71935, 71935, 1)
    }.slice()
));

internal static ж<RangeTable> _Yezidi = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(69248, 69289, 1),
        new(69291, 69293, 1),
        new(69296, 69297, 1)
    }.slice()
));

internal static ж<RangeTable> _Yi = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(40960, 42124, 1),
        new(42128, 42182, 1)
    }.slice()
));

internal static ж<RangeTable> _Zanabazar_Square = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(72192, 72263, 1)
    }.slice()
));

// These variables have type *RangeTable.
public static ж<RangeTable> Adlam = _Adlam;                 // Adlam is the set of Unicode characters in script Adlam.

public static ж<RangeTable> Ahom = _Ahom;                  // Ahom is the set of Unicode characters in script Ahom.

public static ж<RangeTable> Anatolian_Hieroglyphs = _Anatolian_Hieroglyphs; // Anatolian_Hieroglyphs is the set of Unicode characters in script Anatolian_Hieroglyphs.

public static ж<RangeTable> Arabic = _Arabic;                // Arabic is the set of Unicode characters in script Arabic.

public static ж<RangeTable> Armenian = _Armenian;              // Armenian is the set of Unicode characters in script Armenian.

public static ж<RangeTable> Avestan = _Avestan;               // Avestan is the set of Unicode characters in script Avestan.

public static ж<RangeTable> Balinese = _Balinese;              // Balinese is the set of Unicode characters in script Balinese.

public static ж<RangeTable> Bamum = _Bamum;                 // Bamum is the set of Unicode characters in script Bamum.

public static ж<RangeTable> Bassa_Vah = _Bassa_Vah;             // Bassa_Vah is the set of Unicode characters in script Bassa_Vah.

public static ж<RangeTable> Batak = _Batak;                 // Batak is the set of Unicode characters in script Batak.

public static ж<RangeTable> Bengali = _Bengali;               // Bengali is the set of Unicode characters in script Bengali.

public static ж<RangeTable> Bhaiksuki = _Bhaiksuki;             // Bhaiksuki is the set of Unicode characters in script Bhaiksuki.

public static ж<RangeTable> Bopomofo = _Bopomofo;              // Bopomofo is the set of Unicode characters in script Bopomofo.

public static ж<RangeTable> Brahmi = _Brahmi;                // Brahmi is the set of Unicode characters in script Brahmi.

public static ж<RangeTable> Braille = _Braille;               // Braille is the set of Unicode characters in script Braille.

public static ж<RangeTable> Buginese = _Buginese;              // Buginese is the set of Unicode characters in script Buginese.

public static ж<RangeTable> Buhid = _Buhid;                 // Buhid is the set of Unicode characters in script Buhid.

public static ж<RangeTable> Canadian_Aboriginal = _Canadian_Aboriginal;   // Canadian_Aboriginal is the set of Unicode characters in script Canadian_Aboriginal.

public static ж<RangeTable> Carian = _Carian;                // Carian is the set of Unicode characters in script Carian.

public static ж<RangeTable> Caucasian_Albanian = _Caucasian_Albanian;    // Caucasian_Albanian is the set of Unicode characters in script Caucasian_Albanian.

public static ж<RangeTable> Chakma = _Chakma;                // Chakma is the set of Unicode characters in script Chakma.

public static ж<RangeTable> Cham = _Cham;                  // Cham is the set of Unicode characters in script Cham.

public static ж<RangeTable> Cherokee = _Cherokee;              // Cherokee is the set of Unicode characters in script Cherokee.

public static ж<RangeTable> Chorasmian = _Chorasmian;            // Chorasmian is the set of Unicode characters in script Chorasmian.

public static ж<RangeTable> Common = _Common;                // Common is the set of Unicode characters in script Common.

public static ж<RangeTable> Coptic = _Coptic;                // Coptic is the set of Unicode characters in script Coptic.

public static ж<RangeTable> Cuneiform = _Cuneiform;             // Cuneiform is the set of Unicode characters in script Cuneiform.

public static ж<RangeTable> Cypriot = _Cypriot;               // Cypriot is the set of Unicode characters in script Cypriot.

public static ж<RangeTable> Cypro_Minoan = _Cypro_Minoan;          // Cypro_Minoan is the set of Unicode characters in script Cypro_Minoan.

public static ж<RangeTable> Cyrillic = _Cyrillic;              // Cyrillic is the set of Unicode characters in script Cyrillic.

public static ж<RangeTable> Deseret = _Deseret;               // Deseret is the set of Unicode characters in script Deseret.

public static ж<RangeTable> Devanagari = _Devanagari;            // Devanagari is the set of Unicode characters in script Devanagari.

public static ж<RangeTable> Dives_Akuru = _Dives_Akuru;           // Dives_Akuru is the set of Unicode characters in script Dives_Akuru.

public static ж<RangeTable> Dogra = _Dogra;                 // Dogra is the set of Unicode characters in script Dogra.

public static ж<RangeTable> Duployan = _Duployan;              // Duployan is the set of Unicode characters in script Duployan.

public static ж<RangeTable> Egyptian_Hieroglyphs = _Egyptian_Hieroglyphs;  // Egyptian_Hieroglyphs is the set of Unicode characters in script Egyptian_Hieroglyphs.

public static ж<RangeTable> Elbasan = _Elbasan;               // Elbasan is the set of Unicode characters in script Elbasan.

public static ж<RangeTable> Elymaic = _Elymaic;               // Elymaic is the set of Unicode characters in script Elymaic.

public static ж<RangeTable> Ethiopic = _Ethiopic;              // Ethiopic is the set of Unicode characters in script Ethiopic.

public static ж<RangeTable> Georgian = _Georgian;              // Georgian is the set of Unicode characters in script Georgian.

public static ж<RangeTable> Glagolitic = _Glagolitic;            // Glagolitic is the set of Unicode characters in script Glagolitic.

public static ж<RangeTable> Gothic = _Gothic;                // Gothic is the set of Unicode characters in script Gothic.

public static ж<RangeTable> Grantha = _Grantha;               // Grantha is the set of Unicode characters in script Grantha.

public static ж<RangeTable> Greek = _Greek;                 // Greek is the set of Unicode characters in script Greek.

public static ж<RangeTable> Gujarati = _Gujarati;              // Gujarati is the set of Unicode characters in script Gujarati.

public static ж<RangeTable> Gunjala_Gondi = _Gunjala_Gondi;         // Gunjala_Gondi is the set of Unicode characters in script Gunjala_Gondi.

public static ж<RangeTable> Gurmukhi = _Gurmukhi;              // Gurmukhi is the set of Unicode characters in script Gurmukhi.

public static ж<RangeTable> Han = _Han;                   // Han is the set of Unicode characters in script Han.

public static ж<RangeTable> Hangul = _Hangul;                // Hangul is the set of Unicode characters in script Hangul.

public static ж<RangeTable> Hanifi_Rohingya = _Hanifi_Rohingya;       // Hanifi_Rohingya is the set of Unicode characters in script Hanifi_Rohingya.

public static ж<RangeTable> Hanunoo = _Hanunoo;               // Hanunoo is the set of Unicode characters in script Hanunoo.

public static ж<RangeTable> Hatran = _Hatran;                // Hatran is the set of Unicode characters in script Hatran.

public static ж<RangeTable> Hebrew = _Hebrew;                // Hebrew is the set of Unicode characters in script Hebrew.

public static ж<RangeTable> Hiragana = _Hiragana;              // Hiragana is the set of Unicode characters in script Hiragana.

public static ж<RangeTable> Imperial_Aramaic = _Imperial_Aramaic;      // Imperial_Aramaic is the set of Unicode characters in script Imperial_Aramaic.

public static ж<RangeTable> Inherited = _Inherited;             // Inherited is the set of Unicode characters in script Inherited.

public static ж<RangeTable> Inscriptional_Pahlavi = _Inscriptional_Pahlavi; // Inscriptional_Pahlavi is the set of Unicode characters in script Inscriptional_Pahlavi.

public static ж<RangeTable> Inscriptional_Parthian = _Inscriptional_Parthian; // Inscriptional_Parthian is the set of Unicode characters in script Inscriptional_Parthian.

public static ж<RangeTable> Javanese = _Javanese;              // Javanese is the set of Unicode characters in script Javanese.

public static ж<RangeTable> Kaithi = _Kaithi;                // Kaithi is the set of Unicode characters in script Kaithi.

public static ж<RangeTable> Kannada = _Kannada;               // Kannada is the set of Unicode characters in script Kannada.

public static ж<RangeTable> Katakana = _Katakana;              // Katakana is the set of Unicode characters in script Katakana.

public static ж<RangeTable> Kawi = _Kawi;                  // Kawi is the set of Unicode characters in script Kawi.

public static ж<RangeTable> Kayah_Li = _Kayah_Li;              // Kayah_Li is the set of Unicode characters in script Kayah_Li.

public static ж<RangeTable> Kharoshthi = _Kharoshthi;            // Kharoshthi is the set of Unicode characters in script Kharoshthi.

public static ж<RangeTable> Khitan_Small_Script = _Khitan_Small_Script;   // Khitan_Small_Script is the set of Unicode characters in script Khitan_Small_Script.

public static ж<RangeTable> Khmer = _Khmer;                 // Khmer is the set of Unicode characters in script Khmer.

public static ж<RangeTable> Khojki = _Khojki;                // Khojki is the set of Unicode characters in script Khojki.

public static ж<RangeTable> Khudawadi = _Khudawadi;             // Khudawadi is the set of Unicode characters in script Khudawadi.

public static ж<RangeTable> Lao = _Lao;                   // Lao is the set of Unicode characters in script Lao.

public static ж<RangeTable> Latin = _Latin;                 // Latin is the set of Unicode characters in script Latin.

public static ж<RangeTable> Lepcha = _Lepcha;                // Lepcha is the set of Unicode characters in script Lepcha.

public static ж<RangeTable> Limbu = _Limbu;                 // Limbu is the set of Unicode characters in script Limbu.

public static ж<RangeTable> Linear_A = _Linear_A;              // Linear_A is the set of Unicode characters in script Linear_A.

public static ж<RangeTable> Linear_B = _Linear_B;              // Linear_B is the set of Unicode characters in script Linear_B.

public static ж<RangeTable> Lisu = _Lisu;                  // Lisu is the set of Unicode characters in script Lisu.

public static ж<RangeTable> Lycian = _Lycian;                // Lycian is the set of Unicode characters in script Lycian.

public static ж<RangeTable> Lydian = _Lydian;                // Lydian is the set of Unicode characters in script Lydian.

public static ж<RangeTable> Mahajani = _Mahajani;              // Mahajani is the set of Unicode characters in script Mahajani.

public static ж<RangeTable> Makasar = _Makasar;               // Makasar is the set of Unicode characters in script Makasar.

public static ж<RangeTable> Malayalam = _Malayalam;             // Malayalam is the set of Unicode characters in script Malayalam.

public static ж<RangeTable> Mandaic = _Mandaic;               // Mandaic is the set of Unicode characters in script Mandaic.

public static ж<RangeTable> Manichaean = _Manichaean;            // Manichaean is the set of Unicode characters in script Manichaean.

public static ж<RangeTable> Marchen = _Marchen;               // Marchen is the set of Unicode characters in script Marchen.

public static ж<RangeTable> Masaram_Gondi = _Masaram_Gondi;         // Masaram_Gondi is the set of Unicode characters in script Masaram_Gondi.

public static ж<RangeTable> Medefaidrin = _Medefaidrin;           // Medefaidrin is the set of Unicode characters in script Medefaidrin.

public static ж<RangeTable> Meetei_Mayek = _Meetei_Mayek;          // Meetei_Mayek is the set of Unicode characters in script Meetei_Mayek.

public static ж<RangeTable> Mende_Kikakui = _Mende_Kikakui;         // Mende_Kikakui is the set of Unicode characters in script Mende_Kikakui.

public static ж<RangeTable> Meroitic_Cursive = _Meroitic_Cursive;      // Meroitic_Cursive is the set of Unicode characters in script Meroitic_Cursive.

public static ж<RangeTable> Meroitic_Hieroglyphs = _Meroitic_Hieroglyphs;  // Meroitic_Hieroglyphs is the set of Unicode characters in script Meroitic_Hieroglyphs.

public static ж<RangeTable> Miao = _Miao;                  // Miao is the set of Unicode characters in script Miao.

public static ж<RangeTable> Modi = _Modi;                  // Modi is the set of Unicode characters in script Modi.

public static ж<RangeTable> Mongolian = _Mongolian;             // Mongolian is the set of Unicode characters in script Mongolian.

public static ж<RangeTable> Mro = _Mro;                   // Mro is the set of Unicode characters in script Mro.

public static ж<RangeTable> Multani = _Multani;               // Multani is the set of Unicode characters in script Multani.

public static ж<RangeTable> Myanmar = _Myanmar;               // Myanmar is the set of Unicode characters in script Myanmar.

public static ж<RangeTable> Nabataean = _Nabataean;             // Nabataean is the set of Unicode characters in script Nabataean.

public static ж<RangeTable> Nag_Mundari = _Nag_Mundari;           // Nag_Mundari is the set of Unicode characters in script Nag_Mundari.

public static ж<RangeTable> Nandinagari = _Nandinagari;           // Nandinagari is the set of Unicode characters in script Nandinagari.

public static ж<RangeTable> New_Tai_Lue = _New_Tai_Lue;           // New_Tai_Lue is the set of Unicode characters in script New_Tai_Lue.

public static ж<RangeTable> Newa = _Newa;                  // Newa is the set of Unicode characters in script Newa.

public static ж<RangeTable> Nko = _Nko;                   // Nko is the set of Unicode characters in script Nko.

public static ж<RangeTable> Nushu = _Nushu;                 // Nushu is the set of Unicode characters in script Nushu.

public static ж<RangeTable> Nyiakeng_Puachue_Hmong = _Nyiakeng_Puachue_Hmong; // Nyiakeng_Puachue_Hmong is the set of Unicode characters in script Nyiakeng_Puachue_Hmong.

public static ж<RangeTable> Ogham = _Ogham;                 // Ogham is the set of Unicode characters in script Ogham.

public static ж<RangeTable> Ol_Chiki = _Ol_Chiki;              // Ol_Chiki is the set of Unicode characters in script Ol_Chiki.

public static ж<RangeTable> Old_Hungarian = _Old_Hungarian;         // Old_Hungarian is the set of Unicode characters in script Old_Hungarian.

public static ж<RangeTable> Old_Italic = _Old_Italic;            // Old_Italic is the set of Unicode characters in script Old_Italic.

public static ж<RangeTable> Old_North_Arabian = _Old_North_Arabian;     // Old_North_Arabian is the set of Unicode characters in script Old_North_Arabian.

public static ж<RangeTable> Old_Permic = _Old_Permic;            // Old_Permic is the set of Unicode characters in script Old_Permic.

public static ж<RangeTable> Old_Persian = _Old_Persian;           // Old_Persian is the set of Unicode characters in script Old_Persian.

public static ж<RangeTable> Old_Sogdian = _Old_Sogdian;           // Old_Sogdian is the set of Unicode characters in script Old_Sogdian.

public static ж<RangeTable> Old_South_Arabian = _Old_South_Arabian;     // Old_South_Arabian is the set of Unicode characters in script Old_South_Arabian.

public static ж<RangeTable> Old_Turkic = _Old_Turkic;            // Old_Turkic is the set of Unicode characters in script Old_Turkic.

public static ж<RangeTable> Old_Uyghur = _Old_Uyghur;            // Old_Uyghur is the set of Unicode characters in script Old_Uyghur.

public static ж<RangeTable> Oriya = _Oriya;                 // Oriya is the set of Unicode characters in script Oriya.

public static ж<RangeTable> Osage = _Osage;                 // Osage is the set of Unicode characters in script Osage.

public static ж<RangeTable> Osmanya = _Osmanya;               // Osmanya is the set of Unicode characters in script Osmanya.

public static ж<RangeTable> Pahawh_Hmong = _Pahawh_Hmong;          // Pahawh_Hmong is the set of Unicode characters in script Pahawh_Hmong.

public static ж<RangeTable> Palmyrene = _Palmyrene;             // Palmyrene is the set of Unicode characters in script Palmyrene.

public static ж<RangeTable> Pau_Cin_Hau = _Pau_Cin_Hau;           // Pau_Cin_Hau is the set of Unicode characters in script Pau_Cin_Hau.

public static ж<RangeTable> Phags_Pa = _Phags_Pa;              // Phags_Pa is the set of Unicode characters in script Phags_Pa.

public static ж<RangeTable> Phoenician = _Phoenician;            // Phoenician is the set of Unicode characters in script Phoenician.

public static ж<RangeTable> Psalter_Pahlavi = _Psalter_Pahlavi;       // Psalter_Pahlavi is the set of Unicode characters in script Psalter_Pahlavi.

public static ж<RangeTable> Rejang = _Rejang;                // Rejang is the set of Unicode characters in script Rejang.

public static ж<RangeTable> Runic = _Runic;                 // Runic is the set of Unicode characters in script Runic.

public static ж<RangeTable> Samaritan = _Samaritan;             // Samaritan is the set of Unicode characters in script Samaritan.

public static ж<RangeTable> Saurashtra = _Saurashtra;            // Saurashtra is the set of Unicode characters in script Saurashtra.

public static ж<RangeTable> Sharada = _Sharada;               // Sharada is the set of Unicode characters in script Sharada.

public static ж<RangeTable> Shavian = _Shavian;               // Shavian is the set of Unicode characters in script Shavian.

public static ж<RangeTable> Siddham = _Siddham;               // Siddham is the set of Unicode characters in script Siddham.

public static ж<RangeTable> SignWriting = _SignWriting;           // SignWriting is the set of Unicode characters in script SignWriting.

public static ж<RangeTable> Sinhala = _Sinhala;               // Sinhala is the set of Unicode characters in script Sinhala.

public static ж<RangeTable> Sogdian = _Sogdian;               // Sogdian is the set of Unicode characters in script Sogdian.

public static ж<RangeTable> Sora_Sompeng = _Sora_Sompeng;          // Sora_Sompeng is the set of Unicode characters in script Sora_Sompeng.

public static ж<RangeTable> Soyombo = _Soyombo;               // Soyombo is the set of Unicode characters in script Soyombo.

public static ж<RangeTable> Sundanese = _Sundanese;             // Sundanese is the set of Unicode characters in script Sundanese.

public static ж<RangeTable> Syloti_Nagri = _Syloti_Nagri;          // Syloti_Nagri is the set of Unicode characters in script Syloti_Nagri.

public static ж<RangeTable> Syriac = _Syriac;                // Syriac is the set of Unicode characters in script Syriac.

public static ж<RangeTable> Tagalog = _Tagalog;               // Tagalog is the set of Unicode characters in script Tagalog.

public static ж<RangeTable> Tagbanwa = _Tagbanwa;              // Tagbanwa is the set of Unicode characters in script Tagbanwa.

public static ж<RangeTable> Tai_Le = _Tai_Le;                // Tai_Le is the set of Unicode characters in script Tai_Le.

public static ж<RangeTable> Tai_Tham = _Tai_Tham;              // Tai_Tham is the set of Unicode characters in script Tai_Tham.

public static ж<RangeTable> Tai_Viet = _Tai_Viet;              // Tai_Viet is the set of Unicode characters in script Tai_Viet.

public static ж<RangeTable> Takri = _Takri;                 // Takri is the set of Unicode characters in script Takri.

public static ж<RangeTable> Tamil = _Tamil;                 // Tamil is the set of Unicode characters in script Tamil.

public static ж<RangeTable> Tangsa = _Tangsa;                // Tangsa is the set of Unicode characters in script Tangsa.

public static ж<RangeTable> Tangut = _Tangut;                // Tangut is the set of Unicode characters in script Tangut.

public static ж<RangeTable> Telugu = _Telugu;                // Telugu is the set of Unicode characters in script Telugu.

public static ж<RangeTable> Thaana = _Thaana;                // Thaana is the set of Unicode characters in script Thaana.

public static ж<RangeTable> Thai = _Thai;                  // Thai is the set of Unicode characters in script Thai.

public static ж<RangeTable> Tibetan = _Tibetan;               // Tibetan is the set of Unicode characters in script Tibetan.

public static ж<RangeTable> Tifinagh = _Tifinagh;              // Tifinagh is the set of Unicode characters in script Tifinagh.

public static ж<RangeTable> Tirhuta = _Tirhuta;               // Tirhuta is the set of Unicode characters in script Tirhuta.

public static ж<RangeTable> Toto = _Toto;                  // Toto is the set of Unicode characters in script Toto.

public static ж<RangeTable> Ugaritic = _Ugaritic;              // Ugaritic is the set of Unicode characters in script Ugaritic.

public static ж<RangeTable> Vai = _Vai;                   // Vai is the set of Unicode characters in script Vai.

public static ж<RangeTable> Vithkuqi = _Vithkuqi;              // Vithkuqi is the set of Unicode characters in script Vithkuqi.

public static ж<RangeTable> Wancho = _Wancho;                // Wancho is the set of Unicode characters in script Wancho.

public static ж<RangeTable> Warang_Citi = _Warang_Citi;           // Warang_Citi is the set of Unicode characters in script Warang_Citi.

public static ж<RangeTable> Yezidi = _Yezidi;                // Yezidi is the set of Unicode characters in script Yezidi.

public static ж<RangeTable> Yi = _Yi;                    // Yi is the set of Unicode characters in script Yi.

public static ж<RangeTable> Zanabazar_Square = _Zanabazar_Square;      // Zanabazar_Square is the set of Unicode characters in script Zanabazar_Square.

// Properties is the set of Unicode property tables.
public static map<@string, ж<RangeTable>> Properties = new map<@string, ж<RangeTable>>{
    ["ASCII_Hex_Digit"u8] = ASCII_Hex_Digit,
    ["Bidi_Control"u8] = Bidi_Control,
    ["Dash"u8] = Dash,
    ["Deprecated"u8] = Deprecated,
    ["Diacritic"u8] = Diacritic,
    ["Extender"u8] = Extender,
    ["Hex_Digit"u8] = Hex_Digit,
    ["Hyphen"u8] = Hyphen,
    ["IDS_Binary_Operator"u8] = IDS_Binary_Operator,
    ["IDS_Trinary_Operator"u8] = IDS_Trinary_Operator,
    ["Ideographic"u8] = Ideographic,
    ["Join_Control"u8] = Join_Control,
    ["Logical_Order_Exception"u8] = Logical_Order_Exception,
    ["Noncharacter_Code_Point"u8] = Noncharacter_Code_Point,
    ["Other_Alphabetic"u8] = Other_Alphabetic,
    ["Other_Default_Ignorable_Code_Point"u8] = Other_Default_Ignorable_Code_Point,
    ["Other_Grapheme_Extend"u8] = Other_Grapheme_Extend,
    ["Other_ID_Continue"u8] = Other_ID_Continue,
    ["Other_ID_Start"u8] = Other_ID_Start,
    ["Other_Lowercase"u8] = Other_Lowercase,
    ["Other_Math"u8] = Other_Math,
    ["Other_Uppercase"u8] = Other_Uppercase,
    ["Pattern_Syntax"u8] = Pattern_Syntax,
    ["Pattern_White_Space"u8] = Pattern_White_Space,
    ["Prepended_Concatenation_Mark"u8] = Prepended_Concatenation_Mark,
    ["Quotation_Mark"u8] = Quotation_Mark,
    ["Radical"u8] = Radical,
    ["Regional_Indicator"u8] = Regional_Indicator,
    ["Sentence_Terminal"u8] = Sentence_Terminal,
    ["STerm"u8] = Sentence_Terminal,
    ["Soft_Dotted"u8] = Soft_Dotted,
    ["Terminal_Punctuation"u8] = Terminal_Punctuation,
    ["Unified_Ideograph"u8] = Unified_Ideograph,
    ["Variation_Selector"u8] = Variation_Selector,
    ["White_Space"u8] = White_Space
};

internal static ж<RangeTable> _ASCII_Hex_Digit = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(48, 57, 1),
        new(65, 70, 1),
        new(97, 102, 1)
    }.slice(),
    LatinOffset: 3
));

internal static ж<RangeTable> _Bidi_Control = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(1564, 8206, 6642),
        new(8207, 8234, 27),
        new(8235, 8238, 1),
        new(8294, 8297, 1)
    }.slice()
));

internal static ж<RangeTable> _Dash = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(45, 1418, 1373),
        new(1470, 5120, 3650),
        new(6150, 8208, 2058),
        new(8209, 8213, 1),
        new(8275, 8315, 40),
        new(8331, 8722, 391),
        new(11799, 11802, 3),
        new(11834, 11835, 1),
        new(11840, 11869, 29),
        new(12316, 12336, 20),
        new(12448, 65073, 52625),
        new(65074, 65112, 38),
        new(65123, 65293, 170)
    }.slice(),
    R32: new Range32[]{
        new(69293, 69293, 1)
    }.slice()
));

internal static ж<RangeTable> _Deprecated = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(329, 1651, 1322),
        new(3959, 3961, 2),
        new(6051, 6052, 1),
        new(8298, 8303, 1),
        new(9001, 9002, 1)
    }.slice(),
    R32: new Range32[]{
        new(917505, 917505, 1)
    }.slice()
));

internal static ж<RangeTable> _Diacritic = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(94, 96, 2),
        new(168, 175, 7),
        new(180, 183, 3),
        new(184, 688, 504),
        new(689, 846, 1),
        new(848, 855, 1),
        new(861, 866, 1),
        new(884, 885, 1),
        new(890, 900, 10),
        new(901, 1155, 254),
        new(1156, 1159, 1),
        new(1369, 1425, 56),
        new(1426, 1441, 1),
        new(1443, 1469, 1),
        new(1471, 1473, 2),
        new(1474, 1476, 2),
        new(1611, 1618, 1),
        new(1623, 1624, 1),
        new(1759, 1760, 1),
        new(1765, 1766, 1),
        new(1770, 1772, 1),
        new(1840, 1866, 1),
        new(1958, 1968, 1),
        new(2027, 2037, 1),
        new(2072, 2073, 1),
        new(2200, 2207, 1),
        new(2249, 2258, 1),
        new(2275, 2302, 1),
        new(2364, 2381, 17),
        new(2385, 2388, 1),
        new(2417, 2492, 75),
        new(2509, 2620, 111),
        new(2637, 2748, 111),
        new(2765, 2813, 48),
        new(2814, 2815, 1),
        new(2876, 2893, 17),
        new(2901, 3021, 120),
        new(3132, 3149, 17),
        new(3260, 3277, 17),
        new(3387, 3388, 1),
        new(3405, 3655, 125),
        new(3656, 3660, 1),
        new(3662, 3770, 108),
        new(3784, 3788, 1),
        new(3864, 3865, 1),
        new(3893, 3897, 2),
        new(3902, 3903, 1),
        new(3970, 3972, 1),
        new(3974, 3975, 1),
        new(4038, 4151, 113),
        new(4153, 4154, 1),
        new(4195, 4196, 1),
        new(4201, 4205, 1),
        new(4231, 4237, 1),
        new(4239, 4250, 11),
        new(4251, 4957, 706),
        new(4958, 4959, 1),
        new(5908, 5909, 1),
        new(6089, 6099, 1),
        new(6109, 6457, 348),
        new(6458, 6459, 1),
        new(6773, 6780, 1),
        new(6783, 6832, 49),
        new(6833, 6846, 1),
        new(6849, 6859, 1),
        new(6964, 6980, 16),
        new(7019, 7027, 1),
        new(7082, 7083, 1),
        new(7222, 7223, 1),
        new(7288, 7293, 1),
        new(7376, 7400, 1),
        new(7405, 7412, 7),
        new(7415, 7417, 1),
        new(7468, 7530, 1),
        new(7620, 7631, 1),
        new(7669, 7679, 1),
        new(8125, 8127, 2),
        new(8128, 8129, 1),
        new(8141, 8143, 1),
        new(8157, 8159, 1),
        new(8173, 8175, 1),
        new(8189, 8190, 1),
        new(11503, 11505, 1),
        new(11823, 12330, 507),
        new(12331, 12335, 1),
        new(12441, 12444, 1),
        new(12540, 42607, 30067),
        new(42620, 42621, 1),
        new(42623, 42652, 29),
        new(42653, 42736, 83),
        new(42737, 42752, 15),
        new(42753, 42785, 1),
        new(42888, 42890, 1),
        new(43000, 43001, 1),
        new(43204, 43232, 28),
        new(43233, 43249, 1),
        new(43307, 43310, 1),
        new(43347, 43443, 96),
        new(43456, 43493, 37),
        new(43643, 43645, 1),
        new(43711, 43714, 1),
        new(43766, 43867, 101),
        new(43868, 43871, 1),
        new(43881, 43883, 1),
        new(44012, 44013, 1),
        new(64286, 65056, 770),
        new(65057, 65071, 1),
        new(65342, 65344, 2),
        new(65392, 65438, 46),
        new(65439, 65507, 68)
    }.slice(),
    R32: new Range32[]{
        new(66272, 67456, 1184),
        new(67457, 67461, 1),
        new(67463, 67504, 1),
        new(67506, 67514, 1),
        new(68325, 68326, 1),
        new(68898, 68903, 1),
        new(69373, 69375, 1),
        new(69446, 69456, 1),
        new(69506, 69509, 1),
        new(69702, 69744, 42),
        new(69817, 69818, 1),
        new(69939, 69940, 1),
        new(70003, 70080, 77),
        new(70090, 70092, 1),
        new(70197, 70198, 1),
        new(70377, 70378, 1),
        new(70460, 70477, 17),
        new(70502, 70508, 1),
        new(70512, 70516, 1),
        new(70722, 70726, 4),
        new(70850, 70851, 1),
        new(71103, 71104, 1),
        new(71231, 71350, 119),
        new(71351, 71467, 116),
        new(71737, 71738, 1),
        new(71997, 71998, 1),
        new(72003, 72160, 157),
        new(72244, 72263, 19),
        new(72345, 72767, 422),
        new(73026, 73028, 2),
        new(73029, 73111, 82),
        new(78919, 78933, 1),
        new(92912, 92916, 1),
        new(92976, 92982, 1),
        new(94095, 94111, 1),
        new(94192, 94193, 1),
        new(110576, 110579, 1),
        new(110581, 110587, 1),
        new(110589, 110590, 1),
        new(118528, 118573, 1),
        new(118576, 118598, 1),
        new(119143, 119145, 1),
        new(119149, 119154, 1),
        new(119163, 119170, 1),
        new(119173, 119179, 1),
        new(119210, 119213, 1),
        new(122928, 122989, 1),
        new(123184, 123190, 1),
        new(123566, 123628, 62),
        new(123629, 123631, 1),
        new(125136, 125142, 1),
        new(125252, 125254, 1),
        new(125256, 125258, 1)
    }.slice(),
    LatinOffset: 3
));

internal static ж<RangeTable> _Extender = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(183, 720, 537),
        new(721, 1600, 879),
        new(2042, 2901, 859),
        new(3654, 3782, 128),
        new(6154, 6211, 57),
        new(6823, 7222, 399),
        new(7291, 12293, 5002),
        new(12337, 12341, 1),
        new(12445, 12446, 1),
        new(12540, 12542, 1),
        new(40981, 42508, 1527),
        new(43471, 43494, 23),
        new(43632, 43741, 109),
        new(43763, 43764, 1),
        new(65392, 65392, 1)
    }.slice(),
    R32: new Range32[]{
        new(67457, 67458, 1),
        new(70493, 71110, 617),
        new(71111, 71112, 1),
        new(72344, 92994, 20650),
        new(92995, 94176, 1181),
        new(94177, 94179, 2),
        new(123196, 123197, 1),
        new(125252, 125254, 1)
    }.slice()
));

internal static ж<RangeTable> _Hex_Digit = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(48, 57, 1),
        new(65, 70, 1),
        new(97, 102, 1),
        new(65296, 65305, 1),
        new(65313, 65318, 1),
        new(65345, 65350, 1)
    }.slice(),
    LatinOffset: 3
));

internal static ж<RangeTable> _Hyphen = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(45, 173, 128),
        new(1418, 6150, 4732),
        new(8208, 8209, 1),
        new(11799, 12539, 740),
        new(65123, 65293, 170),
        new(65381, 65381, 1)
    }.slice(),
    LatinOffset: 1
));

internal static ж<RangeTable> _IDS_Binary_Operator = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(12272, 12273, 1),
        new(12276, 12283, 1)
    }.slice()
));

internal static ж<RangeTable> _IDS_Trinary_Operator = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(12274, 12275, 1)
    }.slice()
));

internal static ж<RangeTable> _Ideographic = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(12294, 12295, 1),
        new(12321, 12329, 1),
        new(12344, 12346, 1),
        new(13312, 19903, 1),
        new(19968, 40959, 1),
        new(63744, 64109, 1),
        new(64112, 64217, 1)
    }.slice(),
    R32: new Range32[]{
        new(94180, 94208, 28),
        new(94209, 100343, 1),
        new(100352, 101589, 1),
        new(101632, 101640, 1),
        new(110960, 111355, 1),
        new(131072, 173791, 1),
        new(173824, 177977, 1),
        new(177984, 178205, 1),
        new(178208, 183969, 1),
        new(183984, 191456, 1),
        new(194560, 195101, 1),
        new(196608, 201546, 1),
        new(201552, 205743, 1)
    }.slice()
));

internal static ж<RangeTable> _Join_Control = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(8204, 8205, 1)
    }.slice()
));

internal static ж<RangeTable> _Logical_Order_Exception = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(3648, 3652, 1),
        new(3776, 3780, 1),
        new(6581, 6583, 1),
        new(6586, 43701, 37115),
        new(43702, 43705, 3),
        new(43707, 43708, 1)
    }.slice()
));

internal static ж<RangeTable> _Noncharacter_Code_Point = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(64976, 65007, 1),
        new(65534, 65535, 1)
    }.slice(),
    R32: new Range32[]{
        new(131070, 131071, 1),
        new(196606, 196607, 1),
        new(262142, 262143, 1),
        new(327678, 327679, 1),
        new(393214, 393215, 1),
        new(458750, 458751, 1),
        new(524286, 524287, 1),
        new(589822, 589823, 1),
        new(655358, 655359, 1),
        new(720894, 720895, 1),
        new(786430, 786431, 1),
        new(851966, 851967, 1),
        new(917502, 917503, 1),
        new(983038, 983039, 1),
        new(1048574, 1048575, 1),
        new(1114110, 1114111, 1)
    }.slice()
));

internal static ж<RangeTable> _Other_Alphabetic = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(837, 1456, 619),
        new(1457, 1469, 1),
        new(1471, 1473, 2),
        new(1474, 1476, 2),
        new(1477, 1479, 2),
        new(1552, 1562, 1),
        new(1611, 1623, 1),
        new(1625, 1631, 1),
        new(1648, 1750, 102),
        new(1751, 1756, 1),
        new(1761, 1764, 1),
        new(1767, 1768, 1),
        new(1773, 1809, 36),
        new(1840, 1855, 1),
        new(1958, 1968, 1),
        new(2070, 2071, 1),
        new(2075, 2083, 1),
        new(2085, 2087, 1),
        new(2089, 2092, 1),
        new(2260, 2271, 1),
        new(2275, 2281, 1),
        new(2288, 2307, 1),
        new(2362, 2363, 1),
        new(2366, 2380, 1),
        new(2382, 2383, 1),
        new(2389, 2391, 1),
        new(2402, 2403, 1),
        new(2433, 2435, 1),
        new(2494, 2500, 1),
        new(2503, 2504, 1),
        new(2507, 2508, 1),
        new(2519, 2530, 11),
        new(2531, 2561, 30),
        new(2562, 2563, 1),
        new(2622, 2626, 1),
        new(2631, 2632, 1),
        new(2635, 2636, 1),
        new(2641, 2672, 31),
        new(2673, 2677, 4),
        new(2689, 2691, 1),
        new(2750, 2757, 1),
        new(2759, 2761, 1),
        new(2763, 2764, 1),
        new(2786, 2787, 1),
        new(2810, 2812, 1),
        new(2817, 2819, 1),
        new(2878, 2884, 1),
        new(2887, 2888, 1),
        new(2891, 2892, 1),
        new(2902, 2903, 1),
        new(2914, 2915, 1),
        new(2946, 3006, 60),
        new(3007, 3010, 1),
        new(3014, 3016, 1),
        new(3018, 3020, 1),
        new(3031, 3072, 41),
        new(3073, 3076, 1),
        new(3134, 3140, 1),
        new(3142, 3144, 1),
        new(3146, 3148, 1),
        new(3157, 3158, 1),
        new(3170, 3171, 1),
        new(3201, 3203, 1),
        new(3262, 3268, 1),
        new(3270, 3272, 1),
        new(3274, 3276, 1),
        new(3285, 3286, 1),
        new(3298, 3299, 1),
        new(3315, 3328, 13),
        new(3329, 3331, 1),
        new(3390, 3396, 1),
        new(3398, 3400, 1),
        new(3402, 3404, 1),
        new(3415, 3426, 11),
        new(3427, 3457, 30),
        new(3458, 3459, 1),
        new(3535, 3540, 1),
        new(3542, 3544, 2),
        new(3545, 3551, 1),
        new(3570, 3571, 1),
        new(3633, 3636, 3),
        new(3637, 3642, 1),
        new(3661, 3761, 100),
        new(3764, 3769, 1),
        new(3771, 3772, 1),
        new(3789, 3953, 164),
        new(3954, 3971, 1),
        new(3981, 3991, 1),
        new(3993, 4028, 1),
        new(4139, 4150, 1),
        new(4152, 4155, 3),
        new(4156, 4158, 1),
        new(4182, 4185, 1),
        new(4190, 4192, 1),
        new(4194, 4196, 1),
        new(4199, 4205, 1),
        new(4209, 4212, 1),
        new(4226, 4237, 1),
        new(4239, 4250, 11),
        new(4251, 4253, 1),
        new(5906, 5907, 1),
        new(5938, 5939, 1),
        new(5970, 5971, 1),
        new(6002, 6003, 1),
        new(6070, 6088, 1),
        new(6277, 6278, 1),
        new(6313, 6432, 119),
        new(6433, 6443, 1),
        new(6448, 6456, 1),
        new(6679, 6683, 1),
        new(6741, 6750, 1),
        new(6753, 6772, 1),
        new(6847, 6848, 1),
        new(6860, 6862, 1),
        new(6912, 6916, 1),
        new(6965, 6979, 1),
        new(7040, 7042, 1),
        new(7073, 7081, 1),
        new(7084, 7085, 1),
        new(7143, 7153, 1),
        new(7204, 7222, 1),
        new(7655, 7668, 1),
        new(9398, 9449, 1),
        new(11744, 11775, 1),
        new(42612, 42619, 1),
        new(42654, 42655, 1),
        new(43010, 43019, 9),
        new(43043, 43047, 1),
        new(43136, 43137, 1),
        new(43188, 43203, 1),
        new(43205, 43263, 58),
        new(43302, 43306, 1),
        new(43335, 43346, 1),
        new(43392, 43395, 1),
        new(43444, 43455, 1),
        new(43493, 43561, 68),
        new(43562, 43574, 1),
        new(43587, 43596, 9),
        new(43597, 43643, 46),
        new(43644, 43645, 1),
        new(43696, 43698, 2),
        new(43699, 43700, 1),
        new(43703, 43704, 1),
        new(43710, 43755, 45),
        new(43756, 43759, 1),
        new(43765, 44003, 238),
        new(44004, 44010, 1),
        new(64286, 64286, 1)
    }.slice(),
    R32: new Range32[]{
        new(66422, 66426, 1),
        new(68097, 68099, 1),
        new(68101, 68102, 1),
        new(68108, 68111, 1),
        new(68900, 68903, 1),
        new(69291, 69292, 1),
        new(69632, 69634, 1),
        new(69688, 69701, 1),
        new(69747, 69748, 1),
        new(69760, 69762, 1),
        new(69808, 69816, 1),
        new(69826, 69888, 62),
        new(69889, 69890, 1),
        new(69927, 69938, 1),
        new(69957, 69958, 1),
        new(70016, 70018, 1),
        new(70067, 70079, 1),
        new(70094, 70095, 1),
        new(70188, 70196, 1),
        new(70199, 70206, 7),
        new(70209, 70367, 158),
        new(70368, 70376, 1),
        new(70400, 70403, 1),
        new(70462, 70468, 1),
        new(70471, 70472, 1),
        new(70475, 70476, 1),
        new(70487, 70498, 11),
        new(70499, 70709, 210),
        new(70710, 70721, 1),
        new(70723, 70725, 1),
        new(70832, 70849, 1),
        new(71087, 71093, 1),
        new(71096, 71102, 1),
        new(71132, 71133, 1),
        new(71216, 71230, 1),
        new(71232, 71339, 107),
        new(71340, 71349, 1),
        new(71453, 71466, 1),
        new(71724, 71736, 1),
        new(71984, 71989, 1),
        new(71991, 71992, 1),
        new(71995, 71996, 1),
        new(72000, 72002, 2),
        new(72145, 72151, 1),
        new(72154, 72159, 1),
        new(72164, 72193, 29),
        new(72194, 72202, 1),
        new(72245, 72249, 1),
        new(72251, 72254, 1),
        new(72273, 72283, 1),
        new(72330, 72343, 1),
        new(72751, 72758, 1),
        new(72760, 72766, 1),
        new(72850, 72871, 1),
        new(72873, 72886, 1),
        new(73009, 73014, 1),
        new(73018, 73020, 2),
        new(73021, 73023, 2),
        new(73024, 73025, 1),
        new(73027, 73031, 4),
        new(73098, 73102, 1),
        new(73104, 73105, 1),
        new(73107, 73110, 1),
        new(73459, 73462, 1),
        new(73472, 73473, 1),
        new(73475, 73524, 49),
        new(73525, 73530, 1),
        new(73534, 73536, 1),
        new(94031, 94033, 2),
        new(94034, 94087, 1),
        new(94095, 94098, 1),
        new(94192, 94193, 1),
        new(113822, 122880, 9058),
        new(122881, 122886, 1),
        new(122888, 122904, 1),
        new(122907, 122913, 1),
        new(122915, 122916, 1),
        new(122918, 122922, 1),
        new(123023, 125255, 2232),
        new(127280, 127305, 1),
        new(127312, 127337, 1),
        new(127344, 127369, 1)
    }.slice()
));

internal static ж<RangeTable> _Other_Default_Ignorable_Code_Point = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(847, 4447, 3600),
        new(4448, 6068, 1620),
        new(6069, 8293, 2224),
        new(12644, 65440, 52796),
        new(65520, 65528, 1)
    }.slice(),
    R32: new Range32[]{
        new(917504, 917506, 2),
        new(917507, 917535, 1),
        new(917632, 917759, 1),
        new(918000, 921599, 1)
    }.slice()
));

internal static ж<RangeTable> _Other_Grapheme_Extend = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(2494, 2519, 25),
        new(2878, 2903, 25),
        new(3006, 3031, 25),
        new(3266, 3285, 19),
        new(3286, 3390, 104),
        new(3415, 3535, 120),
        new(3551, 6965, 3414),
        new(8204, 12334, 4130),
        new(12335, 65438, 53103),
        new(65439, 65439, 1)
    }.slice(),
    R32: new Range32[]{
        new(70462, 70487, 25),
        new(70832, 70845, 13),
        new(71087, 71984, 897),
        new(119141, 119150, 9),
        new(119151, 119154, 1),
        new(917536, 917631, 1)
    }.slice()
));

internal static ж<RangeTable> _Other_ID_Continue = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(183, 903, 720),
        new(4969, 4977, 1),
        new(6618, 6618, 1)
    }.slice()
));

internal static ж<RangeTable> _Other_ID_Start = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(6277, 6278, 1),
        new(8472, 8494, 22),
        new(12443, 12444, 1)
    }.slice()
));

internal static ж<RangeTable> _Other_Lowercase = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(170, 186, 16),
        new(688, 696, 1),
        new(704, 705, 1),
        new(736, 740, 1),
        new(837, 890, 53),
        new(4348, 7468, 3120),
        new(7469, 7530, 1),
        new(7544, 7579, 35),
        new(7580, 7615, 1),
        new(8305, 8319, 14),
        new(8336, 8348, 1),
        new(8560, 8575, 1),
        new(9424, 9449, 1),
        new(11388, 11389, 1),
        new(42652, 42653, 1),
        new(42864, 42994, 130),
        new(42995, 42996, 1),
        new(43000, 43001, 1),
        new(43868, 43871, 1),
        new(43881, 43881, 1)
    }.slice(),
    R32: new Range32[]{
        new(67456, 67459, 3),
        new(67460, 67461, 1),
        new(67463, 67504, 1),
        new(67506, 67514, 1),
        new(122928, 122989, 1)
    }.slice(),
    LatinOffset: 1
));

internal static ж<RangeTable> _Other_Math = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(94, 976, 882),
        new(977, 978, 1),
        new(981, 1008, 27),
        new(1009, 1012, 3),
        new(1013, 8214, 7201),
        new(8242, 8244, 1),
        new(8256, 8289, 33),
        new(8290, 8292, 1),
        new(8317, 8318, 1),
        new(8333, 8334, 1),
        new(8400, 8412, 1),
        new(8417, 8421, 4),
        new(8422, 8427, 5),
        new(8428, 8431, 1),
        new(8450, 8455, 5),
        new(8458, 8467, 1),
        new(8469, 8473, 4),
        new(8474, 8477, 1),
        new(8484, 8488, 4),
        new(8489, 8492, 3),
        new(8493, 8495, 2),
        new(8496, 8497, 1),
        new(8499, 8504, 1),
        new(8508, 8511, 1),
        new(8517, 8521, 1),
        new(8597, 8601, 1),
        new(8604, 8607, 1),
        new(8609, 8610, 1),
        new(8612, 8613, 1),
        new(8615, 8617, 2),
        new(8618, 8621, 1),
        new(8624, 8625, 1),
        new(8630, 8631, 1),
        new(8636, 8653, 1),
        new(8656, 8657, 1),
        new(8659, 8661, 2),
        new(8662, 8667, 1),
        new(8669, 8676, 7),
        new(8677, 8968, 291),
        new(8969, 8971, 1),
        new(9140, 9141, 1),
        new(9143, 9168, 25),
        new(9186, 9632, 446),
        new(9633, 9646, 13),
        new(9647, 9654, 1),
        new(9660, 9664, 1),
        new(9670, 9671, 1),
        new(9674, 9675, 1),
        new(9679, 9683, 1),
        new(9698, 9700, 2),
        new(9703, 9708, 1),
        new(9733, 9734, 1),
        new(9792, 9794, 2),
        new(9824, 9827, 1),
        new(9837, 9838, 1),
        new(10181, 10182, 1),
        new(10214, 10223, 1),
        new(10627, 10648, 1),
        new(10712, 10715, 1),
        new(10748, 10749, 1),
        new(65121, 65123, 2),
        new(65128, 65340, 212),
        new(65342, 65342, 1)
    }.slice(),
    R32: new Range32[]{
        new(119808, 119892, 1),
        new(119894, 119964, 1),
        new(119966, 119967, 1),
        new(119970, 119973, 3),
        new(119974, 119977, 3),
        new(119978, 119980, 1),
        new(119982, 119993, 1),
        new(119995, 119997, 2),
        new(119998, 120003, 1),
        new(120005, 120069, 1),
        new(120071, 120074, 1),
        new(120077, 120084, 1),
        new(120086, 120092, 1),
        new(120094, 120121, 1),
        new(120123, 120126, 1),
        new(120128, 120132, 1),
        new(120134, 120138, 4),
        new(120139, 120144, 1),
        new(120146, 120485, 1),
        new(120488, 120512, 1),
        new(120514, 120538, 1),
        new(120540, 120570, 1),
        new(120572, 120596, 1),
        new(120598, 120628, 1),
        new(120630, 120654, 1),
        new(120656, 120686, 1),
        new(120688, 120712, 1),
        new(120714, 120744, 1),
        new(120746, 120770, 1),
        new(120772, 120779, 1),
        new(120782, 120831, 1),
        new(126464, 126467, 1),
        new(126469, 126495, 1),
        new(126497, 126498, 1),
        new(126500, 126503, 3),
        new(126505, 126514, 1),
        new(126516, 126519, 1),
        new(126521, 126523, 2),
        new(126530, 126535, 5),
        new(126537, 126541, 2),
        new(126542, 126543, 1),
        new(126545, 126546, 1),
        new(126548, 126551, 3),
        new(126553, 126561, 2),
        new(126562, 126564, 2),
        new(126567, 126570, 1),
        new(126572, 126578, 1),
        new(126580, 126583, 1),
        new(126585, 126588, 1),
        new(126590, 126592, 2),
        new(126593, 126601, 1),
        new(126603, 126619, 1),
        new(126625, 126627, 1),
        new(126629, 126633, 1),
        new(126635, 126651, 1)
    }.slice()
));

internal static ж<RangeTable> _Other_Uppercase = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(8544, 8559, 1),
        new(9398, 9423, 1)
    }.slice(),
    R32: new Range32[]{
        new(127280, 127305, 1),
        new(127312, 127337, 1),
        new(127344, 127369, 1)
    }.slice()
));

internal static ж<RangeTable> _Pattern_Syntax = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(33, 47, 1),
        new(58, 64, 1),
        new(91, 94, 1),
        new(96, 123, 27),
        new(124, 126, 1),
        new(161, 167, 1),
        new(169, 171, 2),
        new(172, 176, 2),
        new(177, 187, 5),
        new(191, 215, 24),
        new(247, 8208, 7961),
        new(8209, 8231, 1),
        new(8240, 8254, 1),
        new(8257, 8275, 1),
        new(8277, 8286, 1),
        new(8592, 9311, 1),
        new(9472, 10101, 1),
        new(10132, 11263, 1),
        new(11776, 11903, 1),
        new(12289, 12291, 1),
        new(12296, 12320, 1),
        new(12336, 64830, 52494),
        new(64831, 65093, 262),
        new(65094, 65094, 1)
    }.slice(),
    LatinOffset: 10
));

internal static ж<RangeTable> _Pattern_White_Space = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(9, 13, 1),
        new(32, 133, 101),
        new(8206, 8207, 1),
        new(8232, 8233, 1)
    }.slice(),
    LatinOffset: 2
));

internal static ж<RangeTable> _Prepended_Concatenation_Mark = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(1536, 1541, 1),
        new(1757, 1807, 50),
        new(2192, 2193, 1),
        new(2274, 2274, 1)
    }.slice(),
    R32: new Range32[]{
        new(69821, 69837, 16)
    }.slice()
));

internal static ж<RangeTable> _Quotation_Mark = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(34, 39, 5),
        new(171, 187, 16),
        new(8216, 8223, 1),
        new(8249, 8250, 1),
        new(11842, 12300, 458),
        new(12301, 12303, 1),
        new(12317, 12319, 1),
        new(65089, 65092, 1),
        new(65282, 65287, 5),
        new(65378, 65379, 1)
    }.slice(),
    LatinOffset: 2
));

internal static ж<RangeTable> _Radical = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(11904, 11929, 1),
        new(11931, 12019, 1),
        new(12032, 12245, 1)
    }.slice()
));

internal static ж<RangeTable> _Regional_Indicator = Ꮡ(new RangeTable(
    R16: new Range16[]{}.slice(),
    R32: new Range32[]{
        new(127462, 127487, 1)
    }.slice()
));

internal static ж<RangeTable> _Sentence_Terminal = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(33, 46, 13),
        new(63, 1417, 1354),
        new(1565, 1567, 1),
        new(1748, 1792, 44),
        new(1793, 1794, 1),
        new(2041, 2103, 62),
        new(2105, 2109, 4),
        new(2110, 2404, 294),
        new(2405, 4170, 1765),
        new(4171, 4962, 791),
        new(4967, 4968, 1),
        new(5742, 5941, 199),
        new(5942, 6147, 205),
        new(6153, 6468, 315),
        new(6469, 6824, 355),
        new(6825, 6827, 1),
        new(7002, 7003, 1),
        new(7006, 7007, 1),
        new(7037, 7038, 1),
        new(7227, 7228, 1),
        new(7294, 7295, 1),
        new(8252, 8253, 1),
        new(8263, 8265, 1),
        new(11822, 11836, 14),
        new(11859, 11860, 1),
        new(12290, 42239, 29949),
        new(42510, 42511, 1),
        new(42739, 42743, 4),
        new(43126, 43127, 1),
        new(43214, 43215, 1),
        new(43311, 43464, 153),
        new(43465, 43613, 148),
        new(43614, 43615, 1),
        new(43760, 43761, 1),
        new(44011, 65106, 21095),
        new(65110, 65111, 1),
        new(65281, 65294, 13),
        new(65311, 65377, 66)
    }.slice(),
    R32: new Range32[]{
        new(68182, 68183, 1),
        new(69461, 69465, 1),
        new(69510, 69513, 1),
        new(69703, 69704, 1),
        new(69822, 69825, 1),
        new(69953, 69955, 1),
        new(70085, 70086, 1),
        new(70093, 70110, 17),
        new(70111, 70200, 89),
        new(70201, 70203, 2),
        new(70204, 70313, 109),
        new(70731, 70732, 1),
        new(71106, 71107, 1),
        new(71113, 71127, 1),
        new(71233, 71234, 1),
        new(71484, 71486, 1),
        new(72004, 72006, 2),
        new(72258, 72259, 1),
        new(72347, 72348, 1),
        new(72769, 72770, 1),
        new(73463, 73464, 1),
        new(73539, 73540, 1),
        new(92782, 92783, 1),
        new(92917, 92983, 66),
        new(92984, 92996, 12),
        new(93848, 113823, 19975),
        new(121480, 121480, 1)
    }.slice(),
    LatinOffset: 1
));

internal static ж<RangeTable> _Soft_Dotted = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(105, 106, 1),
        new(303, 585, 282),
        new(616, 669, 53),
        new(690, 1011, 321),
        new(1110, 1112, 2),
        new(7522, 7574, 52),
        new(7588, 7592, 4),
        new(7725, 7883, 158),
        new(8305, 8520, 215),
        new(8521, 11388, 2867)
    }.slice(),
    R32: new Range32[]{
        new(119842, 119843, 1),
        new(119894, 119895, 1),
        new(119946, 119947, 1),
        new(119998, 119999, 1),
        new(120050, 120051, 1),
        new(120102, 120103, 1),
        new(120154, 120155, 1),
        new(120206, 120207, 1),
        new(120258, 120259, 1),
        new(120310, 120311, 1),
        new(120362, 120363, 1),
        new(120414, 120415, 1),
        new(120466, 120467, 1),
        new(122650, 122956, 306),
        new(122957, 122984, 27)
    }.slice(),
    LatinOffset: 1
));

internal static ж<RangeTable> _Terminal_Punctuation = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(33, 44, 11),
        new(46, 58, 12),
        new(59, 63, 4),
        new(894, 903, 9),
        new(1417, 1475, 58),
        new(1548, 1563, 15),
        new(1565, 1567, 1),
        new(1748, 1792, 44),
        new(1793, 1802, 1),
        new(1804, 2040, 236),
        new(2041, 2096, 55),
        new(2097, 2110, 1),
        new(2142, 2404, 262),
        new(2405, 3674, 1269),
        new(3675, 3848, 173),
        new(3853, 3858, 1),
        new(4170, 4171, 1),
        new(4961, 4968, 1),
        new(5742, 5867, 125),
        new(5868, 5869, 1),
        new(5941, 5942, 1),
        new(6100, 6102, 1),
        new(6106, 6146, 40),
        new(6147, 6149, 1),
        new(6152, 6153, 1),
        new(6468, 6469, 1),
        new(6824, 6827, 1),
        new(7002, 7003, 1),
        new(7005, 7007, 1),
        new(7037, 7038, 1),
        new(7227, 7231, 1),
        new(7294, 7295, 1),
        new(8252, 8253, 1),
        new(8263, 8265, 1),
        new(11822, 11836, 14),
        new(11841, 11852, 11),
        new(11854, 11855, 1),
        new(11859, 11860, 1),
        new(12289, 12290, 1),
        new(42238, 42239, 1),
        new(42509, 42511, 1),
        new(42739, 42743, 1),
        new(43126, 43127, 1),
        new(43214, 43215, 1),
        new(43311, 43463, 152),
        new(43464, 43465, 1),
        new(43613, 43615, 1),
        new(43743, 43760, 17),
        new(43761, 44011, 250),
        new(65104, 65106, 1),
        new(65108, 65111, 1),
        new(65281, 65292, 11),
        new(65294, 65306, 12),
        new(65307, 65311, 4),
        new(65377, 65380, 3)
    }.slice(),
    R32: new Range32[]{
        new(66463, 66512, 49),
        new(67671, 67871, 200),
        new(68182, 68183, 1),
        new(68336, 68341, 1),
        new(68410, 68415, 1),
        new(68505, 68508, 1),
        new(69461, 69465, 1),
        new(69510, 69513, 1),
        new(69703, 69709, 1),
        new(69822, 69825, 1),
        new(69953, 69955, 1),
        new(70085, 70086, 1),
        new(70093, 70110, 17),
        new(70111, 70200, 89),
        new(70201, 70204, 1),
        new(70313, 70731, 418),
        new(70732, 70733, 1),
        new(70746, 70747, 1),
        new(71106, 71109, 1),
        new(71113, 71127, 1),
        new(71233, 71234, 1),
        new(71484, 71486, 1),
        new(72004, 72006, 2),
        new(72258, 72259, 1),
        new(72347, 72348, 1),
        new(72353, 72354, 1),
        new(72769, 72771, 1),
        new(72817, 73463, 646),
        new(73464, 73539, 75),
        new(73540, 74864, 1324),
        new(74865, 74868, 1),
        new(92782, 92783, 1),
        new(92917, 92983, 66),
        new(92984, 92985, 1),
        new(92996, 93847, 851),
        new(93848, 113823, 19975),
        new(121479, 121482, 1)
    }.slice(),
    LatinOffset: 3
));

internal static ж<RangeTable> _Unified_Ideograph = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(13312, 19903, 1),
        new(19968, 40959, 1),
        new(64014, 64015, 1),
        new(64017, 64019, 2),
        new(64020, 64031, 11),
        new(64033, 64035, 2),
        new(64036, 64039, 3),
        new(64040, 64041, 1)
    }.slice(),
    R32: new Range32[]{
        new(131072, 173791, 1),
        new(173824, 177977, 1),
        new(177984, 178205, 1),
        new(178208, 183969, 1),
        new(183984, 191456, 1),
        new(196608, 201546, 1),
        new(201552, 205743, 1)
    }.slice()
));

internal static ж<RangeTable> _Variation_Selector = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(6155, 6157, 1),
        new(6159, 65024, 58865),
        new(65025, 65039, 1)
    }.slice(),
    R32: new Range32[]{
        new(917760, 917999, 1)
    }.slice()
));

internal static ж<RangeTable> _White_Space = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(9, 13, 1),
        new(32, 133, 101),
        new(160, 5760, 5600),
        new(8192, 8202, 1),
        new(8232, 8233, 1),
        new(8239, 8287, 48),
        new(12288, 12288, 1)
    }.slice(),
    LatinOffset: 2
));

// These variables have type *RangeTable.
public static ж<RangeTable> ASCII_Hex_Digit = _ASCII_Hex_Digit;                   // ASCII_Hex_Digit is the set of Unicode characters with property ASCII_Hex_Digit.

public static ж<RangeTable> Bidi_Control = _Bidi_Control;                      // Bidi_Control is the set of Unicode characters with property Bidi_Control.

public static ж<RangeTable> Dash = _Dash;                              // Dash is the set of Unicode characters with property Dash.

public static ж<RangeTable> Deprecated = _Deprecated;                        // Deprecated is the set of Unicode characters with property Deprecated.

public static ж<RangeTable> Diacritic = _Diacritic;                         // Diacritic is the set of Unicode characters with property Diacritic.

public static ж<RangeTable> Extender = _Extender;                          // Extender is the set of Unicode characters with property Extender.

public static ж<RangeTable> Hex_Digit = _Hex_Digit;                         // Hex_Digit is the set of Unicode characters with property Hex_Digit.

public static ж<RangeTable> Hyphen = _Hyphen;                            // Hyphen is the set of Unicode characters with property Hyphen.

public static ж<RangeTable> IDS_Binary_Operator = _IDS_Binary_Operator;               // IDS_Binary_Operator is the set of Unicode characters with property IDS_Binary_Operator.

public static ж<RangeTable> IDS_Trinary_Operator = _IDS_Trinary_Operator;              // IDS_Trinary_Operator is the set of Unicode characters with property IDS_Trinary_Operator.

public static ж<RangeTable> Ideographic = _Ideographic;                       // Ideographic is the set of Unicode characters with property Ideographic.

public static ж<RangeTable> Join_Control = _Join_Control;                      // Join_Control is the set of Unicode characters with property Join_Control.

public static ж<RangeTable> Logical_Order_Exception = _Logical_Order_Exception;           // Logical_Order_Exception is the set of Unicode characters with property Logical_Order_Exception.

public static ж<RangeTable> Noncharacter_Code_Point = _Noncharacter_Code_Point;           // Noncharacter_Code_Point is the set of Unicode characters with property Noncharacter_Code_Point.

public static ж<RangeTable> Other_Alphabetic = _Other_Alphabetic;                  // Other_Alphabetic is the set of Unicode characters with property Other_Alphabetic.

public static ж<RangeTable> Other_Default_Ignorable_Code_Point = _Other_Default_Ignorable_Code_Point; // Other_Default_Ignorable_Code_Point is the set of Unicode characters with property Other_Default_Ignorable_Code_Point.

public static ж<RangeTable> Other_Grapheme_Extend = _Other_Grapheme_Extend;             // Other_Grapheme_Extend is the set of Unicode characters with property Other_Grapheme_Extend.

public static ж<RangeTable> Other_ID_Continue = _Other_ID_Continue;                 // Other_ID_Continue is the set of Unicode characters with property Other_ID_Continue.

public static ж<RangeTable> Other_ID_Start = _Other_ID_Start;                    // Other_ID_Start is the set of Unicode characters with property Other_ID_Start.

public static ж<RangeTable> Other_Lowercase = _Other_Lowercase;                   // Other_Lowercase is the set of Unicode characters with property Other_Lowercase.

public static ж<RangeTable> Other_Math = _Other_Math;                        // Other_Math is the set of Unicode characters with property Other_Math.

public static ж<RangeTable> Other_Uppercase = _Other_Uppercase;                   // Other_Uppercase is the set of Unicode characters with property Other_Uppercase.

public static ж<RangeTable> Pattern_Syntax = _Pattern_Syntax;                    // Pattern_Syntax is the set of Unicode characters with property Pattern_Syntax.

public static ж<RangeTable> Pattern_White_Space = _Pattern_White_Space;               // Pattern_White_Space is the set of Unicode characters with property Pattern_White_Space.

public static ж<RangeTable> Prepended_Concatenation_Mark = _Prepended_Concatenation_Mark;      // Prepended_Concatenation_Mark is the set of Unicode characters with property Prepended_Concatenation_Mark.

public static ж<RangeTable> Quotation_Mark = _Quotation_Mark;                    // Quotation_Mark is the set of Unicode characters with property Quotation_Mark.

public static ж<RangeTable> Radical = _Radical;                           // Radical is the set of Unicode characters with property Radical.

public static ж<RangeTable> Regional_Indicator = _Regional_Indicator;                // Regional_Indicator is the set of Unicode characters with property Regional_Indicator.

public static ж<RangeTable> STerm = _Sentence_Terminal;                 // STerm is an alias for Sentence_Terminal.

public static ж<RangeTable> Sentence_Terminal = _Sentence_Terminal;                 // Sentence_Terminal is the set of Unicode characters with property Sentence_Terminal.

public static ж<RangeTable> Soft_Dotted = _Soft_Dotted;                       // Soft_Dotted is the set of Unicode characters with property Soft_Dotted.

public static ж<RangeTable> Terminal_Punctuation = _Terminal_Punctuation;              // Terminal_Punctuation is the set of Unicode characters with property Terminal_Punctuation.

public static ж<RangeTable> Unified_Ideograph = _Unified_Ideograph;                 // Unified_Ideograph is the set of Unicode characters with property Unified_Ideograph.

public static ж<RangeTable> Variation_Selector = _Variation_Selector;                // Variation_Selector is the set of Unicode characters with property Variation_Selector.

public static ж<RangeTable> White_Space = _White_Space;                       // White_Space is the set of Unicode characters with property White_Space.

// CaseRanges is the table describing case mappings for all letters with
// non-self mappings.
public static slice<CaseRange> CaseRanges = _CaseRanges;

internal static slice<CaseRange> _CaseRanges = new CaseRange[]{
    new(65, 90, new d{0, 32, 0}),
    new(97, 122, new d{-32, 0, -32}),
    new(181, 181, new d{743, 0, 743}),
    new(192, 214, new d{0, 32, 0}),
    new(216, 222, new d{0, 32, 0}),
    new(224, 246, new d{-32, 0, -32}),
    new(248, 254, new d{-32, 0, -32}),
    new(255, 255, new d{121, 0, 121}),
    new(256, 303, new d{UpperLower, UpperLower, UpperLower}),
    new(304, 304, new d{0, -199, 0}),
    new(305, 305, new d{-232, 0, -232}),
    new(306, 311, new d{UpperLower, UpperLower, UpperLower}),
    new(313, 328, new d{UpperLower, UpperLower, UpperLower}),
    new(330, 375, new d{UpperLower, UpperLower, UpperLower}),
    new(376, 376, new d{0, -121, 0}),
    new(377, 382, new d{UpperLower, UpperLower, UpperLower}),
    new(383, 383, new d{-300, 0, -300}),
    new(384, 384, new d{195, 0, 195}),
    new(385, 385, new d{0, 210, 0}),
    new(386, 389, new d{UpperLower, UpperLower, UpperLower}),
    new(390, 390, new d{0, 206, 0}),
    new(391, 392, new d{UpperLower, UpperLower, UpperLower}),
    new(393, 394, new d{0, 205, 0}),
    new(395, 396, new d{UpperLower, UpperLower, UpperLower}),
    new(398, 398, new d{0, 79, 0}),
    new(399, 399, new d{0, 202, 0}),
    new(400, 400, new d{0, 203, 0}),
    new(401, 402, new d{UpperLower, UpperLower, UpperLower}),
    new(403, 403, new d{0, 205, 0}),
    new(404, 404, new d{0, 207, 0}),
    new(405, 405, new d{97, 0, 97}),
    new(406, 406, new d{0, 211, 0}),
    new(407, 407, new d{0, 209, 0}),
    new(408, 409, new d{UpperLower, UpperLower, UpperLower}),
    new(410, 410, new d{163, 0, 163}),
    new(412, 412, new d{0, 211, 0}),
    new(413, 413, new d{0, 213, 0}),
    new(414, 414, new d{130, 0, 130}),
    new(415, 415, new d{0, 214, 0}),
    new(416, 421, new d{UpperLower, UpperLower, UpperLower}),
    new(422, 422, new d{0, 218, 0}),
    new(423, 424, new d{UpperLower, UpperLower, UpperLower}),
    new(425, 425, new d{0, 218, 0}),
    new(428, 429, new d{UpperLower, UpperLower, UpperLower}),
    new(430, 430, new d{0, 218, 0}),
    new(431, 432, new d{UpperLower, UpperLower, UpperLower}),
    new(433, 434, new d{0, 217, 0}),
    new(435, 438, new d{UpperLower, UpperLower, UpperLower}),
    new(439, 439, new d{0, 219, 0}),
    new(440, 441, new d{UpperLower, UpperLower, UpperLower}),
    new(444, 445, new d{UpperLower, UpperLower, UpperLower}),
    new(447, 447, new d{56, 0, 56}),
    new(452, 452, new d{0, 2, 1}),
    new(453, 453, new d{-1, 1, 0}),
    new(454, 454, new d{-2, 0, -1}),
    new(455, 455, new d{0, 2, 1}),
    new(456, 456, new d{-1, 1, 0}),
    new(457, 457, new d{-2, 0, -1}),
    new(458, 458, new d{0, 2, 1}),
    new(459, 459, new d{-1, 1, 0}),
    new(460, 460, new d{-2, 0, -1}),
    new(461, 476, new d{UpperLower, UpperLower, UpperLower}),
    new(477, 477, new d{-79, 0, -79}),
    new(478, 495, new d{UpperLower, UpperLower, UpperLower}),
    new(497, 497, new d{0, 2, 1}),
    new(498, 498, new d{-1, 1, 0}),
    new(499, 499, new d{-2, 0, -1}),
    new(500, 501, new d{UpperLower, UpperLower, UpperLower}),
    new(502, 502, new d{0, -97, 0}),
    new(503, 503, new d{0, -56, 0}),
    new(504, 543, new d{UpperLower, UpperLower, UpperLower}),
    new(544, 544, new d{0, -130, 0}),
    new(546, 563, new d{UpperLower, UpperLower, UpperLower}),
    new(570, 570, new d{0, 10795, 0}),
    new(571, 572, new d{UpperLower, UpperLower, UpperLower}),
    new(573, 573, new d{0, -163, 0}),
    new(574, 574, new d{0, 10792, 0}),
    new(575, 576, new d{10815, 0, 10815}),
    new(577, 578, new d{UpperLower, UpperLower, UpperLower}),
    new(579, 579, new d{0, -195, 0}),
    new(580, 580, new d{0, 69, 0}),
    new(581, 581, new d{0, 71, 0}),
    new(582, 591, new d{UpperLower, UpperLower, UpperLower}),
    new(592, 592, new d{10783, 0, 10783}),
    new(593, 593, new d{10780, 0, 10780}),
    new(594, 594, new d{10782, 0, 10782}),
    new(595, 595, new d{-210, 0, -210}),
    new(596, 596, new d{-206, 0, -206}),
    new(598, 599, new d{-205, 0, -205}),
    new(601, 601, new d{-202, 0, -202}),
    new(603, 603, new d{-203, 0, -203}),
    new(604, 604, new d{42319, 0, 42319}),
    new(608, 608, new d{-205, 0, -205}),
    new(609, 609, new d{42315, 0, 42315}),
    new(611, 611, new d{-207, 0, -207}),
    new(613, 613, new d{42280, 0, 42280}),
    new(614, 614, new d{42308, 0, 42308}),
    new(616, 616, new d{-209, 0, -209}),
    new(617, 617, new d{-211, 0, -211}),
    new(618, 618, new d{42308, 0, 42308}),
    new(619, 619, new d{10743, 0, 10743}),
    new(620, 620, new d{42305, 0, 42305}),
    new(623, 623, new d{-211, 0, -211}),
    new(625, 625, new d{10749, 0, 10749}),
    new(626, 626, new d{-213, 0, -213}),
    new(629, 629, new d{-214, 0, -214}),
    new(637, 637, new d{10727, 0, 10727}),
    new(640, 640, new d{-218, 0, -218}),
    new(642, 642, new d{42307, 0, 42307}),
    new(643, 643, new d{-218, 0, -218}),
    new(647, 647, new d{42282, 0, 42282}),
    new(648, 648, new d{-218, 0, -218}),
    new(649, 649, new d{-69, 0, -69}),
    new(650, 651, new d{-217, 0, -217}),
    new(652, 652, new d{-71, 0, -71}),
    new(658, 658, new d{-219, 0, -219}),
    new(669, 669, new d{42261, 0, 42261}),
    new(670, 670, new d{42258, 0, 42258}),
    new(837, 837, new d{84, 0, 84}),
    new(880, 883, new d{UpperLower, UpperLower, UpperLower}),
    new(886, 887, new d{UpperLower, UpperLower, UpperLower}),
    new(891, 893, new d{130, 0, 130}),
    new(895, 895, new d{0, 116, 0}),
    new(902, 902, new d{0, 38, 0}),
    new(904, 906, new d{0, 37, 0}),
    new(908, 908, new d{0, 64, 0}),
    new(910, 911, new d{0, 63, 0}),
    new(913, 929, new d{0, 32, 0}),
    new(931, 939, new d{0, 32, 0}),
    new(940, 940, new d{-38, 0, -38}),
    new(941, 943, new d{-37, 0, -37}),
    new(945, 961, new d{-32, 0, -32}),
    new(962, 962, new d{-31, 0, -31}),
    new(963, 971, new d{-32, 0, -32}),
    new(972, 972, new d{-64, 0, -64}),
    new(973, 974, new d{-63, 0, -63}),
    new(975, 975, new d{0, 8, 0}),
    new(976, 976, new d{-62, 0, -62}),
    new(977, 977, new d{-57, 0, -57}),
    new(981, 981, new d{-47, 0, -47}),
    new(982, 982, new d{-54, 0, -54}),
    new(983, 983, new d{-8, 0, -8}),
    new(984, 1007, new d{UpperLower, UpperLower, UpperLower}),
    new(1008, 1008, new d{-86, 0, -86}),
    new(1009, 1009, new d{-80, 0, -80}),
    new(1010, 1010, new d{7, 0, 7}),
    new(1011, 1011, new d{-116, 0, -116}),
    new(1012, 1012, new d{0, -60, 0}),
    new(1013, 1013, new d{-96, 0, -96}),
    new(1015, 1016, new d{UpperLower, UpperLower, UpperLower}),
    new(1017, 1017, new d{0, -7, 0}),
    new(1018, 1019, new d{UpperLower, UpperLower, UpperLower}),
    new(1021, 1023, new d{0, -130, 0}),
    new(1024, 1039, new d{0, 80, 0}),
    new(1040, 1071, new d{0, 32, 0}),
    new(1072, 1103, new d{-32, 0, -32}),
    new(1104, 1119, new d{-80, 0, -80}),
    new(1120, 1153, new d{UpperLower, UpperLower, UpperLower}),
    new(1162, 1215, new d{UpperLower, UpperLower, UpperLower}),
    new(1216, 1216, new d{0, 15, 0}),
    new(1217, 1230, new d{UpperLower, UpperLower, UpperLower}),
    new(1231, 1231, new d{-15, 0, -15}),
    new(1232, 1327, new d{UpperLower, UpperLower, UpperLower}),
    new(1329, 1366, new d{0, 48, 0}),
    new(1377, 1414, new d{-48, 0, -48}),
    new(4256, 4293, new d{0, 7264, 0}),
    new(4295, 4295, new d{0, 7264, 0}),
    new(4301, 4301, new d{0, 7264, 0}),
    new(4304, 4346, new d{3008, 0, 0}),
    new(4349, 4351, new d{3008, 0, 0}),
    new(5024, 5103, new d{0, 38864, 0}),
    new(5104, 5109, new d{0, 8, 0}),
    new(5112, 5117, new d{-8, 0, -8}),
    new(7296, 7296, new d{-6254, 0, -6254}),
    new(7297, 7297, new d{-6253, 0, -6253}),
    new(7298, 7298, new d{-6244, 0, -6244}),
    new(7299, 7300, new d{-6242, 0, -6242}),
    new(7301, 7301, new d{-6243, 0, -6243}),
    new(7302, 7302, new d{-6236, 0, -6236}),
    new(7303, 7303, new d{-6181, 0, -6181}),
    new(7304, 7304, new d{35266, 0, 35266}),
    new(7312, 7354, new d{0, -3008, 0}),
    new(7357, 7359, new d{0, -3008, 0}),
    new(7545, 7545, new d{35332, 0, 35332}),
    new(7549, 7549, new d{3814, 0, 3814}),
    new(7566, 7566, new d{35384, 0, 35384}),
    new(7680, 7829, new d{UpperLower, UpperLower, UpperLower}),
    new(7835, 7835, new d{-59, 0, -59}),
    new(7838, 7838, new d{0, -7615, 0}),
    new(7840, 7935, new d{UpperLower, UpperLower, UpperLower}),
    new(7936, 7943, new d{8, 0, 8}),
    new(7944, 7951, new d{0, -8, 0}),
    new(7952, 7957, new d{8, 0, 8}),
    new(7960, 7965, new d{0, -8, 0}),
    new(7968, 7975, new d{8, 0, 8}),
    new(7976, 7983, new d{0, -8, 0}),
    new(7984, 7991, new d{8, 0, 8}),
    new(7992, 7999, new d{0, -8, 0}),
    new(8000, 8005, new d{8, 0, 8}),
    new(8008, 8013, new d{0, -8, 0}),
    new(8017, 8017, new d{8, 0, 8}),
    new(8019, 8019, new d{8, 0, 8}),
    new(8021, 8021, new d{8, 0, 8}),
    new(8023, 8023, new d{8, 0, 8}),
    new(8025, 8025, new d{0, -8, 0}),
    new(8027, 8027, new d{0, -8, 0}),
    new(8029, 8029, new d{0, -8, 0}),
    new(8031, 8031, new d{0, -8, 0}),
    new(8032, 8039, new d{8, 0, 8}),
    new(8040, 8047, new d{0, -8, 0}),
    new(8048, 8049, new d{74, 0, 74}),
    new(8050, 8053, new d{86, 0, 86}),
    new(8054, 8055, new d{100, 0, 100}),
    new(8056, 8057, new d{128, 0, 128}),
    new(8058, 8059, new d{112, 0, 112}),
    new(8060, 8061, new d{126, 0, 126}),
    new(8064, 8071, new d{8, 0, 8}),
    new(8072, 8079, new d{0, -8, 0}),
    new(8080, 8087, new d{8, 0, 8}),
    new(8088, 8095, new d{0, -8, 0}),
    new(8096, 8103, new d{8, 0, 8}),
    new(8104, 8111, new d{0, -8, 0}),
    new(8112, 8113, new d{8, 0, 8}),
    new(8115, 8115, new d{9, 0, 9}),
    new(8120, 8121, new d{0, -8, 0}),
    new(8122, 8123, new d{0, -74, 0}),
    new(8124, 8124, new d{0, -9, 0}),
    new(8126, 8126, new d{-7205, 0, -7205}),
    new(8131, 8131, new d{9, 0, 9}),
    new(8136, 8139, new d{0, -86, 0}),
    new(8140, 8140, new d{0, -9, 0}),
    new(8144, 8145, new d{8, 0, 8}),
    new(8152, 8153, new d{0, -8, 0}),
    new(8154, 8155, new d{0, -100, 0}),
    new(8160, 8161, new d{8, 0, 8}),
    new(8165, 8165, new d{7, 0, 7}),
    new(8168, 8169, new d{0, -8, 0}),
    new(8170, 8171, new d{0, -112, 0}),
    new(8172, 8172, new d{0, -7, 0}),
    new(8179, 8179, new d{9, 0, 9}),
    new(8184, 8185, new d{0, -128, 0}),
    new(8186, 8187, new d{0, -126, 0}),
    new(8188, 8188, new d{0, -9, 0}),
    new(8486, 8486, new d{0, -7517, 0}),
    new(8490, 8490, new d{0, -8383, 0}),
    new(8491, 8491, new d{0, -8262, 0}),
    new(8498, 8498, new d{0, 28, 0}),
    new(8526, 8526, new d{-28, 0, -28}),
    new(8544, 8559, new d{0, 16, 0}),
    new(8560, 8575, new d{-16, 0, -16}),
    new(8579, 8580, new d{UpperLower, UpperLower, UpperLower}),
    new(9398, 9423, new d{0, 26, 0}),
    new(9424, 9449, new d{-26, 0, -26}),
    new(11264, 11311, new d{0, 48, 0}),
    new(11312, 11359, new d{-48, 0, -48}),
    new(11360, 11361, new d{UpperLower, UpperLower, UpperLower}),
    new(11362, 11362, new d{0, -10743, 0}),
    new(11363, 11363, new d{0, -3814, 0}),
    new(11364, 11364, new d{0, -10727, 0}),
    new(11365, 11365, new d{-10795, 0, -10795}),
    new(11366, 11366, new d{-10792, 0, -10792}),
    new(11367, 11372, new d{UpperLower, UpperLower, UpperLower}),
    new(11373, 11373, new d{0, -10780, 0}),
    new(11374, 11374, new d{0, -10749, 0}),
    new(11375, 11375, new d{0, -10783, 0}),
    new(11376, 11376, new d{0, -10782, 0}),
    new(11378, 11379, new d{UpperLower, UpperLower, UpperLower}),
    new(11381, 11382, new d{UpperLower, UpperLower, UpperLower}),
    new(11390, 11391, new d{0, -10815, 0}),
    new(11392, 11491, new d{UpperLower, UpperLower, UpperLower}),
    new(11499, 11502, new d{UpperLower, UpperLower, UpperLower}),
    new(11506, 11507, new d{UpperLower, UpperLower, UpperLower}),
    new(11520, 11557, new d{-7264, 0, -7264}),
    new(11559, 11559, new d{-7264, 0, -7264}),
    new(11565, 11565, new d{-7264, 0, -7264}),
    new(42560, 42605, new d{UpperLower, UpperLower, UpperLower}),
    new(42624, 42651, new d{UpperLower, UpperLower, UpperLower}),
    new(42786, 42799, new d{UpperLower, UpperLower, UpperLower}),
    new(42802, 42863, new d{UpperLower, UpperLower, UpperLower}),
    new(42873, 42876, new d{UpperLower, UpperLower, UpperLower}),
    new(42877, 42877, new d{0, -35332, 0}),
    new(42878, 42887, new d{UpperLower, UpperLower, UpperLower}),
    new(42891, 42892, new d{UpperLower, UpperLower, UpperLower}),
    new(42893, 42893, new d{0, -42280, 0}),
    new(42896, 42899, new d{UpperLower, UpperLower, UpperLower}),
    new(42900, 42900, new d{48, 0, 48}),
    new(42902, 42921, new d{UpperLower, UpperLower, UpperLower}),
    new(42922, 42922, new d{0, -42308, 0}),
    new(42923, 42923, new d{0, -42319, 0}),
    new(42924, 42924, new d{0, -42315, 0}),
    new(42925, 42925, new d{0, -42305, 0}),
    new(42926, 42926, new d{0, -42308, 0}),
    new(42928, 42928, new d{0, -42258, 0}),
    new(42929, 42929, new d{0, -42282, 0}),
    new(42930, 42930, new d{0, -42261, 0}),
    new(42931, 42931, new d{0, 928, 0}),
    new(42932, 42947, new d{UpperLower, UpperLower, UpperLower}),
    new(42948, 42948, new d{0, -48, 0}),
    new(42949, 42949, new d{0, -42307, 0}),
    new(42950, 42950, new d{0, -35384, 0}),
    new(42951, 42954, new d{UpperLower, UpperLower, UpperLower}),
    new(42960, 42961, new d{UpperLower, UpperLower, UpperLower}),
    new(42966, 42969, new d{UpperLower, UpperLower, UpperLower}),
    new(42997, 42998, new d{UpperLower, UpperLower, UpperLower}),
    new(43859, 43859, new d{-928, 0, -928}),
    new(43888, 43967, new d{-38864, 0, -38864}),
    new(65313, 65338, new d{0, 32, 0}),
    new(65345, 65370, new d{-32, 0, -32}),
    new(66560, 66599, new d{0, 40, 0}),
    new(66600, 66639, new d{-40, 0, -40}),
    new(66736, 66771, new d{0, 40, 0}),
    new(66776, 66811, new d{-40, 0, -40}),
    new(66928, 66938, new d{0, 39, 0}),
    new(66940, 66954, new d{0, 39, 0}),
    new(66956, 66962, new d{0, 39, 0}),
    new(66964, 66965, new d{0, 39, 0}),
    new(66967, 66977, new d{-39, 0, -39}),
    new(66979, 66993, new d{-39, 0, -39}),
    new(66995, 67001, new d{-39, 0, -39}),
    new(67003, 67004, new d{-39, 0, -39}),
    new(68736, 68786, new d{0, 64, 0}),
    new(68800, 68850, new d{-64, 0, -64}),
    new(71840, 71871, new d{0, 32, 0}),
    new(71872, 71903, new d{-32, 0, -32}),
    new(93760, 93791, new d{0, 32, 0}),
    new(93792, 93823, new d{-32, 0, -32}),
    new(125184, 125217, new d{0, 34, 0}),
    new(125218, 125251, new d{-34, 0, -34})
}.slice();

// '\x00'
// '\x01'
// '\x02'
// '\x03'
// '\x04'
// '\x05'
// '\x06'
// '\a'
// '\b'
// '\t'
// '\n'
// '\v'
// '\f'
// '\r'
// '\x0e'
// '\x0f'
// '\x10'
// '\x11'
// '\x12'
// '\x13'
// '\x14'
// '\x15'
// '\x16'
// '\x17'
// '\x18'
// '\x19'
// '\x1a'
// '\x1b'
// '\x1c'
// '\x1d'
// '\x1e'
// '\x1f'
// ' '
// '!'
// '"'
// '#'
// '$'
// '%'
// '&'
// '\''
// '('
// ')'
// '*'
// '+'
// ','
// '-'
// '.'
// '/'
// '0'
// '1'
// '2'
// '3'
// '4'
// '5'
// '6'
// '7'
// '8'
// '9'
// ':'
// ';'
// '<'
// '='
// '>'
// '?'
// '@'
// 'A'
// 'B'
// 'C'
// 'D'
// 'E'
// 'F'
// 'G'
// 'H'
// 'I'
// 'J'
// 'K'
// 'L'
// 'M'
// 'N'
// 'O'
// 'P'
// 'Q'
// 'R'
// 'S'
// 'T'
// 'U'
// 'V'
// 'W'
// 'X'
// 'Y'
// 'Z'
// '['
// '\\'
// ']'
// '^'
// '_'
// '`'
// 'a'
// 'b'
// 'c'
// 'd'
// 'e'
// 'f'
// 'g'
// 'h'
// 'i'
// 'j'
// 'k'
// 'l'
// 'm'
// 'n'
// 'o'
// 'p'
// 'q'
// 'r'
// 's'
// 't'
// 'u'
// 'v'
// 'w'
// 'x'
// 'y'
// 'z'
// '{'
// '|'
// '}'
// '~'
// '\x7f'
// '\u0080'
// '\u0081'
// '\u0082'
// '\u0083'
// '\u0084'
// '\u0085'
// '\u0086'
// '\u0087'
// '\u0088'
// '\u0089'
// '\u008a'
// '\u008b'
// '\u008c'
// '\u008d'
// '\u008e'
// '\u008f'
// '\u0090'
// '\u0091'
// '\u0092'
// '\u0093'
// '\u0094'
// '\u0095'
// '\u0096'
// '\u0097'
// '\u0098'
// '\u0099'
// '\u009a'
// '\u009b'
// '\u009c'
// '\u009d'
// '\u009e'
// '\u009f'
// '\u00a0'
// '¡'
// '¢'
// '£'
// '¤'
// '¥'
// '¦'
// '§'
// '¨'
// '©'
// 'ª'
// '«'
// '¬'
// '\u00ad'
// '®'
// '¯'
// '°'
// '±'
// '²'
// '³'
// '´'
// 'µ'
// '¶'
// '·'
// '¸'
// '¹'
// 'º'
// '»'
// '¼'
// '½'
// '¾'
// '¿'
// 'À'
// 'Á'
// 'Â'
// 'Ã'
// 'Ä'
// 'Å'
// 'Æ'
// 'Ç'
// 'È'
// 'É'
// 'Ê'
// 'Ë'
// 'Ì'
// 'Í'
// 'Î'
// 'Ï'
// 'Ð'
// 'Ñ'
// 'Ò'
// 'Ó'
// 'Ô'
// 'Õ'
// 'Ö'
// '×'
// 'Ø'
// 'Ù'
// 'Ú'
// 'Û'
// 'Ü'
// 'Ý'
// 'Þ'
// 'ß'
// 'à'
// 'á'
// 'â'
// 'ã'
// 'ä'
// 'å'
// 'æ'
// 'ç'
// 'è'
// 'é'
// 'ê'
// 'ë'
// 'ì'
// 'í'
// 'î'
// 'ï'
// 'ð'
// 'ñ'
// 'ò'
// 'ó'
// 'ô'
// 'õ'
// 'ö'
// '÷'
// 'ø'
// 'ù'
// 'ú'
// 'û'
// 'ü'
// 'ý'
// 'þ'
// 'ÿ'
internal static array<uint8> properties = new array<uint8>(256){
    [0] = pC,
    [1] = pC,
    [2] = pC,
    [3] = pC,
    [4] = pC,
    [5] = pC,
    [6] = pC,
    [7] = pC,
    [8] = pC,
    [9] = pC,
    [10] = pC,
    [11] = pC,
    [12] = pC,
    [13] = pC,
    [14] = pC,
    [15] = pC,
    [16] = pC,
    [17] = pC,
    [18] = pC,
    [19] = pC,
    [20] = pC,
    [21] = pC,
    [22] = pC,
    [23] = pC,
    [24] = pC,
    [25] = pC,
    [26] = pC,
    [27] = pC,
    [28] = pC,
    [29] = pC,
    [30] = pC,
    [31] = pC,
    [32] = (uint8)(pZ | pp),
    [33] = (uint8)(pP | pp),
    [34] = (uint8)(pP | pp),
    [35] = (uint8)(pP | pp),
    [36] = (uint8)(pS | pp),
    [37] = (uint8)(pP | pp),
    [38] = (uint8)(pP | pp),
    [39] = (uint8)(pP | pp),
    [40] = (uint8)(pP | pp),
    [41] = (uint8)(pP | pp),
    [42] = (uint8)(pP | pp),
    [43] = (uint8)(pS | pp),
    [44] = (uint8)(pP | pp),
    [45] = (uint8)(pP | pp),
    [46] = (uint8)(pP | pp),
    [47] = (uint8)(pP | pp),
    [48] = (uint8)(pN | pp),
    [49] = (uint8)(pN | pp),
    [50] = (uint8)(pN | pp),
    [51] = (uint8)(pN | pp),
    [52] = (uint8)(pN | pp),
    [53] = (uint8)(pN | pp),
    [54] = (uint8)(pN | pp),
    [55] = (uint8)(pN | pp),
    [56] = (uint8)(pN | pp),
    [57] = (uint8)(pN | pp),
    [58] = (uint8)(pP | pp),
    [59] = (uint8)(pP | pp),
    [60] = (uint8)(pS | pp),
    [61] = (uint8)(pS | pp),
    [62] = (uint8)(pS | pp),
    [63] = (uint8)(pP | pp),
    [64] = (uint8)(pP | pp),
    [65] = (uint8)(pLu | pp),
    [66] = (uint8)(pLu | pp),
    [67] = (uint8)(pLu | pp),
    [68] = (uint8)(pLu | pp),
    [69] = (uint8)(pLu | pp),
    [70] = (uint8)(pLu | pp),
    [71] = (uint8)(pLu | pp),
    [72] = (uint8)(pLu | pp),
    [73] = (uint8)(pLu | pp),
    [74] = (uint8)(pLu | pp),
    [75] = (uint8)(pLu | pp),
    [76] = (uint8)(pLu | pp),
    [77] = (uint8)(pLu | pp),
    [78] = (uint8)(pLu | pp),
    [79] = (uint8)(pLu | pp),
    [80] = (uint8)(pLu | pp),
    [81] = (uint8)(pLu | pp),
    [82] = (uint8)(pLu | pp),
    [83] = (uint8)(pLu | pp),
    [84] = (uint8)(pLu | pp),
    [85] = (uint8)(pLu | pp),
    [86] = (uint8)(pLu | pp),
    [87] = (uint8)(pLu | pp),
    [88] = (uint8)(pLu | pp),
    [89] = (uint8)(pLu | pp),
    [90] = (uint8)(pLu | pp),
    [91] = (uint8)(pP | pp),
    [92] = (uint8)(pP | pp),
    [93] = (uint8)(pP | pp),
    [94] = (uint8)(pS | pp),
    [95] = (uint8)(pP | pp),
    [96] = (uint8)(pS | pp),
    [97] = (uint8)(pLl | pp),
    [98] = (uint8)(pLl | pp),
    [99] = (uint8)(pLl | pp),
    [100] = (uint8)(pLl | pp),
    [101] = (uint8)(pLl | pp),
    [102] = (uint8)(pLl | pp),
    [103] = (uint8)(pLl | pp),
    [104] = (uint8)(pLl | pp),
    [105] = (uint8)(pLl | pp),
    [106] = (uint8)(pLl | pp),
    [107] = (uint8)(pLl | pp),
    [108] = (uint8)(pLl | pp),
    [109] = (uint8)(pLl | pp),
    [110] = (uint8)(pLl | pp),
    [111] = (uint8)(pLl | pp),
    [112] = (uint8)(pLl | pp),
    [113] = (uint8)(pLl | pp),
    [114] = (uint8)(pLl | pp),
    [115] = (uint8)(pLl | pp),
    [116] = (uint8)(pLl | pp),
    [117] = (uint8)(pLl | pp),
    [118] = (uint8)(pLl | pp),
    [119] = (uint8)(pLl | pp),
    [120] = (uint8)(pLl | pp),
    [121] = (uint8)(pLl | pp),
    [122] = (uint8)(pLl | pp),
    [123] = (uint8)(pP | pp),
    [124] = (uint8)(pS | pp),
    [125] = (uint8)(pP | pp),
    [126] = (uint8)(pS | pp),
    [127] = pC,
    [128] = pC,
    [129] = pC,
    [130] = pC,
    [131] = pC,
    [132] = pC,
    [133] = pC,
    [134] = pC,
    [135] = pC,
    [136] = pC,
    [137] = pC,
    [138] = pC,
    [139] = pC,
    [140] = pC,
    [141] = pC,
    [142] = pC,
    [143] = pC,
    [144] = pC,
    [145] = pC,
    [146] = pC,
    [147] = pC,
    [148] = pC,
    [149] = pC,
    [150] = pC,
    [151] = pC,
    [152] = pC,
    [153] = pC,
    [154] = pC,
    [155] = pC,
    [156] = pC,
    [157] = pC,
    [158] = pC,
    [159] = pC,
    [160] = pZ,
    [161] = (uint8)(pP | pp),
    [162] = (uint8)(pS | pp),
    [163] = (uint8)(pS | pp),
    [164] = (uint8)(pS | pp),
    [165] = (uint8)(pS | pp),
    [166] = (uint8)(pS | pp),
    [167] = (uint8)(pP | pp),
    [168] = (uint8)(pS | pp),
    [169] = (uint8)(pS | pp),
    [170] = (uint8)(pLo | pp),
    [171] = (uint8)(pP | pp),
    [172] = (uint8)(pS | pp),
    [173] = 0,
    [174] = (uint8)(pS | pp),
    [175] = (uint8)(pS | pp),
    [176] = (uint8)(pS | pp),
    [177] = (uint8)(pS | pp),
    [178] = (uint8)(pN | pp),
    [179] = (uint8)(pN | pp),
    [180] = (uint8)(pS | pp),
    [181] = (uint8)(pLl | pp),
    [182] = (uint8)(pP | pp),
    [183] = (uint8)(pP | pp),
    [184] = (uint8)(pS | pp),
    [185] = (uint8)(pN | pp),
    [186] = (uint8)(pLo | pp),
    [187] = (uint8)(pP | pp),
    [188] = (uint8)(pN | pp),
    [189] = (uint8)(pN | pp),
    [190] = (uint8)(pN | pp),
    [191] = (uint8)(pP | pp),
    [192] = (uint8)(pLu | pp),
    [193] = (uint8)(pLu | pp),
    [194] = (uint8)(pLu | pp),
    [195] = (uint8)(pLu | pp),
    [196] = (uint8)(pLu | pp),
    [197] = (uint8)(pLu | pp),
    [198] = (uint8)(pLu | pp),
    [199] = (uint8)(pLu | pp),
    [200] = (uint8)(pLu | pp),
    [201] = (uint8)(pLu | pp),
    [202] = (uint8)(pLu | pp),
    [203] = (uint8)(pLu | pp),
    [204] = (uint8)(pLu | pp),
    [205] = (uint8)(pLu | pp),
    [206] = (uint8)(pLu | pp),
    [207] = (uint8)(pLu | pp),
    [208] = (uint8)(pLu | pp),
    [209] = (uint8)(pLu | pp),
    [210] = (uint8)(pLu | pp),
    [211] = (uint8)(pLu | pp),
    [212] = (uint8)(pLu | pp),
    [213] = (uint8)(pLu | pp),
    [214] = (uint8)(pLu | pp),
    [215] = (uint8)(pS | pp),
    [216] = (uint8)(pLu | pp),
    [217] = (uint8)(pLu | pp),
    [218] = (uint8)(pLu | pp),
    [219] = (uint8)(pLu | pp),
    [220] = (uint8)(pLu | pp),
    [221] = (uint8)(pLu | pp),
    [222] = (uint8)(pLu | pp),
    [223] = (uint8)(pLl | pp),
    [224] = (uint8)(pLl | pp),
    [225] = (uint8)(pLl | pp),
    [226] = (uint8)(pLl | pp),
    [227] = (uint8)(pLl | pp),
    [228] = (uint8)(pLl | pp),
    [229] = (uint8)(pLl | pp),
    [230] = (uint8)(pLl | pp),
    [231] = (uint8)(pLl | pp),
    [232] = (uint8)(pLl | pp),
    [233] = (uint8)(pLl | pp),
    [234] = (uint8)(pLl | pp),
    [235] = (uint8)(pLl | pp),
    [236] = (uint8)(pLl | pp),
    [237] = (uint8)(pLl | pp),
    [238] = (uint8)(pLl | pp),
    [239] = (uint8)(pLl | pp),
    [240] = (uint8)(pLl | pp),
    [241] = (uint8)(pLl | pp),
    [242] = (uint8)(pLl | pp),
    [243] = (uint8)(pLl | pp),
    [244] = (uint8)(pLl | pp),
    [245] = (uint8)(pLl | pp),
    [246] = (uint8)(pLl | pp),
    [247] = (uint8)(pS | pp),
    [248] = (uint8)(pLl | pp),
    [249] = (uint8)(pLl | pp),
    [250] = (uint8)(pLl | pp),
    [251] = (uint8)(pLl | pp),
    [252] = (uint8)(pLl | pp),
    [253] = (uint8)(pLl | pp),
    [254] = (uint8)(pLl | pp),
    [255] = (uint8)(pLl | pp)
};

internal static array<uint16> asciiFold = new uint16[]{
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106,
    107,
    108,
    109,
    110,
    111,
    112,
    113,
    114,
    115,
    116,
    117,
    118,
    119,
    120,
    121,
    122,
    91,
    92,
    93,
    94,
    95,
    96,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    8490,
    76,
    77,
    78,
    79,
    80,
    81,
    82,
    383,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    123,
    124,
    125,
    126,
    127
}.array();

internal static slice<foldPair> caseOrbit = new foldPair[]{
    new(75, 107),
    new(83, 115),
    new(107, 8490),
    new(115, 383),
    new(181, 924),
    new(197, 229),
    new(223, 7838),
    new(229, 8491),
    new(304, 304),
    new(305, 305),
    new(383, 83),
    new(452, 453),
    new(453, 454),
    new(454, 452),
    new(455, 456),
    new(456, 457),
    new(457, 455),
    new(458, 459),
    new(459, 460),
    new(460, 458),
    new(497, 498),
    new(498, 499),
    new(499, 497),
    new(837, 921),
    new(914, 946),
    new(917, 949),
    new(920, 952),
    new(921, 953),
    new(922, 954),
    new(924, 956),
    new(928, 960),
    new(929, 961),
    new(931, 962),
    new(934, 966),
    new(937, 969),
    new(946, 976),
    new(949, 1013),
    new(952, 977),
    new(953, 8126),
    new(954, 1008),
    new(956, 181),
    new(960, 982),
    new(961, 1009),
    new(962, 963),
    new(963, 931),
    new(966, 981),
    new(969, 8486),
    new(976, 914),
    new(977, 1012),
    new(981, 934),
    new(982, 928),
    new(1008, 922),
    new(1009, 929),
    new(1012, 920),
    new(1013, 917),
    new(1042, 1074),
    new(1044, 1076),
    new(1054, 1086),
    new(1057, 1089),
    new(1058, 1090),
    new(1066, 1098),
    new(1074, 7296),
    new(1076, 7297),
    new(1086, 7298),
    new(1089, 7299),
    new(1090, 7300),
    new(1098, 7302),
    new(1122, 1123),
    new(1123, 7303),
    new(7296, 1042),
    new(7297, 1044),
    new(7298, 1054),
    new(7299, 1057),
    new(7300, 7301),
    new(7301, 1058),
    new(7302, 1066),
    new(7303, 1122),
    new(7304, 42570),
    new(7776, 7777),
    new(7777, 7835),
    new(7835, 7776),
    new(7838, 223),
    new(8126, 837),
    new(8486, 937),
    new(8490, 75),
    new(8491, 197),
    new(42570, 42571),
    new(42571, 7304)
}.slice();

// FoldCategory maps a category name to a table of
// code points outside the category that are equivalent under
// simple case folding to code points inside the category.
// If there is no entry for a category name, there are no such points.
public static map<@string, ж<RangeTable>> FoldCategory = new map<@string, ж<RangeTable>>{
    ["L"u8] = foldL,
    ["Ll"u8] = foldLl,
    ["Lt"u8] = foldLt,
    ["Lu"u8] = foldLu,
    ["M"u8] = foldM,
    ["Mn"u8] = foldMn
};

internal static ж<RangeTable> foldL = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(837, 837, 1)
    }.slice()
));

internal static ж<RangeTable> foldLl = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(65, 90, 1),
        new(192, 214, 1),
        new(216, 222, 1),
        new(256, 302, 2),
        new(306, 310, 2),
        new(313, 327, 2),
        new(330, 376, 2),
        new(377, 381, 2),
        new(385, 386, 1),
        new(388, 390, 2),
        new(391, 393, 2),
        new(394, 395, 1),
        new(398, 401, 1),
        new(403, 404, 1),
        new(406, 408, 1),
        new(412, 413, 1),
        new(415, 416, 1),
        new(418, 422, 2),
        new(423, 425, 2),
        new(428, 430, 2),
        new(431, 433, 2),
        new(434, 435, 1),
        new(437, 439, 2),
        new(440, 444, 4),
        new(452, 453, 1),
        new(455, 456, 1),
        new(458, 459, 1),
        new(461, 475, 2),
        new(478, 494, 2),
        new(497, 498, 1),
        new(500, 502, 2),
        new(503, 504, 1),
        new(506, 562, 2),
        new(570, 571, 1),
        new(573, 574, 1),
        new(577, 579, 2),
        new(580, 582, 1),
        new(584, 590, 2),
        new(837, 880, 43),
        new(882, 886, 4),
        new(895, 902, 7),
        new(904, 906, 1),
        new(908, 910, 2),
        new(911, 913, 2),
        new(914, 929, 1),
        new(931, 939, 1),
        new(975, 984, 9),
        new(986, 1006, 2),
        new(1012, 1015, 3),
        new(1017, 1018, 1),
        new(1021, 1071, 1),
        new(1120, 1152, 2),
        new(1162, 1216, 2),
        new(1217, 1229, 2),
        new(1232, 1326, 2),
        new(1329, 1366, 1),
        new(4256, 4293, 1),
        new(4295, 4301, 6),
        new(5024, 5109, 1),
        new(7312, 7354, 1),
        new(7357, 7359, 1),
        new(7680, 7828, 2),
        new(7838, 7934, 2),
        new(7944, 7951, 1),
        new(7960, 7965, 1),
        new(7976, 7983, 1),
        new(7992, 7999, 1),
        new(8008, 8013, 1),
        new(8025, 8031, 2),
        new(8040, 8047, 1),
        new(8072, 8079, 1),
        new(8088, 8095, 1),
        new(8104, 8111, 1),
        new(8120, 8124, 1),
        new(8136, 8140, 1),
        new(8152, 8155, 1),
        new(8168, 8172, 1),
        new(8184, 8188, 1),
        new(8486, 8490, 4),
        new(8491, 8498, 7),
        new(8579, 11264, 2685),
        new(11265, 11311, 1),
        new(11360, 11362, 2),
        new(11363, 11364, 1),
        new(11367, 11373, 2),
        new(11374, 11376, 1),
        new(11378, 11381, 3),
        new(11390, 11392, 1),
        new(11394, 11490, 2),
        new(11499, 11501, 2),
        new(11506, 42560, 31054),
        new(42562, 42604, 2),
        new(42624, 42650, 2),
        new(42786, 42798, 2),
        new(42802, 42862, 2),
        new(42873, 42877, 2),
        new(42878, 42886, 2),
        new(42891, 42893, 2),
        new(42896, 42898, 2),
        new(42902, 42922, 2),
        new(42923, 42926, 1),
        new(42928, 42932, 1),
        new(42934, 42948, 2),
        new(42949, 42951, 1),
        new(42953, 42960, 7),
        new(42966, 42968, 2),
        new(42997, 65313, 22316),
        new(65314, 65338, 1)
    }.slice(),
    R32: new Range32[]{
        new(66560, 66599, 1),
        new(66736, 66771, 1),
        new(66928, 66938, 1),
        new(66940, 66954, 1),
        new(66956, 66962, 1),
        new(66964, 66965, 1),
        new(68736, 68786, 1),
        new(71840, 71871, 1),
        new(93760, 93791, 1),
        new(125184, 125217, 1)
    }.slice(),
    LatinOffset: 3
));

internal static ж<RangeTable> foldLt = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(452, 454, 2),
        new(455, 457, 2),
        new(458, 460, 2),
        new(497, 499, 2),
        new(8064, 8071, 1),
        new(8080, 8087, 1),
        new(8096, 8103, 1),
        new(8115, 8131, 16),
        new(8179, 8179, 1)
    }.slice()
));

internal static ж<RangeTable> foldLu = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(97, 122, 1),
        new(181, 223, 42),
        new(224, 246, 1),
        new(248, 255, 1),
        new(257, 303, 2),
        new(307, 311, 2),
        new(314, 328, 2),
        new(331, 375, 2),
        new(378, 382, 2),
        new(383, 384, 1),
        new(387, 389, 2),
        new(392, 396, 4),
        new(402, 405, 3),
        new(409, 410, 1),
        new(414, 417, 3),
        new(419, 421, 2),
        new(424, 429, 5),
        new(432, 436, 4),
        new(438, 441, 3),
        new(445, 447, 2),
        new(453, 454, 1),
        new(456, 457, 1),
        new(459, 460, 1),
        new(462, 476, 2),
        new(477, 495, 2),
        new(498, 499, 1),
        new(501, 505, 4),
        new(507, 543, 2),
        new(547, 563, 2),
        new(572, 575, 3),
        new(576, 578, 2),
        new(583, 591, 2),
        new(592, 596, 1),
        new(598, 599, 1),
        new(601, 603, 2),
        new(604, 608, 4),
        new(609, 613, 2),
        new(614, 616, 2),
        new(617, 620, 1),
        new(623, 625, 2),
        new(626, 629, 3),
        new(637, 640, 3),
        new(642, 643, 1),
        new(647, 652, 1),
        new(658, 669, 11),
        new(670, 837, 167),
        new(881, 883, 2),
        new(887, 891, 4),
        new(892, 893, 1),
        new(940, 943, 1),
        new(945, 974, 1),
        new(976, 977, 1),
        new(981, 983, 1),
        new(985, 1007, 2),
        new(1008, 1011, 1),
        new(1013, 1019, 3),
        new(1072, 1119, 1),
        new(1121, 1153, 2),
        new(1163, 1215, 2),
        new(1218, 1230, 2),
        new(1231, 1327, 2),
        new(1377, 1414, 1),
        new(4304, 4346, 1),
        new(4349, 4351, 1),
        new(5112, 5117, 1),
        new(7296, 7304, 1),
        new(7545, 7549, 4),
        new(7566, 7681, 115),
        new(7683, 7829, 2),
        new(7835, 7841, 6),
        new(7843, 7935, 2),
        new(7936, 7943, 1),
        new(7952, 7957, 1),
        new(7968, 7975, 1),
        new(7984, 7991, 1),
        new(8000, 8005, 1),
        new(8017, 8023, 2),
        new(8032, 8039, 1),
        new(8048, 8061, 1),
        new(8112, 8113, 1),
        new(8126, 8144, 18),
        new(8145, 8160, 15),
        new(8161, 8165, 4),
        new(8526, 8580, 54),
        new(11312, 11359, 1),
        new(11361, 11365, 4),
        new(11366, 11372, 2),
        new(11379, 11382, 3),
        new(11393, 11491, 2),
        new(11500, 11502, 2),
        new(11507, 11520, 13),
        new(11521, 11557, 1),
        new(11559, 11565, 6),
        new(42561, 42605, 2),
        new(42625, 42651, 2),
        new(42787, 42799, 2),
        new(42803, 42863, 2),
        new(42874, 42876, 2),
        new(42879, 42887, 2),
        new(42892, 42897, 5),
        new(42899, 42900, 1),
        new(42903, 42921, 2),
        new(42933, 42947, 2),
        new(42952, 42954, 2),
        new(42961, 42967, 6),
        new(42969, 42998, 29),
        new(43859, 43888, 29),
        new(43889, 43967, 1),
        new(65345, 65370, 1)
    }.slice(),
    R32: new Range32[]{
        new(66600, 66639, 1),
        new(66776, 66811, 1),
        new(66967, 66977, 1),
        new(66979, 66993, 1),
        new(66995, 67001, 1),
        new(67003, 67004, 1),
        new(68800, 68850, 1),
        new(71872, 71903, 1),
        new(93792, 93823, 1),
        new(125218, 125251, 1)
    }.slice(),
    LatinOffset: 4
));

internal static ж<RangeTable> foldM = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(921, 953, 32),
        new(8126, 8126, 1)
    }.slice()
));

internal static ж<RangeTable> foldMn = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(921, 953, 32),
        new(8126, 8126, 1)
    }.slice()
));

// FoldScript maps a script name to a table of
// code points outside the script that are equivalent under
// simple case folding to code points inside the script.
// If there is no entry for a script name, there are no such points.
public static map<@string, ж<RangeTable>> FoldScript = new map<@string, ж<RangeTable>>{
    ["Common"u8] = foldCommon,
    ["Greek"u8] = foldGreek,
    ["Inherited"u8] = foldInherited
};

internal static ж<RangeTable> foldCommon = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(924, 956, 32)
    }.slice()
));

internal static ж<RangeTable> foldGreek = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(181, 837, 656)
    }.slice()
));

internal static ж<RangeTable> foldInherited = Ꮡ(new RangeTable(
    R16: new Range16[]{
        new(921, 953, 32),
        new(8126, 8126, 1)
    }.slice()
));

// Range entries: 3535 16-bit, 2031 32-bit, 5566 total.
// Range bytes: 21210 16-bit, 24372 32-bit, 45582 total.
// Fold orbit bytes: 88 pairs, 352 bytes

} // end unicode_package
