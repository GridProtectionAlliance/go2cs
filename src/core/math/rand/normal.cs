// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
namespace go.math;

using math = math_package;

partial class rand_package {

/*
 * Normal distribution
 *
 * See "The Ziggurat Method for Generating Random Variables"
 * (Marsaglia & Tsang, 2000)
 * http://www.jstatsoft.org/v05/i08/paper [pdf]
 */
internal static readonly UntypedFloat rn = /* 3.442619855899 */ 3.44262;

internal static uint32 absInt32(int32 i) {
    if (i < 0) {
        return ((uint32)(-i));
    }
    return ((uint32)i);
}

// NormFloat64 returns a normally distributed float64 in
// the range -[math.MaxFloat64] through +[math.MaxFloat64] inclusive,
// with standard normal distribution (mean = 0, stddev = 1).
// To produce a different normal distribution, callers can
// adjust the output using:
//
//	sample = NormFloat64() * desiredStdDev + desiredMean
[GoRecv] public static float64 NormFloat64(this ref Rand r) {
    while (ᐧ) {
        var j = ((int32)r.Uint32());
        // Possibly negative
        var i = (int32)(j & 127);
        var x = ((float64)j) * ((float64)wn[i]);
        if (absInt32(j) < kn[i]) {
            // This case should be hit better than 99% of the time.
            return x;
        }
        if (i == 0) {
            // This extra work is only required for the base strip.
            while (ᐧ) {
                x = -math.Log(r.Float64()) * (1.0F / rn);
                var y = -math.Log(r.Float64());
                if (y + y >= x * x) {
                    break;
                }
            }
            if (j > 0) {
                return rn + x;
            }
            return -rn - x;
        }
        if (fn[i] + ((float32)r.Float64()) * (fn[i - 1] - fn[i]) < ((float32)math.Exp(-.5F * x * x))) {
            return x;
        }
    }
}

internal static array<uint32> kn = new uint32[]{
    1991057938, 0, 1611602771, 1826899878, 1918584482,
    1969227037, 2001281515, 2023368125, 2039498179, 2051788381,
    2061460127, 2069267110, 2075699398, 2081089314, 2085670119,
    2089610331, 2093034710, 2096037586, 2098691595, 2101053571,
    2103168620, 2105072996, 2106796166, 2108362327, 2109791536,
    2111100552, 2112303493, 2113412330, 2114437283, 2115387130,
    2116269447, 2117090813, 2117856962, 2118572919, 2119243101,
    2119871411, 2120461303, 2121015852, 2121537798, 2122029592,
    2122493434, 2122931299, 2123344971, 2123736059, 2124106020,
    2124456175, 2124787725, 2125101763, 2125399283, 2125681194,
    2125948325, 2126201433, 2126441213, 2126668298, 2126883268,
    2127086657, 2127278949, 2127460589, 2127631985, 2127793506,
    2127945490, 2128088244, 2128222044, 2128347141, 2128463758,
    2128572095, 2128672327, 2128764606, 2128849065, 2128925811,
    2128994934, 2129056501, 2129110560, 2129157136, 2129196237,
    2129227847, 2129251929, 2129268426, 2129277255, 2129278312,
    2129271467, 2129256561, 2129233410, 2129201800, 2129161480,
    2129112170, 2129053545, 2128985244, 2128906855, 2128817916,
    2128717911, 2128606255, 2128482298, 2128345305, 2128194452,
    2128028813, 2127847342, 2127648860, 2127432031, 2127195339,
    2126937058, 2126655214, 2126347546, 2126011445, 2125643893,
    2125241376, 2124799783, 2124314271, 2123779094, 2123187386,
    2122530867, 2121799464, 2120980787, 2120059418, 2119015917,
    2117825402, 2116455471, 2114863093, 2112989789, 2110753906,
    2108037662, 2104664315, 2100355223, 2094642347, 2086670106,
    2074676188, 2054300022, 2010539237
}.array();

internal static array<float32> wn = new float32[]{
    1.7290405e-09F, 1.2680929e-10F, 1.6897518e-10F, 1.9862688e-10F,
    2.2232431e-10F, 2.4244937e-10F, 2.601613e-10F, 2.7611988e-10F,
    2.9073963e-10F, 3.042997e-10F, 3.1699796e-10F, 3.289802e-10F,
    3.4035738e-10F, 3.5121603e-10F, 3.616251e-10F, 3.7164058e-10F,
    3.8130857e-10F, 3.9066758e-10F, 3.9975012e-10F, 4.08584e-10F,
    4.1719309e-10F, 4.2559822e-10F, 4.338176e-10F, 4.418672e-10F,
    4.497613e-10F, 4.5751258e-10F, 4.651324e-10F, 4.7263105e-10F,
    4.8001775e-10F, 4.87301e-10F, 4.944885e-10F, 5.015873e-10F,
    5.0860405e-10F, 5.155446e-10F, 5.2241467e-10F, 5.2921934e-10F,
    5.359635e-10F, 5.426517e-10F, 5.4928817e-10F, 5.5587696e-10F,
    5.624219e-10F, 5.6892646e-10F, 5.753941e-10F, 5.818282e-10F,
    5.882317e-10F, 5.946077e-10F, 6.00959e-10F, 6.072884e-10F,
    6.135985e-10F, 6.19892e-10F, 6.2617134e-10F, 6.3243905e-10F,
    6.386974e-10F, 6.449488e-10F, 6.511956e-10F, 6.5744005e-10F,
    6.6368433e-10F, 6.699307e-10F, 6.7618144e-10F, 6.824387e-10F,
    6.8870465e-10F, 6.949815e-10F, 7.012715e-10F, 7.075768e-10F,
    7.1389966e-10F, 7.202424e-10F, 7.266073e-10F, 7.329966e-10F,
    7.394128e-10F, 7.4585826e-10F, 7.5233547e-10F, 7.58847e-10F,
    7.653954e-10F, 7.719835e-10F, 7.7861395e-10F, 7.852897e-10F,
    7.920138e-10F, 7.987892e-10F, 8.0561924e-10F, 8.125073e-10F,
    8.194569e-10F, 8.2647167e-10F, 8.3355556e-10F, 8.407127e-10F,
    8.479473e-10F, 8.55264e-10F, 8.6266755e-10F, 8.7016316e-10F,
    8.777562e-10F, 8.8545243e-10F, 8.932582e-10F, 9.0117996e-10F,
    9.09225e-10F, 9.174008e-10F, 9.2571584e-10F, 9.341788e-10F,
    9.427997e-10F, 9.515889e-10F, 9.605579e-10F, 9.697193e-10F,
    9.790869e-10F, 9.88676e-10F, 9.985036e-10F, 1.0085882e-09F,
    1.0189509e-09F, 1.0296151e-09F, 1.0406069e-09F, 1.0519566e-09F,
    1.063698e-09F, 1.0758702e-09F, 1.0885183e-09F, 1.1016947e-09F,
    1.1154611e-09F, 1.1298902e-09F, 1.1450696e-09F, 1.1611052e-09F,
    1.1781276e-09F, 1.1962995e-09F, 1.2158287e-09F, 1.2369856e-09F,
    1.2601323e-09F, 1.2857697e-09F, 1.3146202e-09F, 1.347784e-09F,
    1.3870636e-09F, 1.4357403e-09F, 1.5008659e-09F, 1.6030948e-09F
}.array();

internal static array<float32> fn = new float32[]{
    1, 0.9635997F, 0.9362827F, 0.9130436F, 0.89228165F, 0.87324303F,
    0.8555006F, 0.8387836F, 0.8229072F, 0.8077383F, 0.793177F,
    0.7791461F, 0.7655842F, 0.7524416F, 0.73967725F, 0.7272569F,
    0.7151515F, 0.7033361F, 0.69178915F, 0.68049186F, 0.6694277F,
    0.658582F, 0.6479418F, 0.63749546F, 0.6272325F, 0.6171434F,
    0.6072195F, 0.5974532F, 0.58783704F, 0.5783647F, 0.56903F,
    0.5598274F, 0.5507518F, 0.54179835F, 0.5329627F, 0.52424055F,
    0.5156282F, 0.50712204F, 0.49871865F, 0.49041483F, 0.48220766F,
    0.4740943F, 0.46607214F, 0.4581387F, 0.45029163F, 0.44252872F,
    0.43484783F, 0.427247F, 0.41972435F, 0.41227803F, 0.40490642F,
    0.39760786F, 0.3903808F, 0.3832238F, 0.37613547F, 0.36911446F,
    0.3621595F, 0.35526937F, 0.34844297F, 0.34167916F, 0.33497685F,
    0.3283351F, 0.3217529F, 0.3152294F, 0.30876362F, 0.30235484F,
    0.29600215F, 0.28970486F, 0.2834622F, 0.2772735F, 0.27113807F,
    0.2650553F, 0.25902456F, 0.2530453F, 0.24711695F, 0.241239F,
    0.23541094F, 0.22963232F, 0.2239027F, 0.21822165F, 0.21258877F,
    0.20700371F, 0.20146611F, 0.19597565F, 0.19053204F, 0.18513499F,
    0.17978427F, 0.17447963F, 0.1692209F, 0.16400786F, 0.15884037F,
    0.15371831F, 0.14864157F, 0.14361008F, 0.13862377F, 0.13368265F,
    0.12878671F, 0.12393598F, 0.119130544F, 0.11437051F, 0.10965602F,
    0.104987256F, 0.10036444F, 0.095787846F, 0.0912578F, 0.08677467F,
    0.0823389F, 0.077950984F, 0.073611505F, 0.06932112F, 0.06508058F,
    0.06089077F, 0.056752663F, 0.0526674F, 0.048636295F, 0.044660863F,
    0.040742867F, 0.03688439F, 0.033087887F, 0.029356318F,
    0.025693292F, 0.022103304F, 0.018592102F, 0.015167298F,
    0.011839478F, 0.008624485F, 0.005548995F, 0.0026696292F
}.array();

} // end rand_package
