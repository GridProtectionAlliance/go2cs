//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.@internal;

public static partial class cpu_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct ARMᴛ1
    {
        // Promoted Struct References
        // -- ARMᴛ1 has no promoted structs

        // Field References
        public static ref global::go.@internal.cpu_package.CacheLinePad Ꮡ_(ref ARMᴛ1 instance) => ref instance._;
        internal static ref bool ᏑHasVFPv4(ref ARMᴛ1 instance) => ref instance.HasVFPv4;
        internal static ref bool ᏑHasIDIVA(ref ARMᴛ1 instance) => ref instance.HasIDIVA;
        internal static ref bool ᏑHasV7Atomics(ref ARMᴛ1 instance) => ref instance.HasV7Atomics;
        public static ref global::go.@internal.cpu_package.CacheLinePad Ꮡ_(ref ARMᴛ1 instance) => ref instance._;
        
        // Constructors
        public ARMᴛ1(NilType _)
        {
            this._ = default!;
            this.HasVFPv4 = default!;
            this.HasIDIVA = default!;
            this.HasV7Atomics = default!;
            this._ = default!;
        }

        public ARMᴛ1(global::go.@internal.cpu_package.CacheLinePad _ = default!, bool HasVFPv4 = default!, bool HasIDIVA = default!, bool HasV7Atomics = default!, global::go.@internal.cpu_package.CacheLinePad _ = default!)
        {
            this._ = _;
            this.HasVFPv4 = HasVFPv4;
            this.HasIDIVA = HasIDIVA;
            this.HasV7Atomics = HasV7Atomics;
            this._ = _;
        }
        
        // Handle comparisons between struct 'ARMᴛ1' instances
        public bool Equals(ARMᴛ1 other) =>
            _ == other._ &&
            HasVFPv4 == other.HasVFPv4 &&
            HasIDIVA == other.HasIDIVA &&
            HasV7Atomics == other.HasV7Atomics &&
            _ == other._;
        
        public override bool Equals(object? obj) => obj is ARMᴛ1 other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            _,
            HasVFPv4,
            HasIDIVA,
            HasV7Atomics,
            _);
        
        public static bool operator ==(ARMᴛ1 left, ARMᴛ1 right) => left.Equals(right);
        
        public static bool operator !=(ARMᴛ1 left, ARMᴛ1 right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'ARMᴛ1'
        public static bool operator ==(ARMᴛ1 value, NilType nil) => value.Equals(default(ARMᴛ1));

        public static bool operator !=(ARMᴛ1 value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, ARMᴛ1 value) => value == nil;

        public static bool operator !=(NilType nil, ARMᴛ1 value) => value != nil;

        public static implicit operator ARMᴛ1(NilType nil) => default(ARMᴛ1);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            _.ToString(),
            HasVFPv4.ToString(),
            HasIDIVA.ToString(),
            HasV7Atomics.ToString(),
            _.ToString()
        ]), "}");
    }
}
