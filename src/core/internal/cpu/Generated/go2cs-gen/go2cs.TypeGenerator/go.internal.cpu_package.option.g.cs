//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.@internal;

public static partial class cpu_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    internal partial struct option
    {
        // Promoted Struct References
        // -- option has no promoted structs

        // Field References
        internal static ref global::go.@string ᏑName(ref option instance) => ref instance.Name;
        internal static ref global::go.ж<bool> ᏑFeature(ref option instance) => ref instance.Feature;
        internal static ref bool ᏑSpecified(ref option instance) => ref instance.Specified;
        internal static ref bool ᏑEnable(ref option instance) => ref instance.Enable;
        
        // Constructors
        public option(NilType _)
        {
            this.Name = default!;
            this.Feature = default!;
            this.Specified = default!;
            this.Enable = default!;
        }

        public option(global::go.@string Name = default!, global::go.ж<bool> Feature = default!, bool Specified = default!, bool Enable = default!)
        {
            this.Name = Name;
            this.Feature = Feature;
            this.Specified = Specified;
            this.Enable = Enable;
        }
        
        // Handle comparisons between struct 'option' instances
        public bool Equals(option other) =>
            Name == other.Name &&
            Feature == other.Feature &&
            Specified == other.Specified &&
            Enable == other.Enable;
        
        public override bool Equals(object? obj) => obj is option other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            Name,
            Feature,
            Specified,
            Enable);
        
        public static bool operator ==(option left, option right) => left.Equals(right);
        
        public static bool operator !=(option left, option right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'option'
        public static bool operator ==(option value, NilType nil) => value.Equals(default(option));

        public static bool operator !=(option value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, option value) => value == nil;

        public static bool operator !=(NilType nil, option value) => value != nil;

        public static implicit operator option(NilType nil) => default(option);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            Name.ToString(),
            Feature?.ToString() ?? "<nil>",
            Specified.ToString(),
            Enable.ToString()
        ]), "}");
    }
}
