//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.@internal;

public static partial class cpu_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct ARM64ᴛ1
    {
        // Promoted Struct References
        // -- ARM64ᴛ1 has no promoted structs

        // Field References
        public static ref global::go.@internal.cpu_package.CacheLinePad Ꮡ_(ref ARM64ᴛ1 instance) => ref instance._;
        internal static ref bool ᏑHasAES(ref ARM64ᴛ1 instance) => ref instance.HasAES;
        internal static ref bool ᏑHasPMULL(ref ARM64ᴛ1 instance) => ref instance.HasPMULL;
        internal static ref bool ᏑHasSHA1(ref ARM64ᴛ1 instance) => ref instance.HasSHA1;
        internal static ref bool ᏑHasSHA2(ref ARM64ᴛ1 instance) => ref instance.HasSHA2;
        internal static ref bool ᏑHasSHA512(ref ARM64ᴛ1 instance) => ref instance.HasSHA512;
        internal static ref bool ᏑHasCRC32(ref ARM64ᴛ1 instance) => ref instance.HasCRC32;
        internal static ref bool ᏑHasATOMICS(ref ARM64ᴛ1 instance) => ref instance.HasATOMICS;
        internal static ref bool ᏑHasCPUID(ref ARM64ᴛ1 instance) => ref instance.HasCPUID;
        internal static ref bool ᏑIsNeoverse(ref ARM64ᴛ1 instance) => ref instance.IsNeoverse;
        public static ref global::go.@internal.cpu_package.CacheLinePad Ꮡ__(ref ARM64ᴛ1 instance) => ref instance.__;
        
        // Constructors
        public ARM64ᴛ1(NilType _)
        {
            this._ = default!;
            this.HasAES = default!;
            this.HasPMULL = default!;
            this.HasSHA1 = default!;
            this.HasSHA2 = default!;
            this.HasSHA512 = default!;
            this.HasCRC32 = default!;
            this.HasATOMICS = default!;
            this.HasCPUID = default!;
            this.IsNeoverse = default!;
            this.__ = default!;
        }

        public ARM64ᴛ1(global::go.@internal.cpu_package.CacheLinePad _ = default!, bool HasAES = default!, bool HasPMULL = default!, bool HasSHA1 = default!, bool HasSHA2 = default!, bool HasSHA512 = default!, bool HasCRC32 = default!, bool HasATOMICS = default!, bool HasCPUID = default!, bool IsNeoverse = default!, global::go.@internal.cpu_package.CacheLinePad __ = default!)
        {
            this._ = _;
            this.HasAES = HasAES;
            this.HasPMULL = HasPMULL;
            this.HasSHA1 = HasSHA1;
            this.HasSHA2 = HasSHA2;
            this.HasSHA512 = HasSHA512;
            this.HasCRC32 = HasCRC32;
            this.HasATOMICS = HasATOMICS;
            this.HasCPUID = HasCPUID;
            this.IsNeoverse = IsNeoverse;
            this.__ = __;
        }
        
        // Handle comparisons between struct 'ARM64ᴛ1' instances
        public bool Equals(ARM64ᴛ1 other) =>
            _ == other._ &&
            HasAES == other.HasAES &&
            HasPMULL == other.HasPMULL &&
            HasSHA1 == other.HasSHA1 &&
            HasSHA2 == other.HasSHA2 &&
            HasSHA512 == other.HasSHA512 &&
            HasCRC32 == other.HasCRC32 &&
            HasATOMICS == other.HasATOMICS &&
            HasCPUID == other.HasCPUID &&
            IsNeoverse == other.IsNeoverse &&
            __ == other.__;
        
        public override bool Equals(object? obj) => obj is ARM64ᴛ1 other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            _,
            HasAES,
            HasPMULL,
            HasSHA1,
            HasSHA2,
            HasSHA512,
            HasCRC32,
            HasATOMICS,
            HasCPUID,
            IsNeoverse,
            __);
        
        public static bool operator ==(ARM64ᴛ1 left, ARM64ᴛ1 right) => left.Equals(right);
        
        public static bool operator !=(ARM64ᴛ1 left, ARM64ᴛ1 right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'ARM64ᴛ1'
        public static bool operator ==(ARM64ᴛ1 value, NilType nil) => value.Equals(default(ARM64ᴛ1));

        public static bool operator !=(ARM64ᴛ1 value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, ARM64ᴛ1 value) => value == nil;

        public static bool operator !=(NilType nil, ARM64ᴛ1 value) => value != nil;

        public static implicit operator ARM64ᴛ1(NilType nil) => default(ARM64ᴛ1);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            _.ToString(),
            HasAES.ToString(),
            HasPMULL.ToString(),
            HasSHA1.ToString(),
            HasSHA2.ToString(),
            HasSHA512.ToString(),
            HasCRC32.ToString(),
            HasATOMICS.ToString(),
            HasCPUID.ToString(),
            IsNeoverse.ToString(),
            __.ToString()
        ]), "}");
    }
}
