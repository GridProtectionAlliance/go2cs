// Copyright 2023 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
namespace go.@internal.trace;

using bytes = bytes_package;
using fmt = fmt_package;
using raw = @internal.trace.raw_package;
using txtar = @internal.txtar_package;
using io = io_package;
using @internal;

partial class testtrace_package {

// ParseFile parses a test file generated by the testgen package.
public static (io.Reader, ж<Expectation>, error) ParseFile(@string testPath) {
    (ar, err) = txtar.ParseFile(testPath);
    if (err != default!) {
        return (default!, default!, fmt.Errorf("failed to read test file for %s: %v"u8, testPath, err));
    }
    if (len((~ar).Files) != 2) {
        return (default!, default!, fmt.Errorf("malformed test %s: wrong number of files"u8, testPath));
    }
    if ((~ar).Files[0].Name != "expect"u8) {
        return (default!, default!, fmt.Errorf("malformed test %s: bad filename %s"u8, testPath, (~ar).Files[0].Name));
    }
    if ((~ar).Files[1].Name != "trace"u8) {
        return (default!, default!, fmt.Errorf("malformed test %s: bad filename %s"u8, testPath, (~ar).Files[1].Name));
    }
    (tr, err) = raw.NewTextReader(~bytes.NewReader((~ar).Files[1].Data));
    if (err != default!) {
        return (default!, default!, fmt.Errorf("malformed test %s: bad trace file: %v"u8, testPath, err));
    }
    ref var buf = ref heap(new bytes_package.Buffer(), out var Ꮡbuf);
    (tw, err) = raw.NewWriter(~Ꮡbuf, tr.Version());
    if (err != default!) {
        return (default!, default!, fmt.Errorf("failed to create trace byte writer: %v"u8, err));
    }
    while (ᐧ) {
        var (ev, errΔ1) = tr.ReadEvent();
        if (AreEqual(errΔ1, io.EOF)) {
            break;
        }
        if (errΔ1 != default!) {
            return (default!, default!, fmt.Errorf("malformed test %s: bad trace file: %v"u8, testPath, errΔ1));
        }
        {
            var errΔ2 = tw.WriteEvent(ev); if (errΔ2 != default!) {
                return (default!, default!, fmt.Errorf("internal error during %s: failed to write trace bytes: %v"u8, testPath, errΔ2));
            }
        }
    }
    (exp, err) = ParseExpectation((~ar).Files[0].Data);
    if (err != default!) {
        return (default!, default!, fmt.Errorf("internal error during %s: failed to parse expectation %q: %v"u8, testPath, ((@string)(~ar).Files[0].Data), err));
    }
    return (~Ꮡbuf, exp, default!);
}

} // end testtrace_package
