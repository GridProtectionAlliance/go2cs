//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.@internal;

public static partial class chacha8rand_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct State
    {
        // Promoted Struct References
        // -- State has no promoted structs

        // Field References
        internal static ref global::go.array<ulong> Ꮡbuf(ref State instance) => ref instance.buf;
        internal static ref global::go.array<ulong> Ꮡseed(ref State instance) => ref instance.seed;
        internal static ref uint Ꮡi(ref State instance) => ref instance.i;
        internal static ref uint Ꮡn(ref State instance) => ref instance.n;
        internal static ref uint Ꮡc(ref State instance) => ref instance.c;
        
        // Constructors
        public State(NilType _)
        {
            this.buf = default!;
            this.seed = default!;
            this.i = default!;
            this.n = default!;
            this.c = default!;
        }


        internal State(global::go.array<ulong> buf = default!, global::go.array<ulong> seed = default!, uint i = default!, uint n = default!, uint c = default!)
        {
            this.buf = buf;
            this.seed = seed;
            this.i = i;
            this.n = n;
            this.c = c;
        }
        
        // Handle comparisons between struct 'State' instances
        public bool Equals(State other) =>
            buf == other.buf &&
            seed == other.seed &&
            i == other.i &&
            n == other.n &&
            c == other.c;
        
        public override bool Equals(object? obj) => obj is State other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            buf,
            seed,
            i,
            n,
            c);
        
        public static bool operator ==(State left, State right) => left.Equals(right);
        
        public static bool operator !=(State left, State right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'State'
        public static bool operator ==(State value, NilType nil) => value.Equals(default(State));

        public static bool operator !=(State value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, State value) => value == nil;

        public static bool operator !=(NilType nil, State value) => value != nil;

        public static implicit operator State(NilType nil) => default(State);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            buf.ToString(),
            seed.ToString(),
            i.ToString(),
            n.ToString(),
            c.ToString()
        ]), "}");
    }
}
