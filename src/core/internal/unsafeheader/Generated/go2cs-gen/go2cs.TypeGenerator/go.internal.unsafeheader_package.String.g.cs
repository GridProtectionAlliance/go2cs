//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.@internal;

public static partial class unsafeheader_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct String
    {
        // Promoted Struct References
        // -- String has no promoted structs

        // Field References
        public static ref global::go.unsafe_package.Pointer ᏑData(ref String instance) => ref instance.Data;
        internal static ref nint ᏑLen(ref String instance) => ref instance.Len;
        
        // Constructors
        public String(NilType _)
        {
            this.Data = default!;
            this.Len = default!;
        }

        public String(global::go.unsafe_package.Pointer Data = default!, nint Len = default!)
        {
            this.Data = Data;
            this.Len = Len;
        }
        
        // Handle comparisons between struct 'String' instances
        public bool Equals(String other) =>
            Data == other.Data &&
            Len == other.Len;
        
        public override bool Equals(object? obj) => obj is String other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            Data,
            Len);
        
        public static bool operator ==(String left, String right) => left.Equals(right);
        
        public static bool operator !=(String left, String right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'String'
        public static bool operator ==(String value, NilType nil) => value.Equals(default(String));

        public static bool operator !=(String value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, String value) => value == nil;

        public static bool operator !=(NilType nil, String value) => value != nil;

        public static implicit operator String(NilType nil) => default(String);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            Data?.ToString() ?? "<nil>",
            Len.ToString()
        ]), "}");
    }
}
