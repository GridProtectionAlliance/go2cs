//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using go;

#nullable enable

namespace go.@internal;

public static partial class reflectlite_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct Value
    {
        // Promoted Struct References
        private readonly ж<global::go.@internal.reflectlite_package.flag> Ꮡʗflag;

        // Promoted Struct Accessors
        internal partial ref global::go.@internal.reflectlite_package.flag flag => ref Ꮡʗflag.val;

        // Promoted Struct Field Accessors

        // Promoted Struct Field Accessor References

        // Field References
        public static ref global::go.ж<global::go.@internal.abi_package.Type> Ꮡtyp_(ref Value instance) => ref instance.typ_;
        public static ref global::go.unsafe_package.Pointer Ꮡptr(ref Value instance) => ref instance.ptr;
        internal static ref global::go.@internal.reflectlite_package.flag Ꮡflag(ref Value instance) => ref instance.flag;
        
        // Constructors
        public Value(NilType _)
        {
            this.typ_ = default!;
            this.ptr = default!;
            Ꮡʗflag = new ж<global::go.@internal.reflectlite_package.flag>(new global::go.@internal.reflectlite_package.flag(nil));
        }


        internal Value(global::go.ж<global::go.@internal.abi_package.Type> typ_ = default!, global::go.unsafe_package.Pointer ptr = default!, global::go.@internal.reflectlite_package.flag flag = default!)
        {
            this.typ_ = typ_;
            this.ptr = ptr;
            Ꮡʗflag = new ж<global::go.@internal.reflectlite_package.flag>(flag);
        }
        
        // Handle comparisons between struct 'Value' instances
        public bool Equals(Value other) =>
            typ_ == other.typ_ &&
            ptr == other.ptr &&
            flag == other.flag;
        
        public override bool Equals(object? obj) => obj is Value other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            typ_,
            ptr,
            flag);
        
        public static bool operator ==(Value left, Value right) => left.Equals(right);
        
        public static bool operator !=(Value left, Value right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'Value'
        public static bool operator ==(Value value, NilType nil) => value.Equals(default(Value));

        public static bool operator !=(Value value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Value value) => value == nil;

        public static bool operator !=(NilType nil, Value value) => value != nil;

        public static implicit operator Value(NilType nil) => default(Value);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            typ_?.ToString() ?? "<nil>",
            ptr?.ToString() ?? "<nil>",
            flag.ToString()
        ]), "}");
    }

    // Promoted Struct Receivers
    [OverloadResolutionPriority(1)]
    public static go.@internal.abi_package.ΔKind kind(this ref Value target) => target.flag.kind();
    [OverloadResolutionPriority(1)]
    public static go.@internal.abi_package.ΔKind kind(this ж<Value> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.kind();
    }
    [OverloadResolutionPriority(1)]
    internal static go.@internal.reflectlite_package.flag ro(this ref Value target) => target.flag.ro();
    [OverloadResolutionPriority(1)]
    internal static go.@internal.reflectlite_package.flag ro(this ж<Value> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.ro();
    }
    [OverloadResolutionPriority(1)]
    public static void mustBeExported(this ref Value target) => target.flag.mustBeExported();
    [OverloadResolutionPriority(1)]
    public static void mustBeExported(this ж<Value> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        target.mustBeExported();
    }
    [OverloadResolutionPriority(1)]
    public static void mustBeAssignable(this ref Value target) => target.flag.mustBeAssignable();
    [OverloadResolutionPriority(1)]
    public static void mustBeAssignable(this ж<Value> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        target.mustBeAssignable();
    }
}
