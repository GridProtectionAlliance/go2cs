//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Numerics;
using System.Reflection;
using go;
using go.runtime;

#nullable enable

namespace go.@internal;

public static partial class reflectlite_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    internal partial interface valueInterface_type
    {
        // Runtime interface conversion methods
        public static valueInterface_type ᴛAs<ΔTTarget>(in ΔTTarget target) =>
            (ΔvalueInterface_type<ΔTTarget>)target!;

        public static valueInterface_type ᴛAs<ΔTTarget>(ж<ΔTTarget> target_ptr) =>
            (ΔvalueInterface_type<ΔTTarget>)target_ptr;

        public static valueInterface_type? ᴛAs(object target) =>
            typeof(ΔvalueInterface_type<>).CreateInterfaceHandler<valueInterface_type>(target);            
    }

    // Defines a runtime type for duck-typed interface implementations based on existing
    // extension methods that satisfy interface. This class is only used as fallback for
    // when the interface was not able to be implemented at transpile time, e.g., with
    // dynamically declared anonymous interfaces used with type assertions.
    [GeneratedCode("go2cs-gen", "0.1.4")]
    internal class ΔvalueInterface_type<ΔTTarget> : valueInterface_type
    {
        private ΔTTarget m_target = default!;
        private readonly ж<ΔTTarget>? m_target_ptr;
        private readonly bool m_target_is_ptr;
    
        public ref ΔTTarget Target
        {
            get
            {
                if (m_target_is_ptr && m_target_ptr is not null)
                    return ref m_target_ptr.val;
    
                return ref m_target;
            }
        }
    
        public ΔvalueInterface_type(in ΔTTarget target)
        {
            m_target = target;
        }
    
        public ΔvalueInterface_type(ж<ΔTTarget> target_ptr)
        {
            m_target_ptr = target_ptr;
            m_target_is_ptr = true;
        }
    
        // Implementation for 'valueInterface_type.M' receiver method 
        private delegate void MByPtr(ж<ΔTTarget> targetʗ);
        private delegate void MByVal(ΔTTarget targetʗ);
        
        private static readonly MByPtr? s_MByPtr;
        private static readonly MByVal? s_MByVal;
        
        [DebuggerNonUserCode]
        public void M()
        {
            ΔTTarget target = m_target;
        
            if (m_target_is_ptr && m_target_ptr is not null)
                target = m_target_ptr.val;
        
            if (s_MByPtr is null || !m_target_is_ptr)
                s_MByVal!(target);
        
            s_MByPtr!(m_target_ptr!);
        }

        static ΔvalueInterface_type()
        {
            Type targetType = typeof(ΔTTarget);
            Type targetTypeByPtr = typeof(ж<ΔTTarget>);
            MethodInfo? extensionMethod;                              

            // Initialization of 'valueInterface_type.M' receiver method implementation
            extensionMethod = targetTypeByPtr.GetExtensionMethod(nameof(M));
            
            if (extensionMethod is not null)
                s_MByPtr = extensionMethod.CreateStaticDelegate(typeof(MByPtr)) as MByPtr;
            
            extensionMethod = targetType.GetExtensionMethod(nameof(M));
            
            if (extensionMethod is not null)
                s_MByVal = extensionMethod.CreateStaticDelegate(typeof(MByVal)) as MByVal;
            
            if (s_MByPtr is null && s_MByVal is null)
                throw new NotImplementedException($"{targetType.FullName} does not implement 'valueInterface_type.{nameof(M)}' method");
        }
    
        public static explicit operator ΔvalueInterface_type<ΔTTarget>(in ж<ΔTTarget> target_ptr) => new(target_ptr);
    
        public static explicit operator ΔvalueInterface_type<ΔTTarget>(in ΔTTarget target) => new(target);

        public override int GetHashCode() => Target?.GetHashCode() ?? 0;

        public static bool operator ==(ΔvalueInterface_type<ΔTTarget>? left, ΔvalueInterface_type<ΔTTarget>? right) => left?.Equals(right) ?? right is null;
        
        public static bool operator !=(ΔvalueInterface_type<ΔTTarget>? left, ΔvalueInterface_type<ΔTTarget>? right) => !(left == right);

        #region [ Operator Constraint Implementations ]

        // These operator constraints exist to satisfy possible constraints defined on source interface,
        // however, the instance of this class is only used to implement the interface methods, so these
        // operators are only placeholders and not actually functional.

        public static bool operator <(ΔvalueInterface_type<ΔTTarget> left, ΔvalueInterface_type<ΔTTarget> right) => false;
        
        public static bool operator <=(ΔvalueInterface_type<ΔTTarget> left, ΔvalueInterface_type<ΔTTarget> right) => false;
        
        public static bool operator >(ΔvalueInterface_type<ΔTTarget> left, ΔvalueInterface_type<ΔTTarget> right) => false;
        
        public static bool operator >=(ΔvalueInterface_type<ΔTTarget> left, ΔvalueInterface_type<ΔTTarget> right) => false;
        
        public static ΔvalueInterface_type<ΔTTarget> operator +(ΔvalueInterface_type<ΔTTarget> left, ΔvalueInterface_type<ΔTTarget> right) => default!;
        
        public static ΔvalueInterface_type<ΔTTarget> operator -(ΔvalueInterface_type<ΔTTarget> left, ΔvalueInterface_type<ΔTTarget> right) => default!;
        
        public static ΔvalueInterface_type<ΔTTarget> operator -(ΔvalueInterface_type<ΔTTarget> value) => default!;
        
        public static ΔvalueInterface_type<ΔTTarget> operator *(ΔvalueInterface_type<ΔTTarget> left, ΔvalueInterface_type<ΔTTarget> right) => default!;
        
        public static ΔvalueInterface_type<ΔTTarget> operator /(ΔvalueInterface_type<ΔTTarget> left, ΔvalueInterface_type<ΔTTarget> right) => default!;
        
        public static ΔvalueInterface_type<ΔTTarget> operator %(ΔvalueInterface_type<ΔTTarget> left, ΔvalueInterface_type<ΔTTarget> right) => default!;

        public static ΔvalueInterface_type<ΔTTarget> operator &(ΔvalueInterface_type<ΔTTarget> left, ΔvalueInterface_type<ΔTTarget> right) => default!;
        
        public static ΔvalueInterface_type<ΔTTarget> operator |(ΔvalueInterface_type<ΔTTarget> left, ΔvalueInterface_type<ΔTTarget> right) => default!;
        
        public static ΔvalueInterface_type<ΔTTarget> operator ^(ΔvalueInterface_type<ΔTTarget> left, ΔvalueInterface_type<ΔTTarget> right) => default!;
        
        public static ΔvalueInterface_type<ΔTTarget> operator ~(ΔvalueInterface_type<ΔTTarget> value) => default!;
        
        public static ΔvalueInterface_type<ΔTTarget> operator <<(ΔvalueInterface_type<ΔTTarget> value, ΔvalueInterface_type<ΔTTarget> shiftAmount) => default!;
        
        public static ΔvalueInterface_type<ΔTTarget> operator >>(ΔvalueInterface_type<ΔTTarget> value, ΔvalueInterface_type<ΔTTarget> shiftAmount) => default!;
        
        public static ΔvalueInterface_type<ΔTTarget> operator >>>(ΔvalueInterface_type<ΔTTarget> value, ΔvalueInterface_type<ΔTTarget> shiftAmount) => default!;
        
        #endregion
    
        // Enable comparisons between nil and ΔvalueInterface_type<ΔTTarget> interface instance
        public static bool operator ==(ΔvalueInterface_type<ΔTTarget> value, NilType nil) => Activator.CreateInstance<ΔvalueInterface_type<ΔTTarget>>().Equals(value);
    
        public static bool operator !=(ΔvalueInterface_type<ΔTTarget> value, NilType nil) => !(value == nil);
    
        public static bool operator ==(NilType nil, ΔvalueInterface_type<ΔTTarget> value) => value == nil;
    
        public static bool operator !=(NilType nil, ΔvalueInterface_type<ΔTTarget> value) => value != nil;
    }
}
