//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.@internal;

public static partial class reflectlite_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct ValueError
    {
        // Promoted Struct References
        // -- ValueError has no promoted structs

        // Field References
        internal static ref global::go.@string ᏑMethod(ref ValueError instance) => ref instance.Method;
        public static ref global::go.@internal.abi_package.ΔKind ᏑKind(ref ValueError instance) => ref instance.Kind;
        
        // Constructors
        public ValueError(NilType _)
        {
            this.Method = default!;
            this.Kind = default!;
        }

        public ValueError(global::go.@string Method = default!, global::go.@internal.abi_package.ΔKind Kind = default!)
        {
            this.Method = Method;
            this.Kind = Kind;
        }
        
        // Handle comparisons between struct 'ValueError' instances
        public bool Equals(ValueError other) =>
            Method == other.Method &&
            Kind == other.Kind;
        
        public override bool Equals(object? obj) => obj is ValueError other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            Method,
            Kind);
        
        public static bool operator ==(ValueError left, ValueError right) => left.Equals(right);
        
        public static bool operator !=(ValueError left, ValueError right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'ValueError'
        public static bool operator ==(ValueError value, NilType nil) => value.Equals(default(ValueError));

        public static bool operator !=(ValueError value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, ValueError value) => value == nil;

        public static bool operator !=(NilType nil, ValueError value) => value != nil;

        public static implicit operator ValueError(NilType nil) => default(ValueError);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            Method.ToString(),
            Kind.ToString()
        ]), "}");
    }
}
