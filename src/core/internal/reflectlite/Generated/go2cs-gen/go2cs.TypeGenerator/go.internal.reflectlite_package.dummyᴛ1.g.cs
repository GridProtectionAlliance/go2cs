//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.@internal;

public static partial class reflectlite_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    internal partial struct dummyᴛ1
    {
        // Promoted Struct References
        // -- dummyᴛ1 has no promoted structs

        // Field References
        internal static ref bool Ꮡb(ref dummyᴛ1 instance) => ref instance.b;
        internal static ref object Ꮡx(ref dummyᴛ1 instance) => ref instance.x;
        
        // Constructors
        public dummyᴛ1(NilType _)
        {
            this.b = default!;
            this.x = default!;
        }


        internal dummyᴛ1(bool b = default!, object x = default!)
        {
            this.b = b;
            this.x = x;
        }
        
        // Handle comparisons between struct 'dummyᴛ1' instances
        public bool Equals(dummyᴛ1 other) =>
            b == other.b &&
            x == other.x;
        
        public override bool Equals(object? obj) => obj is dummyᴛ1 other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            b,
            x);
        
        public static bool operator ==(dummyᴛ1 left, dummyᴛ1 right) => left.Equals(right);
        
        public static bool operator !=(dummyᴛ1 left, dummyᴛ1 right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'dummyᴛ1'
        public static bool operator ==(dummyᴛ1 value, NilType nil) => value.Equals(default(dummyᴛ1));

        public static bool operator !=(dummyᴛ1 value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, dummyᴛ1 value) => value == nil;

        public static bool operator !=(NilType nil, dummyᴛ1 value) => value != nil;

        public static implicit operator dummyᴛ1(NilType nil) => default(dummyᴛ1);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            b.ToString(),
            x?.ToString() ?? "<nil>"
        ]), "}");
    }
}
