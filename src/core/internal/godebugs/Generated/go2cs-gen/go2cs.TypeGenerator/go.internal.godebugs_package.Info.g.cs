//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.@internal;

public static partial class godebugs_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct Info
    {
        // Promoted Struct References
        // -- Info has no promoted structs

        // Field References
        internal static ref global::go.@string ᏑName(ref Info instance) => ref instance.Name;
        internal static ref global::go.@string ᏑPackage(ref Info instance) => ref instance.Package;
        internal static ref nint ᏑChanged(ref Info instance) => ref instance.Changed;
        internal static ref global::go.@string ᏑOld(ref Info instance) => ref instance.Old;
        internal static ref bool ᏑOpaque(ref Info instance) => ref instance.Opaque;
        
        // Constructors
        public Info(NilType _)
        {
            this.Name = default!;
            this.Package = default!;
            this.Changed = default!;
            this.Old = default!;
            this.Opaque = default!;
        }

        public Info(global::go.@string Name = default!, global::go.@string Package = default!, nint Changed = default!, global::go.@string Old = default!, bool Opaque = default!)
        {
            this.Name = Name;
            this.Package = Package;
            this.Changed = Changed;
            this.Old = Old;
            this.Opaque = Opaque;
        }
        
        // Handle comparisons between struct 'Info' instances
        public bool Equals(Info other) =>
            Name == other.Name &&
            Package == other.Package &&
            Changed == other.Changed &&
            Old == other.Old &&
            Opaque == other.Opaque;
        
        public override bool Equals(object? obj) => obj is Info other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            Name,
            Package,
            Changed,
            Old,
            Opaque);
        
        public static bool operator ==(Info left, Info right) => left.Equals(right);
        
        public static bool operator !=(Info left, Info right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'Info'
        public static bool operator ==(Info value, NilType nil) => value.Equals(default(Info));

        public static bool operator !=(Info value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Info value) => value == nil;

        public static bool operator !=(NilType nil, Info value) => value != nil;

        public static implicit operator Info(NilType nil) => default(Info);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            Name.ToString(),
            Package.ToString(),
            Changed.ToString(),
            Old.ToString(),
            Opaque.ToString()
        ]), "}");
    }
}
