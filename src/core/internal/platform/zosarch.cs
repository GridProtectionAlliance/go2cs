// Code generated by go test internal/platform -fix. DO NOT EDIT.
// To change the information in this file, edit the cgoEnabled and/or firstClass
// maps in cmd/dist/build.go, then run 'go generate internal/platform'.
namespace go.@internal;

partial class platform_package {

// List is the list of all valid GOOS/GOARCH combinations,
// including known-broken ports.
public static slice<OSArch> List = new OSArch[]{
    new("aix"u8, "ppc64"u8),
    new("android"u8, "386"u8),
    new("android"u8, "amd64"u8),
    new("android"u8, "arm"u8),
    new("android"u8, "arm64"u8),
    new("darwin"u8, "amd64"u8),
    new("darwin"u8, "arm64"u8),
    new("dragonfly"u8, "amd64"u8),
    new("freebsd"u8, "386"u8),
    new("freebsd"u8, "amd64"u8),
    new("freebsd"u8, "arm"u8),
    new("freebsd"u8, "arm64"u8),
    new("freebsd"u8, "riscv64"u8),
    new("illumos"u8, "amd64"u8),
    new("ios"u8, "amd64"u8),
    new("ios"u8, "arm64"u8),
    new("js"u8, "wasm"u8),
    new("linux"u8, "386"u8),
    new("linux"u8, "amd64"u8),
    new("linux"u8, "arm"u8),
    new("linux"u8, "arm64"u8),
    new("linux"u8, "loong64"u8),
    new("linux"u8, "mips"u8),
    new("linux"u8, "mips64"u8),
    new("linux"u8, "mips64le"u8),
    new("linux"u8, "mipsle"u8),
    new("linux"u8, "ppc64"u8),
    new("linux"u8, "ppc64le"u8),
    new("linux"u8, "riscv64"u8),
    new("linux"u8, "s390x"u8),
    new("linux"u8, "sparc64"u8),
    new("netbsd"u8, "386"u8),
    new("netbsd"u8, "amd64"u8),
    new("netbsd"u8, "arm"u8),
    new("netbsd"u8, "arm64"u8),
    new("openbsd"u8, "386"u8),
    new("openbsd"u8, "amd64"u8),
    new("openbsd"u8, "arm"u8),
    new("openbsd"u8, "arm64"u8),
    new("openbsd"u8, "mips64"u8),
    new("openbsd"u8, "ppc64"u8),
    new("openbsd"u8, "riscv64"u8),
    new("plan9"u8, "386"u8),
    new("plan9"u8, "amd64"u8),
    new("plan9"u8, "arm"u8),
    new("solaris"u8, "amd64"u8),
    new("wasip1"u8, "wasm"u8),
    new("windows"u8, "386"u8),
    new("windows"u8, "amd64"u8),
    new("windows"u8, "arm"u8),
    new("windows"u8, "arm64"u8)
}.slice();

internal static platform.osArchInfo distInfo = new map<OSArch, osArchInfo>{
    [new("aix"u8, "ppc64"u8)] = new(CgoSupported: true),
    [new("android"u8, "386"u8)] = new(CgoSupported: true),
    [new("android"u8, "amd64"u8)] = new(CgoSupported: true),
    [new("android"u8, "arm"u8)] = new(CgoSupported: true),
    [new("android"u8, "arm64"u8)] = new(CgoSupported: true),
    [new("darwin"u8, "amd64"u8)] = new(CgoSupported: true, FirstClass: true),
    [new("darwin"u8, "arm64"u8)] = new(CgoSupported: true, FirstClass: true),
    [new("dragonfly"u8, "amd64"u8)] = new(CgoSupported: true),
    [new("freebsd"u8, "386"u8)] = new(CgoSupported: true),
    [new("freebsd"u8, "amd64"u8)] = new(CgoSupported: true),
    [new("freebsd"u8, "arm"u8)] = new(CgoSupported: true),
    [new("freebsd"u8, "arm64"u8)] = new(CgoSupported: true),
    [new("freebsd"u8, "riscv64"u8)] = new(CgoSupported: true),
    [new("illumos"u8, "amd64"u8)] = new(CgoSupported: true),
    [new("ios"u8, "amd64"u8)] = new(CgoSupported: true),
    [new("ios"u8, "arm64"u8)] = new(CgoSupported: true),
    [new("js"u8, "wasm"u8)] = new(),
    [new("linux"u8, "386"u8)] = new(CgoSupported: true, FirstClass: true),
    [new("linux"u8, "amd64"u8)] = new(CgoSupported: true, FirstClass: true),
    [new("linux"u8, "arm"u8)] = new(CgoSupported: true, FirstClass: true),
    [new("linux"u8, "arm64"u8)] = new(CgoSupported: true, FirstClass: true),
    [new("linux"u8, "loong64"u8)] = new(CgoSupported: true),
    [new("linux"u8, "mips"u8)] = new(CgoSupported: true),
    [new("linux"u8, "mips64"u8)] = new(CgoSupported: true),
    [new("linux"u8, "mips64le"u8)] = new(CgoSupported: true),
    [new("linux"u8, "mipsle"u8)] = new(CgoSupported: true),
    [new("linux"u8, "ppc64"u8)] = new(),
    [new("linux"u8, "ppc64le"u8)] = new(CgoSupported: true),
    [new("linux"u8, "riscv64"u8)] = new(CgoSupported: true),
    [new("linux"u8, "s390x"u8)] = new(CgoSupported: true),
    [new("linux"u8, "sparc64"u8)] = new(CgoSupported: true, Broken: true),
    [new("netbsd"u8, "386"u8)] = new(CgoSupported: true),
    [new("netbsd"u8, "amd64"u8)] = new(CgoSupported: true),
    [new("netbsd"u8, "arm"u8)] = new(CgoSupported: true),
    [new("netbsd"u8, "arm64"u8)] = new(CgoSupported: true),
    [new("openbsd"u8, "386"u8)] = new(CgoSupported: true),
    [new("openbsd"u8, "amd64"u8)] = new(CgoSupported: true),
    [new("openbsd"u8, "arm"u8)] = new(CgoSupported: true),
    [new("openbsd"u8, "arm64"u8)] = new(CgoSupported: true),
    [new("openbsd"u8, "mips64"u8)] = new(CgoSupported: true, Broken: true),
    [new("openbsd"u8, "ppc64"u8)] = new(),
    [new("openbsd"u8, "riscv64"u8)] = new(CgoSupported: true),
    [new("plan9"u8, "386"u8)] = new(),
    [new("plan9"u8, "amd64"u8)] = new(),
    [new("plan9"u8, "arm"u8)] = new(),
    [new("solaris"u8, "amd64"u8)] = new(CgoSupported: true),
    [new("wasip1"u8, "wasm"u8)] = new(),
    [new("windows"u8, "386"u8)] = new(CgoSupported: true, FirstClass: true),
    [new("windows"u8, "amd64"u8)] = new(CgoSupported: true, FirstClass: true),
    [new("windows"u8, "arm"u8)] = new(),
    [new("windows"u8, "arm64"u8)] = new(CgoSupported: true)
};

} // end platform_package
