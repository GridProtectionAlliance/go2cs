//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.@internal;

public static partial class goexperiment_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct Flags
    {
        // Promoted Struct References
        // -- Flags has no promoted structs

        // Field References
        internal static ref bool ᏑFieldTrack(ref Flags instance) => ref instance.FieldTrack;
        internal static ref bool ᏑPreemptibleLoops(ref Flags instance) => ref instance.PreemptibleLoops;
        internal static ref bool ᏑStaticLockRanking(ref Flags instance) => ref instance.StaticLockRanking;
        internal static ref bool ᏑBoringCrypto(ref Flags instance) => ref instance.BoringCrypto;
        internal static ref bool ᏑRegabiWrappers(ref Flags instance) => ref instance.RegabiWrappers;
        internal static ref bool ᏑRegabiArgs(ref Flags instance) => ref instance.RegabiArgs;
        internal static ref bool ᏑHeapMinimum512KiB(ref Flags instance) => ref instance.HeapMinimum512KiB;
        internal static ref bool ᏑCoverageRedesign(ref Flags instance) => ref instance.CoverageRedesign;
        internal static ref bool ᏑArenas(ref Flags instance) => ref instance.Arenas;
        internal static ref bool ᏑCgoCheck2(ref Flags instance) => ref instance.CgoCheck2;
        internal static ref bool ᏑLoopVar(ref Flags instance) => ref instance.LoopVar;
        internal static ref bool ᏑCacheProg(ref Flags instance) => ref instance.CacheProg;
        internal static ref bool ᏑNewInliner(ref Flags instance) => ref instance.NewInliner;
        internal static ref bool ᏑRangeFunc(ref Flags instance) => ref instance.RangeFunc;
        internal static ref bool ᏑAliasTypeParams(ref Flags instance) => ref instance.AliasTypeParams;
        
        // Constructors
        public Flags(NilType _)
        {
            this.FieldTrack = default!;
            this.PreemptibleLoops = default!;
            this.StaticLockRanking = default!;
            this.BoringCrypto = default!;
            this.RegabiWrappers = default!;
            this.RegabiArgs = default!;
            this.HeapMinimum512KiB = default!;
            this.CoverageRedesign = default!;
            this.Arenas = default!;
            this.CgoCheck2 = default!;
            this.LoopVar = default!;
            this.CacheProg = default!;
            this.NewInliner = default!;
            this.RangeFunc = default!;
            this.AliasTypeParams = default!;
        }

        public Flags(bool FieldTrack = default!, bool PreemptibleLoops = default!, bool StaticLockRanking = default!, bool BoringCrypto = default!, bool RegabiWrappers = default!, bool RegabiArgs = default!, bool HeapMinimum512KiB = default!, bool CoverageRedesign = default!, bool Arenas = default!, bool CgoCheck2 = default!, bool LoopVar = default!, bool CacheProg = default!, bool NewInliner = default!, bool RangeFunc = default!, bool AliasTypeParams = default!)
        {
            this.FieldTrack = FieldTrack;
            this.PreemptibleLoops = PreemptibleLoops;
            this.StaticLockRanking = StaticLockRanking;
            this.BoringCrypto = BoringCrypto;
            this.RegabiWrappers = RegabiWrappers;
            this.RegabiArgs = RegabiArgs;
            this.HeapMinimum512KiB = HeapMinimum512KiB;
            this.CoverageRedesign = CoverageRedesign;
            this.Arenas = Arenas;
            this.CgoCheck2 = CgoCheck2;
            this.LoopVar = LoopVar;
            this.CacheProg = CacheProg;
            this.NewInliner = NewInliner;
            this.RangeFunc = RangeFunc;
            this.AliasTypeParams = AliasTypeParams;
        }
        
        // Handle comparisons between struct 'Flags' instances
        public bool Equals(Flags other) =>
            FieldTrack == other.FieldTrack &&
            PreemptibleLoops == other.PreemptibleLoops &&
            StaticLockRanking == other.StaticLockRanking &&
            BoringCrypto == other.BoringCrypto &&
            RegabiWrappers == other.RegabiWrappers &&
            RegabiArgs == other.RegabiArgs &&
            HeapMinimum512KiB == other.HeapMinimum512KiB &&
            CoverageRedesign == other.CoverageRedesign &&
            Arenas == other.Arenas &&
            CgoCheck2 == other.CgoCheck2 &&
            LoopVar == other.LoopVar &&
            CacheProg == other.CacheProg &&
            NewInliner == other.NewInliner &&
            RangeFunc == other.RangeFunc &&
            AliasTypeParams == other.AliasTypeParams;
        
        public override bool Equals(object? obj) => obj is Flags other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            FieldTrack,
            PreemptibleLoops,
            StaticLockRanking,
            BoringCrypto,
            RegabiWrappers,
            RegabiArgs,
            HeapMinimum512KiB,
            CoverageRedesign,
            Arenas,
            CgoCheck2,
            LoopVar,
            CacheProg,
            NewInliner,
            RangeFunc,
            AliasTypeParams);
        
        public static bool operator ==(Flags left, Flags right) => left.Equals(right);
        
        public static bool operator !=(Flags left, Flags right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'Flags'
        public static bool operator ==(Flags value, NilType nil) => value.Equals(default(Flags));

        public static bool operator !=(Flags value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Flags value) => value == nil;

        public static bool operator !=(NilType nil, Flags value) => value != nil;

        public static implicit operator Flags(NilType nil) => default(Flags);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            FieldTrack.ToString(),
            PreemptibleLoops.ToString(),
            StaticLockRanking.ToString(),
            BoringCrypto.ToString(),
            RegabiWrappers.ToString(),
            RegabiArgs.ToString(),
            HeapMinimum512KiB.ToString(),
            CoverageRedesign.ToString(),
            Arenas.ToString(),
            CgoCheck2.ToString(),
            LoopVar.ToString(),
            CacheProg.ToString(),
            NewInliner.ToString(),
            RangeFunc.ToString(),
            AliasTypeParams.ToString()
        ]), "}");
    }
}
