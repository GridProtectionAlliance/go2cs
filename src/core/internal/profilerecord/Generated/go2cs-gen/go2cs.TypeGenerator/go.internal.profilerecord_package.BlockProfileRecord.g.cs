//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.@internal;

public static partial class profilerecord_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct BlockProfileRecord
    {
        // Promoted Struct References
        // -- BlockProfileRecord has no promoted structs

        // Field References
        internal static ref long ᏑCount(ref BlockProfileRecord instance) => ref instance.Count;
        internal static ref long ᏑCycles(ref BlockProfileRecord instance) => ref instance.Cycles;
        internal static ref global::go.slice<nuint> ᏑStack(ref BlockProfileRecord instance) => ref instance.Stack;
        
        // Constructors
        public BlockProfileRecord(NilType _)
        {
            this.Count = default!;
            this.Cycles = default!;
            this.Stack = default!;
        }

        public BlockProfileRecord(long Count = default!, long Cycles = default!, global::go.slice<nuint> Stack = default!)
        {
            this.Count = Count;
            this.Cycles = Cycles;
            this.Stack = Stack;
        }
        
        // Handle comparisons between struct 'BlockProfileRecord' instances
        public bool Equals(BlockProfileRecord other) =>
            Count == other.Count &&
            Cycles == other.Cycles &&
            Stack == other.Stack;
        
        public override bool Equals(object? obj) => obj is BlockProfileRecord other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            Count,
            Cycles,
            Stack);
        
        public static bool operator ==(BlockProfileRecord left, BlockProfileRecord right) => left.Equals(right);
        
        public static bool operator !=(BlockProfileRecord left, BlockProfileRecord right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'BlockProfileRecord'
        public static bool operator ==(BlockProfileRecord value, NilType nil) => value.Equals(default(BlockProfileRecord));

        public static bool operator !=(BlockProfileRecord value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, BlockProfileRecord value) => value == nil;

        public static bool operator !=(NilType nil, BlockProfileRecord value) => value != nil;

        public static implicit operator BlockProfileRecord(NilType nil) => default(BlockProfileRecord);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            Count.ToString(),
            Cycles.ToString(),
            Stack.ToString()
        ]), "}");
    }
}
