//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.@internal;

public static partial class abi_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct InterfaceSwitch
    {
        // Promoted Struct References
        // -- InterfaceSwitch has no promoted structs

        // Field References
        public static ref global::go.ж<global::go.@internal.abi_package.InterfaceSwitchCache> ᏑCache(ref InterfaceSwitch instance) => ref instance.Cache;
        public static ref nint ᏑNCases(ref InterfaceSwitch instance) => ref instance.NCases;
        public static ref global::go.array<global::go.ж<global::go.@internal.abi_package.ΔInterfaceType>> ᏑCases(ref InterfaceSwitch instance) => ref instance.Cases;
        
        // Constructors
        public InterfaceSwitch(NilType _)
        {
            this.Cache = default!;
            this.NCases = default!;
            this.Cases = default!;
        }

        public InterfaceSwitch(global::go.ж<global::go.@internal.abi_package.InterfaceSwitchCache> Cache = default!, nint NCases = default!, global::go.array<global::go.ж<global::go.@internal.abi_package.ΔInterfaceType>> Cases = default!)
        {
            this.Cache = Cache;
            this.NCases = NCases;
            this.Cases = Cases;
        }
        
        // Handle comparisons between struct 'InterfaceSwitch' instances
        public bool Equals(InterfaceSwitch other) =>
            Cache == other.Cache &&
            NCases == other.NCases &&
            Cases == other.Cases;
        
        public override bool Equals(object? obj) => obj is InterfaceSwitch other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            Cache,
            NCases,
            Cases);
        
        public static bool operator ==(InterfaceSwitch left, InterfaceSwitch right) => left.Equals(right);
        
        public static bool operator !=(InterfaceSwitch left, InterfaceSwitch right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'InterfaceSwitch'
        public static bool operator ==(InterfaceSwitch value, NilType nil) => value.Equals(default(InterfaceSwitch));

        public static bool operator !=(InterfaceSwitch value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, InterfaceSwitch value) => value == nil;

        public static bool operator !=(NilType nil, InterfaceSwitch value) => value != nil;

        public static implicit operator InterfaceSwitch(NilType nil) => default(InterfaceSwitch);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            Cache?.ToString() ?? "<nil>",
            NCases.ToString(),
            Cases.ToString()
        ]), "}");
    }
}
