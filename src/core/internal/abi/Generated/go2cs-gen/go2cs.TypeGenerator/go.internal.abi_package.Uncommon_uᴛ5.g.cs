//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.@internal;

public static partial class abi_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct Uncommon_uᴛ5
    {
        // Promoted Struct References
        private readonly ж<global::go.@internal.abi_package.ΔMapType> ᏑʗΔMapType;

        // Promoted Struct Accessors
        public partial ref global::go.@internal.abi_package.ΔMapType ΔMapType => ref ᏑʗΔMapType.val;

        // Promoted Struct Field Accessors
        public ref global::go.@internal.abi_package.Type Type => ref ΔMapType.Type;
        public ref global::go.ж<global::go.@internal.abi_package.Type> Key => ref ΔMapType.Key;
        public ref global::go.ж<global::go.@internal.abi_package.Type> Elem => ref ΔMapType.Elem;
        public ref global::go.ж<global::go.@internal.abi_package.Type> Bucket => ref ΔMapType.Bucket;
        public ref global::System.Func<global::go.unsafe_package.Pointer, nuint, nuint> Hasher => ref ΔMapType.Hasher;
        public ref byte KeySize => ref ΔMapType.KeySize;
        public ref byte ValueSize => ref ΔMapType.ValueSize;
        public ref ushort BucketSize => ref ΔMapType.BucketSize;
        public ref uint Flags => ref ΔMapType.Flags;

        // Promoted Struct Field Accessor References
        public static ref global::go.@internal.abi_package.Type ᏑType(ref Uncommon_uᴛ5 instance) => ref instance.ΔMapType.Type;
        public static ref global::go.ж<global::go.@internal.abi_package.Type> ᏑKey(ref Uncommon_uᴛ5 instance) => ref instance.ΔMapType.Key;
        public static ref global::go.ж<global::go.@internal.abi_package.Type> ᏑElem(ref Uncommon_uᴛ5 instance) => ref instance.ΔMapType.Elem;
        public static ref global::go.ж<global::go.@internal.abi_package.Type> ᏑBucket(ref Uncommon_uᴛ5 instance) => ref instance.ΔMapType.Bucket;
        public static ref global::System.Func<global::go.unsafe_package.Pointer, nuint, nuint> ᏑHasher(ref Uncommon_uᴛ5 instance) => ref instance.ΔMapType.Hasher;
        public static ref byte ᏑKeySize(ref Uncommon_uᴛ5 instance) => ref instance.ΔMapType.KeySize;
        public static ref byte ᏑValueSize(ref Uncommon_uᴛ5 instance) => ref instance.ΔMapType.ValueSize;
        public static ref ushort ᏑBucketSize(ref Uncommon_uᴛ5 instance) => ref instance.ΔMapType.BucketSize;
        public static ref uint ᏑFlags(ref Uncommon_uᴛ5 instance) => ref instance.ΔMapType.Flags;

        // Field References
        public static ref global::go.@internal.abi_package.ΔMapType ᏑΔMapType(ref Uncommon_uᴛ5 instance) => ref instance.ΔMapType;
        public static ref global::go.@internal.abi_package.UncommonType Ꮡu(ref Uncommon_uᴛ5 instance) => ref instance.u;
        
        // Constructors
        public Uncommon_uᴛ5(NilType _)
        {
            ᏑʗΔMapType = new ж<global::go.@internal.abi_package.ΔMapType>(new global::go.@internal.abi_package.ΔMapType(nil));
            this.u = default!;
        }

        public Uncommon_uᴛ5(global::go.@internal.abi_package.ΔMapType ΔMapType = default!, global::go.@internal.abi_package.UncommonType u = default!)
        {
            ᏑʗΔMapType = new ж<global::go.@internal.abi_package.ΔMapType>(ΔMapType);
            this.u = u;
        }
        
        // Handle comparisons between struct 'Uncommon_uᴛ5' instances
        public bool Equals(Uncommon_uᴛ5 other) =>
            ΔMapType == other.ΔMapType &&
            u == other.u;
        
        public override bool Equals(object? obj) => obj is Uncommon_uᴛ5 other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            ΔMapType,
            u);
        
        public static bool operator ==(Uncommon_uᴛ5 left, Uncommon_uᴛ5 right) => left.Equals(right);
        
        public static bool operator !=(Uncommon_uᴛ5 left, Uncommon_uᴛ5 right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'Uncommon_uᴛ5'
        public static bool operator ==(Uncommon_uᴛ5 value, NilType nil) => value.Equals(default(Uncommon_uᴛ5));

        public static bool operator !=(Uncommon_uᴛ5 value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Uncommon_uᴛ5 value) => value == nil;

        public static bool operator !=(NilType nil, Uncommon_uᴛ5 value) => value != nil;

        public static implicit operator Uncommon_uᴛ5(NilType nil) => default(Uncommon_uᴛ5);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            ΔMapType.ToString(),
            u.ToString()
        ]), "}");
    }

    // Promoted Struct Receivers
    public static bool IndirectKey(this ref Uncommon_uᴛ5 target) => target.ΔMapType.IndirectKey();
    public static bool IndirectKey(this ж<Uncommon_uᴛ5> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.IndirectKey();
    }
    public static bool IndirectElem(this ref Uncommon_uᴛ5 target) => target.ΔMapType.IndirectElem();
    public static bool IndirectElem(this ж<Uncommon_uᴛ5> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.IndirectElem();
    }
    public static bool ReflexiveKey(this ref Uncommon_uᴛ5 target) => target.ΔMapType.ReflexiveKey();
    public static bool ReflexiveKey(this ж<Uncommon_uᴛ5> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.ReflexiveKey();
    }
    public static bool NeedKeyUpdate(this ref Uncommon_uᴛ5 target) => target.ΔMapType.NeedKeyUpdate();
    public static bool NeedKeyUpdate(this ж<Uncommon_uᴛ5> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.NeedKeyUpdate();
    }
    public static bool HashMightPanic(this ref Uncommon_uᴛ5 target) => target.ΔMapType.HashMightPanic();
    public static bool HashMightPanic(this ж<Uncommon_uᴛ5> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.HashMightPanic();
    }
}
