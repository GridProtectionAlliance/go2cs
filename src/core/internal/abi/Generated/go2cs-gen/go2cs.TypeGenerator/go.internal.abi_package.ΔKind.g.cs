//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.@internal;

public static partial class abi_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public readonly partial struct ΔKind : IEquatable<ΔKind>
    {
        // Value of the struct 'ΔKind'
        private readonly uint8 m_value;
        
        public bool Equals(ΔKind other) => m_value == other.m_value;

        public override bool Equals(object? obj)
        {
            return obj switch
            {
                ΔKind other => Equals(other),
                uint8 value => Equals(value),
                _ => false
            };
        }
        
        public override int GetHashCode() => m_value.GetHashCode();
        
        public static bool operator <(ΔKind left, ΔKind right) => left.m_value < right.m_value;
        
        public static bool operator <=(ΔKind left, ΔKind right) => left.m_value <= right.m_value;
        
        public static bool operator >(ΔKind left, ΔKind right) => left.m_value > right.m_value;
        
        public static bool operator >=(ΔKind left, ΔKind right) => left.m_value >= right.m_value;
        
        public static ΔKind operator +(ΔKind left, ΔKind right) => (ΔKind)(left.m_value + right.m_value);
        
        public static ΔKind operator -(ΔKind left, ΔKind right) => (ΔKind)(left.m_value - right.m_value);
        
        public static ΔKind operator -(ΔKind value) => (ΔKind)(-value.m_value);
        
        public static ΔKind operator *(ΔKind left, ΔKind right) => (ΔKind)(left.m_value * right.m_value);
        
        public static ΔKind operator /(ΔKind left, ΔKind right) => (ΔKind)(left.m_value / right.m_value);
        
        public static ΔKind operator %(ΔKind left, ΔKind right) => (ΔKind)(left.m_value % right.m_value);
        
        public ΔKind(uint8 value) => m_value = value;

        public ΔKind(NilType _) => m_value = default!;

        public uint8 val => m_value;
        
        public override string ToString() => m_value.ToString();

        public static bool operator ==(ΔKind left, ΔKind right) => left.Equals(right);

        public static bool operator !=(ΔKind left, ΔKind right) => !(left == right);

        // Handle implicit conversions between 'uint8' and struct 'ΔKind'
        public static implicit operator ΔKind(uint8 value) => new ΔKind(value);
            
        public static implicit operator uint8(ΔKind value) => value.m_value;
            
        // Handle comparisons between 'nil' and struct 'ΔKind'
        public static bool operator ==(ΔKind value, NilType nil) => value.Equals(default(ΔKind));

        public static bool operator !=(ΔKind value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, ΔKind value) => value == nil;

        public static bool operator !=(NilType nil, ΔKind value) => value != nil;

        public static implicit operator ΔKind(NilType nil) => default(ΔKind)!;
    }
}
