//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.@internal;

public static partial class abi_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct Uncommon_uᴛ1
    {
        // Promoted Struct References
        private readonly ж<global::go.@internal.abi_package.ΔFuncType> ᏑʗFuncType;

        // Promoted Struct Accessors
        public partial ref global::go.@internal.abi_package.ΔFuncType FuncType => ref ᏑʗFuncType.val;

        // Promoted Struct Field Accessors
        public ref global::go.@internal.abi_package.Type Type => ref FuncType.Type;
        public ref ushort InCount => ref FuncType.InCount;
        public ref ushort OutCount => ref FuncType.OutCount;

        // Promoted Struct Field Accessor References
        public static ref global::go.@internal.abi_package.Type ᏑType(ref Uncommon_uᴛ1 instance) => ref instance.FuncType.Type;
        public static ref ushort ᏑInCount(ref Uncommon_uᴛ1 instance) => ref instance.FuncType.InCount;
        public static ref ushort ᏑOutCount(ref Uncommon_uᴛ1 instance) => ref instance.FuncType.OutCount;

        // Field References
        public static ref global::go.@internal.abi_package.ΔFuncType ᏑFuncType(ref Uncommon_uᴛ1 instance) => ref instance.FuncType;
        public static ref global::go.@internal.abi_package.UncommonType Ꮡu(ref Uncommon_uᴛ1 instance) => ref instance.u;
        
        // Constructors
        public Uncommon_uᴛ1(NilType _)
        {
            ᏑʗFuncType = new ж<global::go.@internal.abi_package.ΔFuncType>(new global::go.@internal.abi_package.ΔFuncType(nil));
            this.u = default!;
        }

        public Uncommon_uᴛ1(global::go.@internal.abi_package.ΔFuncType FuncType = default!)
        {
            ᏑʗFuncType = new ж<global::go.@internal.abi_package.ΔFuncType>(FuncType);
        }

        internal Uncommon_uᴛ1(global::go.@internal.abi_package.ΔFuncType FuncType = default!, global::go.@internal.abi_package.UncommonType u = default!)
        {
            ᏑʗFuncType = new ж<global::go.@internal.abi_package.ΔFuncType>(FuncType);
            this.u = u;
        }
        
        // Handle comparisons between struct 'Uncommon_uᴛ1' instances
        public bool Equals(Uncommon_uᴛ1 other) =>
            FuncType == other.FuncType &&
            u == other.u;
        
        public override bool Equals(object? obj) => obj is Uncommon_uᴛ1 other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            FuncType,
            u);
        
        public static bool operator ==(Uncommon_uᴛ1 left, Uncommon_uᴛ1 right) => left.Equals(right);
        
        public static bool operator !=(Uncommon_uᴛ1 left, Uncommon_uᴛ1 right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'Uncommon_uᴛ1'
        public static bool operator ==(Uncommon_uᴛ1 value, NilType nil) => value.Equals(default(Uncommon_uᴛ1));

        public static bool operator !=(Uncommon_uᴛ1 value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Uncommon_uᴛ1 value) => value == nil;

        public static bool operator !=(NilType nil, Uncommon_uᴛ1 value) => value != nil;

        public static implicit operator Uncommon_uᴛ1(NilType nil) => default(Uncommon_uᴛ1);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            FuncType.ToString(),
            u.ToString()
        ]), "}");
    }

    // Promoted Struct Receivers
    public static go.ж<go.@internal.abi_package.Type> In(this ref Uncommon_uᴛ1 target, nint i) => target.FuncType.In(i);
    public static go.ж<go.@internal.abi_package.Type> In(this ж<Uncommon_uᴛ1> Ꮡtarget, nint i)
    {
        ref var target = ref Ꮡtarget.val;
        return target.In(i);
    }
    public static nint NumIn(this ref Uncommon_uᴛ1 target) => target.FuncType.NumIn();
    public static nint NumIn(this ж<Uncommon_uᴛ1> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.NumIn();
    }
    public static nint NumOut(this ref Uncommon_uᴛ1 target) => target.FuncType.NumOut();
    public static nint NumOut(this ж<Uncommon_uᴛ1> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.NumOut();
    }
    public static go.ж<go.@internal.abi_package.Type> Out(this ref Uncommon_uᴛ1 target, nint i) => target.FuncType.Out(i);
    public static go.ж<go.@internal.abi_package.Type> Out(this ж<Uncommon_uᴛ1> Ꮡtarget, nint i)
    {
        ref var target = ref Ꮡtarget.val;
        return target.Out(i);
    }
    public static go.slice<go.ж<go.@internal.abi_package.Type>> InSlice(this ref Uncommon_uᴛ1 target) => target.FuncType.InSlice();
    public static go.slice<go.ж<go.@internal.abi_package.Type>> InSlice(this ж<Uncommon_uᴛ1> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.InSlice();
    }
    public static go.slice<go.ж<go.@internal.abi_package.Type>> OutSlice(this ref Uncommon_uᴛ1 target) => target.FuncType.OutSlice();
    public static go.slice<go.ж<go.@internal.abi_package.Type>> OutSlice(this ж<Uncommon_uᴛ1> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.OutSlice();
    }
    public static bool IsVariadic(this ref Uncommon_uᴛ1 target) => target.FuncType.IsVariadic();
    public static bool IsVariadic(this ж<Uncommon_uᴛ1> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.IsVariadic();
    }
}
