//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.@internal;

public static partial class abi_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct IntArgRegBitmap : IArray<uint8>, ISupportMake<IntArgRegBitmap>
    {
        // Value of the struct 'IntArgRegBitmap'
        private array<uint8>? m_value;
                
        public uint8[] Source => val;
        
        public nint Length => val.Length;
        
        Array IArray.Source => ((IArray)val).Source!;
        
        object? IArray.this[nint index]
        {
            get => ((IArray)val)[index];
            set => ((IArray)val)[index] = value;
        }
            
        public ref uint8 this[nint index] => ref val[index];
    
        public ref uint8 this[int index] => ref val[(nint)index];
    
        public ref uint8 this[ulong index] => ref val[(nint)index];
        
        public Span<uint8> ꓸꓸꓸ => ToSpan();
        
        public Span<uint8> ToSpan() => val.ToSpan();
        
        public IEnumerator<(nint, uint8)> GetEnumerator() => val.GetEnumerator();
        
        IEnumerator IEnumerable.GetEnumerator() => ((IEnumerable)val).GetEnumerator();
        
        public bool Equals(IArray<uint8>? other) => val.Equals(other);
        
        public object Clone() => ((ICloneable)val).Clone();
        
        public static IntArgRegBitmap Make(nint p1 = 0, nint p2 = -1) => new IntArgRegBitmap();
        
        public IntArgRegBitmap(array<uint8> value) => m_value = value;

        public IntArgRegBitmap(NilType _) => m_value = default!;

        public array<uint8> val => m_value ??= new array<uint8>(2);
        
        public override string ToString() => val.ToString();

        public static bool operator ==(IntArgRegBitmap left, IntArgRegBitmap right) => left.Equals(right);

        public static bool operator !=(IntArgRegBitmap left, IntArgRegBitmap right) => !(left == right);

        // Handle implicit conversions between 'array<uint8>' and struct 'IntArgRegBitmap'
        public static implicit operator IntArgRegBitmap(array<uint8> value) => new IntArgRegBitmap(value);
            
        public static implicit operator array<uint8>(IntArgRegBitmap value) => value.val;
            
        // Handle comparisons between 'nil' and struct 'IntArgRegBitmap'
        public static bool operator ==(IntArgRegBitmap value, NilType nil) => value.Equals(default(IntArgRegBitmap));

        public static bool operator !=(IntArgRegBitmap value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, IntArgRegBitmap value) => value == nil;

        public static bool operator !=(NilType nil, IntArgRegBitmap value) => value != nil;

        public static implicit operator IntArgRegBitmap(NilType nil) => default(IntArgRegBitmap)!;
    }
}
