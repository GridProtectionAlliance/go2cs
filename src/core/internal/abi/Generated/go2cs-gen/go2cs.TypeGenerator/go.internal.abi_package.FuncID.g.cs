//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.@internal;

public static partial class abi_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public readonly partial struct FuncID : IEquatable<FuncID>
    {
        // Value of the struct 'FuncID'
        private readonly uint8 m_value;
        
        public bool Equals(FuncID other) => m_value == other.m_value;

        public override bool Equals(object? obj)
        {
            return obj switch
            {
                FuncID other => Equals(other),
                uint8 value => Equals(value),
                _ => false
            };
        }
        
        public override int GetHashCode() => m_value.GetHashCode();
        
        public static bool operator <(FuncID left, FuncID right) => left.m_value < right.m_value;
        
        public static bool operator <=(FuncID left, FuncID right) => left.m_value <= right.m_value;
        
        public static bool operator >(FuncID left, FuncID right) => left.m_value > right.m_value;
        
        public static bool operator >=(FuncID left, FuncID right) => left.m_value >= right.m_value;
        
        public static FuncID operator +(FuncID left, FuncID right) => (FuncID)(left.m_value + right.m_value);
        
        public static FuncID operator -(FuncID left, FuncID right) => (FuncID)(left.m_value - right.m_value);
        
        public static FuncID operator -(FuncID value) => (FuncID)(-value.m_value);
        
        public static FuncID operator *(FuncID left, FuncID right) => (FuncID)(left.m_value * right.m_value);
        
        public static FuncID operator /(FuncID left, FuncID right) => (FuncID)(left.m_value / right.m_value);
        
        public static FuncID operator %(FuncID left, FuncID right) => (FuncID)(left.m_value % right.m_value);
        
        public FuncID(uint8 value) => m_value = value;

        public FuncID(NilType _) => m_value = default!;
        
        public override string ToString() => m_value.ToString();

        public static bool operator ==(FuncID left, FuncID right) => left.Equals(right);

        public static bool operator !=(FuncID left, FuncID right) => !(left == right);

        // Handle implicit conversions between 'uint8' and struct 'FuncID'
        public static implicit operator FuncID(uint8 value) => new FuncID(value);
            
        public static implicit operator uint8(FuncID value) => value.m_value;
            
        // Handle comparisons between 'nil' and struct 'FuncID'
        public static bool operator ==(FuncID value, NilType nil) => value.Equals(default(FuncID));

        public static bool operator !=(FuncID value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, FuncID value) => value == nil;

        public static bool operator !=(NilType nil, FuncID value) => value != nil;

        public static implicit operator FuncID(NilType nil) => default(FuncID)!;
    }
}
