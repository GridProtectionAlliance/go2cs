//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.@internal;

public static partial class abi_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct ITab
    {
        // Promoted Struct References
        // -- ITab has no promoted structs

        // Field References
        public static ref global::go.ж<global::go.@internal.abi_package.ΔInterfaceType> ᏑInter(ref ITab instance) => ref instance.Inter;
        public static ref global::go.ж<global::go.@internal.abi_package.Type> ᏑType(ref ITab instance) => ref instance.Type;
        public static ref uint ᏑHash(ref ITab instance) => ref instance.Hash;
        public static ref global::go.array<nuint> ᏑFun(ref ITab instance) => ref instance.Fun;
        
        // Constructors
        public ITab(NilType _)
        {
            this.Inter = default!;
            this.Type = default!;
            this.Hash = default!;
            this.Fun = default!;
        }

        public ITab(global::go.ж<global::go.@internal.abi_package.ΔInterfaceType> Inter = default!, global::go.ж<global::go.@internal.abi_package.Type> Type = default!, uint Hash = default!, global::go.array<nuint> Fun = default!)
        {
            this.Inter = Inter;
            this.Type = Type;
            this.Hash = Hash;
            this.Fun = Fun;
        }
        
        // Handle comparisons between struct 'ITab' instances
        public bool Equals(ITab other) =>
            Inter == other.Inter &&
            Type == other.Type &&
            Hash == other.Hash &&
            Fun == other.Fun;
        
        public override bool Equals(object? obj) => obj is ITab other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            Inter,
            Type,
            Hash,
            Fun);
        
        public static bool operator ==(ITab left, ITab right) => left.Equals(right);
        
        public static bool operator !=(ITab left, ITab right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'ITab'
        public static bool operator ==(ITab value, NilType nil) => value.Equals(default(ITab));

        public static bool operator !=(ITab value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, ITab value) => value == nil;

        public static bool operator !=(NilType nil, ITab value) => value != nil;

        public static implicit operator ITab(NilType nil) => default(ITab);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            Inter?.ToString() ?? "<nil>",
            Type?.ToString() ?? "<nil>",
            Hash.ToString(),
            Fun.ToString()
        ]), "}");
    }
}
