//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.@internal;

public static partial class abi_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public readonly partial struct RF_State : IEquatable<RF_State>
    {
        // Value of the struct 'RF_State'
        private readonly nint m_value;
        
        public bool Equals(RF_State other) => m_value == other.m_value;

        public override bool Equals(object? obj)
        {
            return obj switch
            {
                RF_State other => Equals(other),
                nint value => Equals(value),
                _ => false
            };
        }
        
        public override int GetHashCode() => m_value.GetHashCode();
        
        public static bool operator <(RF_State left, RF_State right) => left.m_value < right.m_value;
        
        public static bool operator <=(RF_State left, RF_State right) => left.m_value <= right.m_value;
        
        public static bool operator >(RF_State left, RF_State right) => left.m_value > right.m_value;
        
        public static bool operator >=(RF_State left, RF_State right) => left.m_value >= right.m_value;
        
        public static RF_State operator +(RF_State left, RF_State right) => (RF_State)(left.m_value + right.m_value);
        
        public static RF_State operator -(RF_State left, RF_State right) => (RF_State)(left.m_value - right.m_value);

        public static RF_State operator -(RF_State value) => (RF_State)(-value.m_value);
        
        public static RF_State operator *(RF_State left, RF_State right) => (RF_State)(left.m_value * right.m_value);
        
        public static RF_State operator /(RF_State left, RF_State right) => (RF_State)(left.m_value / right.m_value);
        
        public static RF_State operator %(RF_State left, RF_State right) => (RF_State)(left.m_value % right.m_value);
        
        public RF_State(nint value) => m_value = value;

        public RF_State(NilType _) => m_value = default!;

        public nint val => m_value;
        
        public override string ToString() => m_value.ToString();

        public static bool operator ==(RF_State left, RF_State right) => left.Equals(right);

        public static bool operator !=(RF_State left, RF_State right) => !(left == right);

        // Handle implicit conversions between 'nint' and struct 'RF_State'
        public static implicit operator RF_State(nint value) => new RF_State(value);
            
        public static implicit operator nint(RF_State value) => value.m_value;
            
        // Handle comparisons between 'nil' and struct 'RF_State'
        public static bool operator ==(RF_State value, NilType nil) => value.Equals(default(RF_State));

        public static bool operator !=(RF_State value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, RF_State value) => value == nil;

        public static bool operator !=(NilType nil, RF_State value) => value != nil;

        public static implicit operator RF_State(NilType nil) => default(RF_State)!;
    }
}
