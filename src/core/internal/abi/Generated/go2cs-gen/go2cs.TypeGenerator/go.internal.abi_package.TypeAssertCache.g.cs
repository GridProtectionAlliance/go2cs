//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.@internal;

public static partial class abi_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct TypeAssertCache
    {
        // Promoted Struct References
        // -- TypeAssertCache has no promoted structs

        // Field References
        public static ref nuint ᏑMask(ref TypeAssertCache instance) => ref instance.Mask;
        public static ref global::go.array<global::go.@internal.abi_package.TypeAssertCacheEntry> ᏑEntries(ref TypeAssertCache instance) => ref instance.Entries;
        
        // Constructors
        public TypeAssertCache(NilType _)
        {
            this.Mask = default!;
            this.Entries = default!;
        }

        public TypeAssertCache(nuint Mask = default!, global::go.array<global::go.@internal.abi_package.TypeAssertCacheEntry> Entries = default!)
        {
            this.Mask = Mask;
            this.Entries = Entries;
        }
        
        // Handle comparisons between struct 'TypeAssertCache' instances
        public bool Equals(TypeAssertCache other) =>
            Mask == other.Mask &&
            Entries == other.Entries;
        
        public override bool Equals(object? obj) => obj is TypeAssertCache other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            Mask,
            Entries);
        
        public static bool operator ==(TypeAssertCache left, TypeAssertCache right) => left.Equals(right);
        
        public static bool operator !=(TypeAssertCache left, TypeAssertCache right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'TypeAssertCache'
        public static bool operator ==(TypeAssertCache value, NilType nil) => value.Equals(default(TypeAssertCache));

        public static bool operator !=(TypeAssertCache value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, TypeAssertCache value) => value == nil;

        public static bool operator !=(NilType nil, TypeAssertCache value) => value != nil;

        public static implicit operator TypeAssertCache(NilType nil) => default(TypeAssertCache);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            Mask.ToString(),
            Entries.ToString()
        ]), "}");
    }
}
