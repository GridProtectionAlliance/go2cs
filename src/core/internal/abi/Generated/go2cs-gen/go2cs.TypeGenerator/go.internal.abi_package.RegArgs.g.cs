//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.@internal;

public static partial class abi_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct RegArgs
    {
        // Promoted Struct References
        // -- RegArgs has no promoted structs

        // Field References
        public static ref global::go.array<nuint> ᏑInts(ref RegArgs instance) => ref instance.Ints;
        public static ref global::go.array<ulong> ᏑFloats(ref RegArgs instance) => ref instance.Floats;
        public static ref global::go.array<global::go.unsafe_package.Pointer> ᏑPtrs(ref RegArgs instance) => ref instance.Ptrs;
        public static ref global::go.@internal.abi_package.IntArgRegBitmap ᏑReturnIsPtr(ref RegArgs instance) => ref instance.ReturnIsPtr;
        
        // Constructors
        public RegArgs(NilType _)
        {
            this.Ints = default!;
            this.Floats = default!;
            this.Ptrs = default!;
            this.ReturnIsPtr = default!;
        }

        public RegArgs(global::go.array<nuint> Ints = default!, global::go.array<ulong> Floats = default!, global::go.array<global::go.unsafe_package.Pointer> Ptrs = default!, global::go.@internal.abi_package.IntArgRegBitmap ReturnIsPtr = default!)
        {
            this.Ints = Ints;
            this.Floats = Floats;
            this.Ptrs = Ptrs;
            this.ReturnIsPtr = ReturnIsPtr;
        }
        
        // Handle comparisons between struct 'RegArgs' instances
        public bool Equals(RegArgs other) =>
            Ints == other.Ints &&
            Floats == other.Floats &&
            Ptrs == other.Ptrs &&
            ReturnIsPtr == other.ReturnIsPtr;
        
        public override bool Equals(object? obj) => obj is RegArgs other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            Ints,
            Floats,
            Ptrs,
            ReturnIsPtr);
        
        public static bool operator ==(RegArgs left, RegArgs right) => left.Equals(right);
        
        public static bool operator !=(RegArgs left, RegArgs right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'RegArgs'
        public static bool operator ==(RegArgs value, NilType nil) => value.Equals(default(RegArgs));

        public static bool operator !=(RegArgs value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, RegArgs value) => value == nil;

        public static bool operator !=(NilType nil, RegArgs value) => value != nil;

        public static implicit operator RegArgs(NilType nil) => default(RegArgs);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            Ints.ToString(),
            Floats.ToString(),
            Ptrs.ToString(),
            ReturnIsPtr.ToString()
        ]), "}");
    }
}
