//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.@internal;

public static partial class abi_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct InterfaceSwitchCache
    {
        // Promoted Struct References
        // -- InterfaceSwitchCache has no promoted structs

        // Field References
        internal static ref nuint ᏑMask(ref InterfaceSwitchCache instance) => ref instance.Mask;
        public static ref global::go.array<global::go.@internal.abi_package.InterfaceSwitchCacheEntry> ᏑEntries(ref InterfaceSwitchCache instance) => ref instance.Entries;
        
        // Constructors
        public InterfaceSwitchCache(NilType _)
        {
            this.Mask = default!;
            this.Entries = default!;
        }

        public InterfaceSwitchCache(nuint Mask = default!, global::go.array<global::go.@internal.abi_package.InterfaceSwitchCacheEntry> Entries = default!)
        {
            this.Mask = Mask;
            this.Entries = Entries;
        }
        
        // Handle comparisons between struct 'InterfaceSwitchCache' instances
        public bool Equals(InterfaceSwitchCache other) =>
            Mask == other.Mask &&
            Entries == other.Entries;
        
        public override bool Equals(object? obj) => obj is InterfaceSwitchCache other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            Mask,
            Entries);
        
        public static bool operator ==(InterfaceSwitchCache left, InterfaceSwitchCache right) => left.Equals(right);
        
        public static bool operator !=(InterfaceSwitchCache left, InterfaceSwitchCache right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'InterfaceSwitchCache'
        public static bool operator ==(InterfaceSwitchCache value, NilType nil) => value.Equals(default(InterfaceSwitchCache));

        public static bool operator !=(InterfaceSwitchCache value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, InterfaceSwitchCache value) => value == nil;

        public static bool operator !=(NilType nil, InterfaceSwitchCache value) => value != nil;

        public static implicit operator InterfaceSwitchCache(NilType nil) => default(InterfaceSwitchCache);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            Mask.ToString(),
            Entries.ToString()
        ]), "}");
    }
}
