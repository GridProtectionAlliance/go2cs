//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.@internal;

public static partial class abi_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public readonly partial struct TypeOff : IEquatable<TypeOff>
    {
        // Value of the struct 'TypeOff'
        private readonly int32 m_value;
        
        public bool Equals(TypeOff other) => m_value == other.m_value;

        public override bool Equals(object? obj)
        {
            return obj switch
            {
                TypeOff other => Equals(other),
                int32 value => Equals(value),
                _ => false
            };
        }
        
        public override int GetHashCode() => m_value.GetHashCode();
        
        public static bool operator <(TypeOff left, TypeOff right) => left.m_value < right.m_value;
        
        public static bool operator <=(TypeOff left, TypeOff right) => left.m_value <= right.m_value;
        
        public static bool operator >(TypeOff left, TypeOff right) => left.m_value > right.m_value;
        
        public static bool operator >=(TypeOff left, TypeOff right) => left.m_value >= right.m_value;
        
        public static TypeOff operator +(TypeOff left, TypeOff right) => (TypeOff)(left.m_value + right.m_value);
        
        public static TypeOff operator -(TypeOff left, TypeOff right) => (TypeOff)(left.m_value - right.m_value);

        public static TypeOff operator -(TypeOff value) => (TypeOff)(-value.m_value);
        
        public static TypeOff operator *(TypeOff left, TypeOff right) => (TypeOff)(left.m_value * right.m_value);
        
        public static TypeOff operator /(TypeOff left, TypeOff right) => (TypeOff)(left.m_value / right.m_value);
        
        public static TypeOff operator %(TypeOff left, TypeOff right) => (TypeOff)(left.m_value % right.m_value);
        
        public TypeOff(int32 value) => m_value = value;

        public TypeOff(NilType _) => m_value = default!;

        public int32 val => m_value;
        
        public override string ToString() => m_value.ToString();

        public static bool operator ==(TypeOff left, TypeOff right) => left.Equals(right);

        public static bool operator !=(TypeOff left, TypeOff right) => !(left == right);

        // Handle implicit conversions between 'int32' and struct 'TypeOff'
        public static implicit operator TypeOff(int32 value) => new TypeOff(value);
            
        public static implicit operator int32(TypeOff value) => value.m_value;
            
        // Handle comparisons between 'nil' and struct 'TypeOff'
        public static bool operator ==(TypeOff value, NilType nil) => value.Equals(default(TypeOff));

        public static bool operator !=(TypeOff value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, TypeOff value) => value == nil;

        public static bool operator !=(NilType nil, TypeOff value) => value != nil;

        public static implicit operator TypeOff(NilType nil) => default(TypeOff)!;
    }
}
