//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.@internal;

public static partial class abi_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct Type
    {
        // Promoted Struct References
        // -- Type has no promoted structs

        // Field References
        public static ref nuint ᏑSize_(ref Type instance) => ref instance.Size_;
        public static ref nuint ᏑPtrBytes(ref Type instance) => ref instance.PtrBytes;
        public static ref uint ᏑHash(ref Type instance) => ref instance.Hash;
        public static ref global::go.@internal.abi_package.TFlag ᏑTFlag(ref Type instance) => ref instance.TFlag;
        public static ref byte ᏑAlign_(ref Type instance) => ref instance.Align_;
        public static ref byte ᏑFieldAlign_(ref Type instance) => ref instance.FieldAlign_;
        public static ref global::go.@internal.abi_package.ΔKind ᏑKind_(ref Type instance) => ref instance.Kind_;
        public static ref global::System.Func<global::go.unsafe_package.Pointer, global::go.unsafe_package.Pointer, bool> ᏑEqual(ref Type instance) => ref instance.Equal;
        public static ref global::go.ж<byte> ᏑGCData(ref Type instance) => ref instance.GCData;
        public static ref global::go.@internal.abi_package.NameOff ᏑStr(ref Type instance) => ref instance.Str;
        public static ref global::go.@internal.abi_package.TypeOff ᏑPtrToThis(ref Type instance) => ref instance.PtrToThis;
        
        // Constructors
        public Type(NilType _)
        {
            this.Size_ = default!;
            this.PtrBytes = default!;
            this.Hash = default!;
            this.TFlag = default!;
            this.Align_ = default!;
            this.FieldAlign_ = default!;
            this.Kind_ = default!;
            this.Equal = default!;
            this.GCData = default!;
            this.Str = default!;
            this.PtrToThis = default!;
        }

        public Type(nuint Size_ = default!, nuint PtrBytes = default!, uint Hash = default!, global::go.@internal.abi_package.TFlag TFlag = default!, byte Align_ = default!, byte FieldAlign_ = default!, global::go.@internal.abi_package.ΔKind Kind_ = default!, global::System.Func<global::go.unsafe_package.Pointer, global::go.unsafe_package.Pointer, bool> Equal = default!, global::go.ж<byte> GCData = default!, global::go.@internal.abi_package.NameOff Str = default!, global::go.@internal.abi_package.TypeOff PtrToThis = default!)
        {
            this.Size_ = Size_;
            this.PtrBytes = PtrBytes;
            this.Hash = Hash;
            this.TFlag = TFlag;
            this.Align_ = Align_;
            this.FieldAlign_ = FieldAlign_;
            this.Kind_ = Kind_;
            this.Equal = Equal;
            this.GCData = GCData;
            this.Str = Str;
            this.PtrToThis = PtrToThis;
        }
        
        // Handle comparisons between struct 'Type' instances
        public bool Equals(Type other) =>
            Size_ == other.Size_ &&
            PtrBytes == other.PtrBytes &&
            Hash == other.Hash &&
            TFlag == other.TFlag &&
            Align_ == other.Align_ &&
            FieldAlign_ == other.FieldAlign_ &&
            Kind_ == other.Kind_ &&
            Equal == other.Equal &&
            GCData == other.GCData &&
            Str == other.Str &&
            PtrToThis == other.PtrToThis;
        
        public override bool Equals(object? obj) => obj is Type other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            Size_,
            PtrBytes,
            Hash,
            TFlag,
            Align_,
            FieldAlign_,
            Kind_,
            Equal,
            GCData,
            Str,
            PtrToThis);
        
        public static bool operator ==(Type left, Type right) => left.Equals(right);
        
        public static bool operator !=(Type left, Type right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'Type'
        public static bool operator ==(Type value, NilType nil) => value.Equals(default(Type));

        public static bool operator !=(Type value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Type value) => value == nil;

        public static bool operator !=(NilType nil, Type value) => value != nil;

        public static implicit operator Type(NilType nil) => default(Type);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            Size_.ToString(),
            PtrBytes.ToString(),
            Hash.ToString(),
            TFlag.ToString(),
            Align_.ToString(),
            FieldAlign_.ToString(),
            Kind_.ToString(),
            Equal?.ToString() ?? "<nil>",
            GCData?.ToString() ?? "<nil>",
            Str.ToString(),
            PtrToThis.ToString()
        ]), "}");
    }
}
