//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using go;

#nullable enable

namespace go.@internal;

public static partial class abi_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public readonly partial struct NameOff : IEquatable<NameOff>
    {
        // Value of the struct 'NameOff'
        private readonly int32 m_value;
        
        public bool Equals(NameOff other) => m_value == other.m_value;

        public override bool Equals(object? obj)
        {
            return obj switch
            {
                NameOff other => Equals(other),
                int32 value => Equals(value),
                _ => false
            };
        }
        
        public override int GetHashCode() => m_value.GetHashCode();
        
        public static bool operator <(NameOff left, NameOff right) => left.m_value < right.m_value;
        
        public static bool operator <=(NameOff left, NameOff right) => left.m_value <= right.m_value;
        
        public static bool operator >(NameOff left, NameOff right) => left.m_value > right.m_value;
        
        public static bool operator >=(NameOff left, NameOff right) => left.m_value >= right.m_value;
        
        public static NameOff operator +(NameOff left, NameOff right) => (NameOff)(left.m_value + right.m_value);
        
        public static NameOff operator -(NameOff left, NameOff right) => (NameOff)(left.m_value - right.m_value);
        
        public static NameOff operator -(NameOff value) => (NameOff)(-value.m_value);
        
        public static NameOff operator *(NameOff left, NameOff right) => (NameOff)(left.m_value * right.m_value);
        
        public static NameOff operator /(NameOff left, NameOff right) => (NameOff)(left.m_value / right.m_value);
        
        public static NameOff operator %(NameOff left, NameOff right) => (NameOff)(left.m_value % right.m_value);
        
        public NameOff(int32 value) => m_value = value;

        public override string ToString() => m_value.ToString();

        public static bool operator ==(NameOff left, NameOff right) => left.Equals(right);

        public static bool operator !=(NameOff left, NameOff right) => !(left == right);

        // Handle implicit conversions between 'int32' and struct 'NameOff'
        public static implicit operator NameOff(int32 value) => new NameOff(value);
            
        public static implicit operator int32(NameOff value) => value.m_value;
            
        // Handle comparisons between 'nil' and struct 'NameOff'
        public static bool operator ==(NameOff value, NilType nil) => value.Equals(default(NameOff));

        public static bool operator !=(NameOff value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, NameOff value) => value == nil;

        public static bool operator !=(NilType nil, NameOff value) => value != nil;

        public static implicit operator NameOff(NilType nil) => default(NameOff)!;
    }
}
