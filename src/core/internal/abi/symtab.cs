// Copyright 2023 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
namespace go.@internal;

partial class abi_package {

[GoType("num:uint8")] partial struct FuncFlag;

public static readonly FuncFlag FuncFlagTopFrame = /* 1 << iota */ 1;
public static readonly FuncFlag FuncFlagSPWrite = 2;
public static readonly FuncFlag FuncFlagAsm = 4;

[GoType("num:uint8")] partial struct FuncID;

// If you add a FuncID, you probably also want to add an entry to the map in
// ../../cmd/internal/objabi/funcid.go
public static readonly FuncID FuncIDNormal = /* iota */ 0;  // not a special function
public static readonly FuncID FuncID_abort = 1;
public static readonly FuncID FuncID_asmcgocall = 2;
public static readonly FuncID FuncID_asyncPreempt = 3;
public static readonly FuncID FuncID_cgocallback = 4;
public static readonly FuncID FuncID_corostart = 5;
public static readonly FuncID FuncID_debugCallV2 = 6;
public static readonly FuncID FuncID_gcBgMarkWorker = 7;
public static readonly FuncID FuncID_goexit = 8;
public static readonly FuncID FuncID_gogo = 9;
public static readonly FuncID FuncID_gopanic = 10;
public static readonly FuncID FuncID_handleAsyncEvent = 11;
public static readonly FuncID FuncID_mcall = 12;
public static readonly FuncID FuncID_morestack = 13;
public static readonly FuncID FuncID_mstart = 14;
public static readonly FuncID FuncID_panicwrap = 15;
public static readonly FuncID FuncID_rt0_go = 16;
public static readonly FuncID FuncID_runfinq = 17;
public static readonly FuncID FuncID_runtime_main = 18;
public static readonly FuncID FuncID_sigpanic = 19;
public static readonly FuncID FuncID_systemstack = 20;
public static readonly FuncID FuncID_systemstack_switch = 21;
public static readonly FuncID FuncIDWrapper = 22; // any autogenerated code (hash/eq algorithms, method wrappers, etc.)

// ArgsSizeUnknown is set in Func.argsize to mark all functions
// whose argument size is unknown (C vararg functions, and
// assembly code without an explicit specification).
// This value is generated by the compiler, assembler, or linker.
public static readonly GoUntyped ArgsSizeUnknown = /* -0x80000000 */
    GoUntyped.Parse("-2147483648");

// IDs for PCDATA and FUNCDATA tables in Go binaries.
//
// These must agree with ../../../runtime/funcdata.h.
public static readonly UntypedInt PCDATA_UnsafePoint = 0;

public static readonly UntypedInt PCDATA_StackMapIndex = 1;

public static readonly UntypedInt PCDATA_InlTreeIndex = 2;

public static readonly UntypedInt PCDATA_ArgLiveIndex = 3;

public static readonly UntypedInt FUNCDATA_ArgsPointerMaps = 0;

public static readonly UntypedInt FUNCDATA_LocalsPointerMaps = 1;

public static readonly UntypedInt FUNCDATA_StackObjects = 2;

public static readonly UntypedInt FUNCDATA_InlTree = 3;

public static readonly UntypedInt FUNCDATA_OpenCodedDeferInfo = 4;

public static readonly UntypedInt FUNCDATA_ArgInfo = 5;

public static readonly UntypedInt FUNCDATA_ArgLiveInfo = 6;

public static readonly UntypedInt FUNCDATA_WrapInfo = 7;

// Special values for the PCDATA_UnsafePoint table.
public static readonly GoUntyped UnsafePointSafe = /* -1 */ // Safe for async preemption
    GoUntyped.Parse("-1");

public static readonly GoUntyped UnsafePointUnsafe = /* -2 */ // Unsafe for async preemption
    GoUntyped.Parse("-2");

public static readonly GoUntyped UnsafePointRestart1 = /* -3 */
    GoUntyped.Parse("-3");

public static readonly GoUntyped UnsafePointRestart2 = /* -4 */
    GoUntyped.Parse("-4");

public static readonly GoUntyped UnsafePointRestartAtEntry = /* -5 */
    GoUntyped.Parse("-5");

public static readonly UntypedInt MINFUNC = 16; // minimum size for a function

public static readonly UntypedInt FuncTabBucketSize = /* 256 * MINFUNC */ 4096; // size of bucket in the pc->func lookup table

} // end abi_package
