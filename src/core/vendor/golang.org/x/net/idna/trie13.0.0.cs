// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.
// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
//go:build go1.16
namespace go.vendor.golang.org.x.net;

partial class idna_package {

// appendMapping appends the mapping for the respective rune. isMapped must be
// true. A mapping is a categorization of a rune as defined in UTS #46.
internal static slice<byte> appendMapping(this info c, slice<byte> b, @string s) {
    nint index = ((nint)(c >> (int)(indexShift)));
    if ((info)(c & xorBit) == 0) {
        nint p = index;
        return append(b, mappings[(int)(mappingIndex[p])..(int)(mappingIndex[p + 1])].ꓸꓸꓸ);
    }
    b = append(b, s.ꓸꓸꓸ);
    if ((info)(c & inlineXOR) == inlineXOR){
        // TODO: support and handle two-byte inline masks
        b[len(b) - 1] ^= (byte)(((byte)index));
    } else {
        for (nint p = len(b) - ((nint)xorData[index]); p < len(b); p++) {
            index++;
            b[p] ^= (byte)(xorData[index]);
        }
    }
    return b;
}

} // end idna_package
