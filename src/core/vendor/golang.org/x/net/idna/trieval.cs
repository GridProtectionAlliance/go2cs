// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.
namespace go.vendor.golang.org.x.net;

partial class idna_package {

[GoType("num:uint16")] partial struct info;

// This file contains definitions for interpreting the trie value of the idna
// trie generated by "go run gen*.go". It is shared by both the generator
// program and the resultant package. Sharing is achieved by the generator
// copying gen_trieval.go to trieval.go and changing what's above this comment.
internal static readonly UntypedInt catSmallMask = /* 0x3 */ 3;
internal static readonly UntypedInt catBigMask = /* 0xF8 */ 248;
internal static readonly UntypedInt indexShift = 3;
internal static readonly UntypedInt xorBit = /* 0x4 */ 4; // interpret the index as an xor pattern
internal static readonly UntypedInt inlineXOR = /* 0xE000 */ 57344; // These bits are set if the XOR pattern is inlined.
internal static readonly UntypedInt joinShift = 8;
internal static readonly UntypedInt joinMask = /* 0x07 */ 7;
internal static readonly UntypedInt attributesMask = /* 0x1800 */ 6144;
internal static readonly UntypedInt viramaModifier = /* 0x1800 */ 6144;
internal static readonly UntypedInt modifier = /* 0x1000 */ 4096;
internal static readonly UntypedInt rtl = /* 0x0800 */ 2048;
internal static readonly UntypedInt mayNeedNorm = /* 0x2000 */ 8192;

[GoType("num:uint16")] partial struct Δcategory;

internal static readonly Δcategory unknown = 0;        // not currently defined in unicode.
internal static readonly Δcategory mapped = 1;
internal static readonly Δcategory disallowedSTD3Mapped = 2;
internal static readonly Δcategory deviation = 3;

internal static readonly Δcategory valid = /* 0x08 */ 8;
internal static readonly Δcategory validNV8 = /* 0x18 */ 24;
internal static readonly Δcategory validXV8 = /* 0x28 */ 40;
internal static readonly Δcategory disallowed = /* 0x40 */ 64;
internal static readonly Δcategory disallowedSTD3Valid = /* 0x80 */ 128;
internal static readonly Δcategory ignored = /* 0xC0 */ 192;

// join types and additional rune information
internal static readonly UntypedInt joiningL = /* (iota + 1) */ 1;

internal static readonly UntypedInt joiningD = 2;

internal static readonly UntypedInt joiningT = 3;

internal static readonly UntypedInt joiningR = 4;

internal static readonly UntypedInt joinZWJ = 5;

internal static readonly UntypedInt joinZWNJ = 6;

internal static readonly UntypedInt joinVirama = 7;

internal static readonly UntypedInt numJoinTypes = 8;

internal static bool isMapped(this info c) {
    return (info)(c & 3) != 0;
}

internal static Δcategory category(this info c) {
    var small = (info)(c & catSmallMask);
    if (small != 0) {
        return ((Δcategory)small);
    }
    return ((Δcategory)((info)(c & catBigMask)));
}

internal static info joinType(this info c) {
    if (c.isMapped()) {
        return 0;
    }
    return (info)((c >> (int)(joinShift)) & joinMask);
}

internal static bool isModifier(this info c) {
    return (info)(c & ((info)(modifier | catSmallMask))) == modifier;
}

internal static bool isViramaModifier(this info c) {
    return (info)(c & ((info)(attributesMask | catSmallMask))) == viramaModifier;
}

} // end idna_package
