//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class errors_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    internal partial struct errorString
    {
        // Promoted Struct References
        // -- errorString has no promoted structs

        // Field References
        public static ref global::go.@string Ꮡs(ref errorString instance) => ref instance.s;
        
        // Constructors
        public errorString(NilType _)
        {
            this.s = default!;
        }

        public errorString(global::go.@string s = default!)
        {
            this.s = s;
        }
        
        // Handle comparisons between struct 'errorString' instances
        public bool Equals(errorString other) =>
            s == other.s;
        
        public override bool Equals(object? obj) => obj is errorString other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            s);
        
        public static bool operator ==(errorString left, errorString right) => left.Equals(right);
        
        public static bool operator !=(errorString left, errorString right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'errorString'
        public static bool operator ==(errorString value, NilType nil) => value.Equals(default(errorString));

        public static bool operator !=(errorString value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, errorString value) => value == nil;

        public static bool operator !=(NilType nil, errorString value) => value != nil;

        public static implicit operator errorString(NilType nil) => default(errorString);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            s.ToString()
        ]), "}");
    }
}
