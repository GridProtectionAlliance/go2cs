//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using ꓸꓸꓸerror = global::System.Span<global::go.error>;

#nullable enable

namespace go;

public static partial class errors_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    internal partial struct joinError
    {
        // Promoted Struct References
        // -- joinError has no promoted structs

        // Field References
        public static ref global::go.slice<global::go.error> Ꮡerrs(ref joinError instance) => ref instance.errs;
        
        // Constructors
        public joinError(NilType _)
        {
            this.errs = default!;
        }

        public joinError(global::go.slice<global::go.error> errs = default!)
        {
            this.errs = errs;
        }
        
        // Handle comparisons between struct 'joinError' instances
        public bool Equals(joinError other) =>
            errs == other.errs;
        
        public override bool Equals(object? obj) => obj is joinError other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            errs);
        
        public static bool operator ==(joinError left, joinError right) => left.Equals(right);
        
        public static bool operator !=(joinError left, joinError right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'joinError'
        public static bool operator ==(joinError value, NilType nil) => value.Equals(default(joinError));

        public static bool operator !=(joinError value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, joinError value) => value == nil;

        public static bool operator !=(NilType nil, joinError value) => value != nil;

        public static implicit operator joinError(NilType nil) => default(joinError);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            errs.ToString()
        ]), "}");
    }
}
