//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using global::System.Diagnostics.CodeAnalysis;
using global::System.Reflection;
using global::System.Runtime.InteropServices;
using global::go;
using global::go.runtime;

#nullable enable

namespace go;

public static partial class unsafe_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public readonly partial struct IntegerType
    {
        // Value of the struct 'IntegerType'
        private readonly nint m_value;
        
        public override bool Equals(object? obj) => obj is IntegerType other && m_value == other.m_value;
        
        public override int GetHashCode() => m_value.GetHashCode();
        
        public static bool operator <(IntegerType left, IntegerType right) => left.m_value < right.m_value;
        
        public static bool operator <=(IntegerType left, IntegerType right) => left.m_value <= right.m_value;
        
        public static bool operator >(IntegerType left, IntegerType right) => left.m_value > right.m_value;
        
        public static bool operator >=(IntegerType left, IntegerType right) => left.m_value >= right.m_value;
        
        public static IntegerType operator +(IntegerType left, IntegerType right) => new(left.m_value + right.m_value);
        
        public static IntegerType operator -(IntegerType left, IntegerType right) => new(left.m_value - right.m_value);
        
        public static IntegerType operator -(IntegerType value) => new(-value.m_value);
        
        public static IntegerType operator *(IntegerType left, IntegerType right) => new(left.m_value * right.m_value);
        
        public static IntegerType operator /(IntegerType left, IntegerType right) => new(left.m_value / right.m_value);
        
        public static IntegerType operator %(IntegerType left, IntegerType right) => new(left.m_value % right.m_value);
        
        public IntegerType(nint value) => m_value = value;

        public override string ToString() => m_value.ToString();

        public static bool operator ==(IntegerType left, IntegerType right) => left.Equals(right);

        public static bool operator !=(IntegerType left, IntegerType right) => !(left == right);

        // Handle implicit conversions between 'nint' and struct 'IntegerType'
        public static implicit operator IntegerType(nint value) => new IntegerType(value);
            
        public static implicit operator nint(IntegerType value) => value.m_value;
            
        // Handle comparisons between 'nil' and struct 'IntegerType'
        public static bool operator ==(IntegerType value, NilType nil) => value.Equals(default(IntegerType));

        public static bool operator !=(IntegerType value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, IntegerType value) => value == nil;

        public static bool operator !=(NilType nil, IntegerType value) => value != nil;

        public static implicit operator IntegerType(NilType nil) => default(IntegerType)!;
    }
}
