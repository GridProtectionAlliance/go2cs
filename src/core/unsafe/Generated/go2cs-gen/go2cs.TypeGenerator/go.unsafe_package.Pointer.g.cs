//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using global::System.Diagnostics.CodeAnalysis;
using global::System.Reflection;
using global::System.Runtime.InteropServices;
using global::go.runtime;

#nullable enable

namespace go;

public static partial class unsafe_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial class Pointer : IPointer<ArbitraryType>
    {
        // Value of the class 'Pointer'
        private readonly ж<ArbitraryType> m_value;
        
        public override bool Equals(object? obj) => obj is Pointer other && m_value == other.m_value;
        
        public override int GetHashCode() => m_value.GetHashCode();

        public ref ArbitraryType val => ref m_value.val;
        
        public ж<TElem> of<TElem>(FieldRefFunc<TElem> fieldRefFunc) => m_value.of(fieldRefFunc);
        
        public ж<TElem> of<TElem>(FieldRefFunc<ArbitraryType, TElem> fieldRefFunc) => m_value.of(fieldRefFunc);
        
        public ж<Telem> at<Telem>(int index) => m_value.at<Telem>(index);
        
        static ArbitraryType IPointer<ArbitraryType>.operator ~(IPointer<ArbitraryType> value) => value.val;
        
        public Pointer(ж<ArbitraryType> value) => m_value = value;

        public override string ToString() => m_value.ToString();

        public static bool operator ==(Pointer left, Pointer right) => left.Equals(right);

        public static bool operator !=(Pointer left, Pointer right) => !(left == right);

        // Handle implicit conversions between 'ж<ArbitraryType>' and class 'Pointer'
        public static implicit operator Pointer(ж<ArbitraryType> value) => new Pointer(value);
            
        public static implicit operator ж<ArbitraryType>(Pointer value) => value.m_value;
            
        // Handle comparisons between 'nil' and class 'Pointer'
        public static bool operator ==(Pointer value, NilType nil) => value.Equals(default(Pointer));

        public static bool operator !=(Pointer value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Pointer value) => value == nil;

        public static bool operator !=(NilType nil, Pointer value) => value != nil;

        public static implicit operator Pointer(NilType nil) => default(Pointer)!;
    }
}
