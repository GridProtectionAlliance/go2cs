//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct Frog
    {
        // Promoted Struct References
        // -- Frog has no promoted structs

        // Field References
        internal static ref global::go.@string ᏑName(ref Frog instance) => ref instance.Name;
        internal static ref global::go.@string ᏑColor(ref Frog instance) => ref instance.Color;
        
        // Constructors
        public Frog(NilType _)
        {
            this.Name = default!;
            this.Color = default!;
        }

        public Frog(global::go.@string Name = default!, global::go.@string Color = default!)
        {
            this.Name = Name;
            this.Color = Color;
        }
        
        // Handle comparisons between struct 'Frog' instances
        public bool Equals(Frog other) =>
            Name == other.Name &&
            Color == other.Color;
        
        public override bool Equals(object? obj) => obj is Frog other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            Name,
            Color);
        
        public static bool operator ==(Frog left, Frog right) => left.Equals(right);
        
        public static bool operator !=(Frog left, Frog right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'Frog'
        public static bool operator ==(Frog value, NilType nil) => value.Equals(default(Frog));

        public static bool operator !=(Frog value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Frog value) => value == nil;

        public static bool operator !=(NilType nil, Frog value) => value != nil;

        public static implicit operator Frog(NilType nil) => default(Frog);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            Name.ToString(),
            Color.ToString()
        ]), "}");
    }
}
