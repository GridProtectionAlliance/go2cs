//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct Dog
    {
        // Promoted Struct References
        // -- Dog has no promoted structs

        // Field References
        public static ref global::go.@string ᏑName(ref Dog instance) => ref instance.Name;
        public static ref global::go.@string ᏑBreed(ref Dog instance) => ref instance.Breed;
        
        // Constructors
        public Dog(NilType _)
        {
            this.Name = default!;
            this.Breed = default!;
        }

        public Dog(global::go.@string Name = default!, global::go.@string Breed = default!)
        {
            this.Name = Name;
            this.Breed = Breed;
        }
        
        // Handle comparisons between struct 'Dog' instances
        public bool Equals(Dog other) =>
            Name == other.Name &&
            Breed == other.Breed;
        
        public override bool Equals(object? obj) => obj is Dog other && Equals(other);
        
        public override int GetHashCode() => HashCode.Combine(Name, Breed);
        
        public static bool operator ==(Dog left, Dog right) => left.Equals(right);
        
        public static bool operator !=(Dog left, Dog right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'Dog'
        public static bool operator ==(Dog value, NilType nil) => value.Equals(default(Dog));

        public static bool operator !=(Dog value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Dog value) => value == nil;

        public static bool operator !=(NilType nil, Dog value) => value != nil;

        public static implicit operator Dog(NilType nil) => default(Dog);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            Name.ToString(),
            Breed.ToString()
        ]), "}");
    }
}
