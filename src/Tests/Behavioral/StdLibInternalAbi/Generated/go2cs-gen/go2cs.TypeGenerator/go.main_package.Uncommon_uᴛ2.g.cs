//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct Uncommon_uᴛ2
    {
        // Promoted Struct References
        private readonly ж<global::go.main_package.SliceType> ᏑʗSliceType;

        // Promoted Struct Accessors
        public partial ref global::go.main_package.SliceType SliceType => ref ᏑʗSliceType.val;

        // Promoted Struct Field Accessors
        public ref global::go.main_package.Type Type => ref SliceType.Type;
        public ref global::go.ж<global::go.main_package.Type> Elem => ref SliceType.Elem;

        // Promoted Struct Field Accessor References
        public static ref global::go.main_package.Type ᏑType(ref Uncommon_uᴛ2 instance) => ref instance.SliceType.Type;
        public static ref global::go.ж<global::go.main_package.Type> ᏑElem(ref Uncommon_uᴛ2 instance) => ref instance.SliceType.Elem;

        // Field References
        public static ref global::go.main_package.SliceType ᏑSliceType(ref Uncommon_uᴛ2 instance) => ref instance.SliceType;
        public static ref global::go.main_package.UncommonType Ꮡu(ref Uncommon_uᴛ2 instance) => ref instance.u;
        
        // Constructors
        public Uncommon_uᴛ2(NilType _)
        {
            ᏑʗSliceType = new ж<global::go.main_package.SliceType>(new global::go.main_package.SliceType(nil));
            this.u = default!;
        }

        public Uncommon_uᴛ2(global::go.main_package.SliceType SliceType = default!)
        {
            ᏑʗSliceType = new ж<global::go.main_package.SliceType>(SliceType);
        }

        internal Uncommon_uᴛ2(global::go.main_package.SliceType SliceType = default!, global::go.main_package.UncommonType u = default!)
        {
            ᏑʗSliceType = new ж<global::go.main_package.SliceType>(SliceType);
            this.u = u;
        }
        
        // Handle comparisons between struct 'Uncommon_uᴛ2' instances
        public bool Equals(Uncommon_uᴛ2 other) =>
            SliceType == other.SliceType &&
            u == other.u;
        
        public override bool Equals(object? obj) => obj is Uncommon_uᴛ2 other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            SliceType,
            u);
        
        public static bool operator ==(Uncommon_uᴛ2 left, Uncommon_uᴛ2 right) => left.Equals(right);
        
        public static bool operator !=(Uncommon_uᴛ2 left, Uncommon_uᴛ2 right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'Uncommon_uᴛ2'
        public static bool operator ==(Uncommon_uᴛ2 value, NilType nil) => value.Equals(default(Uncommon_uᴛ2));

        public static bool operator !=(Uncommon_uᴛ2 value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Uncommon_uᴛ2 value) => value == nil;

        public static bool operator !=(NilType nil, Uncommon_uᴛ2 value) => value != nil;

        public static implicit operator Uncommon_uᴛ2(NilType nil) => default(Uncommon_uᴛ2);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            SliceType.ToString(),
            u.ToString()
        ]), "}");
    }

    // Promoted Struct Receivers
}
