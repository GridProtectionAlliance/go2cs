//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct ΔArrayType
    {
        // Promoted Struct References
        private readonly ж<global::go.main_package.Type> ᏑʗType;

        // Promoted Struct Accessors
        public partial ref global::go.main_package.Type Type => ref ᏑʗType.val;

        // Promoted Struct Field Accessors
        public ref nuint Size_ => ref Type.Size_;
        public ref nuint PtrBytes => ref Type.PtrBytes;
        public ref uint Hash => ref Type.Hash;
        public ref global::go.main_package.TFlag TFlag => ref Type.TFlag;
        public ref byte Align_ => ref Type.Align_;
        public ref byte FieldAlign_ => ref Type.FieldAlign_;
        public ref global::go.main_package.ΔKind Kind_ => ref Type.Kind_;
        public ref global::System.Func<global::go.unsafe_package.Pointer, global::go.unsafe_package.Pointer, bool> Equal => ref Type.Equal;
        public ref global::go.ж<byte> GCData => ref Type.GCData;
        public ref global::go.main_package.NameOff Str => ref Type.Str;
        public ref global::go.main_package.TypeOff PtrToThis => ref Type.PtrToThis;

        // Promoted Struct Field Accessor References
        public static ref nuint ᏑSize_(ref ΔArrayType instance) => ref instance.Type.Size_;
        public static ref nuint ᏑPtrBytes(ref ΔArrayType instance) => ref instance.Type.PtrBytes;
        public static ref uint ᏑHash(ref ΔArrayType instance) => ref instance.Type.Hash;
        public static ref global::go.main_package.TFlag ᏑTFlag(ref ΔArrayType instance) => ref instance.Type.TFlag;
        public static ref byte ᏑAlign_(ref ΔArrayType instance) => ref instance.Type.Align_;
        public static ref byte ᏑFieldAlign_(ref ΔArrayType instance) => ref instance.Type.FieldAlign_;
        public static ref global::go.main_package.ΔKind ᏑKind_(ref ΔArrayType instance) => ref instance.Type.Kind_;
        public static ref global::System.Func<global::go.unsafe_package.Pointer, global::go.unsafe_package.Pointer, bool> ᏑEqual(ref ΔArrayType instance) => ref instance.Type.Equal;
        public static ref global::go.ж<byte> ᏑGCData(ref ΔArrayType instance) => ref instance.Type.GCData;
        public static ref global::go.main_package.NameOff ᏑStr(ref ΔArrayType instance) => ref instance.Type.Str;
        public static ref global::go.main_package.TypeOff ᏑPtrToThis(ref ΔArrayType instance) => ref instance.Type.PtrToThis;

        // Field References
        public static ref global::go.main_package.Type ᏑType(ref ΔArrayType instance) => ref instance.Type;
        public static ref global::go.ж<global::go.main_package.Type> ᏑElem(ref ΔArrayType instance) => ref instance.Elem;
        public static ref global::go.ж<global::go.main_package.Type> ᏑSlice(ref ΔArrayType instance) => ref instance.Slice;
        public static ref nuint ᏑLen(ref ΔArrayType instance) => ref instance.Len;
        
        // Constructors
        public ΔArrayType(NilType _)
        {
            ᏑʗType = new ж<global::go.main_package.Type>(new global::go.main_package.Type(nil));
            this.Elem = default!;
            this.Slice = default!;
            this.Len = default!;
        }

        public ΔArrayType(global::go.main_package.Type Type = default!, global::go.ж<global::go.main_package.Type> Elem = default!, global::go.ж<global::go.main_package.Type> Slice = default!, nuint Len = default!)
        {
            ᏑʗType = new ж<global::go.main_package.Type>(Type);
            this.Elem = Elem;
            this.Slice = Slice;
            this.Len = Len;
        }
        
        // Handle comparisons between struct 'ΔArrayType' instances
        public bool Equals(ΔArrayType other) =>
            Type == other.Type &&
            Elem == other.Elem &&
            Slice == other.Slice &&
            Len == other.Len;
        
        public override bool Equals(object? obj) => obj is ΔArrayType other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            Type,
            Elem,
            Slice,
            Len);
        
        public static bool operator ==(ΔArrayType left, ΔArrayType right) => left.Equals(right);
        
        public static bool operator !=(ΔArrayType left, ΔArrayType right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'ΔArrayType'
        public static bool operator ==(ΔArrayType value, NilType nil) => value.Equals(default(ΔArrayType));

        public static bool operator !=(ΔArrayType value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, ΔArrayType value) => value == nil;

        public static bool operator !=(NilType nil, ΔArrayType value) => value != nil;

        public static implicit operator ΔArrayType(NilType nil) => default(ΔArrayType);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            Type.ToString(),
            Elem?.ToString() ?? "<nil>",
            Slice?.ToString() ?? "<nil>",
            Len.ToString()
        ]), "}");
    }

    // Promoted Struct Receivers
    public static go.main_package.ΔKind Kind(this ref ΔArrayType target) => target.Type.Kind();
    public static go.main_package.ΔKind Kind(this ж<ΔArrayType> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.Kind();
    }
    public static bool HasName(this ref ΔArrayType target) => target.Type.HasName();
    public static bool HasName(this ж<ΔArrayType> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.HasName();
    }
    public static bool Pointers(this ref ΔArrayType target) => target.Type.Pointers();
    public static bool Pointers(this ж<ΔArrayType> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.Pointers();
    }
    public static bool IfaceIndir(this ref ΔArrayType target) => target.Type.IfaceIndir();
    public static bool IfaceIndir(this ж<ΔArrayType> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.IfaceIndir();
    }
    public static bool IsDirectIface(this ref ΔArrayType target) => target.Type.IsDirectIface();
    public static bool IsDirectIface(this ж<ΔArrayType> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.IsDirectIface();
    }
    public static go.slice<byte> GcSlice(this ref ΔArrayType target, nuint begin, nuint end) => target.Type.GcSlice(begin, end);
    public static go.slice<byte> GcSlice(this ж<ΔArrayType> Ꮡtarget, nuint begin, nuint end)
    {
        ref var target = ref Ꮡtarget.val;
        return target.GcSlice(begin, end);
    }
    public static nint Len(this ref ΔArrayType target) => target.Type.Len();
    public static nint Len(this ж<ΔArrayType> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.Len();
    }
    public static go.ж<go.main_package.Type> Common(this ref ΔArrayType target) => target.Type.Common();
    public static go.ж<go.main_package.Type> Common(this ж<ΔArrayType> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.Common();
    }
    public static go.main_package.ΔChanDir ChanDir(this ref ΔArrayType target) => target.Type.ChanDir();
    public static go.main_package.ΔChanDir ChanDir(this ж<ΔArrayType> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.ChanDir();
    }
    public static go.ж<go.main_package.UncommonType> Uncommon(this ref ΔArrayType target) => target.Type.Uncommon();
    public static go.ж<go.main_package.UncommonType> Uncommon(this ж<ΔArrayType> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.Uncommon();
    }
    public static go.ж<go.main_package.Type> Elem(this ref ΔArrayType target) => target.Type.Elem();
    public static go.ж<go.main_package.Type> Elem(this ж<ΔArrayType> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.Elem();
    }
    public static go.ж<go.main_package.ΔStructType> StructType(this ref ΔArrayType target) => target.Type.StructType();
    public static go.ж<go.main_package.ΔStructType> StructType(this ж<ΔArrayType> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.StructType();
    }
    public static go.ж<go.main_package.ΔMapType> MapType(this ref ΔArrayType target) => target.Type.MapType();
    public static go.ж<go.main_package.ΔMapType> MapType(this ж<ΔArrayType> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.MapType();
    }
    public static go.ж<go.main_package.ΔArrayType> ArrayType(this ref ΔArrayType target) => target.Type.ArrayType();
    public static go.ж<go.main_package.ΔArrayType> ArrayType(this ж<ΔArrayType> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.ArrayType();
    }
    public static go.ж<go.main_package.ΔFuncType> FuncType(this ref ΔArrayType target) => target.Type.FuncType();
    public static go.ж<go.main_package.ΔFuncType> FuncType(this ж<ΔArrayType> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.FuncType();
    }
    public static go.ж<go.main_package.ΔInterfaceType> InterfaceType(this ref ΔArrayType target) => target.Type.InterfaceType();
    public static go.ж<go.main_package.ΔInterfaceType> InterfaceType(this ж<ΔArrayType> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.InterfaceType();
    }
    public static nuint Size(this ref ΔArrayType target) => target.Type.Size();
    public static nuint Size(this ж<ΔArrayType> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.Size();
    }
    public static nint Align(this ref ΔArrayType target) => target.Type.Align();
    public static nint Align(this ж<ΔArrayType> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.Align();
    }
    public static nint FieldAlign(this ref ΔArrayType target) => target.Type.FieldAlign();
    public static nint FieldAlign(this ж<ΔArrayType> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.FieldAlign();
    }
    public static go.slice<go.main_package.Method> ExportedMethods(this ref ΔArrayType target) => target.Type.ExportedMethods();
    public static go.slice<go.main_package.Method> ExportedMethods(this ж<ΔArrayType> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.ExportedMethods();
    }
    public static nint NumMethod(this ref ΔArrayType target) => target.Type.NumMethod();
    public static nint NumMethod(this ж<ΔArrayType> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.NumMethod();
    }
    public static go.ж<go.main_package.Type> Key(this ref ΔArrayType target) => target.Type.Key();
    public static go.ж<go.main_package.Type> Key(this ж<ΔArrayType> Ꮡtarget)
    {
        ref var target = ref Ꮡtarget.val;
        return target.Key();
    }
}
