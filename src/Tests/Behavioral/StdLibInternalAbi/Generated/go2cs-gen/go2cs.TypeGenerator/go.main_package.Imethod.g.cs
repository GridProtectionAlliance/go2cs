//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct Imethod
    {
        // Promoted Struct References
        // -- Imethod has no promoted structs

        // Field References
        public static ref global::go.main_package.NameOff ᏑName(ref Imethod instance) => ref instance.Name;
        public static ref global::go.main_package.TypeOff ᏑTyp(ref Imethod instance) => ref instance.Typ;
        
        // Constructors
        public Imethod(NilType _)
        {
            this.Name = default!;
            this.Typ = default!;
        }

        public Imethod(global::go.main_package.NameOff Name = default!, global::go.main_package.TypeOff Typ = default!)
        {
            this.Name = Name;
            this.Typ = Typ;
        }
        
        // Handle comparisons between struct 'Imethod' instances
        public bool Equals(Imethod other) =>
            Name == other.Name &&
            Typ == other.Typ;
        
        public override bool Equals(object? obj) => obj is Imethod other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            Name,
            Typ);
        
        public static bool operator ==(Imethod left, Imethod right) => left.Equals(right);
        
        public static bool operator !=(Imethod left, Imethod right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'Imethod'
        public static bool operator ==(Imethod value, NilType nil) => value.Equals(default(Imethod));

        public static bool operator !=(Imethod value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Imethod value) => value == nil;

        public static bool operator !=(NilType nil, Imethod value) => value != nil;

        public static implicit operator Imethod(NilType nil) => default(Imethod);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            Name.ToString(),
            Typ.ToString()
        ]), "}");
    }
}
