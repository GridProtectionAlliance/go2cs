//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public readonly partial struct FuncFlag : IEquatable<FuncFlag>
    {
        // Value of the struct 'FuncFlag'
        private readonly uint8 m_value;
        
        public bool Equals(FuncFlag other) => m_value == other.m_value;

        public override bool Equals(object? obj)
        {
            return obj switch
            {
                FuncFlag other => Equals(other),
                uint8 value => Equals(value),
                _ => false
            };
        }
        
        public override int GetHashCode() => m_value.GetHashCode();
        
        public static bool operator <(FuncFlag left, FuncFlag right) => left.m_value < right.m_value;
        
        public static bool operator <=(FuncFlag left, FuncFlag right) => left.m_value <= right.m_value;
        
        public static bool operator >(FuncFlag left, FuncFlag right) => left.m_value > right.m_value;
        
        public static bool operator >=(FuncFlag left, FuncFlag right) => left.m_value >= right.m_value;
        
        public static FuncFlag operator +(FuncFlag left, FuncFlag right) => (FuncFlag)(left.m_value + right.m_value);
        
        public static FuncFlag operator -(FuncFlag left, FuncFlag right) => (FuncFlag)(left.m_value - right.m_value);
        
        public static FuncFlag operator -(FuncFlag value) => (FuncFlag)(-value.m_value);
        
        public static FuncFlag operator *(FuncFlag left, FuncFlag right) => (FuncFlag)(left.m_value * right.m_value);
        
        public static FuncFlag operator /(FuncFlag left, FuncFlag right) => (FuncFlag)(left.m_value / right.m_value);
        
        public static FuncFlag operator %(FuncFlag left, FuncFlag right) => (FuncFlag)(left.m_value % right.m_value);
        
        public FuncFlag(uint8 value) => m_value = value;

        public FuncFlag(NilType _) => m_value = default!;
        
        public override string ToString() => m_value.ToString();

        public static bool operator ==(FuncFlag left, FuncFlag right) => left.Equals(right);

        public static bool operator !=(FuncFlag left, FuncFlag right) => !(left == right);

        // Handle implicit conversions between 'uint8' and struct 'FuncFlag'
        public static implicit operator FuncFlag(uint8 value) => new FuncFlag(value);
            
        public static implicit operator uint8(FuncFlag value) => value.m_value;
            
        // Handle comparisons between 'nil' and struct 'FuncFlag'
        public static bool operator ==(FuncFlag value, NilType nil) => value.Equals(default(FuncFlag));

        public static bool operator !=(FuncFlag value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, FuncFlag value) => value == nil;

        public static bool operator !=(NilType nil, FuncFlag value) => value != nil;

        public static implicit operator FuncFlag(NilType nil) => default(FuncFlag)!;
    }
}
