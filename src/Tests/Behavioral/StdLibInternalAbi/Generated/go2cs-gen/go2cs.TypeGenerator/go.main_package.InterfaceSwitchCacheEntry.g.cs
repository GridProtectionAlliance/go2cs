//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct InterfaceSwitchCacheEntry
    {
        // Promoted Struct References
        // -- InterfaceSwitchCacheEntry has no promoted structs

        // Field References
        internal static ref nuint ᏑTyp(ref InterfaceSwitchCacheEntry instance) => ref instance.Typ;
        internal static ref nint ᏑCase(ref InterfaceSwitchCacheEntry instance) => ref instance.Case;
        internal static ref nuint ᏑItab(ref InterfaceSwitchCacheEntry instance) => ref instance.Itab;
        
        // Constructors
        public InterfaceSwitchCacheEntry(NilType _)
        {
            this.Typ = default!;
            this.Case = default!;
            this.Itab = default!;
        }

        public InterfaceSwitchCacheEntry(nuint Typ = default!, nint Case = default!, nuint Itab = default!)
        {
            this.Typ = Typ;
            this.Case = Case;
            this.Itab = Itab;
        }
        
        // Handle comparisons between struct 'InterfaceSwitchCacheEntry' instances
        public bool Equals(InterfaceSwitchCacheEntry other) =>
            Typ == other.Typ &&
            Case == other.Case &&
            Itab == other.Itab;
        
        public override bool Equals(object? obj) => obj is InterfaceSwitchCacheEntry other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            Typ,
            Case,
            Itab);
        
        public static bool operator ==(InterfaceSwitchCacheEntry left, InterfaceSwitchCacheEntry right) => left.Equals(right);
        
        public static bool operator !=(InterfaceSwitchCacheEntry left, InterfaceSwitchCacheEntry right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'InterfaceSwitchCacheEntry'
        public static bool operator ==(InterfaceSwitchCacheEntry value, NilType nil) => value.Equals(default(InterfaceSwitchCacheEntry));

        public static bool operator !=(InterfaceSwitchCacheEntry value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, InterfaceSwitchCacheEntry value) => value == nil;

        public static bool operator !=(NilType nil, InterfaceSwitchCacheEntry value) => value != nil;

        public static implicit operator InterfaceSwitchCacheEntry(NilType nil) => default(InterfaceSwitchCacheEntry);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            Typ.ToString(),
            Case.ToString(),
            Itab.ToString()
        ]), "}");
    }
}
