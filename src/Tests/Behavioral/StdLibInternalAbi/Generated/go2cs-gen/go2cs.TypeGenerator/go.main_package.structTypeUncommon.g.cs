//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    internal partial struct structTypeUncommon
    {
        // Promoted Struct References
        private readonly ж<global::go.main_package.ΔStructType> ᏑʗStructType;

        // Promoted Struct Accessors
        public partial ref global::go.main_package.ΔStructType StructType => ref ᏑʗStructType.val;

        // Promoted Struct Field Accessors
        public ref global::go.main_package.Type Type => ref StructType.Type;
        public ref global::go.main_package.ΔName PkgPath => ref StructType.PkgPath;
        public ref global::go.slice<global::go.main_package.StructField> Fields => ref StructType.Fields;

        // Promoted Struct Field Accessor References
        public static ref global::go.main_package.Type ᏑType(ref structTypeUncommon instance) => ref instance.StructType.Type;
        public static ref global::go.main_package.ΔName ᏑPkgPath(ref structTypeUncommon instance) => ref instance.StructType.PkgPath;
        public static ref global::go.slice<global::go.main_package.StructField> ᏑFields(ref structTypeUncommon instance) => ref instance.StructType.Fields;

        // Field References
        public static ref global::go.main_package.ΔStructType ᏑStructType(ref structTypeUncommon instance) => ref instance.StructType;
        public static ref global::go.main_package.UncommonType Ꮡu(ref structTypeUncommon instance) => ref instance.u;
        
        // Constructors
        public structTypeUncommon(NilType _)
        {
            ᏑʗStructType = new ж<global::go.main_package.ΔStructType>(new global::go.main_package.ΔStructType(nil));
            this.u = default!;
        }

        public structTypeUncommon(global::go.main_package.ΔStructType StructType = default!)
        {
            ᏑʗStructType = new ж<global::go.main_package.ΔStructType>(StructType);
        }

        internal structTypeUncommon(global::go.main_package.ΔStructType StructType = default!, global::go.main_package.UncommonType u = default!)
        {
            ᏑʗStructType = new ж<global::go.main_package.ΔStructType>(StructType);
            this.u = u;
        }
        
        // Handle comparisons between struct 'structTypeUncommon' instances
        public bool Equals(structTypeUncommon other) =>
            StructType == other.StructType &&
            u == other.u;
        
        public override bool Equals(object? obj) => obj is structTypeUncommon other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            StructType,
            u);
        
        public static bool operator ==(structTypeUncommon left, structTypeUncommon right) => left.Equals(right);
        
        public static bool operator !=(structTypeUncommon left, structTypeUncommon right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'structTypeUncommon'
        public static bool operator ==(structTypeUncommon value, NilType nil) => value.Equals(default(structTypeUncommon));

        public static bool operator !=(structTypeUncommon value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, structTypeUncommon value) => value == nil;

        public static bool operator !=(NilType nil, structTypeUncommon value) => value != nil;

        public static implicit operator structTypeUncommon(NilType nil) => default(structTypeUncommon);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            StructType.ToString(),
            u.ToString()
        ]), "}");
    }

    // Promoted Struct Receivers
}
