//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct TypeAssert
    {
        // Promoted Struct References
        // -- TypeAssert has no promoted structs

        // Field References
        public static ref global::go.ж<global::go.main_package.TypeAssertCache> ᏑCache(ref TypeAssert instance) => ref instance.Cache;
        public static ref global::go.ж<global::go.main_package.ΔInterfaceType> ᏑInter(ref TypeAssert instance) => ref instance.Inter;
        internal static ref bool ᏑCanFail(ref TypeAssert instance) => ref instance.CanFail;
        
        // Constructors
        public TypeAssert(NilType _)
        {
            this.Cache = default!;
            this.Inter = default!;
            this.CanFail = default!;
        }

        public TypeAssert(global::go.ж<global::go.main_package.TypeAssertCache> Cache = default!, global::go.ж<global::go.main_package.ΔInterfaceType> Inter = default!, bool CanFail = default!)
        {
            this.Cache = Cache;
            this.Inter = Inter;
            this.CanFail = CanFail;
        }
        
        // Handle comparisons between struct 'TypeAssert' instances
        public bool Equals(TypeAssert other) =>
            Cache == other.Cache &&
            Inter == other.Inter &&
            CanFail == other.CanFail;
        
        public override bool Equals(object? obj) => obj is TypeAssert other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            Cache,
            Inter,
            CanFail);
        
        public static bool operator ==(TypeAssert left, TypeAssert right) => left.Equals(right);
        
        public static bool operator !=(TypeAssert left, TypeAssert right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'TypeAssert'
        public static bool operator ==(TypeAssert value, NilType nil) => value.Equals(default(TypeAssert));

        public static bool operator !=(TypeAssert value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, TypeAssert value) => value == nil;

        public static bool operator !=(NilType nil, TypeAssert value) => value != nil;

        public static implicit operator TypeAssert(NilType nil) => default(TypeAssert);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            Cache?.ToString() ?? "<nil>",
            Inter?.ToString() ?? "<nil>",
            CanFail.ToString()
        ]), "}");
    }
}
