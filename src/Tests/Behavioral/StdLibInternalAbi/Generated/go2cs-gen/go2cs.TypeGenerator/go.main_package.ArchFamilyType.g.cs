//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public readonly partial struct ArchFamilyType : IEquatable<ArchFamilyType>
    {
        // Value of the struct 'ArchFamilyType'
        private readonly nint m_value;
        
        public bool Equals(ArchFamilyType other) => m_value == other.m_value;

        public override bool Equals(object? obj)
        {
            return obj switch
            {
                ArchFamilyType other => Equals(other),
                nint value => Equals(value),
                _ => false
            };
        }
        
        public override int GetHashCode() => m_value.GetHashCode();
        
        public static bool operator <(ArchFamilyType left, ArchFamilyType right) => left.m_value < right.m_value;
        
        public static bool operator <=(ArchFamilyType left, ArchFamilyType right) => left.m_value <= right.m_value;
        
        public static bool operator >(ArchFamilyType left, ArchFamilyType right) => left.m_value > right.m_value;
        
        public static bool operator >=(ArchFamilyType left, ArchFamilyType right) => left.m_value >= right.m_value;
        
        public static ArchFamilyType operator +(ArchFamilyType left, ArchFamilyType right) => (ArchFamilyType)(left.m_value + right.m_value);
        
        public static ArchFamilyType operator -(ArchFamilyType left, ArchFamilyType right) => (ArchFamilyType)(left.m_value - right.m_value);
        
        public static ArchFamilyType operator -(ArchFamilyType value) => (ArchFamilyType)(-value.m_value);
        
        public static ArchFamilyType operator *(ArchFamilyType left, ArchFamilyType right) => (ArchFamilyType)(left.m_value * right.m_value);
        
        public static ArchFamilyType operator /(ArchFamilyType left, ArchFamilyType right) => (ArchFamilyType)(left.m_value / right.m_value);
        
        public static ArchFamilyType operator %(ArchFamilyType left, ArchFamilyType right) => (ArchFamilyType)(left.m_value % right.m_value);
        
        public ArchFamilyType(nint value) => m_value = value;

        public ArchFamilyType(NilType _) => m_value = default!;

        public nint val => m_value;
        
        public override string ToString() => m_value.ToString();

        public static bool operator ==(ArchFamilyType left, ArchFamilyType right) => left.Equals(right);

        public static bool operator !=(ArchFamilyType left, ArchFamilyType right) => !(left == right);

        // Handle implicit conversions between 'nint' and struct 'ArchFamilyType'
        public static implicit operator ArchFamilyType(nint value) => new ArchFamilyType(value);
            
        public static implicit operator nint(ArchFamilyType value) => value.m_value;
            
        // Handle comparisons between 'nil' and struct 'ArchFamilyType'
        public static bool operator ==(ArchFamilyType value, NilType nil) => value.Equals(default(ArchFamilyType));

        public static bool operator !=(ArchFamilyType value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, ArchFamilyType value) => value == nil;

        public static bool operator !=(NilType nil, ArchFamilyType value) => value != nil;

        public static implicit operator ArchFamilyType(NilType nil) => default(ArchFamilyType)!;
    }
}
