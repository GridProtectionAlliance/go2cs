//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct Pair<T, U>
    {
        // Promoted Struct References
        // -- Pair has no promoted structs

        // Field References
        public static ref T ᏑFirst(ref Pair<T, U> instance) => ref instance.First;
        public static ref U ᏑSecond(ref Pair<T, U> instance) => ref instance.Second;
        
        // Constructors
        public Pair(NilType _)
        {
            this.First = default!;
            this.Second = default!;
        }

        public Pair(T First = default!, U Second = default!)
        {
            this.First = First;
            this.Second = Second;
        }
        
        // Handle comparisons between struct 'Pair' instances
        public bool Equals(Pair<T, U> other) =>
            First == other.First &&
            Second == other.Second;
        
        public override bool Equals(object? obj) => obj is Pair<T, U> other && Equals(other);
        
        public override int GetHashCode() => HashCode.Combine(First, Second);
        
        public static bool operator ==(Pair<T, U> left, Pair<T, U> right) => left.Equals(right);
        
        public static bool operator !=(Pair<T, U> left, Pair<T, U> right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'Pair'
        public static bool operator ==(Pair<T, U> value, NilType nil) => value.Equals(default(Pair<T, U>));

        public static bool operator !=(Pair<T, U> value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Pair<T, U> value) => value == nil;

        public static bool operator !=(NilType nil, Pair<T, U> value) => value != nil;

        public static implicit operator Pair(NilType nil) => default(Pair<T, U>);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            First.ToString(),
            Second.ToString()
        ]), "}");
    }
}
