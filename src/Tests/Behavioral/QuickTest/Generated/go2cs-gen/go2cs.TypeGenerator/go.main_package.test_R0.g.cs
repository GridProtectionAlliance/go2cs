//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    internal partial struct test_R0
    {
        // Promoted Struct References
        // -- test_R0 has no promoted structs

        // Field References
        public static ref global::go.@string Ꮡstring(ref test_R0 instance) => ref instance.@string;
        public static ref global::go.ж<nint> Ꮡint(ref test_R0 instance) => ref instance.@int;
        public static ref global::go.ж<bool> ᏑP(ref test_R0 instance) => ref instance.P;
        public static ref global::go.map<nint, nint> ᏑM(ref test_R0 instance) => ref instance.M;
        
        // Constructors
        public test_R0(NilType _)
        {
            this.@string = default!;
            this.@int = default!;
            this.P = default!;
            this.M = default!;
        }

        public test_R0(global::go.@string @string = default!, global::go.ж<nint> @int = default!, global::go.ж<bool> P = default!, global::go.map<nint, nint> M = default!)
        {
            this.@string = @string;
            this.@int = @int;
            this.P = P;
            this.M = M;
        }
        
        // Handle comparisons between struct 'test_R0' instances
        public bool Equals(test_R0 other) =>
            @string == other.@string &&
            @int == other.@int &&
            P == other.P &&
            M == other.M;
        
        public override bool Equals(object? obj) => obj is test_R0 other && Equals(other);
        
        public override int GetHashCode() => HashCode.Combine(@string, @int, P, M);
        
        public static bool operator ==(test_R0 left, test_R0 right) => left.Equals(right);
        
        public static bool operator !=(test_R0 left, test_R0 right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'test_R0'
        public static bool operator ==(test_R0 value, NilType nil) => value.Equals(default(test_R0));

        public static bool operator !=(test_R0 value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, test_R0 value) => value == nil;

        public static bool operator !=(NilType nil, test_R0 value) => value != nil;

        public static implicit operator test_R0(NilType nil) => default(test_R0);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            @string.ToString(),
            @int?.ToString() ?? "<nil>",
            P?.ToString() ?? "<nil>",
            M.ToString()
        ]), "}");
    }
}
