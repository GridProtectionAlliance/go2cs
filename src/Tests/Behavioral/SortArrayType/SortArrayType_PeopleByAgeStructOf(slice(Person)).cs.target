//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 23 04:28:49 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Runtime.CompilerServices;

#nullable enable

namespace go
{
    public static partial class main_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct PeopleByAge : ISlice
        {
            // Value of the PeopleByAge struct
            private readonly slice<Person> m_value;

            public Array Array => ((ISlice)m_value).Array;

            public nint Low => ((ISlice)m_value).Low;

            public nint High => ((ISlice)m_value).High;

            public nint Capacity => ((ISlice)m_value).Capacity;

            public nint Available => ((ISlice)m_value).Available;

            public nint Length => ((IArray)m_value).Length;

            object? IArray.this[nint index]
            {
                get => ((IArray)m_value)[index];
                set => ((IArray)m_value)[index] = value;
            }

            public ref Person this[nint index]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get
                {
                    return ref m_value[index];
                }
            }

            public IEnumerator GetEnumerator() => ((IEnumerable)m_value).GetEnumerator();

            public object Clone() => ((ICloneable)m_value).Clone();

            public PeopleByAge(slice<Person> value) => m_value = value;

            // Enable implicit conversions between slice<Person> and PeopleByAge struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator PeopleByAge(slice<Person> value) => new PeopleByAge(value);
            
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator slice<Person>(PeopleByAge value) => value.m_value;
            
            // Enable comparisons between nil and PeopleByAge struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(PeopleByAge value, NilType nil) => value.Equals(default(PeopleByAge));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(PeopleByAge value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, PeopleByAge value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, PeopleByAge value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator PeopleByAge(NilType nil) => default(PeopleByAge);
        }
    }
}
