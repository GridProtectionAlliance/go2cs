//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using ꓸꓸꓸnint = System.Span<nint>;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    internal partial struct score
    {
        // Promoted Struct References
        // -- score has no promoted structs

        // Field References
        public static ref nint Ꮡplayer(ref score instance) => ref instance.player;
        public static ref nint Ꮡopponent(ref score instance) => ref instance.opponent;
        public static ref nint ᏑthisTurn(ref score instance) => ref instance.thisTurn;
        
        // Constructors
        public score(NilType _)
        {
            this.player = default!;
            this.opponent = default!;
            this.thisTurn = default!;
        }

        public score(nint player = default!, nint opponent = default!, nint thisTurn = default!)
        {
            this.player = player;
            this.opponent = opponent;
            this.thisTurn = thisTurn;
        }
        
        // Handle comparisons between struct 'score' instances
        public bool Equals(score other) =>
            player == other.player &&
            opponent == other.opponent &&
            thisTurn == other.thisTurn;
        
        public override bool Equals(object? obj) => obj is score other && Equals(other);
        
        public override int GetHashCode() => HashCode.Combine(player, opponent, thisTurn);
        
        public static bool operator ==(score left, score right) => left.Equals(right);
        
        public static bool operator !=(score left, score right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'score'
        public static bool operator ==(score value, NilType nil) => value.Equals(default(score));

        public static bool operator !=(score value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, score value) => value == nil;

        public static bool operator !=(NilType nil, score value) => value != nil;

        public static implicit operator score(NilType nil) => default(score);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            player.ToString(),
            opponent.ToString(),
            thisTurn.ToString()
        ]), "}");
    }
}
