//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct Stack<T>
    {
        // Promoted Struct References
        // -- Stack has no promoted structs

        // Field References
        internal static ref global::go.slice<T> Ꮡelements(ref Stack<T> instance) => ref instance.elements;
        
        // Constructors
        public Stack(NilType _)
        {
            this.elements = default!;
        }


        internal Stack(global::go.slice<T> elements = default!)
        {
            this.elements = elements;
        }
        
        // Handle comparisons between struct 'Stack' instances
        public bool Equals(Stack<T> other) =>
            false /* missing equality constraints */;
        
        public override bool Equals(object? obj) => obj is Stack<T> other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            elements);
        
        public static bool operator ==(Stack<T> left, Stack<T> right) => left.Equals(right);
        
        public static bool operator !=(Stack<T> left, Stack<T> right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'Stack'
        public static bool operator ==(Stack<T> value, NilType nil) => value.Equals(default(Stack<T>));

        public static bool operator !=(Stack<T> value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Stack<T> value) => value == nil;

        public static bool operator !=(NilType nil, Stack<T> value) => value != nil;

        public static implicit operator Stack<T>(NilType nil) => default(Stack<T>);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            elements.ToString()
        ]), "}");
    }
}
