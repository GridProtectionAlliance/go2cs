//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct MyError
    {
        // Promoted Struct References
        // -- MyError has no promoted structs

        // Field References
        public static ref global::go.@string Ꮡdescription(ref MyError instance) => ref instance.description;
        
        // Constructors
        public MyError(NilType _)
        {
            this.description = default!;
        }

        public MyError(global::go.@string description = default!)
        {
            this.description = description;
        }
        
        // Handle comparisons between struct 'MyError' instances
        public bool Equals(MyError other) =>
            description == other.description;
        
        public override bool Equals(object? obj) => obj is MyError other && Equals(other);
        
        public override int GetHashCode() => HashCode.Combine(
            description);
        
        public static bool operator ==(MyError left, MyError right) => left.Equals(right);
        
        public static bool operator !=(MyError left, MyError right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'MyError'
        public static bool operator ==(MyError value, NilType nil) => value.Equals(default(MyError));

        public static bool operator !=(MyError value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, MyError value) => value == nil;

        public static bool operator !=(NilType nil, MyError value) => value != nil;

        public static implicit operator MyError(NilType nil) => default(MyError);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            description.ToString()
        ]), "}");
    }
}
