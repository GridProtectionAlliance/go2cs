//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Numerics;
using System.Reflection;
using go.runtime;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    internal partial interface testTypeSwitch_type
    {
        // Runtime interface conversion methods
        public static testTypeSwitch_type As<ΔTTarget>(in ΔTTarget target) =>
            (ΔtestTypeSwitch_type<ΔTTarget>)target!;

        public static testTypeSwitch_type As<ΔTTarget>(ж<ΔTTarget> target_ptr) =>
            (ΔtestTypeSwitch_type<ΔTTarget>)target_ptr;

        public static testTypeSwitch_type? As(object target) =>
            typeof(ΔtestTypeSwitch_type<>).CreateInterfaceHandler<testTypeSwitch_type>(target);            
    }

    // Defines a runtime type for duck-typed interface implementations based on existing
    // extension methods that satisfy interface. This class is only used as fallback for
    // when the interface was not able to be implemented at transpile time, e.g., with
    // dynamically declared anonymous interfaces used with type assertions.
    [GeneratedCode("go2cs-gen", "0.1.4")]
    internal class ΔtestTypeSwitch_type<ΔTTarget> : testTypeSwitch_type
    {
        private ΔTTarget m_target = default!;
        private readonly ж<ΔTTarget>? m_target_ptr;
        private readonly bool m_target_is_ptr;
    
        public ref ΔTTarget Target
        {
            get
            {
                if (m_target_is_ptr && m_target_ptr is not null)
                    return ref m_target_ptr.val;
    
                return ref m_target;
            }
        }
    
        public ΔtestTypeSwitch_type(in ΔTTarget target)
        {
            m_target = target;
        }
    
        public ΔtestTypeSwitch_type(ж<ΔTTarget> target_ptr)
        {
            m_target_ptr = target_ptr;
            m_target_is_ptr = true;
        }
            
        // Implementation for 'testTypeSwitch_type.Unwrap' receiver method 
        private delegate go.error UnwrapByPtr(ж<ΔTTarget> targetʗ);
        private delegate go.error UnwrapByVal(ΔTTarget targetʗ);
        
        private static readonly UnwrapByPtr? s_UnwrapByPtr;
        private static readonly UnwrapByVal? s_UnwrapByVal;
        
        [DebuggerNonUserCode]
        public go.error Unwrap()
        {
            ΔTTarget target = m_target;
        
            if (m_target_is_ptr && m_target_ptr is not null)
                target = m_target_ptr.val;
        
            if (s_UnwrapByPtr is null || !m_target_is_ptr)
                return s_UnwrapByVal!(target);
        
            return s_UnwrapByPtr(m_target_ptr!);
        }
    
        static ΔtestTypeSwitch_type()
        {
            Type targetType = typeof(ΔTTarget);
            Type targetTypeByPtr = typeof(ж<ΔTTarget>);
            MethodInfo? extensionMethod;
                
            // Initialization of 'testTypeSwitch_type.Unwrap' receiver method implementation
            extensionMethod = targetTypeByPtr.GetExtensionMethod(nameof(Unwrap));
            
            if (extensionMethod is not null)
                s_UnwrapByPtr = extensionMethod.CreateStaticDelegate(typeof(UnwrapByPtr)) as UnwrapByPtr;
            
            extensionMethod = targetType.GetExtensionMethod(nameof(Unwrap));
            
            if (extensionMethod is not null)
                s_UnwrapByVal = extensionMethod.CreateStaticDelegate(typeof(UnwrapByVal)) as UnwrapByVal;
            
            if (s_UnwrapByPtr is null && s_UnwrapByVal is null)
                throw new NotImplementedException($"{targetType.FullName} does not implement 'testTypeSwitch_type.{nameof(Unwrap)}' method");
        }
    
        public static explicit operator ΔtestTypeSwitch_type<ΔTTarget>(in ж<ΔTTarget> target_ptr) => new(target_ptr);
    
        public static explicit operator ΔtestTypeSwitch_type<ΔTTarget>(in ΔTTarget target) => new(target);

        public override int GetHashCode() => Target?.GetHashCode() ?? 0;

        public static bool operator ==(ΔtestTypeSwitch_type<ΔTTarget>? left, ΔtestTypeSwitch_type<ΔTTarget>? right) => left?.Equals(right) ?? right is null;
        
        public static bool operator !=(ΔtestTypeSwitch_type<ΔTTarget>? left, ΔtestTypeSwitch_type<ΔTTarget>? right) => !(left == right);

        #region [ Operator Constraint Implementations ]

        // These operator constraints exist to satisfy possible constraints defined on source interface,
        // however, the instance of this class is only used to implement the interface methods, so these
        // operators are only placeholders and not actually functional.

        public static bool operator <(ΔtestTypeSwitch_type<ΔTTarget> left, ΔtestTypeSwitch_type<ΔTTarget> right) => false;
        
        public static bool operator <=(ΔtestTypeSwitch_type<ΔTTarget> left, ΔtestTypeSwitch_type<ΔTTarget> right) => false;
        
        public static bool operator >(ΔtestTypeSwitch_type<ΔTTarget> left, ΔtestTypeSwitch_type<ΔTTarget> right) => false;
        
        public static bool operator >=(ΔtestTypeSwitch_type<ΔTTarget> left, ΔtestTypeSwitch_type<ΔTTarget> right) => false;
        
        public static ΔtestTypeSwitch_type<ΔTTarget> operator +(ΔtestTypeSwitch_type<ΔTTarget> left, ΔtestTypeSwitch_type<ΔTTarget> right) => default!;
        
        public static ΔtestTypeSwitch_type<ΔTTarget> operator -(ΔtestTypeSwitch_type<ΔTTarget> left, ΔtestTypeSwitch_type<ΔTTarget> right) => default!;
        
        public static ΔtestTypeSwitch_type<ΔTTarget> operator -(ΔtestTypeSwitch_type<ΔTTarget> value) => default!;
        
        public static ΔtestTypeSwitch_type<ΔTTarget> operator *(ΔtestTypeSwitch_type<ΔTTarget> left, ΔtestTypeSwitch_type<ΔTTarget> right) => default!;
        
        public static ΔtestTypeSwitch_type<ΔTTarget> operator /(ΔtestTypeSwitch_type<ΔTTarget> left, ΔtestTypeSwitch_type<ΔTTarget> right) => default!;
        
        public static ΔtestTypeSwitch_type<ΔTTarget> operator %(ΔtestTypeSwitch_type<ΔTTarget> left, ΔtestTypeSwitch_type<ΔTTarget> right) => default!;

        public static ΔtestTypeSwitch_type<ΔTTarget> operator &(ΔtestTypeSwitch_type<ΔTTarget> left, ΔtestTypeSwitch_type<ΔTTarget> right) => default!;
        
        public static ΔtestTypeSwitch_type<ΔTTarget> operator |(ΔtestTypeSwitch_type<ΔTTarget> left, ΔtestTypeSwitch_type<ΔTTarget> right) => default!;
        
        public static ΔtestTypeSwitch_type<ΔTTarget> operator ^(ΔtestTypeSwitch_type<ΔTTarget> left, ΔtestTypeSwitch_type<ΔTTarget> right) => default!;
        
        public static ΔtestTypeSwitch_type<ΔTTarget> operator ~(ΔtestTypeSwitch_type<ΔTTarget> value) => default!;
        
        public static ΔtestTypeSwitch_type<ΔTTarget> operator <<(ΔtestTypeSwitch_type<ΔTTarget> value, ΔtestTypeSwitch_type<ΔTTarget> shiftAmount) => default!;
        
        public static ΔtestTypeSwitch_type<ΔTTarget> operator >>(ΔtestTypeSwitch_type<ΔTTarget> value, ΔtestTypeSwitch_type<ΔTTarget> shiftAmount) => default!;
        
        public static ΔtestTypeSwitch_type<ΔTTarget> operator >>>(ΔtestTypeSwitch_type<ΔTTarget> value, ΔtestTypeSwitch_type<ΔTTarget> shiftAmount) => default!;
        
        #endregion
    
        // Enable comparisons between nil and ΔtestTypeSwitch_type<ΔTTarget> interface instance
        public static bool operator ==(ΔtestTypeSwitch_type<ΔTTarget> value, NilType nil) => Activator.CreateInstance<ΔtestTypeSwitch_type<ΔTTarget>>().Equals(value);
    
        public static bool operator !=(ΔtestTypeSwitch_type<ΔTTarget> value, NilType nil) => !(value == nil);
    
        public static bool operator ==(NilType nil, ΔtestTypeSwitch_type<ΔTTarget> value) => value == nil;
    
        public static bool operator !=(NilType nil, ΔtestTypeSwitch_type<ΔTTarget> value) => value != nil;
    }
}
