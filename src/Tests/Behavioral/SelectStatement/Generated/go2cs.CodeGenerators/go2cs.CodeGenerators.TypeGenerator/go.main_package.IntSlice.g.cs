//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2025 January 02 11:09:14 UTC
// </auto-generated>
//---------------------------------------------------------
namespace go;

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

#nullable enable

public static partial class main_package
{
    [GeneratedCode("go2cs", "0.1.2.0")]
    public partial struct IntSlice : ISlice<nint>
    {
        // Value of the IntSlice struct
        private readonly slice<nint> m_value;
        
        public nint[] Source => m_value;
            
        public ISlice<nint> Append(nint[] elems) => m_value.Append(elems);
            
        public nint Low => ((ISlice)m_value).Low;

        public nint High => ((ISlice)m_value).High;

        public nint Capacity => ((ISlice)m_value).Capacity;

        public nint Available => ((ISlice)m_value).Available;

        public nint Length => ((IArray)m_value).Length;

        Array IArray.Source => ((IArray)m_value).Source!;

        object? IArray.this[nint index]
        {
            get => ((IArray)m_value)[index];
            set => ((IArray)m_value)[index] = value;
        }
            
        public ref nint this[nint index]
        {
            get => ref m_value[index];
        }
        
        public Span<nint> ꓸꓸꓸ => ToSpan();

        public Span<nint> ToSpan()
        {
            return m_value.ToSpan();
        }
        
        public ISlice? Append(object[] elems)
        {
            return ((ISlice)m_value).Append(elems);
        }

        public IEnumerator<(nint, nint)> GetEnumerator()
        {
            return m_value.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return ((IEnumerable)m_value).GetEnumerator();
        }
        
        public bool Equals(IArray<nint>? other)
        {
            return m_value.Equals(other);
        }
       
        public bool Equals(ISlice<nint>? other)
        {
           return m_value.Equals(other);
        }

        public object Clone() => ((ICloneable)m_value).Clone();

        public IntSlice(slice<nint> value) => m_value = value;

        // Enable implicit conversions between slice<nint> and IntSlice struct
        public static implicit operator IntSlice(slice<nint> value) => new IntSlice(value);
            
        public static implicit operator slice<nint>(IntSlice value) => value.m_value;
            
        // Enable comparisons between nil and IntSlice struct
        public static bool operator ==(IntSlice value, NilType nil) => value.Equals(default(IntSlice));

        public static bool operator !=(IntSlice value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, IntSlice value) => value == nil;

        public static bool operator !=(NilType nil, IntSlice value) => value != nil;

        public static implicit operator IntSlice(NilType nil) => default(IntSlice);
    }
}

