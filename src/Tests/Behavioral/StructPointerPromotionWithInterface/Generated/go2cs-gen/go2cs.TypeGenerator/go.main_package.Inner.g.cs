//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct Inner
    {
        // Promoted Struct References
        // -- Inner has no promoted structs

        // Field References
        public static ref global::go.@string ᏑValue(ref Inner instance) => ref instance.Value;
        
        // Constructors
        public Inner(NilType _)
        {
            this.Value = default!;
        }

        public Inner(global::go.@string Value = default!)
        {
            this.Value = Value;
        }
        
        // Handle comparisons between struct 'Inner' instances
        public bool Equals(Inner other) =>
            Value == other.Value;
        
        public override bool Equals(object? obj) => obj is Inner other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            Value);
        
        public static bool operator ==(Inner left, Inner right) => left.Equals(right);
        
        public static bool operator !=(Inner left, Inner right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'Inner'
        public static bool operator ==(Inner value, NilType nil) => value.Equals(default(Inner));

        public static bool operator !=(Inner value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Inner value) => value == nil;

        public static bool operator !=(NilType nil, Inner value) => value != nil;

        public static implicit operator Inner(NilType nil) => default(Inner);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            Value.ToString()
        ]), "}");
    }
}
