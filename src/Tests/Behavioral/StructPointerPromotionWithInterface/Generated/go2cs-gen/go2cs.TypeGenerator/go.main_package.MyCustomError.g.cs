//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct MyCustomError
    {
        // Promoted Struct References
        private readonly ж<global::go.ж<global::go.main_package.MyError>> ᏑʗMyError;

        // Promoted Struct Accessors
        public partial ref global::go.ж<global::go.main_package.MyError> MyError => ref ᏑʗMyError.val;

        // Promoted Struct Field Accessors
        public ref global::go.time_package.Time When => ref MyError.val.When;
        internal ref global::go.@string What => ref MyError.val.What;

        // Promoted Struct Field Accessor References
        public static ref global::go.time_package.Time ᏑWhen(ref MyCustomError instance) => ref instance.MyError.val.When;
        internal static ref global::go.@string ᏑWhat(ref MyCustomError instance) => ref instance.MyError.val.What;

        // Field References
        internal static ref global::go.@string ᏑMessage(ref MyCustomError instance) => ref instance.Message;
        public static ref global::go.main_package.Abser ᏑAbser(ref MyCustomError instance) => ref instance.Abser;
        public static ref global::go.ж<global::go.main_package.MyError> ᏑMyError(ref MyCustomError instance) => ref instance.MyError;
        
        // Constructors
        public MyCustomError(NilType _)
        {
            this.Message = default!;
            this.Abser = default!;
            ᏑʗMyError = new ж<global::go.ж<global::go.main_package.MyError>>(new global::go.ж<global::go.main_package.MyError>(nil));
        }

        public MyCustomError(global::go.@string Message = default!, global::go.main_package.Abser Abser = default!, global::go.ж<global::go.main_package.MyError> MyError = default!)
        {
            this.Message = Message;
            this.Abser = Abser;
            ᏑʗMyError = new ж<global::go.ж<global::go.main_package.MyError>>(MyError);
        }
        
        // Handle comparisons between struct 'MyCustomError' instances
        public bool Equals(MyCustomError other) =>
            Message == other.Message &&
            Abser == other.Abser &&
            MyError == other.MyError;
        
        public override bool Equals(object? obj) => obj is MyCustomError other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            Message,
            Abser,
            MyError);
        
        public static bool operator ==(MyCustomError left, MyCustomError right) => left.Equals(right);
        
        public static bool operator !=(MyCustomError left, MyCustomError right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'MyCustomError'
        public static bool operator ==(MyCustomError value, NilType nil) => value.Equals(default(MyCustomError));

        public static bool operator !=(MyCustomError value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, MyCustomError value) => value == nil;

        public static bool operator !=(NilType nil, MyCustomError value) => value != nil;

        public static implicit operator MyCustomError(NilType nil) => default(MyCustomError);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            Message.ToString(),
            Abser?.ToString() ?? "<nil>",
            MyError?.ToString() ?? "<nil>"
        ]), "}");
    }

    // Promoted Struct Receivers
    // 'MyError.val.Time' method mapped to overridden 'MyCustomError' receiver method
}
