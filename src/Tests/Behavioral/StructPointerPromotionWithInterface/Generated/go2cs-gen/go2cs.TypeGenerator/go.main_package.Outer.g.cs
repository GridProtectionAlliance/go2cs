//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct Outer
    {
        // Promoted Struct References
        // -- Outer has no promoted structs

        // Field References
        public static ref global::go.ж<global::go.ж<global::go.main_package.Inner>> Ꮡptr(ref Outer instance) => ref instance.ptr;
        
        // Constructors
        public Outer(NilType _)
        {
            this.ptr = default!;
        }

        public Outer(global::go.ж<global::go.ж<global::go.main_package.Inner>> ptr = default!)
        {
            this.ptr = ptr;
        }
        
        // Enable comparisons between Outer struct types
        public bool Equals(Outer other)
        {
            return 
                ptr == other.ptr;
        }
        
        public override bool Equals(object? obj)
        {
            return obj is Outer other && Equals(other);
        }
        
        public override int GetHashCode()
        {
            return HashCode.Combine(ptr);
        }
        
        public static bool operator ==(Outer left, Outer right) => left.Equals(right);
        
        public static bool operator !=(Outer left, Outer right) => !(left == right);

        // Enable comparisons between nil and Outer struct
        public static bool operator ==(Outer value, NilType nil) => value.Equals(default(Outer));

        public static bool operator !=(Outer value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Outer value) => value == nil;

        public static bool operator !=(NilType nil, Outer value) => value != nil;

        public static implicit operator Outer(NilType nil) => default(Outer);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            ptr?.ToString() ?? "<nil>"
        ]), "}");
    }
}
