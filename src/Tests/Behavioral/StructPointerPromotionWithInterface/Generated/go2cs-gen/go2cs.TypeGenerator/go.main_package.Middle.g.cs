//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct Middle
    {
        // Promoted Struct References
        private readonly ж<global::go.ж<global::go.main_package.Inner>> ᏑʗInner;

        // Promoted Struct Accessors
        public partial ref global::go.ж<global::go.main_package.Inner> Inner => ref ᏑʗInner.val;

        // Promoted Struct Field Accessors
        internal ref global::go.@string Value => ref Inner.val.Value;

        // Promoted Struct Field Accessor References
        internal static ref global::go.@string ᏑValue(ref Middle instance) => ref instance.Inner.val.Value;

        // Field References
        public static ref global::go.ж<global::go.main_package.Inner> ᏑInner(ref Middle instance) => ref instance.Inner;
        
        // Constructors
        public Middle(NilType _)
        {
            ᏑʗInner = new ж<global::go.ж<global::go.main_package.Inner>>(new global::go.ж<global::go.main_package.Inner>(nil));
        }

        public Middle(global::go.ж<global::go.main_package.Inner> Inner = default!)
        {
            ᏑʗInner = new ж<global::go.ж<global::go.main_package.Inner>>(Inner);
        }
        
        // Handle comparisons between struct 'Middle' instances
        public bool Equals(Middle other) =>
            Inner == other.Inner;
        
        public override bool Equals(object? obj) => obj is Middle other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            Inner);
        
        public static bool operator ==(Middle left, Middle right) => left.Equals(right);
        
        public static bool operator !=(Middle left, Middle right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'Middle'
        public static bool operator ==(Middle value, NilType nil) => value.Equals(default(Middle));

        public static bool operator !=(Middle value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Middle value) => value == nil;

        public static bool operator !=(NilType nil, Middle value) => value != nil;

        public static implicit operator Middle(NilType nil) => default(Middle);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            Inner?.ToString() ?? "<nil>"
        ]), "}");
    }

    // Promoted Struct Receivers
}
