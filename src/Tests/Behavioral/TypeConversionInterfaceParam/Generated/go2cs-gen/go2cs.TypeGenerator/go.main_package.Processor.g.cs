//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct Processor
    {
        // Promoted Struct References
        // -- Processor has no promoted structs

        // Field References
        // -- Processor has no defined fields
        
        // Constructors
        public Processor(NilType _)
        {
        }

        public Processor()
        {
        }
        
        // Enable comparisons between Processor struct types
        public bool Equals(Processor other)
        {
            return 
                true;
        }
        
        public override bool Equals(object? obj)
        {
            return obj is Processor other && Equals(other);
        }
        
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
        
        public static bool operator ==(Processor left, Processor right) => left.Equals(right);
        
        public static bool operator !=(Processor left, Processor right) => !(left == right);

        // Enable comparisons between nil and Processor struct
        public static bool operator ==(Processor value, NilType nil) => value.Equals(default(Processor));

        public static bool operator !=(Processor value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Processor value) => value == nil;

        public static bool operator !=(NilType nil, Processor value) => value != nil;

        public static implicit operator Processor(NilType nil) => default(Processor);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            ""
        ]), "}");
    }
}
