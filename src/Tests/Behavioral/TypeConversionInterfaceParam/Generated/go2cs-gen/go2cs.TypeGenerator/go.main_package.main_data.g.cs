//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    internal partial struct main_data
    {
        // Promoted Struct References
        // -- main_data has no promoted structs

        // Field References
        public static ref nint ᏑID(ref main_data instance) => ref instance.ID;
        public static ref global::go.@string ᏑName(ref main_data instance) => ref instance.Name;
        public static ref bool ᏑValid(ref main_data instance) => ref instance.Valid;
        
        // Constructors
        public main_data(NilType _)
        {
            this.ID = default!;
            this.Name = default!;
            this.Valid = default!;
        }

        public main_data(nint ID = default!, global::go.@string Name = default!, bool Valid = default!)
        {
            this.ID = ID;
            this.Name = Name;
            this.Valid = Valid;
        }
        
        // Enable comparisons between main_data struct types
        public bool Equals(main_data other)
        {
            return 
                ID == other.ID &&
                Name == other.Name &&
                Valid == other.Valid;
        }
        
        public override bool Equals(object? obj)
        {
            return obj is main_data other && Equals(other);
        }
        
        public override int GetHashCode()
        {
            return HashCode.Combine(ID, Name, Valid);
        }
        
        public static bool operator ==(main_data left, main_data right) => left.Equals(right);
        
        public static bool operator !=(main_data left, main_data right) => !(left == right);

        // Enable comparisons between nil and main_data struct
        public static bool operator ==(main_data value, NilType nil) => value.Equals(default(main_data));

        public static bool operator !=(main_data value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, main_data value) => value == nil;

        public static bool operator !=(NilType nil, main_data value) => value != nil;

        public static implicit operator main_data(NilType nil) => default(main_data);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            ID.ToString(),
            Name.ToString(),
            Valid.ToString()
        ]), "}");
    }
}
