//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct Process_data
    {
        // Promoted Struct References
        // -- Process_data has no promoted structs

        // Field References
        public static ref nint ᏑID(ref Process_data instance) => ref instance.ID;
        public static ref global::go.@string ᏑName(ref Process_data instance) => ref instance.Name;
        public static ref bool ᏑValid(ref Process_data instance) => ref instance.Valid;
        
        // Constructors
        public Process_data(NilType _)
        {
            this.ID = default!;
            this.Name = default!;
            this.Valid = default!;
        }

        public Process_data(nint ID = default!, global::go.@string Name = default!, bool Valid = default!)
        {
            this.ID = ID;
            this.Name = Name;
            this.Valid = Valid;
        }
        
        // Handle comparisons between struct 'Process_data' instances
        public bool Equals(Process_data other) =>
            ID == other.ID &&
            Name == other.Name &&
            Valid == other.Valid;
        
        public override bool Equals(object? obj) => obj is Process_data other && Equals(other);
        
        public override int GetHashCode() => HashCode.Combine(
            ID,
            Name,
            Valid);
        
        public static bool operator ==(Process_data left, Process_data right) => left.Equals(right);
        
        public static bool operator !=(Process_data left, Process_data right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'Process_data'
        public static bool operator ==(Process_data value, NilType nil) => value.Equals(default(Process_data));

        public static bool operator !=(Process_data value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Process_data value) => value == nil;

        public static bool operator !=(NilType nil, Process_data value) => value != nil;

        public static implicit operator Process_data(NilType nil) => default(Process_data);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            ID.ToString(),
            Name.ToString(),
            Valid.ToString()
        ]), "}");
    }
}
