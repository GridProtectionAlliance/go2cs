//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public readonly partial struct TFlag : IEquatable<TFlag>
    {
        // Value of the struct 'TFlag'
        private readonly uint8 m_value;
        
        public bool Equals(TFlag other) => m_value == other.m_value;

        public override bool Equals(object? obj)
        {
            return obj switch
            {
                TFlag other => Equals(other),
                uint8 value => Equals(value),
                _ => false
            };
        }
        
        public override int GetHashCode() => m_value.GetHashCode();
        
        public static bool operator <(TFlag left, TFlag right) => left.m_value < right.m_value;
        
        public static bool operator <=(TFlag left, TFlag right) => left.m_value <= right.m_value;
        
        public static bool operator >(TFlag left, TFlag right) => left.m_value > right.m_value;
        
        public static bool operator >=(TFlag left, TFlag right) => left.m_value >= right.m_value;
        
        public static TFlag operator +(TFlag left, TFlag right) => (TFlag)(left.m_value + right.m_value);
        
        public static TFlag operator -(TFlag left, TFlag right) => (TFlag)(left.m_value - right.m_value);
        
        public static TFlag operator -(TFlag value) => (TFlag)(-value.m_value);
        
        public static TFlag operator *(TFlag left, TFlag right) => (TFlag)(left.m_value * right.m_value);
        
        public static TFlag operator /(TFlag left, TFlag right) => (TFlag)(left.m_value / right.m_value);
        
        public static TFlag operator %(TFlag left, TFlag right) => (TFlag)(left.m_value % right.m_value);
        
        public TFlag(uint8 value) => m_value = value;

        public TFlag(NilType _) => m_value = default!;
        
        public override string ToString() => m_value.ToString();

        public static bool operator ==(TFlag left, TFlag right) => left.Equals(right);

        public static bool operator !=(TFlag left, TFlag right) => !(left == right);

        // Handle implicit conversions between 'uint8' and struct 'TFlag'
        public static implicit operator TFlag(uint8 value) => new TFlag(value);
            
        public static implicit operator uint8(TFlag value) => value.m_value;
            
        // Handle comparisons between 'nil' and struct 'TFlag'
        public static bool operator ==(TFlag value, NilType nil) => value.Equals(default(TFlag));

        public static bool operator !=(TFlag value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, TFlag value) => value == nil;

        public static bool operator !=(NilType nil, TFlag value) => value != nil;

        public static implicit operator TFlag(NilType nil) => default(TFlag)!;
    }
}
