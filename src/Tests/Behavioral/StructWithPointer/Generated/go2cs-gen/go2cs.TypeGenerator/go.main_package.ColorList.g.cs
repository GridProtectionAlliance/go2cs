//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct ColorList
    {
        // Promoted Struct References
        // -- ColorList has no promoted structs

        // Field References
        public static ref nint ᏑTotal(ref ColorList instance) => ref instance.Total;
        public static ref global::go.@string ᏑColor(ref ColorList instance) => ref instance.Color;
        public static ref global::go.ж<global::go.main_package.ColorList> ᏑNext(ref ColorList instance) => ref instance.Next;
        public static ref global::go.ж<global::go.ж<global::go.main_package.ColorList>> ᏑNextNext(ref ColorList instance) => ref instance.NextNext;
        
        // Constructors
        public ColorList(NilType _)
        {
            this.Total = default!;
            this.Color = default!;
            this.Next = default!;
            this.NextNext = default!;
        }

        public ColorList(nint Total = default!, global::go.@string Color = default!, global::go.ж<global::go.main_package.ColorList> Next = default!, global::go.ж<global::go.ж<global::go.main_package.ColorList>> NextNext = default!)
        {
            this.Total = Total;
            this.Color = Color;
            this.Next = Next;
            this.NextNext = NextNext;
        }
        
        // Handle comparisons between struct 'ColorList' instances
        public bool Equals(ColorList other) =>
            Total == other.Total &&
            Color == other.Color &&
            Next == other.Next &&
            NextNext == other.NextNext;
        
        public override bool Equals(object? obj) => obj is ColorList other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            Total,
            Color,
            Next,
            NextNext);
        
        public static bool operator ==(ColorList left, ColorList right) => left.Equals(right);
        
        public static bool operator !=(ColorList left, ColorList right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'ColorList'
        public static bool operator ==(ColorList value, NilType nil) => value.Equals(default(ColorList));

        public static bool operator !=(ColorList value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, ColorList value) => value == nil;

        public static bool operator !=(NilType nil, ColorList value) => value != nil;

        public static implicit operator ColorList(NilType nil) => default(ColorList);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            Total.ToString(),
            Color.ToString(),
            Next?.ToString() ?? "<nil>",
            NextNext?.ToString() ?? "<nil>"
        ]), "}");
    }
}
