//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct Employee
    {
        // Promoted Struct References
        // -- Employee has no promoted structs

        // Field References
        internal static ref global::go.@string Ꮡposition(ref Employee instance) => ref instance.position;
        
        // Constructors
        public Employee(NilType _)
        {
            this.position = default!;
        }


        internal Employee(global::go.@string position = default!)
        {
            this.position = position;
        }
        
        // Handle comparisons between struct 'Employee' instances
        public bool Equals(Employee other) =>
            position == other.position;
        
        public override bool Equals(object? obj) => obj is Employee other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            position);
        
        public static bool operator ==(Employee left, Employee right) => left.Equals(right);
        
        public static bool operator !=(Employee left, Employee right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'Employee'
        public static bool operator ==(Employee value, NilType nil) => value.Equals(default(Employee));

        public static bool operator !=(Employee value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Employee value) => value == nil;

        public static bool operator !=(NilType nil, Employee value) => value != nil;

        public static implicit operator Employee(NilType nil) => default(Employee);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            position.ToString()
        ]), "}");
    }
}
