//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct Record
    {
        // Promoted Struct References
        private readonly ж<global::go.main_package.Person> ᏑʗPerson;
        private readonly ж<global::go.main_package.Employee> ᏑʗEmployee;

        // Promoted Struct Accessors
        public partial ref global::go.main_package.Person Person => ref ᏑʗPerson.val;
        public partial ref global::go.main_package.Employee Employee => ref ᏑʗEmployee.val;

        // Promoted Struct Field Accessors
        public ref global::go.@string name => ref Person.name;
        public ref int age => ref Person.age;
        public ref global::go.@string position => ref Employee.position;

        // Promoted Struct Field Accessor References
        public static ref global::go.@string Ꮡname(ref Record instance) => ref instance.Person.name;
        public static ref int Ꮡage(ref Record instance) => ref instance.Person.age;
        public static ref global::go.@string Ꮡposition(ref Record instance) => ref instance.Employee.position;

        // Promoted Struct Method References
        // 'Person.IsDr' method mapped to overridden 'Record' receiver method
        public bool IsAdult() => Person.IsAdult();
        public bool IsManager() => Employee.IsManager();

        // Field References
        public static ref global::go.main_package.Person ᏑPerson(ref Record instance) => ref instance.Person;
        public static ref global::go.main_package.Employee ᏑEmployee(ref Record instance) => ref instance.Employee;
        
        // Constructors
        public Record(NilType _)
        {
            ᏑʗPerson = new ж<global::go.main_package.Person>(new global::go.main_package.Person(nil));
            ᏑʗEmployee = new ж<global::go.main_package.Employee>(new global::go.main_package.Employee(nil));
        }

        public Record(global::go.main_package.Person Person = default!, global::go.main_package.Employee Employee = default!)
        {
            ᏑʗPerson = new ж<global::go.main_package.Person>(Person);
            ᏑʗEmployee = new ж<global::go.main_package.Employee>(Employee);
        }
        
        // Handle comparisons between struct 'Record' instances
        public bool Equals(Record other) =>
            Person == other.Person &&
            Employee == other.Employee;
        
        public override bool Equals(object? obj) => obj is Record other && Equals(other);
        
        public override int GetHashCode() => HashCode.Combine(
            Person,
            Employee);
        
        public static bool operator ==(Record left, Record right) => left.Equals(right);
        
        public static bool operator !=(Record left, Record right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'Record'
        public static bool operator ==(Record value, NilType nil) => value.Equals(default(Record));

        public static bool operator !=(Record value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Record value) => value == nil;

        public static bool operator !=(NilType nil, Record value) => value != nil;

        public static implicit operator Record(NilType nil) => default(Record);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            Person.ToString(),
            Employee.ToString()
        ]), "}");
    }
}
