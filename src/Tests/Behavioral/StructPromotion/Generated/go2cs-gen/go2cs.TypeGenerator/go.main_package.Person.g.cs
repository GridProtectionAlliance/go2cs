//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct Person
    {
        // Promoted Struct References
        // -- Person has no promoted structs

        // Field References
        internal static ref global::go.@string Ꮡname(ref Person instance) => ref instance.name;
        internal static ref int Ꮡage(ref Person instance) => ref instance.age;
        
        // Constructors
        public Person(NilType _)
        {
            this.name = default!;
            this.age = default!;
        }


        internal Person(global::go.@string name = default!, int age = default!)
        {
            this.name = name;
            this.age = age;
        }
        
        // Handle comparisons between struct 'Person' instances
        public bool Equals(Person other) =>
            name == other.name &&
            age == other.age;
        
        public override bool Equals(object? obj) => obj is Person other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            name,
            age);
        
        public static bool operator ==(Person left, Person right) => left.Equals(right);
        
        public static bool operator !=(Person left, Person right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'Person'
        public static bool operator ==(Person value, NilType nil) => value.Equals(default(Person));

        public static bool operator !=(Person value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Person value) => value == nil;

        public static bool operator !=(NilType nil, Person value) => value != nil;

        public static implicit operator Person(NilType nil) => default(Person);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            name.ToString(),
            age.ToString()
        ]), "}");
    }
}
