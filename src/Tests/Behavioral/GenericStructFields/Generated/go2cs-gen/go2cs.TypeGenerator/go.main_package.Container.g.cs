//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct Container
    {
        // Promoted Struct References
        // -- Container has no promoted structs

        // Field References
        public static ref global::go.main_package.Result<nint> ᏑIntResult(ref Container instance) => ref instance.IntResult;
        public static ref global::go.main_package.Result<global::go.@string> ᏑStringResult(ref Container instance) => ref instance.StringResult;
        public static ref global::go.slice<global::go.main_package.Result<double>> ᏑFloatValues(ref Container instance) => ref instance.FloatValues;
        public static ref global::go.map<global::go.@string, global::go.main_package.Result<bool>> ᏑMappings(ref Container instance) => ref instance.Mappings;
        
        // Constructors
        public Container(NilType _)
        {
            this.IntResult = default!;
            this.StringResult = default!;
            this.FloatValues = default!;
            this.Mappings = default!;
        }

        public Container(global::go.main_package.Result<nint> IntResult = default!, global::go.main_package.Result<global::go.@string> StringResult = default!, global::go.slice<global::go.main_package.Result<double>> FloatValues = default!, global::go.map<global::go.@string, global::go.main_package.Result<bool>> Mappings = default!)
        {
            this.IntResult = IntResult;
            this.StringResult = StringResult;
            this.FloatValues = FloatValues;
            this.Mappings = Mappings;
        }
        
        // Handle comparisons between struct 'Container' instances
        public bool Equals(Container other) =>
            IntResult == other.IntResult &&
            StringResult == other.StringResult &&
            FloatValues == other.FloatValues &&
            Mappings == other.Mappings;
        
        public override bool Equals(object? obj) => obj is Container other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            IntResult,
            StringResult,
            FloatValues,
            Mappings);
        
        public static bool operator ==(Container left, Container right) => left.Equals(right);
        
        public static bool operator !=(Container left, Container right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'Container'
        public static bool operator ==(Container value, NilType nil) => value.Equals(default(Container));

        public static bool operator !=(Container value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Container value) => value == nil;

        public static bool operator !=(NilType nil, Container value) => value != nil;

        public static implicit operator Container(NilType nil) => default(Container);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            IntResult.ToString(),
            StringResult.ToString(),
            FloatValues.ToString(),
            Mappings.ToString()
        ]), "}");
    }
}
