//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    internal partial struct main_Person
    {
        // Promoted Struct References
        // -- main_Person has no promoted structs

        // Field References
        public static ref global::go.@string ᏑName(ref main_Person instance) => ref instance.Name;
        public static ref global::go.ж<global::go.main_package.main_Person_Address> ᏑAddress(ref main_Person instance) => ref instance.Address;
        
        // Constructors
        public main_Person(NilType _)
        {
            this.Name = default!;
            this.Address = default!;
        }

        public main_Person(global::go.@string Name = default!, global::go.ж<global::go.main_package.main_Person_Address> Address = default!)
        {
            this.Name = Name;
            this.Address = Address;
        }
        
        // Enable comparisons between main_Person struct types
        public bool Equals(main_Person other)
        {
            return 
                Name == other.Name &&
                Address == other.Address;
        }
        
        public override bool Equals(object? obj)
        {
            return obj is main_Person other && Equals(other);
        }
        
        public override int GetHashCode()
        {
            return HashCode.Combine(Name, Address);
        }
        
        public static bool operator ==(main_Person left, main_Person right) => left.Equals(right);
        
        public static bool operator !=(main_Person left, main_Person right) => !(left == right);

        // Enable comparisons between nil and main_Person struct
        public static bool operator ==(main_Person value, NilType nil) => value.Equals(default(main_Person));

        public static bool operator !=(main_Person value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, main_Person value) => value == nil;

        public static bool operator !=(NilType nil, main_Person value) => value != nil;

        public static implicit operator main_Person(NilType nil) => default(main_Person);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            Name.ToString(),
            Address?.ToString() ?? "<nil>"
        ]), "}");
    }
}
