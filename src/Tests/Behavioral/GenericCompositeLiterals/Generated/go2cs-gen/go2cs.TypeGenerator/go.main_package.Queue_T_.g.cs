//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct Queue<T>
    {
        // Promoted Struct References
        // -- Queue has no promoted structs

        // Field References
        public static ref global::go.slice<T> Ꮡitems(ref Queue<T> instance) => ref instance.items;
        
        // Constructors
        public Queue(NilType _)
        {
            this.items = default!;
        }


        internal Queue(global::go.slice<T> items = default!)
        {
            this.items = items;
        }
        
        // Handle comparisons between struct 'Queue' instances
        public bool Equals(Queue<T> other) =>
            false /* missing equality constraints */;
        
        public override bool Equals(object? obj) => obj is Queue<T> other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            items);
        
        public static bool operator ==(Queue<T> left, Queue<T> right) => left.Equals(right);
        
        public static bool operator !=(Queue<T> left, Queue<T> right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'Queue'
        public static bool operator ==(Queue<T> value, NilType nil) => value.Equals(default(Queue<T>));

        public static bool operator !=(Queue<T> value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Queue<T> value) => value == nil;

        public static bool operator !=(NilType nil, Queue<T> value) => value != nil;

        public static implicit operator Queue<T>(NilType nil) => default(Queue<T>);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            items.ToString()
        ]), "}");
    }
}
