//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;

#nullable enable

namespace go;

public static partial class main_package
{
    [GeneratedCode("go2cs-gen", "0.1.4")]
    public partial struct Message
    {
        // Promoted Struct References
        // -- Message has no promoted structs

        // Field References
        public static ref global::go.@string ᏑText(ref Message instance) => ref instance.Text;
        
        // Constructors
        public Message(NilType _)
        {
            this.Text = default!;
        }

        public Message(global::go.@string Text = default!)
        {
            this.Text = Text;
        }
        
        // Handle comparisons between struct 'Message' instances
        public bool Equals(Message other) =>
            Text == other.Text;
        
        public override bool Equals(object? obj) => obj is Message other && Equals(other);
        
        public override int GetHashCode() => runtime.HashCode.Combine(
            Text);
        
        public static bool operator ==(Message left, Message right) => left.Equals(right);
        
        public static bool operator !=(Message left, Message right) => !(left == right);

        // Handle comparisons between 'nil' and struct 'Message'
        public static bool operator ==(Message value, NilType nil) => value.Equals(default(Message));

        public static bool operator !=(Message value, NilType nil) => !(value == nil);

        public static bool operator ==(NilType nil, Message value) => value == nil;

        public static bool operator !=(NilType nil, Message value) => value != nil;

        public static implicit operator Message(NilType nil) => default(Message);

        public override string ToString() => string.Concat("{", string.Join(" ",
        [
            Text.ToString()
        ]), "}");
    }
}
