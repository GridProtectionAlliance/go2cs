using System;
using System.Collections.Generic;
using System.Linq;
using static go2cs.Common;

namespace go2cs.Templates;

internal abstract class TemplateBase
{
    // Common Template Parameters
    public required string PackageNamespace;
    public required string PackageName;
    public string[]? UsingStatements = null;
    public string? Scope = null;
    public string? PackageFooter = null;

    private readonly HashSet<string> m_usings = new(
    [
        "using System;",
        "using System.CodeDom.Compiler;",
        "using System.Collections;",
        "using System.Collections.Generic;"
    ],
    StringComparer.Ordinal);

    public const string TypeElemIndent = "        ";

    public virtual string Usings => 
        string.Join("\r\n", m_usings.OrderBy(stmt => stmt.TrimEnd(';'), StringComparer.Ordinal));

    public virtual string Generate()
    {
        if (UsingStatements is not null)
        {
            // Add any using statements defined by derived template
            m_usings.UnionWith(UsingStatements);

            // Remove any aliases, i.e., any that contain an equals sign but excluding
            // spread operators, e.g., `using ꓸꓸꓸnint = System.Span<nint>;`
            m_usings.RemoveWhere(item => item.Contains("=") && !item.StartsWith("using ꓸꓸꓸ"));

            // Remove any lines that are not using statements
            m_usings.RemoveWhere(item => !item.StartsWith("using "));

            // Remove any static usings
            m_usings.RemoveWhere(item => item.StartsWith("using static "));
        }

        if (!string.IsNullOrWhiteSpace(PackageNamespace) && !PackageNamespace.Equals("go"))
            m_usings.Add("using go;");

        return $"{TemplateHeader}{TemplateBody}{TemplateFooter}";
    }

    public virtual string TemplateHeader =>
        $$"""
        {{AutoGeneratedHeader}}
        
        {{Usings}}

        #nullable enable
        
        namespace {{PackageNamespace}};

        public static partial class {{PackageName}}_package
        {
        
        """;

    public abstract string TemplateBody { get; }

    public virtual string TemplateFooter =>
        $$"""
        
        }
        {{PackageFooter ?? ""}}
        """;
}
