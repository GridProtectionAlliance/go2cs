//******************************************************************************************************
//  Common.cs - Gbtc
//
//  Copyright © 2018, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  05/17/2018 - J. Ritchie Carroll
//       Generated original version of source code.
//
//******************************************************************************************************

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text.RegularExpressions;
using Microsoft.CodeAnalysis;

namespace go2cs;

public static class Common
{
    public static readonly Assembly? EntryAssembly;
    public static readonly string AssemblyName;
    public static readonly string Version;
    public static readonly string GeneratedCodeAttribute;
    public static readonly Regex PointerExpr;
    private static readonly HashSet<char> InvalidChars;

    public const string AutoGeneratedHeader = 
        """
        //---------------------------------------------------------
        // <auto-generated>
        //     This code was generated by a tool. Changes to this
        //     file may cause incorrect behavior and will be lost
        //     if the code is regenerated.
        // </auto-generated>
        //---------------------------------------------------------
        """;

    static Common()
    {
        const string FallBackAssemblyName = nameof(go2cs);
        const string FallBackVersion = "0.0.1";

        try
        {
            EntryAssembly = Assembly.GetAssembly(typeof(Common));
            AssemblyName = EntryAssembly?.GetName().Name ?? FallBackAssemblyName;
            Version = getVersion();
        }
        catch
        {
            EntryAssembly = null;
            AssemblyName = FallBackAssemblyName;
            Version = FallBackVersion;
        }

        GeneratedCodeAttribute = $"""GeneratedCode("{AssemblyName}", "{Version}")""";

        PointerExpr = new Regex(@"^(?:[^<]*)?ж<.*$", RegexOptions.Compiled);
        InvalidChars = [..Path.GetInvalidFileNameChars()];

        return;

        string getVersion()
        {
            Version? version = EntryAssembly?.GetName().Version;
            return version is null ? FallBackVersion : $"{version.Major}.{version.Minor}.{version.Build}";
        }
    }

    public static string GetSimpleName(string name)
    {
        // Check if type name is a pointer, i.e., ж<T>
        int startIndex = name.IndexOf('ж');
        bool isPointer = false;

        // For pointer types, get dereferenced underlying type
        if (startIndex > -1 && name.EndsWith(">"))
        {
            name = $"{name[(startIndex + 2)..^1]}";
            isPointer = true;
        }

        string[] parts = name.Split('.');

        return $"{parts[^1]}{(isPointer ? ".val" : "")}";
    }

    public static string GetFullTypeName(this ITypeSymbol? typeSymbol, bool useDisplayString = false)
    {
        switch (typeSymbol)
        {
            case null:
                return string.Empty;
            case IArrayTypeSymbol arrayType:
                return $"{GetFullTypeName(arrayType.ElementType)}[]";
            case INamedTypeSymbol { IsGenericType: true } namedType:
                ImmutableArray<ITypeSymbol> typeArgs = namedType.TypeArguments;
                IEnumerable<string> typeArgNames = typeArgs.Select(typeArg => typeArg.GetFullTypeName(useDisplayString));
                return $"{namedType.Name}<{string.Join(", ", typeArgNames)}>";
            default:
                return useDisplayString ? typeSymbol.ToDisplayString() : typeSymbol.Name;
        }
    }

    public static string GetValidFileName(string fileName)
    {
        return new string(fileName.Select(c => InvalidChars.Contains(c) ? '_' : c).ToArray());
    }

    public static string GetUnsanitizedIdentifier(string name)
    {
        return name.StartsWith("@") ? name[1..] : name;
    }
}
