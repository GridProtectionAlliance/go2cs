//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2018 July 11 20:04:19 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;

#pragma warning disable CS0660, CS0661
#nullable enable

namespace go
{
    public static partial class main_package
    {
        [GeneratedCode("go2cs", "0.1.1.0")]
        public partial interface Abser
        {
            // Can't implicitly cast to an interface, but C# 8 supports interface methods
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Abser @new<T>(T target) =>
                target as Abser ?? (Abser<T>)target;
        }

        [GeneratedCode("go2cs", "0.1.1.0")]
        public class Abser<T> : Abser
        {
            private T m_target;

            private Abser(T target) => m_target = target;

            public ref T Target => ref m_target;

            private delegate double AbsByVal(T value);
            private delegate double AbsByRef(ref T value);

            private static readonly AbsByVal s_AbsByVal;
            private static readonly AbsByRef s_AbsByRef;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public double Abs() => s_AbsByRef?.Invoke(ref m_target) ?? s_AbsByVal(m_target);

            [DebuggerStepperBoundary]
            static Abser()
            {
                Type targetType = typeof(T);
                MethodInfo? extensionMethod;

                extensionMethod = targetType.GetExtensionMethod("Abs");

                if (extensionMethod != null)
                {
                    s_AbsByRef = extensionMethod.CreateStaticDelegate(typeof(AbsByRef)) as AbsByRef;

                    if (s_AbsByRef == null)
                        s_AbsByVal = extensionMethod.CreateStaticDelegate(typeof(AbsByVal)) as AbsByVal;
                }

                if (s_AbsByRef == null && s_AbsByVal == null)
                    throw new NotImplementedException($"{targetType.Name} does not implement Abser.Abs method", new Exception("Abs"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Abser<T>(T target) => new Abser<T>(target);

            // Enable comparisons between nil and Abser<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Abser<T> value, NilType nil) => Activator.CreateInstance<Abser<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Abser<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Abser<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Abser<T> value) => value != nil;
        }

        [GeneratedCode("go2cs", "0.1.1.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static Abser Abser_cast<T>(T target)
        {
            if (typeof(Abser).IsAssignableFrom(typeof(T)))
                return target as Abser;

            return (Abser<T>)target;
        }
    }
}

namespace go
{
    //public partial class NilType
    //{
    //    // Enable comparisons between nil and Abser interface
    //    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    //    public static bool operator ==(go.main_package.Abser value, NilType nil) => (object)value == null || Activator.CreateInstance(value.GetType()).Equals(value);

    //    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    //    public static bool operator !=(go.main_package.Abser value, NilType nil) => !(value == nil);

    //    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    //    public static bool operator ==(NilType nil, go.main_package.Abser value) => value == nil;

    //    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    //    public static bool operator !=(NilType nil, go.main_package.Abser value) => value != nil;
    //}

    public static class main_AbserExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.1.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T TypeAssert<T>(this go.main_package.Abser target)
        {
            try
            {
                return ((go.main_package.Abser<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"panic: interface conversion: {target.GetType().FullName} is not {typeof(T).FullName}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.1.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool TryTypeAssert<T>(this go.main_package.Abser target, out T result)
        {
            try
            {
                result = target.TypeAssert<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default(T);
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.1.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object TypeAssert(this go.main_package.Abser target, Type type)
        {
            try
            {
                MethodInfo conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.main_package.Abser<>).GetExplicitGenericConversionOperator(type));

                if ((object)conversionOperator == null)
                    throw new PanicException($"panic: interface conversion: failed to create converter for {target.GetType().FullName} to {type.FullName}");

                dynamic result = conversionOperator.Invoke(null, new object[] { target });
                return result.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"panic: interface conversion: {target.GetType().FullName} is not {type.FullName}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.1.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool TryTypeAssert(this go.main_package.Abser target, Type type, out object result)
        {
            try
            {
                result = target.TypeAssert(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}
