//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:28:33 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using context = go.context_package;
using os = go.os_package;
using sync = go.sync_package;
using go;

#nullable enable

namespace go {
namespace os
{
    public static partial class signal_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial struct stopping
        {
            // Constructors
            public stopping(NilType _)
            {
                this.c = default;
                this.h = default;
            }

            public stopping(channel<os.Signal> c = default, ref ptr<handler> h = default)
            {
                this.c = c;
                this.h = h;
            }

            // Enable comparisons between nil and stopping struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(stopping value, NilType nil) => value.Equals(default(stopping));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(stopping value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, stopping value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, stopping value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator stopping(NilType nil) => default(stopping);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private static stopping stopping_cast(dynamic value)
        {
            return new stopping(value.c, ref value.h);
        }
    }
}}