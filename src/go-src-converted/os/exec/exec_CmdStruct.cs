//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 22:14:00 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using bytes = go.bytes_package;
using context = go.context_package;
using errors = go.errors_package;
using execenv = go.@internal.syscall.execenv_package;
using io = go.io_package;
using os = go.os_package;
using filepath = go.path.filepath_package;
using runtime = go.runtime_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using sync = go.sync_package;
using syscall = go.syscall_package;
using go;

#nullable enable

namespace go {
namespace os
{
    public static partial class exec_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Cmd
        {
            // Constructors
            public Cmd(NilType _)
            {
                this.Path = default;
                this.Args = default;
                this.Env = default;
                this.Dir = default;
                this.Stdin = default;
                this.Stdout = default;
                this.Stderr = default;
                this.ExtraFiles = default;
                this.SysProcAttr = default;
                this.Process = default;
                this.ProcessState = default;
                this.ctx = default;
                this.lookPathErr = default;
                this.finished = default;
                this.childFiles = default;
                this.closeAfterStart = default;
                this.closeAfterWait = default;
                this.goroutine = default;
                this.errch = default;
                this.waitDone = default;
            }

            public Cmd(@string Path = default, slice<@string> Args = default, slice<@string> Env = default, @string Dir = default, io.Reader Stdin = default, io.Writer Stdout = default, io.Writer Stderr = default, slice<ptr<os.File>> ExtraFiles = default, ref ptr<syscall.SysProcAttr> SysProcAttr = default, ref ptr<os.Process> Process = default, ref ptr<os.ProcessState> ProcessState = default, context.Context ctx = default, error lookPathErr = default, bool finished = default, slice<ptr<os.File>> childFiles = default, slice<io.Closer> closeAfterStart = default, slice<io.Closer> closeAfterWait = default, slice<Func<error>> goroutine = default, channel<error> errch = default, channel<object> waitDone = default)
            {
                this.Path = Path;
                this.Args = Args;
                this.Env = Env;
                this.Dir = Dir;
                this.Stdin = Stdin;
                this.Stdout = Stdout;
                this.Stderr = Stderr;
                this.ExtraFiles = ExtraFiles;
                this.SysProcAttr = SysProcAttr;
                this.Process = Process;
                this.ProcessState = ProcessState;
                this.ctx = ctx;
                this.lookPathErr = lookPathErr;
                this.finished = finished;
                this.childFiles = childFiles;
                this.closeAfterStart = closeAfterStart;
                this.closeAfterWait = closeAfterWait;
                this.goroutine = goroutine;
                this.errch = errch;
                this.waitDone = waitDone;
            }

            // Enable comparisons between nil and Cmd struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Cmd value, NilType nil) => value.Equals(default(Cmd));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Cmd value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Cmd value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Cmd value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Cmd(NilType nil) => default(Cmd);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Cmd Cmd_cast(dynamic value)
        {
            return new Cmd(value.Path, value.Args, value.Env, value.Dir, value.Stdin, value.Stdout, value.Stderr, value.ExtraFiles, ref value.SysProcAttr, ref value.Process, ref value.ProcessState, value.ctx, value.lookPathErr, value.finished, value.childFiles, value.closeAfterStart, value.closeAfterWait, value.goroutine, value.errch, value.waitDone);
        }
    }
}}