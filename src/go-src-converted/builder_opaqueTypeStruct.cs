//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 06:03:12 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using fmt = go.fmt_package;
using ast = go.go.ast_package;
using constant = go.go.constant_package;
using token = go.go.token_package;
using types = go.go.types_package;
using os = go.os_package;
using sync = go.sync_package;
using go;

#nullable enable

namespace go {
namespace golang.org {
namespace x {
namespace tools {
namespace go
{
    public static partial class ssa_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct opaqueType
        {
            // Type.Underlying function promotion
            private delegate @string UnderlyingByVal(T value);
            private delegate @string UnderlyingByRef(ref T value);

            private static readonly UnderlyingByVal s_UnderlyingByVal;
            private static readonly UnderlyingByRef s_UnderlyingByRef;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public @string Underlying() => s_UnderlyingByRef?.Invoke(ref this) ?? s_UnderlyingByVal?.Invoke(this) ?? Type?.Underlying() ?? throw new PanicException(RuntimeErrorPanic.NilPointerDereference);

            // Type.String function promotion
            private delegate @string StringByVal(T value);
            private delegate @string StringByRef(ref T value);

            private static readonly StringByVal s_StringByVal;
            private static readonly StringByRef s_StringByRef;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public @string String() => s_StringByRef?.Invoke(ref this) ?? s_StringByVal?.Invoke(this) ?? Type?.String() ?? throw new PanicException(RuntimeErrorPanic.NilPointerDereference);
            
            [DebuggerStepperBoundary]
            static opaqueType()
            {
                Type targetType = typeof(opaqueType);
                MethodInfo extensionMethod;
                
                extensionMethod = targetType.GetExtensionMethodSearchingPromotions("Underlying");

                if ((object)extensionMethod != null)
                {
                    s_UnderlyingByRef = extensionMethod.CreateStaticDelegate(typeof(UnderlyingByRef)) as UnderlyingByRef;

                    if ((object)s_UnderlyingByRef == null)
                        s_UnderlyingByVal = extensionMethod.CreateStaticDelegate(typeof(UnderlyingByVal)) as UnderlyingByVal;
                }
                
                extensionMethod = targetType.GetExtensionMethodSearchingPromotions("String");

                if ((object)extensionMethod != null)
                {
                    s_StringByRef = extensionMethod.CreateStaticDelegate(typeof(StringByRef)) as StringByRef;

                    if ((object)s_StringByRef == null)
                        s_StringByVal = extensionMethod.CreateStaticDelegate(typeof(StringByVal)) as StringByVal;
                }
            }

            // Constructors
            public opaqueType(NilType _)
            {
                this.Type = default;
                this.name = default;
            }

            public opaqueType(types.Type Type = default, @string name = default)
            {
                this.Type = Type;
                this.name = name;
            }

            // Enable comparisons between nil and opaqueType struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(opaqueType value, NilType nil) => value.Equals(default(opaqueType));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(opaqueType value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, opaqueType value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, opaqueType value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator opaqueType(NilType nil) => default(opaqueType);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static opaqueType opaqueType_cast(dynamic value)
        {
            return new opaqueType(value.Type, value.name);
        }
    }
}}}}}