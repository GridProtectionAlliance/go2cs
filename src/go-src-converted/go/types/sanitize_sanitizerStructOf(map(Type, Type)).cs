//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 22:42:13 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Runtime.CompilerServices;
using go;

#nullable enable

namespace go {
namespace go
{
    public static partial class types_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct sanitizer : IMap
        {
            // Value of the sanitizer struct
            private readonly map<Type, Type> m_value;
            
            public nint Length => ((IMap)m_value).Length;

            object? IMap.this[object key]
            {
                get => ((IMap)m_value)[key];
                set => ((IMap)m_value)[key] = value;
            }

            public Type this[Type key]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => m_value[key];
            
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                set => m_value[key] = value;
            }

            public (Type, bool) this[Type key, bool _]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => m_value.TryGetValue(key, out Type value) ? (value!, true) : (default!, false);
            }

            public sanitizer(map<Type, Type> value) => m_value = value;

            // Enable implicit conversions between map<Type, Type> and sanitizer struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator sanitizer(map<Type, Type> value) => new sanitizer(value);
            
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator map<Type, Type>(sanitizer value) => value.m_value;
            
            // Enable comparisons between nil and sanitizer struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(sanitizer value, NilType nil) => value.Equals(default(sanitizer));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(sanitizer value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, sanitizer value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, sanitizer value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator sanitizer(NilType nil) => default(sanitizer);
        }
    }
}}
