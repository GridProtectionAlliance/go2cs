//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:54:01 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using fmt = go.fmt_package;
using ast = go.go.ast_package;
using typeparams = go.go.@internal.typeparams_package;
using token = go.go.token_package;
using go;

#nullable enable

namespace go {
namespace go
{
    public static partial class parser_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial struct resolver
        {
            // Constructors
            public resolver(NilType _)
            {
                this.handle = default;
                this.declErr = default;
                this.pkgScope = default;
                this.topScope = default;
                this.unresolved = default;
                this.labelScope = default;
                this.targetStack = default;
            }

            public resolver(ref ptr<token.File> handle = default, Action<token.Pos, @string> declErr = default, ref ptr<ast.Scope> pkgScope = default, ref ptr<ast.Scope> topScope = default, slice<ptr<ast.Ident>> unresolved = default, ref ptr<ast.Scope> labelScope = default, slice<slice<ptr<ast.Ident>>> targetStack = default)
            {
                this.handle = handle;
                this.declErr = declErr;
                this.pkgScope = pkgScope;
                this.topScope = topScope;
                this.unresolved = unresolved;
                this.labelScope = labelScope;
                this.targetStack = targetStack;
            }

            // Enable comparisons between nil and resolver struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(resolver value, NilType nil) => value.Equals(default(resolver));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(resolver value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, resolver value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, resolver value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator resolver(NilType nil) => default(resolver);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private static resolver resolver_cast(dynamic value)
        {
            return new resolver(ref value.handle, value.declErr, ref value.pkgScope, ref value.topScope, value.unresolved, ref value.labelScope, value.targetStack);
        }
    }
}}