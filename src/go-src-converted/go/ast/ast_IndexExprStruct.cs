//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 04:02:23 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using token = go.go.token_package;
using strings = go.strings_package;
using go;

namespace go {
namespace go
{
    public static partial class ast_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct IndexExpr
        {
            // Constructors
            public IndexExpr(NilType _)
            {
                this.X = default;
                this.Lbrack = default;
                this.Index = default;
                this.Rbrack = default;
            }

            public IndexExpr(Expr X = default, token.Pos Lbrack = default, Expr Index = default, token.Pos Rbrack = default)
            {
                this.X = X;
                this.Lbrack = Lbrack;
                this.Index = Index;
                this.Rbrack = Rbrack;
            }

            // Enable comparisons between nil and IndexExpr struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(IndexExpr value, NilType nil) => value.Equals(default(IndexExpr));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(IndexExpr value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, IndexExpr value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, IndexExpr value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator IndexExpr(NilType nil) => default(IndexExpr);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static IndexExpr IndexExpr_cast(dynamic value)
        {
            return new IndexExpr(value.X, value.Lbrack, value.Index, value.Rbrack);
        }
    }
}}