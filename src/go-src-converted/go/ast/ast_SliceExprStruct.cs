//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 22:41:10 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using token = go.go.token_package;
using strings = go.strings_package;
using go;

#nullable enable

namespace go {
namespace go
{
    public static partial class ast_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct SliceExpr
        {
            // Constructors
            public SliceExpr(NilType _)
            {
                this.X = default;
                this.Lbrack = default;
                this.Low = default;
                this.High = default;
                this.Max = default;
                this.Slice3 = default;
                this.Rbrack = default;
            }

            public SliceExpr(Expr X = default, token.Pos Lbrack = default, Expr Low = default, Expr High = default, Expr Max = default, bool Slice3 = default, token.Pos Rbrack = default)
            {
                this.X = X;
                this.Lbrack = Lbrack;
                this.Low = Low;
                this.High = High;
                this.Max = Max;
                this.Slice3 = Slice3;
                this.Rbrack = Rbrack;
            }

            // Enable comparisons between nil and SliceExpr struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(SliceExpr value, NilType nil) => value.Equals(default(SliceExpr));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(SliceExpr value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, SliceExpr value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, SliceExpr value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator SliceExpr(NilType nil) => default(SliceExpr);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static SliceExpr SliceExpr_cast(dynamic value)
        {
            return new SliceExpr(value.X, value.Lbrack, value.Low, value.High, value.Max, value.Slice3, value.Rbrack);
        }
    }
}}