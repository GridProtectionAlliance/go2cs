//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:52:25 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using errors = go.errors_package;
using strings = go.strings_package;
using unicode = go.unicode_package;
using utf8 = go.unicode.utf8_package;
using go;

#nullable enable

namespace go {
namespace go {
namespace build
{
    public static partial class constraint_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        public partial struct TagExpr
        {
            // Constructors
            public TagExpr(NilType _)
            {
                this.Tag = default;
            }

            public TagExpr(@string Tag = default)
            {
                this.Tag = Tag;
            }

            // Enable comparisons between nil and TagExpr struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(TagExpr value, NilType nil) => value.Equals(default(TagExpr));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(TagExpr value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, TagExpr value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, TagExpr value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator TagExpr(NilType nil) => default(TagExpr);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        public static TagExpr TagExpr_cast(dynamic value)
        {
            return new TagExpr(value.Tag);
        }
    }
}}}