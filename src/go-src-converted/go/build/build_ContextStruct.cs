//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 04:02:29 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bytes = go.bytes_package;
using errors = go.errors_package;
using fmt = go.fmt_package;
using ast = go.go.ast_package;
using doc = go.go.doc_package;
using parser = go.go.parser_package;
using token = go.go.token_package;
using goroot = go.@internal.goroot_package;
using goversion = go.@internal.goversion_package;
using io = go.io_package;
using ioutil = go.io.ioutil_package;
using os = go.os_package;
using exec = go.os.exec_package;
using pathpkg = go.path_package;
using filepath = go.path.filepath_package;
using runtime = go.runtime_package;
using sort = go.sort_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using unicode = go.unicode_package;
using utf8 = go.unicode.utf8_package;
using go;

namespace go {
namespace go
{
    public static partial class build_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Context
        {
            // Constructors
            public Context(NilType _)
            {
                this.GOARCH = default;
                this.GOOS = default;
                this.GOROOT = default;
                this.GOPATH = default;
                this.Dir = default;
                this.CgoEnabled = default;
                this.UseAllFiles = default;
                this.Compiler = default;
                this.BuildTags = default;
                this.ReleaseTags = default;
                this.InstallSuffix = default;
                this.JoinPath = default;
                this.SplitPathList = default;
                this.IsAbsPath = default;
                this.IsDir = default;
                this.HasSubdir = default;
                this.ReadDir = default;
                this.OpenFile = default;
            }

            public Context(@string GOARCH = default, @string GOOS = default, @string GOROOT = default, @string GOPATH = default, @string Dir = default, bool CgoEnabled = default, bool UseAllFiles = default, @string Compiler = default, slice<@string> BuildTags = default, slice<@string> ReleaseTags = default, @string InstallSuffix = default, Func<@string[], @string> JoinPath = default, Func<@string, slice<@string>> SplitPathList = default, Func<@string, bool> IsAbsPath = default, Func<@string, bool> IsDir = default, Func<@string, @string, (@string, bool)> HasSubdir = default, Func<@string, (slice<os.FileInfo>, error)> ReadDir = default, Func<@string, (io.ReadCloser, error)> OpenFile = default)
            {
                this.GOARCH = GOARCH;
                this.GOOS = GOOS;
                this.GOROOT = GOROOT;
                this.GOPATH = GOPATH;
                this.Dir = Dir;
                this.CgoEnabled = CgoEnabled;
                this.UseAllFiles = UseAllFiles;
                this.Compiler = Compiler;
                this.BuildTags = BuildTags;
                this.ReleaseTags = ReleaseTags;
                this.InstallSuffix = InstallSuffix;
                this.JoinPath = JoinPath;
                this.SplitPathList = SplitPathList;
                this.IsAbsPath = IsAbsPath;
                this.IsDir = IsDir;
                this.HasSubdir = HasSubdir;
                this.ReadDir = ReadDir;
                this.OpenFile = OpenFile;
            }

            // Enable comparisons between nil and Context struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Context value, NilType nil) => value.Equals(default(Context));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Context value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Context value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Context value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Context(NilType nil) => default(Context);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Context Context_cast(dynamic value)
        {
            return new Context(value.GOARCH, value.GOOS, value.GOROOT, value.GOPATH, value.Dir, value.CgoEnabled, value.UseAllFiles, value.Compiler, value.BuildTags, value.ReleaseTags, value.InstallSuffix, value.JoinPath, value.SplitPathList, value.IsAbsPath, value.IsDir, value.HasSubdir, value.ReadDir, value.OpenFile);
        }
    }
}}