//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:32:40 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Runtime.CompilerServices;
using go;

#nullable enable

namespace go {
namespace go {
namespace @internal
{
    public static partial class exports_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct T11 : IMap
        {
            // Value of the T11 struct
            private readonly map<nint, @string> m_value;
            
            public nint Length => ((IMap)m_value).Length;

            object? IMap.this[object key]
            {
                get => ((IMap)m_value)[key];
                set => ((IMap)m_value)[key] = value;
            }

            public @string this[nint key]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => m_value[key];
            
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                set => m_value[key] = value;
            }

            public (@string, bool) this[nint key, bool _]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => m_value.TryGetValue(key, out @string value) ? (value!, true) : (default!, false);
            }

            public T11(map<nint, @string> value) => m_value = value;

            // Enable implicit conversions between map<nint, @string> and T11 struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator T11(map<nint, @string> value) => new T11(value);
            
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator map<nint, @string>(T11 value) => value.m_value;
            
            // Enable comparisons between nil and T11 struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(T11 value, NilType nil) => value.Equals(default(T11));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(T11 value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, T11 value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, T11 value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator T11(NilType nil) => default(T11);
        }
    }
}}}
