//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 22:47:10 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using fmt = go.fmt_package;
using ast = go.go.ast_package;
using constraint = go.go.build.constraint_package;
using token = go.go.token_package;
using io = go.io_package;
using os = go.os_package;
using strings = go.strings_package;
using tabwriter = go.text.tabwriter_package;
using unicode = go.unicode_package;
using go;

#nullable enable

namespace go {
namespace go
{
    public static partial class printer_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct trimmer
        {
            // Constructors
            public trimmer(NilType _)
            {
                this.output = default;
                this.state = default;
                this.space = default;
            }

            public trimmer(io.Writer output = default, nint state = default, slice<byte> space = default)
            {
                this.output = output;
                this.state = state;
                this.space = space;
            }

            // Enable comparisons between nil and trimmer struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(trimmer value, NilType nil) => value.Equals(default(trimmer));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(trimmer value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, trimmer value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, trimmer value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator trimmer(NilType nil) => default(trimmer);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static trimmer trimmer_cast(dynamic value)
        {
            return new trimmer(value.output, value.state, value.space);
        }
    }
}}