//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:58:36 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using fmt = go.fmt_package;
using ast = go.go.ast_package;
using scanner = go.go.scanner_package;
using token = go.go.token_package;
using go;

#nullable enable

namespace go {
namespace go
{
    public static partial class parser_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial struct parser
        {
            // Constructors
            public parser(NilType _)
            {
                this.file = default;
                this.ErrorVector = default;
                this.scanner = default;
                this.mode = default;
                this.trace = default;
                this.indent = default;
                this.comments = default;
                this.leadComment = default;
                this.lineComment = default;
                this.pos = default;
                this.tok = default;
                this.lit = default;
                this.exprLev = default;
                this.pkgScope = default;
                this.topScope = default;
                this.unresolved = default;
                this.imports = default;
                this.labelScope = default;
                this.targetStack = default;
            }

            public parser(ref ptr<token.File> file = default, scanner.ErrorVector ErrorVector = default, scanner.Scanner scanner = default, nuint mode = default, bool trace = default, nuint indent = default, slice<ptr<ast.CommentGroup>> comments = default, ref ptr<ast.CommentGroup> leadComment = default, ref ptr<ast.CommentGroup> lineComment = default, token.Pos pos = default, token.Token tok = default, @string lit = default, nint exprLev = default, ref ptr<ast.Scope> pkgScope = default, ref ptr<ast.Scope> topScope = default, slice<ptr<ast.Ident>> unresolved = default, slice<ptr<ast.ImportSpec>> imports = default, ref ptr<ast.Scope> labelScope = default, slice<slice<ptr<ast.Ident>>> targetStack = default)
            {
                this.file = file;
                this.ErrorVector = ErrorVector;
                this.scanner = scanner;
                this.mode = mode;
                this.trace = trace;
                this.indent = indent;
                this.comments = comments;
                this.leadComment = leadComment;
                this.lineComment = lineComment;
                this.pos = pos;
                this.tok = tok;
                this.lit = lit;
                this.exprLev = exprLev;
                this.pkgScope = pkgScope;
                this.topScope = topScope;
                this.unresolved = unresolved;
                this.imports = imports;
                this.labelScope = labelScope;
                this.targetStack = targetStack;
            }

            // Enable comparisons between nil and parser struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(parser value, NilType nil) => value.Equals(default(parser));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(parser value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, parser value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, parser value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator parser(NilType nil) => default(parser);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private static parser parser_cast(dynamic value)
        {
            return new parser(ref value.file, value.ErrorVector, value.scanner, value.mode, value.trace, value.indent, value.comments, ref value.leadComment, ref value.lineComment, value.pos, value.tok, value.lit, value.exprLev, ref value.pkgScope, ref value.topScope, value.unresolved, value.imports, ref value.labelScope, value.targetStack);
        }
    }
}}