//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:38:13 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using bytes = go.bytes_package;
using io = go.io_package;
using syntax = go.regexp.syntax_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using sync = go.sync_package;
using unicode = go.unicode_package;
using utf8 = go.unicode.utf8_package;

#nullable enable
#pragma warning disable CS0660, CS0661

namespace go
{
    public static partial class regexp_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial interface input
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static input As<T>(in T target) => (input<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static input As<T>(ptr<T> target_ptr) => (input<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static input? As(object target) =>
                typeof(input<>).CreateInterfaceHandler<input>(target);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private class input<T> : input
        {
            private T m_target = default!;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && m_target_ptr is not null)
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public input(in T target) => m_target = target;

            public input(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate lazyFlag stepByPtr(ptr<T> value, nint pos);
            private delegate lazyFlag stepByVal(T value, nint pos);

            private static readonly stepByPtr? s_stepByPtr;
            private static readonly stepByVal? s_stepByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public lazyFlag step(nint pos)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_stepByPtr is null || !m_target_is_ptr)
                    return s_stepByVal!(target, pos);

                return s_stepByPtr(m_target_ptr!, pos);
            }

            private delegate lazyFlag canCheckPrefixByPtr(ptr<T> value);
            private delegate lazyFlag canCheckPrefixByVal(T value);

            private static readonly canCheckPrefixByPtr? s_canCheckPrefixByPtr;
            private static readonly canCheckPrefixByVal? s_canCheckPrefixByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public lazyFlag canCheckPrefix()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_canCheckPrefixByPtr is null || !m_target_is_ptr)
                    return s_canCheckPrefixByVal!(target);

                return s_canCheckPrefixByPtr(m_target_ptr!);
            }

            private delegate lazyFlag hasPrefixByPtr(ptr<T> value, ptr<Regexp> re);
            private delegate lazyFlag hasPrefixByVal(T value, ptr<Regexp> re);

            private static readonly hasPrefixByPtr? s_hasPrefixByPtr;
            private static readonly hasPrefixByVal? s_hasPrefixByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public lazyFlag hasPrefix(ptr<Regexp> re)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_hasPrefixByPtr is null || !m_target_is_ptr)
                    return s_hasPrefixByVal!(target, re);

                return s_hasPrefixByPtr(m_target_ptr!, re);
            }

            private delegate lazyFlag indexByPtr(ptr<T> value, ptr<Regexp> re, nint pos);
            private delegate lazyFlag indexByVal(T value, ptr<Regexp> re, nint pos);

            private static readonly indexByPtr? s_indexByPtr;
            private static readonly indexByVal? s_indexByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public lazyFlag index(ptr<Regexp> re, nint pos)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_indexByPtr is null || !m_target_is_ptr)
                    return s_indexByVal!(target, re, pos);

                return s_indexByPtr(m_target_ptr!, re, pos);
            }

            private delegate lazyFlag contextByPtr(ptr<T> value, nint pos);
            private delegate lazyFlag contextByVal(T value, nint pos);

            private static readonly contextByPtr? s_contextByPtr;
            private static readonly contextByVal? s_contextByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public lazyFlag context(nint pos)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_contextByPtr is null || !m_target_is_ptr)
                    return s_contextByVal!(target, pos);

                return s_contextByPtr(m_target_ptr!, pos);
            }
            
            public string ToString(string? format, IFormatProvider? formatProvider) => format ?? GetGoTypeName(typeof(T));

            [DebuggerStepperBoundary]
            static input()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("step");

                if (extensionMethod is not null)
                    s_stepByPtr = extensionMethod.CreateStaticDelegate(typeof(stepByPtr)) as stepByPtr;

                extensionMethod = targetType.GetExtensionMethod("step");

                if (extensionMethod is not null)
                    s_stepByVal = extensionMethod.CreateStaticDelegate(typeof(stepByVal)) as stepByVal;

                if (s_stepByPtr is null && s_stepByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement input.step method", new Exception("step"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("canCheckPrefix");

                if (extensionMethod is not null)
                    s_canCheckPrefixByPtr = extensionMethod.CreateStaticDelegate(typeof(canCheckPrefixByPtr)) as canCheckPrefixByPtr;

                extensionMethod = targetType.GetExtensionMethod("canCheckPrefix");

                if (extensionMethod is not null)
                    s_canCheckPrefixByVal = extensionMethod.CreateStaticDelegate(typeof(canCheckPrefixByVal)) as canCheckPrefixByVal;

                if (s_canCheckPrefixByPtr is null && s_canCheckPrefixByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement input.canCheckPrefix method", new Exception("canCheckPrefix"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("hasPrefix");

                if (extensionMethod is not null)
                    s_hasPrefixByPtr = extensionMethod.CreateStaticDelegate(typeof(hasPrefixByPtr)) as hasPrefixByPtr;

                extensionMethod = targetType.GetExtensionMethod("hasPrefix");

                if (extensionMethod is not null)
                    s_hasPrefixByVal = extensionMethod.CreateStaticDelegate(typeof(hasPrefixByVal)) as hasPrefixByVal;

                if (s_hasPrefixByPtr is null && s_hasPrefixByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement input.hasPrefix method", new Exception("hasPrefix"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("index");

                if (extensionMethod is not null)
                    s_indexByPtr = extensionMethod.CreateStaticDelegate(typeof(indexByPtr)) as indexByPtr;

                extensionMethod = targetType.GetExtensionMethod("index");

                if (extensionMethod is not null)
                    s_indexByVal = extensionMethod.CreateStaticDelegate(typeof(indexByVal)) as indexByVal;

                if (s_indexByPtr is null && s_indexByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement input.index method", new Exception("index"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("context");

                if (extensionMethod is not null)
                    s_contextByPtr = extensionMethod.CreateStaticDelegate(typeof(contextByPtr)) as contextByPtr;

                extensionMethod = targetType.GetExtensionMethod("context");

                if (extensionMethod is not null)
                    s_contextByVal = extensionMethod.CreateStaticDelegate(typeof(contextByVal)) as contextByVal;

                if (s_contextByPtr is null && s_contextByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement input.context method", new Exception("context"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator input<T>(in ptr<T> target_ptr) => new input<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator input<T>(in T target) => new input<T>(target);

            // Enable comparisons between nil and input<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(input<T> value, NilType nil) => Activator.CreateInstance<input<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(input<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, input<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, input<T> value) => value != nil;
        }
    }
}

namespace go
{
    public static class regexp_inputExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.2.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.regexp_package.input target)
        {
            try
            {
                return ((go.regexp_package.input<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.2.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.regexp_package.input target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.2.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.regexp_package.input target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.regexp_package.input<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.2.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.regexp_package.input target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}