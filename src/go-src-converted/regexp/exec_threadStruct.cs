//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 04:58:36 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using io = go.io_package;
using syntax = go.regexp.syntax_package;
using sync = go.sync_package;

#nullable enable

namespace go
{
    public static partial class regexp_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct thread
        {
            // Constructors
            public thread(NilType _)
            {
                this.inst = default;
                this.cap = default;
            }

            public thread(ref ptr<syntax.Inst> inst = default, slice<long> cap = default)
            {
                this.inst = inst;
                this.cap = cap;
            }

            // Enable comparisons between nil and thread struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(thread value, NilType nil) => value.Equals(default(thread));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(thread value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, thread value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, thread value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator thread(NilType nil) => default(thread);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static thread thread_cast(dynamic value)
        {
            return new thread(ref value.inst, value.cap);
        }
    }
}