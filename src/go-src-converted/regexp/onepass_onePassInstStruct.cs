//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 04:58:38 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using syntax = go.regexp.syntax_package;
using sort = go.sort_package;
using strings = go.strings_package;
using unicode = go.unicode_package;

#nullable enable

namespace go
{
    public static partial class regexp_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        [PromotedStruct(typeof(syntax.Inst))]
        private partial struct onePassInst
        {
            // Inst structure promotion - sourced from value copy
            private readonly ptr<Inst> m_InstRef;

            private ref Inst Inst_val => ref m_InstRef.Value;

            public ref InstOp Op => ref m_InstRef.Value.Op;

            public ref uint Out => ref m_InstRef.Value.Out;

            public ref uint Arg => ref m_InstRef.Value.Arg;

            public ref slice<int> Rune => ref m_InstRef.Value.Rune;

            // Constructors
            public onePassInst(NilType _)
            {
                this.m_InstRef = new ptr<syntax.Inst>(new syntax.Inst(nil));
                this.Next = default;
            }

            public onePassInst(syntax.Inst Inst = default, slice<uint> Next = default)
            {
                this.m_InstRef = new ptr<syntax.Inst>(Inst);
                this.Next = Next;
            }

            // Enable comparisons between nil and onePassInst struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(onePassInst value, NilType nil) => value.Equals(default(onePassInst));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(onePassInst value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, onePassInst value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, onePassInst value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator onePassInst(NilType nil) => default(onePassInst);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static onePassInst onePassInst_cast(dynamic value)
        {
            return new onePassInst(value.Inst, value.Next);
        }
    }
}