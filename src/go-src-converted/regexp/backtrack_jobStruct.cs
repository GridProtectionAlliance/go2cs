//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 03:40:57 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using syntax = go.regexp.syntax_package;
using sync = go.sync_package;

namespace go
{
    public static partial class regexp_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct job
        {
            // Constructors
            public job(NilType _)
            {
                this.pc = default;
                this.arg = default;
                this.pos = default;
            }

            public job(uint pc = default, bool arg = default, long pos = default)
            {
                this.pc = pc;
                this.arg = arg;
                this.pos = pos;
            }

            // Enable comparisons between nil and job struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(job value, NilType nil) => value.Equals(default(job));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(job value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, job value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, job value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator job(NilType nil) => default(job);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static job job_cast(dynamic value)
        {
            return new job(value.pc, value.arg, value.pos);
        }
    }
}