//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 04:58:26 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using unicode = go.unicode_package;
using go;

#nullable enable

namespace go {
namespace regexp
{
    public static partial class syntax_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct compiler
        {
            // Constructors
            public compiler(NilType _)
            {
                this.p = default;
            }

            public compiler(ref ptr<Prog> p = default)
            {
                this.p = p;
            }

            // Enable comparisons between nil and compiler struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(compiler value, NilType nil) => value.Equals(default(compiler));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(compiler value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, compiler value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, compiler value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator compiler(NilType nil) => default(compiler);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static compiler compiler_cast(dynamic value)
        {
            return new compiler(ref value.p);
        }
    }
}}