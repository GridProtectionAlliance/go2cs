//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:32:18 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using context = go.context_package;
using flag = go.flag_package;
using fmt = go.fmt_package;
using log = go.log_package;
using os = go.os_package;
using reflect = go.reflect_package;
using runtime = go.runtime_package;
using pprof = go.runtime.pprof_package;
using trace = go.runtime.trace_package;
using time = go.time_package;
using go;

#nullable enable
#pragma warning disable CS0660, CS0661

namespace go {
namespace golang.org {
namespace x {
namespace tools {
namespace @internal
{
    public static partial class tool_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface Application
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Application As<T>(in T target) => (Application<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Application As<T>(ptr<T> target_ptr) => (Application<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Application? As(object target) =>
                typeof(Application<>).CreateInterfaceHandler<Application>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class Application<T> : Application
        {
            private T m_target = default!;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && m_target_ptr is not null)
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public Application(in T target) => m_target = target;

            public Application(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate error NameByPtr(ptr<T> value);
            private delegate error NameByVal(T value);

            private static readonly NameByPtr? s_NameByPtr;
            private static readonly NameByVal? s_NameByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error Name()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_NameByPtr is null || !m_target_is_ptr)
                    return s_NameByVal!(target);

                return s_NameByPtr(m_target_ptr!);
            }

            private delegate error UsageByPtr(ptr<T> value);
            private delegate error UsageByVal(T value);

            private static readonly UsageByPtr? s_UsageByPtr;
            private static readonly UsageByVal? s_UsageByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error Usage()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_UsageByPtr is null || !m_target_is_ptr)
                    return s_UsageByVal!(target);

                return s_UsageByPtr(m_target_ptr!);
            }

            private delegate error ShortHelpByPtr(ptr<T> value);
            private delegate error ShortHelpByVal(T value);

            private static readonly ShortHelpByPtr? s_ShortHelpByPtr;
            private static readonly ShortHelpByVal? s_ShortHelpByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error ShortHelp()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_ShortHelpByPtr is null || !m_target_is_ptr)
                    return s_ShortHelpByVal!(target);

                return s_ShortHelpByPtr(m_target_ptr!);
            }

            private delegate error DetailedHelpByPtr(ptr<T> value, ptr<flag.FlagSet> _p0);
            private delegate error DetailedHelpByVal(T value, ptr<flag.FlagSet> _p0);

            private static readonly DetailedHelpByPtr? s_DetailedHelpByPtr;
            private static readonly DetailedHelpByVal? s_DetailedHelpByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error DetailedHelp(ptr<flag.FlagSet> _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_DetailedHelpByPtr is null || !m_target_is_ptr)
                    return s_DetailedHelpByVal!(target, _p0);

                return s_DetailedHelpByPtr(m_target_ptr!, _p0);
            }

            private delegate error RunByPtr(ptr<T> value, context.Context ctx, params @string[] args);
            private delegate error RunByVal(T value, context.Context ctx, params @string[] args);

            private static readonly RunByPtr? s_RunByPtr;
            private static readonly RunByVal? s_RunByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error Run(context.Context ctx, params @string[] args)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_RunByPtr is null || !m_target_is_ptr)
                    return s_RunByVal!(target, ctx, args);

                return s_RunByPtr(m_target_ptr!, ctx, args);
            }
            
            public string ToString(string? format, IFormatProvider? formatProvider) => format ?? GetGoTypeName(typeof(T));

            [DebuggerStepperBoundary]
            static Application()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Name");

                if (extensionMethod is not null)
                    s_NameByPtr = extensionMethod.CreateStaticDelegate(typeof(NameByPtr)) as NameByPtr;

                extensionMethod = targetType.GetExtensionMethod("Name");

                if (extensionMethod is not null)
                    s_NameByVal = extensionMethod.CreateStaticDelegate(typeof(NameByVal)) as NameByVal;

                if (s_NameByPtr is null && s_NameByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Application.Name method", new Exception("Name"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Usage");

                if (extensionMethod is not null)
                    s_UsageByPtr = extensionMethod.CreateStaticDelegate(typeof(UsageByPtr)) as UsageByPtr;

                extensionMethod = targetType.GetExtensionMethod("Usage");

                if (extensionMethod is not null)
                    s_UsageByVal = extensionMethod.CreateStaticDelegate(typeof(UsageByVal)) as UsageByVal;

                if (s_UsageByPtr is null && s_UsageByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Application.Usage method", new Exception("Usage"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("ShortHelp");

                if (extensionMethod is not null)
                    s_ShortHelpByPtr = extensionMethod.CreateStaticDelegate(typeof(ShortHelpByPtr)) as ShortHelpByPtr;

                extensionMethod = targetType.GetExtensionMethod("ShortHelp");

                if (extensionMethod is not null)
                    s_ShortHelpByVal = extensionMethod.CreateStaticDelegate(typeof(ShortHelpByVal)) as ShortHelpByVal;

                if (s_ShortHelpByPtr is null && s_ShortHelpByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Application.ShortHelp method", new Exception("ShortHelp"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("DetailedHelp");

                if (extensionMethod is not null)
                    s_DetailedHelpByPtr = extensionMethod.CreateStaticDelegate(typeof(DetailedHelpByPtr)) as DetailedHelpByPtr;

                extensionMethod = targetType.GetExtensionMethod("DetailedHelp");

                if (extensionMethod is not null)
                    s_DetailedHelpByVal = extensionMethod.CreateStaticDelegate(typeof(DetailedHelpByVal)) as DetailedHelpByVal;

                if (s_DetailedHelpByPtr is null && s_DetailedHelpByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Application.DetailedHelp method", new Exception("DetailedHelp"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Run");

                if (extensionMethod is not null)
                    s_RunByPtr = extensionMethod.CreateStaticDelegate(typeof(RunByPtr)) as RunByPtr;

                extensionMethod = targetType.GetExtensionMethod("Run");

                if (extensionMethod is not null)
                    s_RunByVal = extensionMethod.CreateStaticDelegate(typeof(RunByVal)) as RunByVal;

                if (s_RunByPtr is null && s_RunByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Application.Run method", new Exception("Run"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Application<T>(in ptr<T> target_ptr) => new Application<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Application<T>(in T target) => new Application<T>(target);

            // Enable comparisons between nil and Application<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Application<T> value, NilType nil) => Activator.CreateInstance<Application<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Application<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Application<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Application<T> value) => value != nil;
        }
    }
}}}}}

namespace go
{
    public static class tool_ApplicationExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.golang.org.x.tools.@internal.tool_package.Application target)
        {
            try
            {
                return ((go.golang.org.x.tools.@internal.tool_package.Application<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.golang.org.x.tools.@internal.tool_package.Application target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.golang.org.x.tools.@internal.tool_package.Application target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.golang.org.x.tools.@internal.tool_package.Application<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.golang.org.x.tools.@internal.tool_package.Application target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}