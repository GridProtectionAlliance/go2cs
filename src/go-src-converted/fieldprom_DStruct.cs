//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:33:44 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;


#nullable enable

namespace go
{
    public static partial class main_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        [PromotedStruct(typeof(C))]
        public partial struct D
        {
            // C structure promotion - sourced from value copy
            private readonly ptr<C> m_CRef;

            private ref C C_val => ref m_CRef.Value;

            // Constructors
            public D(NilType _)
            {
                this.a = default;
                this.m_CRef = new ptr<C>(new C(nil));
            }

            public D(nint a = default, C C = default)
            {
                this.a = a;
                this.m_CRef = new ptr<C>(C);
            }

            // Enable comparisons between nil and D struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(D value, NilType nil) => value.Equals(default(D));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(D value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, D value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, D value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator D(NilType nil) => default(D);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static D D_cast(dynamic value)
        {
            return new D(value.a, value.C);
        }
    }
}