//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:41:19 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;


#nullable enable

namespace go
{
    public static partial class strconv_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial struct leftCheat
        {
            // Constructors
            public leftCheat(NilType _)
            {
                this.delta = default;
                this.cutoff = default;
            }

            public leftCheat(nint delta = default, @string cutoff = default)
            {
                this.delta = delta;
                this.cutoff = cutoff;
            }

            // Enable comparisons between nil and leftCheat struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(leftCheat value, NilType nil) => value.Equals(default(leftCheat));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(leftCheat value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, leftCheat value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, leftCheat value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator leftCheat(NilType nil) => default(leftCheat);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private static leftCheat leftCheat_cast(dynamic value)
        {
            return new leftCheat(value.delta, value.cutoff);
        }
    }
}