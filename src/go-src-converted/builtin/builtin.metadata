{"Files":{"C:\\Program Files\\Go\\src\\builtin\\builtin.go":{"Package":"builtin","PackageImport":"builtin","SourceFileName":"C:\\Program Files\\Go\\src\\builtin\\builtin.go","TargetFileName":"D:\\Projects\\go2cs\\src\\go-src-converted\\builtin\\builtin.cs","ImportAliases":{},"Interfaces":{"error":{"Name":"error","Methods":[{"Name":"Error","Signature":{"Parameters":[],"Result":[{"Name":"","Type":{"Name":"string","TypeName":"@string","FullTypeName":"@string","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}]},"Comments":"\n","IsPromoted":false}]}},"Structs":{},"Functions":{"append()":{"Signature":{"Name":"append","Signature":{"Parameters":[{"Name":"slice","Type":{"Name":"Type","TypeName":"slice\u003CType\u003E","FullTypeName":"go.slice\u003CType\u003E","TypeClass":2,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false},{"Name":"elems","Type":{"Name":"Type","TypeName":"Type[]","FullTypeName":"Type[]","TypeClass":1,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":true}],"Result":[{"Name":"","Type":{"Name":"Type","TypeName":"slice\u003CType\u003E","FullTypeName":"go.slice\u003CType\u003E","TypeClass":2,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}]},"Comments":"\r\n\r\n// The copy built-in function copies elements from a source slice into a\r\n// destination slice. (As a special case, it also will copy bytes from a\r\n// string to a slice of bytes.) The source and destination may overlap. Copy\r\n// returns the number of elements copied, which will be the minimum of\r\n// len(src) and len(dst).\r\n","IsPromoted":false},"Variables":{},"HasDefer":false,"HasPanic":false,"HasRecover":false},"copy()":{"Signature":{"Name":"copy","Signature":{"Parameters":[{"Name":"dst","Type":{"Name":"Type","TypeName":"slice\u003CType\u003E","FullTypeName":"go.slice\u003CType\u003E","TypeClass":2,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false},{"Name":"src","Type":{"Name":"Type","TypeName":"slice\u003CType\u003E","FullTypeName":"go.slice\u003CType\u003E","TypeClass":2,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}],"Result":[{"Name":"","Type":{"Name":"int","TypeName":"nint","FullTypeName":"nint","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}]},"Comments":"\r\n\r\n// The delete built-in function deletes the element with the specified key\r\n// (m[key]) from the map. If m is nil or there is no such element, delete\r\n// is a no-op.\r\n","IsPromoted":false},"Variables":{},"HasDefer":false,"HasPanic":false,"HasRecover":false},"delete()":{"Signature":{"Name":"delete","Signature":{"Parameters":[{"Name":"m","Type":{"DerivedTypeInfo":2,"KeyTypeInfo":{"Name":"Type","TypeName":"Type","FullTypeName":"Type","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"ElementTypeInfo":{"Name":"Type1","TypeName":"Type1","FullTypeName":"Type1","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"Name":"map[Type]Type1","TypeName":"map\u003CType, Type1\u003E","FullTypeName":"go.map\u003CType, Type1\u003E","TypeClass":3,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false},{"Name":"key","Type":{"Name":"Type","TypeName":"Type","FullTypeName":"Type","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}],"Result":[{"Name":"","Type":{"Name":"void","TypeName":"void","FullTypeName":"void","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}]},"Comments":"\r\n\r\n// The len built-in function returns the length of v, according to its type:\r\n//    Array: the number of elements in v.\r\n//    Pointer to array: the number of elements in *v (even if v is nil).\r\n//    Slice, or map: the number of elements in v; if v is nil, len(v) is zero.\r\n//    String: the number of bytes in v.\r\n//    Channel: the number of elements queued (unread) in the channel buffer;\r\n//             if v is nil, len(v) is zero.\r\n// For some arguments, such as a string literal or a simple array expression, the\r\n// result can be a constant. See the Go language specification\u0027s \u0022Length and\r\n// capacity\u0022 section for details.\r\n","IsPromoted":false},"Variables":{},"HasDefer":false,"HasPanic":false,"HasRecover":false},"len()":{"Signature":{"Name":"len","Signature":{"Parameters":[{"Name":"v","Type":{"Name":"Type","TypeName":"Type","FullTypeName":"Type","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}],"Result":[{"Name":"","Type":{"Name":"int","TypeName":"nint","FullTypeName":"nint","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}]},"Comments":"\r\n\r\n// The cap built-in function returns the capacity of v, according to its type:\r\n//    Array: the number of elements in v (same as len(v)).\r\n//    Pointer to array: the number of elements in *v (same as len(v)).\r\n//    Slice: the maximum length the slice can reach when resliced;\r\n//    if v is nil, cap(v) is zero.\r\n//    Channel: the channel buffer capacity, in units of elements;\r\n//    if v is nil, cap(v) is zero.\r\n// For some arguments, such as a simple array expression, the result can be a\r\n// constant. See the Go language specification\u0027s \u0022Length and capacity\u0022 section for\r\n// details.\r\n","IsPromoted":false},"Variables":{},"HasDefer":false,"HasPanic":false,"HasRecover":false},"cap()":{"Signature":{"Name":"cap","Signature":{"Parameters":[{"Name":"v","Type":{"Name":"Type","TypeName":"Type","FullTypeName":"Type","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}],"Result":[{"Name":"","Type":{"Name":"int","TypeName":"nint","FullTypeName":"nint","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}]},"Comments":"\r\n\r\n// The make built-in function allocates and initializes an object of type\r\n// slice, map, or chan (only). Like new, the first argument is a type, not a\r\n// value. Unlike new, make\u0027s return type is the same as the type of its\r\n// argument, not a pointer to it. The specification of the result depends on\r\n// the type:\r\n//    Slice: The size specifies the length. The capacity of the slice is\r\n//    equal to its length. A second integer argument may be provided to\r\n//    specify a different capacity; it must be no smaller than the\r\n//    length. For example, make([]int, 0, 10) allocates an underlying array\r\n//    of size 10 and returns a slice of length 0 and capacity 10 that is\r\n//    backed by this underlying array.\r\n//    Map: An empty map is allocated with enough space to hold the\r\n//    specified number of elements. The size may be omitted, in which case\r\n//    a small starting size is allocated.\r\n//    Channel: The channel\u0027s buffer is initialized with the specified\r\n//    buffer capacity. If zero, or the size is omitted, the channel is\r\n//    unbuffered.\r\n","IsPromoted":false},"Variables":{},"HasDefer":false,"HasPanic":false,"HasRecover":false},"make()":{"Signature":{"Name":"make","Signature":{"Parameters":[{"Name":"t","Type":{"Name":"Type","TypeName":"Type","FullTypeName":"Type","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false},{"Name":"size","Type":{"Name":"IntegerType","TypeName":"IntegerType[]","FullTypeName":"IntegerType[]","TypeClass":1,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":true}],"Result":[{"Name":"","Type":{"Name":"Type","TypeName":"Type","FullTypeName":"Type","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}]},"Comments":"\r\n\r\n// The new built-in function allocates memory. The first argument is a type,\r\n// not a value, and the value returned is a pointer to a newly\r\n// allocated zero value of that type.\r\n","IsPromoted":false},"Variables":{},"HasDefer":false,"HasPanic":false,"HasRecover":false},"new()":{"Signature":{"Name":"new","Signature":{"Parameters":[{"Name":"_p0","Type":{"Name":"Type","TypeName":"Type","FullTypeName":"Type","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}],"Result":[{"Name":"","Type":{"DerivedTypeInfo":0,"TargetTypeInfo":{"Name":"Type","TypeName":"Type","FullTypeName":"Type","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"Name":"*Type","TypeName":"ptr\u003CType\u003E","FullTypeName":"ptr\u003CType\u003E","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}]},"Comments":"\r\n\r\n// The complex built-in function constructs a complex value from two\r\n// floating-point values. The real and imaginary parts must be of the same\r\n// size, either float32 or float64 (or assignable to them), and the return\r\n// value will be the corresponding complex type (complex64 for float32,\r\n// complex128 for float64).\r\n","IsPromoted":false},"Variables":{},"HasDefer":false,"HasPanic":false,"HasRecover":false},"complex()":{"Signature":{"Name":"complex","Signature":{"Parameters":[{"Name":"r","Type":{"Name":"FloatType","TypeName":"FloatType","FullTypeName":"FloatType","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false},{"Name":"i","Type":{"Name":"FloatType","TypeName":"FloatType","FullTypeName":"FloatType","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}],"Result":[{"Name":"","Type":{"Name":"ComplexType","TypeName":"ComplexType","FullTypeName":"ComplexType","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}]},"Comments":"\r\n\r\n// The real built-in function returns the real part of the complex number c.\r\n// The return value will be floating point type corresponding to the type of c.\r\n","IsPromoted":false},"Variables":{},"HasDefer":false,"HasPanic":false,"HasRecover":false},"real()":{"Signature":{"Name":"real","Signature":{"Parameters":[{"Name":"c","Type":{"Name":"ComplexType","TypeName":"ComplexType","FullTypeName":"ComplexType","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}],"Result":[{"Name":"","Type":{"Name":"FloatType","TypeName":"FloatType","FullTypeName":"FloatType","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}]},"Comments":"\r\n\r\n// The imag built-in function returns the imaginary part of the complex\r\n// number c. The return value will be floating point type corresponding to\r\n// the type of c.\r\n","IsPromoted":false},"Variables":{},"HasDefer":false,"HasPanic":false,"HasRecover":false},"imag()":{"Signature":{"Name":"imag","Signature":{"Parameters":[{"Name":"c","Type":{"Name":"ComplexType","TypeName":"ComplexType","FullTypeName":"ComplexType","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}],"Result":[{"Name":"","Type":{"Name":"FloatType","TypeName":"FloatType","FullTypeName":"FloatType","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}]},"Comments":"\r\n\r\n// The close built-in function closes a channel, which must be either\r\n// bidirectional or send-only. It should be executed only by the sender,\r\n// never the receiver, and has the effect of shutting down the channel after\r\n// the last sent value is received. After the last value has been received\r\n// from a closed channel c, any receive from c will succeed without\r\n// blocking, returning the zero value for the channel element. The form\r\n//    x, ok := \u003C-c\r\n// will also set ok to false for a closed channel.\r\n","IsPromoted":false},"Variables":{},"HasDefer":false,"HasPanic":false,"HasRecover":false},"close()":{"Signature":{"Name":"close","Signature":{"Parameters":[{"Name":"c","Type":{"Name":"Type","TypeName":"channel\u003CType\u003E","FullTypeName":"go.channel\u003CType\u003E","TypeClass":4,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}],"Result":[{"Name":"","Type":{"Name":"void","TypeName":"void","FullTypeName":"void","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}]},"Comments":"\r\n\r\n// The panic built-in function stops normal execution of the current\r\n// goroutine. When a function F calls panic, normal execution of F stops\r\n// immediately. Any functions whose execution was deferred by F are run in\r\n// the usual way, and then F returns to its caller. To the caller G, the\r\n// invocation of F then behaves like a call to panic, terminating G\u0027s\r\n// execution and running any deferred functions. This continues until all\r\n// functions in the executing goroutine have stopped, in reverse order. At\r\n// that point, the program is terminated with a non-zero exit code. This\r\n// termination sequence is called panicking and can be controlled by the\r\n// built-in function recover.\r\n","IsPromoted":false},"Variables":{},"HasDefer":false,"HasPanic":false,"HasRecover":false},"panic()":{"Signature":{"Name":"panic","Signature":{"Parameters":[{"Name":"v","Type":{"Name":"object","TypeName":"object","FullTypeName":"System.Object","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}],"Result":[{"Name":"","Type":{"Name":"void","TypeName":"void","FullTypeName":"void","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}]},"Comments":"\r\n\r\n// The recover built-in function allows a program to manage behavior of a\r\n// panicking goroutine. Executing a call to recover inside a deferred\r\n// function (but not any function called by it) stops the panicking sequence\r\n// by restoring normal execution and retrieves the error value passed to the\r\n// call of panic. If recover is called outside the deferred function it will\r\n// not stop a panicking sequence. In this case, or when the goroutine is not\r\n// panicking, or if the argument supplied to panic was nil, recover returns\r\n// nil. Thus the return value from recover reports whether the goroutine is\r\n// panicking.\r\n","IsPromoted":false},"Variables":{},"HasDefer":false,"HasPanic":false,"HasRecover":false},"recover()":{"Signature":{"Name":"recover","Signature":{"Parameters":[],"Result":[]},"Comments":"\r\n\r\n// The print built-in function formats its arguments in an\r\n// implementation-specific way and writes the result to standard error.\r\n// Print is useful for bootstrapping and debugging; it is not guaranteed\r\n// to stay in the language.\r\n","IsPromoted":false},"Variables":{},"HasDefer":false,"HasPanic":false,"HasRecover":false},"print()":{"Signature":{"Name":"print","Signature":{"Parameters":[{"Name":"args","Type":{"Name":"Type","TypeName":"Type[]","FullTypeName":"Type[]","TypeClass":1,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":true}],"Result":[{"Name":"","Type":{"Name":"void","TypeName":"void","FullTypeName":"void","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}]},"Comments":"\r\n\r\n// The println built-in function formats its arguments in an\r\n// implementation-specific way and writes the result to standard error.\r\n// Spaces are always added between arguments and a newline is appended.\r\n// Println is useful for bootstrapping and debugging; it is not guaranteed\r\n// to stay in the language.\r\n","IsPromoted":false},"Variables":{},"HasDefer":false,"HasPanic":false,"HasRecover":false},"println()":{"Signature":{"Name":"println","Signature":{"Parameters":[{"Name":"args","Type":{"Name":"Type","TypeName":"Type[]","FullTypeName":"Type[]","TypeClass":1,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":true}],"Result":[{"Name":"","Type":{"Name":"void","TypeName":"void","FullTypeName":"void","TypeClass":0,"IsDerefPointer":false,"IsByRefPointer":false,"IsConst":false},"IsVariadic":false}]},"Comments":"\r\n\r\n// The error built-in interface type is the conventional interface for\r\n// representing an error condition, with the nil value representing no error.\r\n","IsPromoted":false},"Variables":{},"HasDefer":false,"HasPanic":false,"HasRecover":false}},"LastUpdate":"2022-03-06T20:56:33.8746837Z"}}}