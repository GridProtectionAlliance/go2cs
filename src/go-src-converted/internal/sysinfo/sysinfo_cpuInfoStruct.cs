//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:19:15 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using internalcpu = go.@internal.cpu_package;
using sync = go.sync_package;
using go;

#nullable enable

namespace go {
namespace @internal
{
    public static partial class sysinfo_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct cpuInfo
        {
            // Constructors
            public cpuInfo(NilType _)
            {
                this.once = default;
                this.name = default;
            }

            public cpuInfo(sync.Once once = default, @string name = default)
            {
                this.once = once;
                this.name = name;
            }

            // Enable comparisons between nil and cpuInfo struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(cpuInfo value, NilType nil) => value.Equals(default(cpuInfo));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(cpuInfo value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, cpuInfo value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, cpuInfo value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator cpuInfo(NilType nil) => default(cpuInfo);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static cpuInfo cpuInfo_cast(dynamic value)
        {
            return new cpuInfo(value.once, value.name);
        }
    }
}}