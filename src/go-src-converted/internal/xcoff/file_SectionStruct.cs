//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 05:18:42 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using dwarf = go.debug.dwarf_package;
using binary = go.encoding.binary_package;
using fmt = go.fmt_package;
using io = go.io_package;
using os = go.os_package;
using strings = go.strings_package;
using go;

#nullable enable

namespace go {
namespace @internal
{
    public static partial class xcoff_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        [PromotedStruct(typeof(SectionHeader))]
        public partial struct Section
        {
            // ReaderAt.ReadAt function promotion
            private delegate (long, error) ReadAtByVal(T value, slice<byte> p, long off);
            private delegate (long, error) ReadAtByRef(ref T value, slice<byte> p, long off);

            private static readonly ReadAtByVal s_ReadAtByVal;
            private static readonly ReadAtByRef s_ReadAtByRef;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (long, error) ReadAt(slice<byte> p, long off) => s_ReadAtByRef?.Invoke(ref this, p, off) ?? s_ReadAtByVal?.Invoke(this, p, off) ?? ReaderAt?.ReadAt(p, off) ?? throw new PanicException(RuntimeErrorPanic.NilPointerDereference);

            // SectionHeader structure promotion - sourced from value copy
            private readonly ptr<SectionHeader> m_SectionHeaderRef;

            private ref SectionHeader SectionHeader_val => ref m_SectionHeaderRef.Value;

            public ref @string Name => ref m_SectionHeaderRef.Value.Name;

            public ref ulong VirtualAddress => ref m_SectionHeaderRef.Value.VirtualAddress;

            public ref ulong Size => ref m_SectionHeaderRef.Value.Size;

            public ref uint Type => ref m_SectionHeaderRef.Value.Type;

            public ref ulong Relptr => ref m_SectionHeaderRef.Value.Relptr;

            public ref uint Nreloc => ref m_SectionHeaderRef.Value.Nreloc;
            
            [DebuggerStepperBoundary]
            static Section()
            {
                Type targetType = typeof(Section);
                MethodInfo extensionMethod;
                
                extensionMethod = targetType.GetExtensionMethodSearchingPromotions("ReadAt");

                if ((object)extensionMethod != null)
                {
                    s_ReadAtByRef = extensionMethod.CreateStaticDelegate(typeof(ReadAtByRef)) as ReadAtByRef;

                    if ((object)s_ReadAtByRef == null)
                        s_ReadAtByVal = extensionMethod.CreateStaticDelegate(typeof(ReadAtByVal)) as ReadAtByVal;
                }
            }

            // Constructors
            public Section(NilType _)
            {
                this.m_SectionHeaderRef = new ptr<SectionHeader>(new SectionHeader(nil));
                this.Relocs = default;
                this.ReaderAt = default;
                this.sr = default;
            }

            public Section(SectionHeader SectionHeader = default, slice<Reloc> Relocs = default, io.ReaderAt ReaderAt = default, ref ptr<io.SectionReader> sr = default)
            {
                this.m_SectionHeaderRef = new ptr<SectionHeader>(SectionHeader);
                this.Relocs = Relocs;
                this.ReaderAt = ReaderAt;
                this.sr = sr;
            }

            // Enable comparisons between nil and Section struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Section value, NilType nil) => value.Equals(default(Section));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Section value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Section value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Section value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Section(NilType nil) => default(Section);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Section Section_cast(dynamic value)
        {
            return new Section(value.SectionHeader, value.Relocs, value.ReaderAt, ref value.sr);
        }
    }
}}