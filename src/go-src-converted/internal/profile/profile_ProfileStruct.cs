//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:38:46 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using bytes = go.bytes_package;
using gzip = go.compress.gzip_package;
using fmt = go.fmt_package;
using io = go.io_package;
using regexp = go.regexp_package;
using strings = go.strings_package;
using time = go.time_package;
using go;

#nullable enable

namespace go {
namespace @internal
{
    public static partial class profile_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        public partial struct Profile
        {
            // Constructors
            public Profile(NilType _)
            {
                this.SampleType = default;
                this.DefaultSampleType = default;
                this.Sample = default;
                this.Mapping = default;
                this.Location = default;
                this.Function = default;
                this.Comments = default;
                this.DropFrames = default;
                this.KeepFrames = default;
                this.TimeNanos = default;
                this.DurationNanos = default;
                this.PeriodType = default;
                this.Period = default;
                this.commentX = default;
                this.dropFramesX = default;
                this.keepFramesX = default;
                this.stringTable = default;
                this.defaultSampleTypeX = default;
            }

            public Profile(slice<ptr<ValueType>> SampleType = default, @string DefaultSampleType = default, slice<ptr<Sample>> Sample = default, slice<ptr<Mapping>> Mapping = default, slice<ptr<Location>> Location = default, slice<ptr<Function>> Function = default, slice<@string> Comments = default, @string DropFrames = default, @string KeepFrames = default, long TimeNanos = default, long DurationNanos = default, ref ptr<ValueType> PeriodType = default, long Period = default, slice<long> commentX = default, long dropFramesX = default, long keepFramesX = default, slice<@string> stringTable = default, long defaultSampleTypeX = default)
            {
                this.SampleType = SampleType;
                this.DefaultSampleType = DefaultSampleType;
                this.Sample = Sample;
                this.Mapping = Mapping;
                this.Location = Location;
                this.Function = Function;
                this.Comments = Comments;
                this.DropFrames = DropFrames;
                this.KeepFrames = KeepFrames;
                this.TimeNanos = TimeNanos;
                this.DurationNanos = DurationNanos;
                this.PeriodType = PeriodType;
                this.Period = Period;
                this.commentX = commentX;
                this.dropFramesX = dropFramesX;
                this.keepFramesX = keepFramesX;
                this.stringTable = stringTable;
                this.defaultSampleTypeX = defaultSampleTypeX;
            }

            // Enable comparisons between nil and Profile struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Profile value, NilType nil) => value.Equals(default(Profile));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Profile value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Profile value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Profile value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Profile(NilType nil) => default(Profile);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        public static Profile Profile_cast(dynamic value)
        {
            return new Profile(value.SampleType, value.DefaultSampleType, value.Sample, value.Mapping, value.Location, value.Function, value.Comments, value.DropFrames, value.KeepFrames, value.TimeNanos, value.DurationNanos, ref value.PeriodType, value.Period, value.commentX, value.dropFramesX, value.keepFramesX, value.stringTable, value.defaultSampleTypeX);
        }
    }
}}