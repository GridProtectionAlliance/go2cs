//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 04:51:14 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using unsafeheader = go.@internal.unsafeheader_package;
using sync = go.sync_package;
using syscall = go.syscall_package;
using utf16 = go.unicode.utf16_package;
using @unsafe = go.@unsafe_package;
using go;

#nullable enable

namespace go {
namespace @internal {
namespace syscall
{
    public static partial class windows_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct IpAdapterAddresses
        {
            // Constructors
            public IpAdapterAddresses(NilType _)
            {
                this.Length = default;
                this.IfIndex = default;
                this.Next = default;
                this.AdapterName = default;
                this.FirstUnicastAddress = default;
                this.FirstAnycastAddress = default;
                this.FirstMulticastAddress = default;
                this.FirstDnsServerAddress = default;
                this.DnsSuffix = default;
                this.Description = default;
                this.FriendlyName = default;
                this.PhysicalAddress = default;
                this.PhysicalAddressLength = default;
                this.Flags = default;
                this.Mtu = default;
                this.IfType = default;
                this.OperStatus = default;
                this.Ipv6IfIndex = default;
                this.ZoneIndices = default;
                this.FirstPrefix = default;
            }

            public IpAdapterAddresses(uint Length = default, uint IfIndex = default, ref ptr<IpAdapterAddresses> Next = default, ref ptr<byte> AdapterName = default, ref ptr<IpAdapterUnicastAddress> FirstUnicastAddress = default, ref ptr<IpAdapterAnycastAddress> FirstAnycastAddress = default, ref ptr<IpAdapterMulticastAddress> FirstMulticastAddress = default, ref ptr<IpAdapterDnsServerAdapter> FirstDnsServerAddress = default, ref ptr<ushort> DnsSuffix = default, ref ptr<ushort> Description = default, ref ptr<ushort> FriendlyName = default, array<byte> PhysicalAddress = default, uint PhysicalAddressLength = default, uint Flags = default, uint Mtu = default, uint IfType = default, uint OperStatus = default, uint Ipv6IfIndex = default, array<uint> ZoneIndices = default, ref ptr<IpAdapterPrefix> FirstPrefix = default)
            {
                this.Length = Length;
                this.IfIndex = IfIndex;
                this.Next = Next;
                this.AdapterName = AdapterName;
                this.FirstUnicastAddress = FirstUnicastAddress;
                this.FirstAnycastAddress = FirstAnycastAddress;
                this.FirstMulticastAddress = FirstMulticastAddress;
                this.FirstDnsServerAddress = FirstDnsServerAddress;
                this.DnsSuffix = DnsSuffix;
                this.Description = Description;
                this.FriendlyName = FriendlyName;
                this.PhysicalAddress = PhysicalAddress;
                this.PhysicalAddressLength = PhysicalAddressLength;
                this.Flags = Flags;
                this.Mtu = Mtu;
                this.IfType = IfType;
                this.OperStatus = OperStatus;
                this.Ipv6IfIndex = Ipv6IfIndex;
                this.ZoneIndices = ZoneIndices;
                this.FirstPrefix = FirstPrefix;
            }

            // Enable comparisons between nil and IpAdapterAddresses struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(IpAdapterAddresses value, NilType nil) => value.Equals(default(IpAdapterAddresses));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(IpAdapterAddresses value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, IpAdapterAddresses value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, IpAdapterAddresses value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator IpAdapterAddresses(NilType nil) => default(IpAdapterAddresses);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static IpAdapterAddresses IpAdapterAddresses_cast(dynamic value)
        {
            return new IpAdapterAddresses(value.Length, value.IfIndex, ref value.Next, ref value.AdapterName, ref value.FirstUnicastAddress, ref value.FirstAnycastAddress, ref value.FirstMulticastAddress, ref value.FirstDnsServerAddress, ref value.DnsSuffix, ref value.Description, ref value.FriendlyName, value.PhysicalAddress, value.PhysicalAddressLength, value.Flags, value.Mtu, value.IfType, value.OperStatus, value.Ipv6IfIndex, value.ZoneIndices, ref value.FirstPrefix);
        }
    }
}}}