//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 04:49:31 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bytealg = go.@internal.bytealg_package;
using unicode = go.unicode_package;
using utf8 = go.unicode.utf8_package;

#nullable enable

namespace go
{
    public static partial class bytes_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct span
        {
            // Constructors
            public span(NilType _)
            {
                this.start = default;
                this.end = default;
            }

            public span(long start = default, long end = default)
            {
                this.start = start;
                this.end = end;
            }

            // Enable comparisons between nil and span struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(span value, NilType nil) => value.Equals(default(span));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(span value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, span value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, span value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator span(NilType nil) => default(span);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static span span_cast(dynamic value)
        {
            return new span(value.start, value.end);
        }
    }
}