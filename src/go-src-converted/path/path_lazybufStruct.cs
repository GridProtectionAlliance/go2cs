//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 03:38:41 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using strings = go.strings_package;

namespace go
{
    public static partial class path_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct lazybuf
        {
            // Constructors
            public lazybuf(NilType _)
            {
                this.s = default;
                this.buf = default;
                this.w = default;
            }

            public lazybuf(@string s = default, slice<byte> buf = default, long w = default)
            {
                this.s = s;
                this.buf = buf;
                this.w = w;
            }

            // Enable comparisons between nil and lazybuf struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(lazybuf value, NilType nil) => value.Equals(default(lazybuf));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(lazybuf value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, lazybuf value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, lazybuf value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator lazybuf(NilType nil) => default(lazybuf);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static lazybuf lazybuf_cast(dynamic value)
        {
            return new lazybuf(value.s, value.buf, value.w);
        }
    }
}