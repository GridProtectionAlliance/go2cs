//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 00:34:03 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using atomic = go.sync.atomic_package;
using @unsafe = go.@unsafe_package;

namespace go
{
    public static partial class sync_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Map
        {
            // Constructors
            public Map(NilType _)
            {
                this.mu = default;
                this.read = default;
                this.misses = default;
            }

            public Map(Mutex mu = default, atomic.Value read = default, long misses = default)
            {
                this.mu = mu;
                this.read = read;
                this.misses = misses;
            }

            // Enable comparisons between nil and Map struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Map value, NilType nil) => value.Equals(default(Map));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Map value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Map value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Map value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Map(NilType nil) => default(Map);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Map Map_cast(dynamic value)
        {
            return new Map(value.mu, value.read, value.misses);
        }
    }
}