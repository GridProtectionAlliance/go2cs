//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 06:06:21 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using errors = go.errors_package;
using fmt = go.fmt_package;
using go;

#nullable enable

namespace go {
namespace vendor {
namespace golang.org {
namespace x {
namespace crypto
{
    public static partial class cryptobyte_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct BuildError
        {
            // Constructors
            public BuildError(NilType _)
            {
                this.Err = default;
            }

            public BuildError(error Err = default)
            {
                this.Err = Err;
            }

            // Enable comparisons between nil and BuildError struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(BuildError value, NilType nil) => value.Equals(default(BuildError));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(BuildError value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, BuildError value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, BuildError value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator BuildError(NilType nil) => default(BuildError);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static BuildError BuildError_cast(dynamic value)
        {
            return new BuildError(value.Err);
        }
    }
}}}}}