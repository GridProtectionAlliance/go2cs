//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 06:06:15 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using cipher = go.crypto.cipher_package;
using binary = go.encoding.binary_package;
using errors = go.errors_package;
using bits = go.math.bits_package;
using subtle = go.golang.org.x.crypto.@internal.subtle_package;
using go;

#nullable enable

namespace go {
namespace vendor {
namespace golang.org {
namespace x {
namespace crypto
{
    public static partial class chacha20_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Cipher
        {
            // Constructors
            public Cipher(NilType _)
            {
                this.key = default;
                this.counter = default;
                this.nonce = default;
                this.buf = default;
                this.len = default;
                this.overflow = default;
                this.precompDone = default;
                this.p1 = default;
                this.p5 = default;
                this.p9 = default;
                this.p13 = default;
                this.p2 = default;
                this.p6 = default;
                this.p10 = default;
                this.p14 = default;
                this.p3 = default;
                this.p7 = default;
                this.p11 = default;
                this.p15 = default;
            }

            public Cipher(array<uint> key = default, uint counter = default, array<uint> nonce = default, array<byte> buf = default, long len = default, bool overflow = default, bool precompDone = default, uint p1 = default, uint p5 = default, uint p9 = default, uint p13 = default, uint p2 = default, uint p6 = default, uint p10 = default, uint p14 = default, uint p3 = default, uint p7 = default, uint p11 = default, uint p15 = default)
            {
                this.key = key;
                this.counter = counter;
                this.nonce = nonce;
                this.buf = buf;
                this.len = len;
                this.overflow = overflow;
                this.precompDone = precompDone;
                this.p1 = p1;
                this.p5 = p5;
                this.p9 = p9;
                this.p13 = p13;
                this.p2 = p2;
                this.p6 = p6;
                this.p10 = p10;
                this.p14 = p14;
                this.p3 = p3;
                this.p7 = p7;
                this.p11 = p11;
                this.p15 = p15;
            }

            // Enable comparisons between nil and Cipher struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Cipher value, NilType nil) => value.Equals(default(Cipher));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Cipher value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Cipher value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Cipher value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Cipher(NilType nil) => default(Cipher);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Cipher Cipher_cast(dynamic value)
        {
            return new Cipher(value.key, value.counter, value.nonce, value.buf, value.len, value.overflow, value.precompDone, value.p1, value.p5, value.p9, value.p13, value.p2, value.p6, value.p10, value.p14, value.p3, value.p7, value.p11, value.p15);
        }
    }
}}}}}