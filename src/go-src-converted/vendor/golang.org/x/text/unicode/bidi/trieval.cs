// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

// package bidi -- go2cs converted at 2020 October 08 05:02:16 UTC
// import "vendor/golang.org/x/text/unicode/bidi" ==> using bidi = go.vendor.golang.org.x.text.unicode.bidi_package
// Original source: C:\Go\src\vendor\golang.org\x\text\unicode\bidi\trieval.go

using static go.builtin;

namespace go {
namespace vendor {
namespace golang.org {
namespace x {
namespace text {
namespace unicode
{
    public static partial class bidi_package
    {
        // Class is the Unicode BiDi class. Each rune has a single class.
        public partial struct Class // : ulong
        {
        }

        public static readonly Class L = (Class)iota; // LeftToRight
        public static readonly var R = (var)0; // RightToLeft
        public static readonly var EN = (var)1; // EuropeanNumber
        public static readonly var ES = (var)2; // EuropeanSeparator
        public static readonly var ET = (var)3; // EuropeanTerminator
        public static readonly var AN = (var)4; // ArabicNumber
        public static readonly var CS = (var)5; // CommonSeparator
        public static readonly var B = (var)6; // ParagraphSeparator
        public static readonly var S = (var)7; // SegmentSeparator
        public static readonly var WS = (var)8; // WhiteSpace
        public static readonly var ON = (var)9; // OtherNeutral
        public static readonly var BN = (var)10; // BoundaryNeutral
        public static readonly var NSM = (var)11; // NonspacingMark
        public static readonly var AL = (var)12; // ArabicLetter
        public static readonly var Control = (var)13; // Control LRO - PDI

        private static readonly var numClass = (var)14;

        public static readonly var LRO = (var)15; // LeftToRightOverride
        public static readonly var RLO = (var)16; // RightToLeftOverride
        public static readonly var LRE = (var)17; // LeftToRightEmbedding
        public static readonly var RLE = (var)18; // RightToLeftEmbedding
        public static readonly var PDF = (var)19; // PopDirectionalFormat
        public static readonly var LRI = (var)20; // LeftToRightIsolate
        public static readonly var RLI = (var)21; // RightToLeftIsolate
        public static readonly var FSI = (var)22; // FirstStrongIsolate
        public static readonly unknownClass PDI = (unknownClass)~Class(0L);


        private static map controlToClass = /* TODO: Fix this in ScannerBase_Expression::ExitCompositeLit */ new map<int, Class>{0x202D:LRO,0x202E:RLO,0x202A:LRE,0x202B:RLE,0x202C:PDF,0x2066:LRI,0x2067:RLI,0x2068:FSI,0x2069:PDI,};

        // A trie entry has the following bits:
        // 7..5  XOR mask for brackets
        // 4     1: Bracket open, 0: Bracket close
        // 3..0  Class type

        private static readonly ulong openMask = (ulong)0x10UL;
        private static readonly long xorMaskShift = (long)5L;

    }
}}}}}}
