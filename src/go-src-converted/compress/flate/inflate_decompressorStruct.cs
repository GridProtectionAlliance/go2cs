//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 03:31:02 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bufio = go.bufio_package;
using io = go.io_package;
using bits = go.math.bits_package;
using strconv = go.strconv_package;
using sync = go.sync_package;
using go;

namespace go {
namespace compress
{
    public static partial class flate_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct decompressor
        {
            // Constructors
            public decompressor(NilType _)
            {
                this.r = default;
                this.roffset = default;
                this.b = default;
                this.nb = default;
                this.h1 = default;
                this.h2 = default;
                this.bits = default;
                this.codebits = default;
                this.dict = default;
                this.buf = default;
                this.step = default;
                this.stepState = default;
                this.final = default;
                this.err = default;
                this.toRead = default;
                this.hl = default;
                this.hd = default;
                this.copyLen = default;
                this.copyDist = default;
            }

            public decompressor(Reader r = default, long roffset = default, uint b = default, ulong nb = default, huffmanDecoder h1 = default, huffmanDecoder h2 = default, ref ptr<array<long>> bits = default, ref ptr<array<long>> codebits = default, dictDecoder dict = default, array<byte> buf = default, Action<ptr<decompressor>> step = default, long stepState = default, bool final = default, error err = default, slice<byte> toRead = default, ref ptr<huffmanDecoder> hl = default, ref ptr<huffmanDecoder> hd = default, long copyLen = default, long copyDist = default)
            {
                this.r = r;
                this.roffset = roffset;
                this.b = b;
                this.nb = nb;
                this.h1 = h1;
                this.h2 = h2;
                this.bits = bits;
                this.codebits = codebits;
                this.dict = dict;
                this.buf = buf;
                this.step = step;
                this.stepState = stepState;
                this.final = final;
                this.err = err;
                this.toRead = toRead;
                this.hl = hl;
                this.hd = hd;
                this.copyLen = copyLen;
                this.copyDist = copyDist;
            }

            // Enable comparisons between nil and decompressor struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(decompressor value, NilType nil) => value.Equals(default(decompressor));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(decompressor value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, decompressor value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, decompressor value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator decompressor(NilType nil) => default(decompressor);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static decompressor decompressor_cast(dynamic value)
        {
            return new decompressor(value.r, value.roffset, value.b, value.nb, value.h1, value.h2, ref value.bits, ref value.codebits, value.dict, value.buf, value.step, value.stepState, value.final, value.err, value.toRead, ref value.hl, ref value.hd, value.copyLen, value.copyDist);
        }
    }
}}