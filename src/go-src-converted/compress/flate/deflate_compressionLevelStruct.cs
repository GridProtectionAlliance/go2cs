//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:28:55 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using fmt = go.fmt_package;
using io = go.io_package;
using math = go.math_package;
using go;

#nullable enable

namespace go {
namespace compress
{
    public static partial class flate_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial struct compressionLevel
        {
            // Constructors
            public compressionLevel(NilType _)
            {
                this.level = default;
                this.good = default;
                this.lazy = default;
                this.nice = default;
                this.chain = default;
                this.fastSkipHashing = default;
            }

            public compressionLevel(nint level = default, nint good = default, nint lazy = default, nint nice = default, nint chain = default, nint fastSkipHashing = default)
            {
                this.level = level;
                this.good = good;
                this.lazy = lazy;
                this.nice = nice;
                this.chain = chain;
                this.fastSkipHashing = fastSkipHashing;
            }

            // Enable comparisons between nil and compressionLevel struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(compressionLevel value, NilType nil) => value.Equals(default(compressionLevel));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(compressionLevel value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, compressionLevel value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, compressionLevel value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator compressionLevel(NilType nil) => default(compressionLevel);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private static compressionLevel compressionLevel_cast(dynamic value)
        {
            return new compressionLevel(value.level, value.good, value.lazy, value.nice, value.chain, value.fastSkipHashing);
        }
    }
}}