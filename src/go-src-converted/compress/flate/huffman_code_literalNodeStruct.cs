//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 04:50:17 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using math = go.math_package;
using bits = go.math.bits_package;
using sort = go.sort_package;
using go;

#nullable enable

namespace go {
namespace compress
{
    public static partial class flate_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct literalNode
        {
            // Constructors
            public literalNode(NilType _)
            {
                this.literal = default;
                this.freq = default;
            }

            public literalNode(ushort literal = default, int freq = default)
            {
                this.literal = literal;
                this.freq = freq;
            }

            // Enable comparisons between nil and literalNode struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(literalNode value, NilType nil) => value.Equals(default(literalNode));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(literalNode value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, literalNode value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, literalNode value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator literalNode(NilType nil) => default(literalNode);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static literalNode literalNode_cast(dynamic value)
        {
            return new literalNode(value.literal, value.freq);
        }
    }
}}