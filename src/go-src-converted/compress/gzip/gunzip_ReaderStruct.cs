//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:28:52 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using bufio = go.bufio_package;
using flate = go.compress.flate_package;
using binary = go.encoding.binary_package;
using errors = go.errors_package;
using crc32 = go.hash.crc32_package;
using io = go.io_package;
using time = go.time_package;
using go;

#nullable enable

namespace go {
namespace compress
{
    public static partial class gzip_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        [PromotedStruct(typeof(Header))]
        public partial struct Reader
        {
            // Header structure promotion - sourced from value copy
            private readonly ptr<Header> m_HeaderRef;

            private ref Header Header_val => ref m_HeaderRef.Value;

            public ref @string Comment => ref m_HeaderRef.Value.Comment;

            public ref slice<byte> Extra => ref m_HeaderRef.Value.Extra;

            public ref time.Time ModTime => ref m_HeaderRef.Value.ModTime;

            public ref @string Name => ref m_HeaderRef.Value.Name;

            public ref byte OS => ref m_HeaderRef.Value.OS;

            // Constructors
            public Reader(NilType _)
            {
                this.m_HeaderRef = new ptr<Header>(new Header(nil));
                this.r = default;
                this.decompressor = default;
                this.digest = default;
                this.size = default;
                this.buf = default;
                this.err = default;
                this.multistream = default;
            }

            public Reader(Header Header = default, flate.Reader r = default, io.ReadCloser decompressor = default, uint digest = default, uint size = default, array<byte> buf = default, error err = default, bool multistream = default)
            {
                this.m_HeaderRef = new ptr<Header>(Header);
                this.r = r;
                this.decompressor = decompressor;
                this.digest = digest;
                this.size = size;
                this.buf = buf;
                this.err = err;
                this.multistream = multistream;
            }

            // Enable comparisons between nil and Reader struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Reader value, NilType nil) => value.Equals(default(Reader));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Reader value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Reader value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Reader value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Reader(NilType nil) => default(Reader);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        public static Reader Reader_cast(dynamic value)
        {
            return new Reader(value.Header, value.r, value.decompressor, value.digest, value.size, value.buf, value.err, value.multistream);
        }
    }
}}