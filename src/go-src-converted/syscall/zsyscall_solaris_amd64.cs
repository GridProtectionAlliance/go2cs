// mksyscall_libc.pl -solaris -tags solaris,amd64 syscall_solaris.go syscall_solaris_amd64.go
// Code generated by the command above; DO NOT EDIT.

// +build solaris,amd64

// package syscall -- go2cs converted at 2020 October 09 05:04:14 UTC
// import "syscall" ==> using syscall = go.syscall_package
// Original source: C:\Go\src\syscall\zsyscall_solaris_amd64.go
using @unsafe = go.@unsafe_package;
using static go.builtin;

namespace go
{
    public static partial class syscall_package
    {
        //go:cgo_import_dynamic libc_Getcwd getcwd "libc.so"
        //go:cgo_import_dynamic libc_getgroups getgroups "libc.so"
        //go:cgo_import_dynamic libc_setgroups setgroups "libc.so"
        //go:cgo_import_dynamic libc_fcntl fcntl "libc.so"
        //go:cgo_import_dynamic libc_accept accept "libsocket.so"
        //go:cgo_import_dynamic libc___xnet_sendmsg __xnet_sendmsg "libsocket.so"
        //go:cgo_import_dynamic libc_Access access "libc.so"
        //go:cgo_import_dynamic libc_Adjtime adjtime "libc.so"
        //go:cgo_import_dynamic libc_Chdir chdir "libc.so"
        //go:cgo_import_dynamic libc_Chmod chmod "libc.so"
        //go:cgo_import_dynamic libc_Chown chown "libc.so"
        //go:cgo_import_dynamic libc_Chroot chroot "libc.so"
        //go:cgo_import_dynamic libc_Close close "libc.so"
        //go:cgo_import_dynamic libc_Dup dup "libc.so"
        //go:cgo_import_dynamic libc_Fchdir fchdir "libc.so"
        //go:cgo_import_dynamic libc_Fchmod fchmod "libc.so"
        //go:cgo_import_dynamic libc_Fchown fchown "libc.so"
        //go:cgo_import_dynamic libc_Fpathconf fpathconf "libc.so"
        //go:cgo_import_dynamic libc_Fstat fstat "libc.so"
        //go:cgo_import_dynamic libc_Getdents getdents "libc.so"
        //go:cgo_import_dynamic libc_Getgid getgid "libc.so"
        //go:cgo_import_dynamic libc_Getpid getpid "libc.so"
        //go:cgo_import_dynamic libc_Geteuid geteuid "libc.so"
        //go:cgo_import_dynamic libc_Getegid getegid "libc.so"
        //go:cgo_import_dynamic libc_Getppid getppid "libc.so"
        //go:cgo_import_dynamic libc_Getpriority getpriority "libc.so"
        //go:cgo_import_dynamic libc_Getrlimit getrlimit "libc.so"
        //go:cgo_import_dynamic libc_Gettimeofday gettimeofday "libc.so"
        //go:cgo_import_dynamic libc_Getuid getuid "libc.so"
        //go:cgo_import_dynamic libc_Kill kill "libc.so"
        //go:cgo_import_dynamic libc_Lchown lchown "libc.so"
        //go:cgo_import_dynamic libc_Link link "libc.so"
        //go:cgo_import_dynamic libc___xnet_listen __xnet_listen "libsocket.so"
        //go:cgo_import_dynamic libc_Lstat lstat "libc.so"
        //go:cgo_import_dynamic libc_Mkdir mkdir "libc.so"
        //go:cgo_import_dynamic libc_Mknod mknod "libc.so"
        //go:cgo_import_dynamic libc_Nanosleep nanosleep "libc.so"
        //go:cgo_import_dynamic libc_Open open "libc.so"
        //go:cgo_import_dynamic libc_Pathconf pathconf "libc.so"
        //go:cgo_import_dynamic libc_Pread pread "libc.so"
        //go:cgo_import_dynamic libc_Pwrite pwrite "libc.so"
        //go:cgo_import_dynamic libc_read read "libc.so"
        //go:cgo_import_dynamic libc_Readlink readlink "libc.so"
        //go:cgo_import_dynamic libc_Rename rename "libc.so"
        //go:cgo_import_dynamic libc_Rmdir rmdir "libc.so"
        //go:cgo_import_dynamic libc_lseek lseek "libc.so"
        //go:cgo_import_dynamic libc_sendfile sendfile "libsendfile.so"
        //go:cgo_import_dynamic libc_Setegid setegid "libc.so"
        //go:cgo_import_dynamic libc_Seteuid seteuid "libc.so"
        //go:cgo_import_dynamic libc_Setgid setgid "libc.so"
        //go:cgo_import_dynamic libc_Setpgid setpgid "libc.so"
        //go:cgo_import_dynamic libc_Setpriority setpriority "libc.so"
        //go:cgo_import_dynamic libc_Setregid setregid "libc.so"
        //go:cgo_import_dynamic libc_Setreuid setreuid "libc.so"
        //go:cgo_import_dynamic libc_Setrlimit setrlimit "libc.so"
        //go:cgo_import_dynamic libc_Setsid setsid "libc.so"
        //go:cgo_import_dynamic libc_Setuid setuid "libc.so"
        //go:cgo_import_dynamic libc_shutdown shutdown "libsocket.so"
        //go:cgo_import_dynamic libc_Stat stat "libc.so"
        //go:cgo_import_dynamic libc_Symlink symlink "libc.so"
        //go:cgo_import_dynamic libc_Sync sync "libc.so"
        //go:cgo_import_dynamic libc_Truncate truncate "libc.so"
        //go:cgo_import_dynamic libc_Fsync fsync "libc.so"
        //go:cgo_import_dynamic libc_Ftruncate ftruncate "libc.so"
        //go:cgo_import_dynamic libc_Umask umask "libc.so"
        //go:cgo_import_dynamic libc_Unlink unlink "libc.so"
        //go:cgo_import_dynamic libc_utimes utimes "libc.so"
        //go:cgo_import_dynamic libc___xnet_bind __xnet_bind "libsocket.so"
        //go:cgo_import_dynamic libc___xnet_connect __xnet_connect "libsocket.so"
        //go:cgo_import_dynamic libc_mmap mmap "libc.so"
        //go:cgo_import_dynamic libc_munmap munmap "libc.so"
        //go:cgo_import_dynamic libc___xnet_sendto __xnet_sendto "libsocket.so"
        //go:cgo_import_dynamic libc___xnet_socket __xnet_socket "libsocket.so"
        //go:cgo_import_dynamic libc___xnet_socketpair __xnet_socketpair "libsocket.so"
        //go:cgo_import_dynamic libc_write write "libc.so"
        //go:cgo_import_dynamic libc___xnet_getsockopt __xnet_getsockopt "libsocket.so"
        //go:cgo_import_dynamic libc_getpeername getpeername "libsocket.so"
        //go:cgo_import_dynamic libc_getsockname getsockname "libsocket.so"
        //go:cgo_import_dynamic libc_setsockopt setsockopt "libsocket.so"
        //go:cgo_import_dynamic libc_recvfrom recvfrom "libsocket.so"
        //go:cgo_import_dynamic libc___xnet_recvmsg __xnet_recvmsg "libsocket.so"
        //go:cgo_import_dynamic libc_getexecname getexecname "libc.so"
        //go:cgo_import_dynamic libc_utimensat utimensat "libc.so"

        //go:linkname libc_Getcwd libc_Getcwd
        //go:linkname libc_getgroups libc_getgroups
        //go:linkname libc_setgroups libc_setgroups
        //go:linkname libc_fcntl libc_fcntl
        //go:linkname libc_accept libc_accept
        //go:linkname libc___xnet_sendmsg libc___xnet_sendmsg
        //go:linkname libc_Access libc_Access
        //go:linkname libc_Adjtime libc_Adjtime
        //go:linkname libc_Chdir libc_Chdir
        //go:linkname libc_Chmod libc_Chmod
        //go:linkname libc_Chown libc_Chown
        //go:linkname libc_Chroot libc_Chroot
        //go:linkname libc_Close libc_Close
        //go:linkname libc_Dup libc_Dup
        //go:linkname libc_Fchdir libc_Fchdir
        //go:linkname libc_Fchmod libc_Fchmod
        //go:linkname libc_Fchown libc_Fchown
        //go:linkname libc_Fpathconf libc_Fpathconf
        //go:linkname libc_Fstat libc_Fstat
        //go:linkname libc_Getdents libc_Getdents
        //go:linkname libc_Getgid libc_Getgid
        //go:linkname libc_Getpid libc_Getpid
        //go:linkname libc_Geteuid libc_Geteuid
        //go:linkname libc_Getegid libc_Getegid
        //go:linkname libc_Getppid libc_Getppid
        //go:linkname libc_Getpriority libc_Getpriority
        //go:linkname libc_Getrlimit libc_Getrlimit
        //go:linkname libc_Gettimeofday libc_Gettimeofday
        //go:linkname libc_Getuid libc_Getuid
        //go:linkname libc_Kill libc_Kill
        //go:linkname libc_Lchown libc_Lchown
        //go:linkname libc_Link libc_Link
        //go:linkname libc___xnet_listen libc___xnet_listen
        //go:linkname libc_Lstat libc_Lstat
        //go:linkname libc_Mkdir libc_Mkdir
        //go:linkname libc_Mknod libc_Mknod
        //go:linkname libc_Nanosleep libc_Nanosleep
        //go:linkname libc_Open libc_Open
        //go:linkname libc_Pathconf libc_Pathconf
        //go:linkname libc_Pread libc_Pread
        //go:linkname libc_Pwrite libc_Pwrite
        //go:linkname libc_read libc_read
        //go:linkname libc_Readlink libc_Readlink
        //go:linkname libc_Rename libc_Rename
        //go:linkname libc_Rmdir libc_Rmdir
        //go:linkname libc_lseek libc_lseek
        //go:linkname libc_sendfile libc_sendfile
        //go:linkname libc_Setegid libc_Setegid
        //go:linkname libc_Seteuid libc_Seteuid
        //go:linkname libc_Setgid libc_Setgid
        //go:linkname libc_Setpgid libc_Setpgid
        //go:linkname libc_Setpriority libc_Setpriority
        //go:linkname libc_Setregid libc_Setregid
        //go:linkname libc_Setreuid libc_Setreuid
        //go:linkname libc_Setrlimit libc_Setrlimit
        //go:linkname libc_Setsid libc_Setsid
        //go:linkname libc_Setuid libc_Setuid
        //go:linkname libc_shutdown libc_shutdown
        //go:linkname libc_Stat libc_Stat
        //go:linkname libc_Symlink libc_Symlink
        //go:linkname libc_Sync libc_Sync
        //go:linkname libc_Truncate libc_Truncate
        //go:linkname libc_Fsync libc_Fsync
        //go:linkname libc_Ftruncate libc_Ftruncate
        //go:linkname libc_Umask libc_Umask
        //go:linkname libc_Unlink libc_Unlink
        //go:linkname libc_utimes libc_utimes
        //go:linkname libc___xnet_bind libc___xnet_bind
        //go:linkname libc___xnet_connect libc___xnet_connect
        //go:linkname libc_mmap libc_mmap
        //go:linkname libc_munmap libc_munmap
        //go:linkname libc___xnet_sendto libc___xnet_sendto
        //go:linkname libc___xnet_socket libc___xnet_socket
        //go:linkname libc___xnet_socketpair libc___xnet_socketpair
        //go:linkname libc_write libc_write
        //go:linkname libc___xnet_getsockopt libc___xnet_getsockopt
        //go:linkname libc_getpeername libc_getpeername
        //go:linkname libc_getsockname libc_getsockname
        //go:linkname libc_setsockopt libc_setsockopt
        //go:linkname libc_recvfrom libc_recvfrom
        //go:linkname libc___xnet_recvmsg libc___xnet_recvmsg
        //go:linkname libc_getexecname libc_getexecname
        //go:linkname libc_utimensat libc_utimensat
        private partial struct libcFunc // : System.UIntPtr
        {
        }

        private static libcFunc libc_Getcwd = default;        private static libcFunc libc_getgroups = default;        private static libcFunc libc_setgroups = default;        private static libcFunc libc_fcntl = default;        private static libcFunc libc_accept = default;        private static libcFunc libc___xnet_sendmsg = default;        private static libcFunc libc_Access = default;        private static libcFunc libc_Adjtime = default;        private static libcFunc libc_Chdir = default;        private static libcFunc libc_Chmod = default;        private static libcFunc libc_Chown = default;        private static libcFunc libc_Chroot = default;        private static libcFunc libc_Close = default;        private static libcFunc libc_Dup = default;        private static libcFunc libc_Fchdir = default;        private static libcFunc libc_Fchmod = default;        private static libcFunc libc_Fchown = default;        private static libcFunc libc_Fpathconf = default;        private static libcFunc libc_Fstat = default;        private static libcFunc libc_Getdents = default;        private static libcFunc libc_Getgid = default;        private static libcFunc libc_Getpid = default;        private static libcFunc libc_Geteuid = default;        private static libcFunc libc_Getegid = default;        private static libcFunc libc_Getppid = default;        private static libcFunc libc_Getpriority = default;        private static libcFunc libc_Getrlimit = default;        private static libcFunc libc_Gettimeofday = default;        private static libcFunc libc_Getuid = default;        private static libcFunc libc_Kill = default;        private static libcFunc libc_Lchown = default;        private static libcFunc libc_Link = default;        private static libcFunc libc___xnet_listen = default;        private static libcFunc libc_Lstat = default;        private static libcFunc libc_Mkdir = default;        private static libcFunc libc_Mknod = default;        private static libcFunc libc_Nanosleep = default;        private static libcFunc libc_Open = default;        private static libcFunc libc_Pathconf = default;        private static libcFunc libc_Pread = default;        private static libcFunc libc_Pwrite = default;        private static libcFunc libc_read = default;        private static libcFunc libc_Readlink = default;        private static libcFunc libc_Rename = default;        private static libcFunc libc_Rmdir = default;        private static libcFunc libc_lseek = default;        private static libcFunc libc_sendfile = default;        private static libcFunc libc_Setegid = default;        private static libcFunc libc_Seteuid = default;        private static libcFunc libc_Setgid = default;        private static libcFunc libc_Setpgid = default;        private static libcFunc libc_Setpriority = default;        private static libcFunc libc_Setregid = default;        private static libcFunc libc_Setreuid = default;        private static libcFunc libc_Setrlimit = default;        private static libcFunc libc_Setsid = default;        private static libcFunc libc_Setuid = default;        private static libcFunc libc_shutdown = default;        private static libcFunc libc_Stat = default;        private static libcFunc libc_Symlink = default;        private static libcFunc libc_Sync = default;        private static libcFunc libc_Truncate = default;        private static libcFunc libc_Fsync = default;        private static libcFunc libc_Ftruncate = default;        private static libcFunc libc_Umask = default;        private static libcFunc libc_Unlink = default;        private static libcFunc libc_utimes = default;        private static libcFunc libc___xnet_bind = default;        private static libcFunc libc___xnet_connect = default;        private static libcFunc libc_mmap = default;        private static libcFunc libc_munmap = default;        private static libcFunc libc___xnet_sendto = default;        private static libcFunc libc___xnet_socket = default;        private static libcFunc libc___xnet_socketpair = default;        private static libcFunc libc_write = default;        private static libcFunc libc___xnet_getsockopt = default;        private static libcFunc libc_getpeername = default;        private static libcFunc libc_getsockname = default;        private static libcFunc libc_setsockopt = default;        private static libcFunc libc_recvfrom = default;        private static libcFunc libc___xnet_recvmsg = default;        private static libcFunc libc_getexecname = default;        private static libcFunc libc_utimensat = default;


        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Getcwd(slice<byte> buf)
        {
            long n = default;
            error err = default!;

            ptr<byte> _p0;
            if (len(buf) > 0L)
            {
                _p0 = _addr_buf[0L];
            }

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Getcwd)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(len(buf)), 0L, 0L, 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) getgroups(long ngid, ptr<_Gid_t> _addr_gid)
        {
            long n = default;
            error err = default!;
            ref _Gid_t gid = ref _addr_gid.val;

            var (r0, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_libc_getgroups)), 2L, uintptr(ngid), uintptr(@unsafe.Pointer(gid)), 0L, 0L, 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error setgroups(long ngid, ptr<_Gid_t> _addr_gid)
        {
            error err = default!;
            ref _Gid_t gid = ref _addr_gid.val;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_libc_setgroups)), 2L, uintptr(ngid), uintptr(@unsafe.Pointer(gid)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) fcntl(long fd, long cmd, long arg)
        {
            long val = default;
            error err = default!;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_fcntl)), 3L, uintptr(fd), uintptr(cmd), uintptr(arg), 0L, 0L, 0L);
            val = int(r0);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) accept(long s, ptr<RawSockaddrAny> _addr_rsa, ptr<_Socklen> _addr_addrlen)
        {
            long fd = default;
            error err = default!;
            ref RawSockaddrAny rsa = ref _addr_rsa.val;
            ref _Socklen addrlen = ref _addr_addrlen.val;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_accept)), 3L, uintptr(s), uintptr(@unsafe.Pointer(rsa)), uintptr(@unsafe.Pointer(addrlen)), 0L, 0L, 0L);
            fd = int(r0);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) sendmsg(long s, ptr<Msghdr> _addr_msg, long flags)
        {
            long n = default;
            error err = default!;
            ref Msghdr msg = ref _addr_msg.val;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc___xnet_sendmsg)), 3L, uintptr(s), uintptr(@unsafe.Pointer(msg)), uintptr(flags), 0L, 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Access(@string path, uint mode)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Access)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(mode), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Adjtime(ptr<Timeval> _addr_delta, ptr<Timeval> _addr_olddelta)
        {
            error err = default!;
            ref Timeval delta = ref _addr_delta.val;
            ref Timeval olddelta = ref _addr_olddelta.val;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Adjtime)), 2L, uintptr(@unsafe.Pointer(delta)), uintptr(@unsafe.Pointer(olddelta)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Chdir(@string path)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Chdir)), 1L, uintptr(@unsafe.Pointer(_p0)), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Chmod(@string path, uint mode)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Chmod)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(mode), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Chown(@string path, long uid, long gid)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Chown)), 3L, uintptr(@unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Chroot(@string path)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Chroot)), 1L, uintptr(@unsafe.Pointer(_p0)), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Close(long fd)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Close)), 1L, uintptr(fd), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Dup(long fd)
        {
            long nfd = default;
            error err = default!;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Dup)), 1L, uintptr(fd), 0L, 0L, 0L, 0L, 0L);
            nfd = int(r0);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Fchdir(long fd)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Fchdir)), 1L, uintptr(fd), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Fchmod(long fd, uint mode)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Fchmod)), 2L, uintptr(fd), uintptr(mode), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Fchown(long fd, long uid, long gid)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Fchown)), 3L, uintptr(fd), uintptr(uid), uintptr(gid), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Fpathconf(long fd, long name)
        {
            long val = default;
            error err = default!;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Fpathconf)), 2L, uintptr(fd), uintptr(name), 0L, 0L, 0L, 0L);
            val = int(r0);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Fstat(long fd, ptr<Stat_t> _addr_stat)
        {
            error err = default!;
            ref Stat_t stat = ref _addr_stat.val;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Fstat)), 2L, uintptr(fd), uintptr(@unsafe.Pointer(stat)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Getdents(long fd, slice<byte> buf, ptr<System.UIntPtr> _addr_basep)
        {
            long n = default;
            error err = default!;
            ref System.UIntPtr basep = ref _addr_basep.val;

            ptr<byte> _p0;
            if (len(buf) > 0L)
            {
                _p0 = _addr_buf[0L];
            }

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Getdents)), 4L, uintptr(fd), uintptr(@unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(@unsafe.Pointer(basep)), 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static long Getgid()
        {
            long gid = default;

            var (r0, _, _) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Getgid)), 0L, 0L, 0L, 0L, 0L, 0L, 0L);
            gid = int(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static long Getpid()
        {
            long pid = default;

            var (r0, _, _) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Getpid)), 0L, 0L, 0L, 0L, 0L, 0L, 0L);
            pid = int(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static long Geteuid()
        {
            long euid = default;

            var (r0, _, _) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Geteuid)), 0L, 0L, 0L, 0L, 0L, 0L, 0L);
            euid = int(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static long Getegid()
        {
            long egid = default;

            var (r0, _, _) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Getegid)), 0L, 0L, 0L, 0L, 0L, 0L, 0L);
            egid = int(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static long Getppid()
        {
            long ppid = default;

            var (r0, _, _) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Getppid)), 0L, 0L, 0L, 0L, 0L, 0L, 0L);
            ppid = int(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Getpriority(long which, long who)
        {
            long n = default;
            error err = default!;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Getpriority)), 2L, uintptr(which), uintptr(who), 0L, 0L, 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Getrlimit(long which, ptr<Rlimit> _addr_lim)
        {
            error err = default!;
            ref Rlimit lim = ref _addr_lim.val;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Getrlimit)), 2L, uintptr(which), uintptr(@unsafe.Pointer(lim)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Gettimeofday(ptr<Timeval> _addr_tv)
        {
            error err = default!;
            ref Timeval tv = ref _addr_tv.val;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Gettimeofday)), 1L, uintptr(@unsafe.Pointer(tv)), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static long Getuid()
        {
            long uid = default;

            var (r0, _, _) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Getuid)), 0L, 0L, 0L, 0L, 0L, 0L, 0L);
            uid = int(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Kill(long pid, Signal signum)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Kill)), 2L, uintptr(pid), uintptr(signum), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Lchown(@string path, long uid, long gid)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Lchown)), 3L, uintptr(@unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Link(@string path, @string link)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            ptr<byte> _p1;
            _p1, err = BytePtrFromString(link);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Link)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(_p1)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Listen(long s, long backlog)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc___xnet_listen)), 2L, uintptr(s), uintptr(backlog), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Lstat(@string path, ptr<Stat_t> _addr_stat)
        {
            error err = default!;
            ref Stat_t stat = ref _addr_stat.val;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Lstat)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(stat)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Mkdir(@string path, uint mode)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Mkdir)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(mode), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Mknod(@string path, uint mode, long dev)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Mknod)), 3L, uintptr(@unsafe.Pointer(_p0)), uintptr(mode), uintptr(dev), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Nanosleep(ptr<Timespec> _addr_time, ptr<Timespec> _addr_leftover)
        {
            error err = default!;
            ref Timespec time = ref _addr_time.val;
            ref Timespec leftover = ref _addr_leftover.val;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Nanosleep)), 2L, uintptr(@unsafe.Pointer(time)), uintptr(@unsafe.Pointer(leftover)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Open(@string path, long mode, uint perm)
        {
            long fd = default;
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Open)), 3L, uintptr(@unsafe.Pointer(_p0)), uintptr(mode), uintptr(perm), 0L, 0L, 0L);
            fd = int(r0);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Pathconf(@string path, long name)
        {
            long val = default;
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Pathconf)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(name), 0L, 0L, 0L, 0L);
            val = int(r0);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Pread(long fd, slice<byte> p, long offset)
        {
            long n = default;
            error err = default!;

            ptr<byte> _p0;
            if (len(p) > 0L)
            {
                _p0 = _addr_p[0L];
            }

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Pread)), 4L, uintptr(fd), uintptr(@unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(offset), 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Pwrite(long fd, slice<byte> p, long offset)
        {
            long n = default;
            error err = default!;

            ptr<byte> _p0;
            if (len(p) > 0L)
            {
                _p0 = _addr_p[0L];
            }

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Pwrite)), 4L, uintptr(fd), uintptr(@unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(offset), 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) read(long fd, slice<byte> p)
        {
            long n = default;
            error err = default!;

            ptr<byte> _p0;
            if (len(p) > 0L)
            {
                _p0 = _addr_p[0L];
            }

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_read)), 3L, uintptr(fd), uintptr(@unsafe.Pointer(_p0)), uintptr(len(p)), 0L, 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Readlink(@string path, slice<byte> buf)
        {
            long n = default;
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            ptr<byte> _p1;
            if (len(buf) > 0L)
            {
                _p1 = _addr_buf[0L];
            }

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Readlink)), 3L, uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(_p1)), uintptr(len(buf)), 0L, 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Rename(@string from, @string to)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(from);
            if (err != null)
            {
                return ;
            }

            ptr<byte> _p1;
            _p1, err = BytePtrFromString(to);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Rename)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(_p1)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Rmdir(@string path)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Rmdir)), 1L, uintptr(@unsafe.Pointer(_p0)), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Seek(long fd, long offset, long whence)
        {
            long newoffset = default;
            error err = default!;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_lseek)), 3L, uintptr(fd), uintptr(offset), uintptr(whence), 0L, 0L, 0L);
            newoffset = int64(r0);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) sendfile(long outfd, long infd, ptr<long> _addr_offset, long count)
        {
            long written = default;
            error err = default!;
            ref long offset = ref _addr_offset.val;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_sendfile)), 4L, uintptr(outfd), uintptr(infd), uintptr(@unsafe.Pointer(offset)), uintptr(count), 0L, 0L);
            written = int(r0);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Setegid(long egid)
        {
            error err = default!;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Setegid)), 1L, uintptr(egid), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Seteuid(long euid)
        {
            error err = default!;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Seteuid)), 1L, uintptr(euid), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Setgid(long gid)
        {
            error err = default!;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Setgid)), 1L, uintptr(gid), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Setpgid(long pid, long pgid)
        {
            error err = default!;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Setpgid)), 2L, uintptr(pid), uintptr(pgid), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Setpriority(long which, long who, long prio)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Setpriority)), 3L, uintptr(which), uintptr(who), uintptr(prio), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Setregid(long rgid, long egid)
        {
            error err = default!;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Setregid)), 2L, uintptr(rgid), uintptr(egid), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Setreuid(long ruid, long euid)
        {
            error err = default!;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Setreuid)), 2L, uintptr(ruid), uintptr(euid), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Setrlimit(long which, ptr<Rlimit> _addr_lim)
        {
            error err = default!;
            ref Rlimit lim = ref _addr_lim.val;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Setrlimit)), 2L, uintptr(which), uintptr(@unsafe.Pointer(lim)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Setsid()
        {
            long pid = default;
            error err = default!;

            var (r0, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Setsid)), 0L, 0L, 0L, 0L, 0L, 0L, 0L);
            pid = int(r0);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Setuid(long uid)
        {
            error err = default!;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Setuid)), 1L, uintptr(uid), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Shutdown(long s, long how)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_shutdown)), 2L, uintptr(s), uintptr(how), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Stat(@string path, ptr<Stat_t> _addr_stat)
        {
            error err = default!;
            ref Stat_t stat = ref _addr_stat.val;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Stat)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(stat)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Symlink(@string path, @string link)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            ptr<byte> _p1;
            _p1, err = BytePtrFromString(link);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Symlink)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(_p1)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Sync()
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Sync)), 0L, 0L, 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Truncate(@string path, long length)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Truncate)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(length), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Fsync(long fd)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Fsync)), 1L, uintptr(fd), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Ftruncate(long fd, long length)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Ftruncate)), 2L, uintptr(fd), uintptr(length), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static long Umask(long newmask)
        {
            long oldmask = default;

            var (r0, _, _) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Umask)), 1L, uintptr(newmask), 0L, 0L, 0L, 0L, 0L);
            oldmask = int(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Unlink(@string path)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_Unlink)), 1L, uintptr(@unsafe.Pointer(_p0)), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error utimes(@string path, ptr<array<Timeval>> _addr_times)
        {
            error err = default!;
            ref array<Timeval> times = ref _addr_times.val;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_utimes)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(times)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error bind(long s, unsafe.Pointer addr, _Socklen addrlen)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc___xnet_bind)), 3L, uintptr(s), uintptr(addr), uintptr(addrlen), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error connect(long s, unsafe.Pointer addr, _Socklen addrlen)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc___xnet_connect)), 3L, uintptr(s), uintptr(addr), uintptr(addrlen), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (System.UIntPtr, error) mmap(System.UIntPtr addr, System.UIntPtr length, long prot, long flag, long fd, long pos)
        {
            System.UIntPtr ret = default;
            error err = default!;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_mmap)), 6L, uintptr(addr), uintptr(length), uintptr(prot), uintptr(flag), uintptr(fd), uintptr(pos));
            ret = uintptr(r0);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error munmap(System.UIntPtr addr, System.UIntPtr length)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_munmap)), 2L, uintptr(addr), uintptr(length), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error sendto(long s, slice<byte> buf, long flags, unsafe.Pointer to, _Socklen addrlen)
        {
            error err = default!;

            ptr<byte> _p0;
            if (len(buf) > 0L)
            {
                _p0 = _addr_buf[0L];
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc___xnet_sendto)), 6L, uintptr(s), uintptr(@unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(flags), uintptr(to), uintptr(addrlen));
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) socket(long domain, long typ, long proto)
        {
            long fd = default;
            error err = default!;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc___xnet_socket)), 3L, uintptr(domain), uintptr(typ), uintptr(proto), 0L, 0L, 0L);
            fd = int(r0);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error socketpair(long domain, long typ, long proto, ptr<array<int>> _addr_fd)
        {
            error err = default!;
            ref array<int> fd = ref _addr_fd.val;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_libc___xnet_socketpair)), 4L, uintptr(domain), uintptr(typ), uintptr(proto), uintptr(@unsafe.Pointer(fd)), 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) write(long fd, slice<byte> p)
        {
            long n = default;
            error err = default!;

            ptr<byte> _p0;
            if (len(p) > 0L)
            {
                _p0 = _addr_p[0L];
            }

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_write)), 3L, uintptr(fd), uintptr(@unsafe.Pointer(_p0)), uintptr(len(p)), 0L, 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error getsockopt(long s, long level, long name, unsafe.Pointer val, ptr<_Socklen> _addr_vallen)
        {
            error err = default!;
            ref _Socklen vallen = ref _addr_vallen.val;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc___xnet_getsockopt)), 5L, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(@unsafe.Pointer(vallen)), 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error getpeername(long fd, ptr<RawSockaddrAny> _addr_rsa, ptr<_Socklen> _addr_addrlen)
        {
            error err = default!;
            ref RawSockaddrAny rsa = ref _addr_rsa.val;
            ref _Socklen addrlen = ref _addr_addrlen.val;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_libc_getpeername)), 3L, uintptr(fd), uintptr(@unsafe.Pointer(rsa)), uintptr(@unsafe.Pointer(addrlen)), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error getsockname(long fd, ptr<RawSockaddrAny> _addr_rsa, ptr<_Socklen> _addr_addrlen)
        {
            error err = default!;
            ref RawSockaddrAny rsa = ref _addr_rsa.val;
            ref _Socklen addrlen = ref _addr_addrlen.val;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_getsockname)), 3L, uintptr(fd), uintptr(@unsafe.Pointer(rsa)), uintptr(@unsafe.Pointer(addrlen)), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error setsockopt(long s, long level, long name, unsafe.Pointer val, System.UIntPtr vallen)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_setsockopt)), 5L, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(vallen), 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) recvfrom(long fd, slice<byte> p, long flags, ptr<RawSockaddrAny> _addr_from, ptr<_Socklen> _addr_fromlen)
        {
            long n = default;
            error err = default!;
            ref RawSockaddrAny from = ref _addr_from.val;
            ref _Socklen fromlen = ref _addr_fromlen.val;

            ptr<byte> _p0;
            if (len(p) > 0L)
            {
                _p0 = _addr_p[0L];
            }

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_recvfrom)), 6L, uintptr(fd), uintptr(@unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(flags), uintptr(@unsafe.Pointer(from)), uintptr(@unsafe.Pointer(fromlen)));
            n = int(r0);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) recvmsg(long s, ptr<Msghdr> _addr_msg, long flags)
        {
            long n = default;
            error err = default!;
            ref Msghdr msg = ref _addr_msg.val;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc___xnet_recvmsg)), 3L, uintptr(s), uintptr(@unsafe.Pointer(msg)), uintptr(flags), 0L, 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (unsafe.Pointer, error) getexecname()
        {
            unsafe.Pointer path = default;
            error err = default!;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_getexecname)), 0L, 0L, 0L, 0L, 0L, 0L, 0L);
            path = @unsafe.Pointer(r0);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error utimensat(long dirfd, @string path, ptr<array<Timespec>> _addr_times, long flag)
        {
            error err = default!;
            ref array<Timespec> times = ref _addr_times.val;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_libc_utimensat)), 4L, uintptr(dirfd), uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(times)), uintptr(flag), 0L, 0L);
            if (e1 != 0L)
            {
                err = errnoErr(e1);
            }

            return ;

        }
    }
}
