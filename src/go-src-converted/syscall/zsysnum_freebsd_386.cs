// mksysnum_freebsd.pl
// Code generated by the command above; DO NOT EDIT.

// +build 386,freebsd

// package syscall -- go2cs converted at 2020 October 09 05:04:20 UTC
// import "syscall" ==> using syscall = go.syscall_package
// Original source: C:\Go\src\syscall\zsysnum_freebsd_386.go

using static go.builtin;

namespace go
{
    public static partial class syscall_package
    {
 
        // SYS_NOSYS = 0;  // { int nosys(void); } syscall nosys_args int
        public static readonly long SYS_EXIT = (long)1L; // { void sys_exit(int rval); } exit \
        public static readonly long SYS_FORK = (long)2L; // { int fork(void); }
        public static readonly long SYS_READ = (long)3L; // { ssize_t read(int fd, void *buf, \
        public static readonly long SYS_WRITE = (long)4L; // { ssize_t write(int fd, const void *buf, \
        public static readonly long SYS_OPEN = (long)5L; // { int open(char *path, int flags, int mode); }
        public static readonly long SYS_CLOSE = (long)6L; // { int close(int fd); }
        public static readonly long SYS_WAIT4 = (long)7L; // { int wait4(int pid, int *status, \
        public static readonly long SYS_LINK = (long)9L; // { int link(char *path, char *link); }
        public static readonly long SYS_UNLINK = (long)10L; // { int unlink(char *path); }
        public static readonly long SYS_CHDIR = (long)12L; // { int chdir(char *path); }
        public static readonly long SYS_FCHDIR = (long)13L; // { int fchdir(int fd); }
        public static readonly long SYS_MKNOD = (long)14L; // { int mknod(char *path, int mode, int dev); }
        public static readonly long SYS_CHMOD = (long)15L; // { int chmod(char *path, int mode); }
        public static readonly long SYS_CHOWN = (long)16L; // { int chown(char *path, int uid, int gid); }
        public static readonly long SYS_OBREAK = (long)17L; // { int obreak(char *nsize); } break \
        public static readonly long SYS_GETPID = (long)20L; // { pid_t getpid(void); }
        public static readonly long SYS_MOUNT = (long)21L; // { int mount(char *type, char *path, \
        public static readonly long SYS_UNMOUNT = (long)22L; // { int unmount(char *path, int flags); }
        public static readonly long SYS_SETUID = (long)23L; // { int setuid(uid_t uid); }
        public static readonly long SYS_GETUID = (long)24L; // { uid_t getuid(void); }
        public static readonly long SYS_GETEUID = (long)25L; // { uid_t geteuid(void); }
        public static readonly long SYS_PTRACE = (long)26L; // { int ptrace(int req, pid_t pid, \
        public static readonly long SYS_RECVMSG = (long)27L; // { int recvmsg(int s, struct msghdr *msg, \
        public static readonly long SYS_SENDMSG = (long)28L; // { int sendmsg(int s, struct msghdr *msg, \
        public static readonly long SYS_RECVFROM = (long)29L; // { int recvfrom(int s, caddr_t buf, \
        public static readonly long SYS_ACCEPT = (long)30L; // { int accept(int s, \
        public static readonly long SYS_GETPEERNAME = (long)31L; // { int getpeername(int fdes, \
        public static readonly long SYS_GETSOCKNAME = (long)32L; // { int getsockname(int fdes, \
        public static readonly long SYS_ACCESS = (long)33L; // { int access(char *path, int amode); }
        public static readonly long SYS_CHFLAGS = (long)34L; // { int chflags(const char *path, u_long flags); }
        public static readonly long SYS_FCHFLAGS = (long)35L; // { int fchflags(int fd, u_long flags); }
        public static readonly long SYS_SYNC = (long)36L; // { int sync(void); }
        public static readonly long SYS_KILL = (long)37L; // { int kill(int pid, int signum); }
        public static readonly long SYS_GETPPID = (long)39L; // { pid_t getppid(void); }
        public static readonly long SYS_DUP = (long)41L; // { int dup(u_int fd); }
        public static readonly long SYS_PIPE = (long)42L; // { int pipe(void); }
        public static readonly long SYS_GETEGID = (long)43L; // { gid_t getegid(void); }
        public static readonly long SYS_PROFIL = (long)44L; // { int profil(caddr_t samples, size_t size, \
        public static readonly long SYS_KTRACE = (long)45L; // { int ktrace(const char *fname, int ops, \
        public static readonly long SYS_GETGID = (long)47L; // { gid_t getgid(void); }
        public static readonly long SYS_GETLOGIN = (long)49L; // { int getlogin(char *namebuf, u_int \
        public static readonly long SYS_SETLOGIN = (long)50L; // { int setlogin(char *namebuf); }
        public static readonly long SYS_ACCT = (long)51L; // { int acct(char *path); }
        public static readonly long SYS_SIGALTSTACK = (long)53L; // { int sigaltstack(stack_t *ss, \
        public static readonly long SYS_IOCTL = (long)54L; // { int ioctl(int fd, u_long com, \
        public static readonly long SYS_REBOOT = (long)55L; // { int reboot(int opt); }
        public static readonly long SYS_REVOKE = (long)56L; // { int revoke(char *path); }
        public static readonly long SYS_SYMLINK = (long)57L; // { int symlink(char *path, char *link); }
        public static readonly long SYS_READLINK = (long)58L; // { ssize_t readlink(char *path, char *buf, \
        public static readonly long SYS_EXECVE = (long)59L; // { int execve(char *fname, char **argv, \
        public static readonly long SYS_UMASK = (long)60L; // { int umask(int newmask); } umask umask_args \
        public static readonly long SYS_CHROOT = (long)61L; // { int chroot(char *path); }
        public static readonly long SYS_MSYNC = (long)65L; // { int msync(void *addr, size_t len, \
        public static readonly long SYS_VFORK = (long)66L; // { int vfork(void); }
        public static readonly long SYS_SBRK = (long)69L; // { int sbrk(int incr); }
        public static readonly long SYS_SSTK = (long)70L; // { int sstk(int incr); }
        public static readonly long SYS_OVADVISE = (long)72L; // { int ovadvise(int anom); } vadvise \
        public static readonly long SYS_MUNMAP = (long)73L; // { int munmap(void *addr, size_t len); }
        public static readonly long SYS_MPROTECT = (long)74L; // { int mprotect(const void *addr, size_t len, \
        public static readonly long SYS_MADVISE = (long)75L; // { int madvise(void *addr, size_t len, \
        public static readonly long SYS_MINCORE = (long)78L; // { int mincore(const void *addr, size_t len, \
        public static readonly long SYS_GETGROUPS = (long)79L; // { int getgroups(u_int gidsetsize, \
        public static readonly long SYS_SETGROUPS = (long)80L; // { int setgroups(u_int gidsetsize, \
        public static readonly long SYS_GETPGRP = (long)81L; // { int getpgrp(void); }
        public static readonly long SYS_SETPGID = (long)82L; // { int setpgid(int pid, int pgid); }
        public static readonly long SYS_SETITIMER = (long)83L; // { int setitimer(u_int which, struct \
        public static readonly long SYS_SWAPON = (long)85L; // { int swapon(char *name); }
        public static readonly long SYS_GETITIMER = (long)86L; // { int getitimer(u_int which, \
        public static readonly long SYS_GETDTABLESIZE = (long)89L; // { int getdtablesize(void); }
        public static readonly long SYS_DUP2 = (long)90L; // { int dup2(u_int from, u_int to); }
        public static readonly long SYS_FCNTL = (long)92L; // { int fcntl(int fd, int cmd, long arg); }
        public static readonly long SYS_SELECT = (long)93L; // { int select(int nd, fd_set *in, fd_set *ou, \
        public static readonly long SYS_FSYNC = (long)95L; // { int fsync(int fd); }
        public static readonly long SYS_SETPRIORITY = (long)96L; // { int setpriority(int which, int who, \
        public static readonly long SYS_SOCKET = (long)97L; // { int socket(int domain, int type, \
        public static readonly long SYS_CONNECT = (long)98L; // { int connect(int s, caddr_t name, \
        public static readonly long SYS_GETPRIORITY = (long)100L; // { int getpriority(int which, int who); }
        public static readonly long SYS_BIND = (long)104L; // { int bind(int s, caddr_t name, \
        public static readonly long SYS_SETSOCKOPT = (long)105L; // { int setsockopt(int s, int level, int name, \
        public static readonly long SYS_LISTEN = (long)106L; // { int listen(int s, int backlog); }
        public static readonly long SYS_GETTIMEOFDAY = (long)116L; // { int gettimeofday(struct timeval *tp, \
        public static readonly long SYS_GETRUSAGE = (long)117L; // { int getrusage(int who, \
        public static readonly long SYS_GETSOCKOPT = (long)118L; // { int getsockopt(int s, int level, int name, \
        public static readonly long SYS_READV = (long)120L; // { int readv(int fd, struct iovec *iovp, \
        public static readonly long SYS_WRITEV = (long)121L; // { int writev(int fd, struct iovec *iovp, \
        public static readonly long SYS_SETTIMEOFDAY = (long)122L; // { int settimeofday(struct timeval *tv, \
        public static readonly long SYS_FCHOWN = (long)123L; // { int fchown(int fd, int uid, int gid); }
        public static readonly long SYS_FCHMOD = (long)124L; // { int fchmod(int fd, int mode); }
        public static readonly long SYS_SETREUID = (long)126L; // { int setreuid(int ruid, int euid); }
        public static readonly long SYS_SETREGID = (long)127L; // { int setregid(int rgid, int egid); }
        public static readonly long SYS_RENAME = (long)128L; // { int rename(char *from, char *to); }
        public static readonly long SYS_FLOCK = (long)131L; // { int flock(int fd, int how); }
        public static readonly long SYS_MKFIFO = (long)132L; // { int mkfifo(char *path, int mode); }
        public static readonly long SYS_SENDTO = (long)133L; // { int sendto(int s, caddr_t buf, size_t len, \
        public static readonly long SYS_SHUTDOWN = (long)134L; // { int shutdown(int s, int how); }
        public static readonly long SYS_SOCKETPAIR = (long)135L; // { int socketpair(int domain, int type, \
        public static readonly long SYS_MKDIR = (long)136L; // { int mkdir(char *path, int mode); }
        public static readonly long SYS_RMDIR = (long)137L; // { int rmdir(char *path); }
        public static readonly long SYS_UTIMES = (long)138L; // { int utimes(char *path, \
        public static readonly long SYS_ADJTIME = (long)140L; // { int adjtime(struct timeval *delta, \
        public static readonly long SYS_SETSID = (long)147L; // { int setsid(void); }
        public static readonly long SYS_QUOTACTL = (long)148L; // { int quotactl(char *path, int cmd, int uid, \
        public static readonly long SYS_LGETFH = (long)160L; // { int lgetfh(char *fname, \
        public static readonly long SYS_GETFH = (long)161L; // { int getfh(char *fname, \
        public static readonly long SYS_SYSARCH = (long)165L; // { int sysarch(int op, char *parms); }
        public static readonly long SYS_RTPRIO = (long)166L; // { int rtprio(int function, pid_t pid, \
        public static readonly long SYS_FREEBSD6_PREAD = (long)173L; // { ssize_t freebsd6_pread(int fd, void *buf, \
        public static readonly long SYS_FREEBSD6_PWRITE = (long)174L; // { ssize_t freebsd6_pwrite(int fd, \
        public static readonly long SYS_SETFIB = (long)175L; // { int setfib(int fibnum); }
        public static readonly long SYS_NTP_ADJTIME = (long)176L; // { int ntp_adjtime(struct timex *tp); }
        public static readonly long SYS_SETGID = (long)181L; // { int setgid(gid_t gid); }
        public static readonly long SYS_SETEGID = (long)182L; // { int setegid(gid_t egid); }
        public static readonly long SYS_SETEUID = (long)183L; // { int seteuid(uid_t euid); }
        public static readonly long SYS_STAT = (long)188L; // { int stat(char *path, struct stat *ub); }
        public static readonly long SYS_FSTAT = (long)189L; // { int fstat(int fd, struct stat *sb); }
        public static readonly long SYS_LSTAT = (long)190L; // { int lstat(char *path, struct stat *ub); }
        public static readonly long SYS_PATHCONF = (long)191L; // { int pathconf(char *path, int name); }
        public static readonly long SYS_FPATHCONF = (long)192L; // { int fpathconf(int fd, int name); }
        public static readonly long SYS_GETRLIMIT = (long)194L; // { int getrlimit(u_int which, \
        public static readonly long SYS_SETRLIMIT = (long)195L; // { int setrlimit(u_int which, \
        public static readonly long SYS_GETDIRENTRIES = (long)196L; // { int getdirentries(int fd, char *buf, \
        public static readonly long SYS_FREEBSD6_MMAP = (long)197L; // { caddr_t freebsd6_mmap(caddr_t addr, \
        public static readonly long SYS_FREEBSD6_LSEEK = (long)199L; // { off_t freebsd6_lseek(int fd, int pad, \
        public static readonly long SYS_FREEBSD6_TRUNCATE = (long)200L; // { int freebsd6_truncate(char *path, int pad, \
        public static readonly long SYS_FREEBSD6_FTRUNCATE = (long)201L; // { int freebsd6_ftruncate(int fd, int pad, \
        public static readonly long SYS___SYSCTL = (long)202L; // { int __sysctl(int *name, u_int namelen, \
        public static readonly long SYS_MLOCK = (long)203L; // { int mlock(const void *addr, size_t len); }
        public static readonly long SYS_MUNLOCK = (long)204L; // { int munlock(const void *addr, size_t len); }
        public static readonly long SYS_UNDELETE = (long)205L; // { int undelete(char *path); }
        public static readonly long SYS_FUTIMES = (long)206L; // { int futimes(int fd, struct timeval *tptr); }
        public static readonly long SYS_GETPGID = (long)207L; // { int getpgid(pid_t pid); }
        public static readonly long SYS_POLL = (long)209L; // { int poll(struct pollfd *fds, u_int nfds, \
        public static readonly long SYS_CLOCK_GETTIME = (long)232L; // { int clock_gettime(clockid_t clock_id, \
        public static readonly long SYS_CLOCK_SETTIME = (long)233L; // { int clock_settime( \
        public static readonly long SYS_CLOCK_GETRES = (long)234L; // { int clock_getres(clockid_t clock_id, \
        public static readonly long SYS_KTIMER_CREATE = (long)235L; // { int ktimer_create(clockid_t clock_id, \
        public static readonly long SYS_KTIMER_DELETE = (long)236L; // { int ktimer_delete(int timerid); }
        public static readonly long SYS_KTIMER_SETTIME = (long)237L; // { int ktimer_settime(int timerid, int flags, \
        public static readonly long SYS_KTIMER_GETTIME = (long)238L; // { int ktimer_gettime(int timerid, struct \
        public static readonly long SYS_KTIMER_GETOVERRUN = (long)239L; // { int ktimer_getoverrun(int timerid); }
        public static readonly long SYS_NANOSLEEP = (long)240L; // { int nanosleep(const struct timespec *rqtp, \
        public static readonly long SYS_FFCLOCK_GETCOUNTER = (long)241L; // { int ffclock_getcounter(ffcounter *ffcount); }
        public static readonly long SYS_FFCLOCK_SETESTIMATE = (long)242L; // { int ffclock_setestimate( \
        public static readonly long SYS_FFCLOCK_GETESTIMATE = (long)243L; // { int ffclock_getestimate( \
        public static readonly long SYS_CLOCK_GETCPUCLOCKID2 = (long)247L; // { int clock_getcpuclockid2(id_t id,\
        public static readonly long SYS_NTP_GETTIME = (long)248L; // { int ntp_gettime(struct ntptimeval *ntvp); }
        public static readonly long SYS_MINHERIT = (long)250L; // { int minherit(void *addr, size_t len, \
        public static readonly long SYS_RFORK = (long)251L; // { int rfork(int flags); }
        public static readonly long SYS_OPENBSD_POLL = (long)252L; // { int openbsd_poll(struct pollfd *fds, \
        public static readonly long SYS_ISSETUGID = (long)253L; // { int issetugid(void); }
        public static readonly long SYS_LCHOWN = (long)254L; // { int lchown(char *path, int uid, int gid); }
        public static readonly long SYS_GETDENTS = (long)272L; // { int getdents(int fd, char *buf, \
        public static readonly long SYS_LCHMOD = (long)274L; // { int lchmod(char *path, mode_t mode); }
        public static readonly long SYS_LUTIMES = (long)276L; // { int lutimes(char *path, \
        public static readonly long SYS_NSTAT = (long)278L; // { int nstat(char *path, struct nstat *ub); }
        public static readonly long SYS_NFSTAT = (long)279L; // { int nfstat(int fd, struct nstat *sb); }
        public static readonly long SYS_NLSTAT = (long)280L; // { int nlstat(char *path, struct nstat *ub); }
        public static readonly long SYS_PREADV = (long)289L; // { ssize_t preadv(int fd, struct iovec *iovp, \
        public static readonly long SYS_PWRITEV = (long)290L; // { ssize_t pwritev(int fd, struct iovec *iovp, \
        public static readonly long SYS_FHOPEN = (long)298L; // { int fhopen(const struct fhandle *u_fhp, \
        public static readonly long SYS_FHSTAT = (long)299L; // { int fhstat(const struct fhandle *u_fhp, \
        public static readonly long SYS_MODNEXT = (long)300L; // { int modnext(int modid); }
        public static readonly long SYS_MODSTAT = (long)301L; // { int modstat(int modid, \
        public static readonly long SYS_MODFNEXT = (long)302L; // { int modfnext(int modid); }
        public static readonly long SYS_MODFIND = (long)303L; // { int modfind(const char *name); }
        public static readonly long SYS_KLDLOAD = (long)304L; // { int kldload(const char *file); }
        public static readonly long SYS_KLDUNLOAD = (long)305L; // { int kldunload(int fileid); }
        public static readonly long SYS_KLDFIND = (long)306L; // { int kldfind(const char *file); }
        public static readonly long SYS_KLDNEXT = (long)307L; // { int kldnext(int fileid); }
        public static readonly long SYS_KLDSTAT = (long)308L; // { int kldstat(int fileid, struct \
        public static readonly long SYS_KLDFIRSTMOD = (long)309L; // { int kldfirstmod(int fileid); }
        public static readonly long SYS_GETSID = (long)310L; // { int getsid(pid_t pid); }
        public static readonly long SYS_SETRESUID = (long)311L; // { int setresuid(uid_t ruid, uid_t euid, \
        public static readonly long SYS_SETRESGID = (long)312L; // { int setresgid(gid_t rgid, gid_t egid, \
        public static readonly long SYS_YIELD = (long)321L; // { int yield(void); }
        public static readonly long SYS_MLOCKALL = (long)324L; // { int mlockall(int how); }
        public static readonly long SYS_MUNLOCKALL = (long)325L; // { int munlockall(void); }
        public static readonly long SYS___GETCWD = (long)326L; // { int __getcwd(u_char *buf, u_int buflen); }
        public static readonly long SYS_SCHED_SETPARAM = (long)327L; // { int sched_setparam (pid_t pid, \
        public static readonly long SYS_SCHED_GETPARAM = (long)328L; // { int sched_getparam (pid_t pid, struct \
        public static readonly long SYS_SCHED_SETSCHEDULER = (long)329L; // { int sched_setscheduler (pid_t pid, int \
        public static readonly long SYS_SCHED_GETSCHEDULER = (long)330L; // { int sched_getscheduler (pid_t pid); }
        public static readonly long SYS_SCHED_YIELD = (long)331L; // { int sched_yield (void); }
        public static readonly long SYS_SCHED_GET_PRIORITY_MAX = (long)332L; // { int sched_get_priority_max (int policy); }
        public static readonly long SYS_SCHED_GET_PRIORITY_MIN = (long)333L; // { int sched_get_priority_min (int policy); }
        public static readonly long SYS_SCHED_RR_GET_INTERVAL = (long)334L; // { int sched_rr_get_interval (pid_t pid, \
        public static readonly long SYS_UTRACE = (long)335L; // { int utrace(const void *addr, size_t len); }
        public static readonly long SYS_KLDSYM = (long)337L; // { int kldsym(int fileid, int cmd, \
        public static readonly long SYS_JAIL = (long)338L; // { int jail(struct jail *jail); }
        public static readonly long SYS_SIGPROCMASK = (long)340L; // { int sigprocmask(int how, \
        public static readonly long SYS_SIGSUSPEND = (long)341L; // { int sigsuspend(const sigset_t *sigmask); }
        public static readonly long SYS_SIGPENDING = (long)343L; // { int sigpending(sigset_t *set); }
        public static readonly long SYS_SIGTIMEDWAIT = (long)345L; // { int sigtimedwait(const sigset_t *set, \
        public static readonly long SYS_SIGWAITINFO = (long)346L; // { int sigwaitinfo(const sigset_t *set, \
        public static readonly long SYS___ACL_GET_FILE = (long)347L; // { int __acl_get_file(const char *path, \
        public static readonly long SYS___ACL_SET_FILE = (long)348L; // { int __acl_set_file(const char *path, \
        public static readonly long SYS___ACL_GET_FD = (long)349L; // { int __acl_get_fd(int filedes, \
        public static readonly long SYS___ACL_SET_FD = (long)350L; // { int __acl_set_fd(int filedes, \
        public static readonly long SYS___ACL_DELETE_FILE = (long)351L; // { int __acl_delete_file(const char *path, \
        public static readonly long SYS___ACL_DELETE_FD = (long)352L; // { int __acl_delete_fd(int filedes, \
        public static readonly long SYS___ACL_ACLCHECK_FILE = (long)353L; // { int __acl_aclcheck_file(const char *path, \
        public static readonly long SYS___ACL_ACLCHECK_FD = (long)354L; // { int __acl_aclcheck_fd(int filedes, \
        public static readonly long SYS_EXTATTRCTL = (long)355L; // { int extattrctl(const char *path, int cmd, \
        public static readonly long SYS_EXTATTR_SET_FILE = (long)356L; // { ssize_t extattr_set_file( \
        public static readonly long SYS_EXTATTR_GET_FILE = (long)357L; // { ssize_t extattr_get_file( \
        public static readonly long SYS_EXTATTR_DELETE_FILE = (long)358L; // { int extattr_delete_file(const char *path, \
        public static readonly long SYS_GETRESUID = (long)360L; // { int getresuid(uid_t *ruid, uid_t *euid, \
        public static readonly long SYS_GETRESGID = (long)361L; // { int getresgid(gid_t *rgid, gid_t *egid, \
        public static readonly long SYS_KQUEUE = (long)362L; // { int kqueue(void); }
        public static readonly long SYS_KEVENT = (long)363L; // { int kevent(int fd, \
        public static readonly long SYS_EXTATTR_SET_FD = (long)371L; // { ssize_t extattr_set_fd(int fd, \
        public static readonly long SYS_EXTATTR_GET_FD = (long)372L; // { ssize_t extattr_get_fd(int fd, \
        public static readonly long SYS_EXTATTR_DELETE_FD = (long)373L; // { int extattr_delete_fd(int fd, \
        public static readonly long SYS___SETUGID = (long)374L; // { int __setugid(int flag); }
        public static readonly long SYS_EACCESS = (long)376L; // { int eaccess(char *path, int amode); }
        public static readonly long SYS_NMOUNT = (long)378L; // { int nmount(struct iovec *iovp, \
        public static readonly long SYS___MAC_GET_PROC = (long)384L; // { int __mac_get_proc(struct mac *mac_p); }
        public static readonly long SYS___MAC_SET_PROC = (long)385L; // { int __mac_set_proc(struct mac *mac_p); }
        public static readonly long SYS___MAC_GET_FD = (long)386L; // { int __mac_get_fd(int fd, \
        public static readonly long SYS___MAC_GET_FILE = (long)387L; // { int __mac_get_file(const char *path_p, \
        public static readonly long SYS___MAC_SET_FD = (long)388L; // { int __mac_set_fd(int fd, \
        public static readonly long SYS___MAC_SET_FILE = (long)389L; // { int __mac_set_file(const char *path_p, \
        public static readonly long SYS_KENV = (long)390L; // { int kenv(int what, const char *name, \
        public static readonly long SYS_LCHFLAGS = (long)391L; // { int lchflags(const char *path, \
        public static readonly long SYS_UUIDGEN = (long)392L; // { int uuidgen(struct uuid *store, \
        public static readonly long SYS_SENDFILE = (long)393L; // { int sendfile(int fd, int s, off_t offset, \
        public static readonly long SYS_MAC_SYSCALL = (long)394L; // { int mac_syscall(const char *policy, \
        public static readonly long SYS_GETFSSTAT = (long)395L; // { int getfsstat(struct statfs *buf, \
        public static readonly long SYS_STATFS = (long)396L; // { int statfs(char *path, \
        public static readonly long SYS_FSTATFS = (long)397L; // { int fstatfs(int fd, struct statfs *buf); }
        public static readonly long SYS_FHSTATFS = (long)398L; // { int fhstatfs(const struct fhandle *u_fhp, \
        public static readonly long SYS___MAC_GET_PID = (long)409L; // { int __mac_get_pid(pid_t pid, \
        public static readonly long SYS___MAC_GET_LINK = (long)410L; // { int __mac_get_link(const char *path_p, \
        public static readonly long SYS___MAC_SET_LINK = (long)411L; // { int __mac_set_link(const char *path_p, \
        public static readonly long SYS_EXTATTR_SET_LINK = (long)412L; // { ssize_t extattr_set_link( \
        public static readonly long SYS_EXTATTR_GET_LINK = (long)413L; // { ssize_t extattr_get_link( \
        public static readonly long SYS_EXTATTR_DELETE_LINK = (long)414L; // { int extattr_delete_link( \
        public static readonly long SYS___MAC_EXECVE = (long)415L; // { int __mac_execve(char *fname, char **argv, \
        public static readonly long SYS_SIGACTION = (long)416L; // { int sigaction(int sig, \
        public static readonly long SYS_SIGRETURN = (long)417L; // { int sigreturn( \
        public static readonly long SYS_GETCONTEXT = (long)421L; // { int getcontext(struct __ucontext *ucp); }
        public static readonly long SYS_SETCONTEXT = (long)422L; // { int setcontext( \
        public static readonly long SYS_SWAPCONTEXT = (long)423L; // { int swapcontext(struct __ucontext *oucp, \
        public static readonly long SYS_SWAPOFF = (long)424L; // { int swapoff(const char *name); }
        public static readonly long SYS___ACL_GET_LINK = (long)425L; // { int __acl_get_link(const char *path, \
        public static readonly long SYS___ACL_SET_LINK = (long)426L; // { int __acl_set_link(const char *path, \
        public static readonly long SYS___ACL_DELETE_LINK = (long)427L; // { int __acl_delete_link(const char *path, \
        public static readonly long SYS___ACL_ACLCHECK_LINK = (long)428L; // { int __acl_aclcheck_link(const char *path, \
        public static readonly long SYS_SIGWAIT = (long)429L; // { int sigwait(const sigset_t *set, \
        public static readonly long SYS_THR_CREATE = (long)430L; // { int thr_create(ucontext_t *ctx, long *id, \
        public static readonly long SYS_THR_EXIT = (long)431L; // { void thr_exit(long *state); }
        public static readonly long SYS_THR_SELF = (long)432L; // { int thr_self(long *id); }
        public static readonly long SYS_THR_KILL = (long)433L; // { int thr_kill(long id, int sig); }
        public static readonly long SYS__UMTX_LOCK = (long)434L; // { int _umtx_lock(struct umtx *umtx); }
        public static readonly long SYS__UMTX_UNLOCK = (long)435L; // { int _umtx_unlock(struct umtx *umtx); }
        public static readonly long SYS_JAIL_ATTACH = (long)436L; // { int jail_attach(int jid); }
        public static readonly long SYS_EXTATTR_LIST_FD = (long)437L; // { ssize_t extattr_list_fd(int fd, \
        public static readonly long SYS_EXTATTR_LIST_FILE = (long)438L; // { ssize_t extattr_list_file( \
        public static readonly long SYS_EXTATTR_LIST_LINK = (long)439L; // { ssize_t extattr_list_link( \
        public static readonly long SYS_THR_SUSPEND = (long)442L; // { int thr_suspend( \
        public static readonly long SYS_THR_WAKE = (long)443L; // { int thr_wake(long id); }
        public static readonly long SYS_KLDUNLOADF = (long)444L; // { int kldunloadf(int fileid, int flags); }
        public static readonly long SYS_AUDIT = (long)445L; // { int audit(const void *record, \
        public static readonly long SYS_AUDITON = (long)446L; // { int auditon(int cmd, void *data, \
        public static readonly long SYS_GETAUID = (long)447L; // { int getauid(uid_t *auid); }
        public static readonly long SYS_SETAUID = (long)448L; // { int setauid(uid_t *auid); }
        public static readonly long SYS_GETAUDIT = (long)449L; // { int getaudit(struct auditinfo *auditinfo); }
        public static readonly long SYS_SETAUDIT = (long)450L; // { int setaudit(struct auditinfo *auditinfo); }
        public static readonly long SYS_GETAUDIT_ADDR = (long)451L; // { int getaudit_addr( \
        public static readonly long SYS_SETAUDIT_ADDR = (long)452L; // { int setaudit_addr( \
        public static readonly long SYS_AUDITCTL = (long)453L; // { int auditctl(char *path); }
        public static readonly long SYS__UMTX_OP = (long)454L; // { int _umtx_op(void *obj, int op, \
        public static readonly long SYS_THR_NEW = (long)455L; // { int thr_new(struct thr_param *param, \
        public static readonly long SYS_SIGQUEUE = (long)456L; // { int sigqueue(pid_t pid, int signum, void *value); }
        public static readonly long SYS_ABORT2 = (long)463L; // { int abort2(const char *why, int nargs, void **args); }
        public static readonly long SYS_THR_SET_NAME = (long)464L; // { int thr_set_name(long id, const char *name); }
        public static readonly long SYS_RTPRIO_THREAD = (long)466L; // { int rtprio_thread(int function, \
        public static readonly long SYS_SCTP_PEELOFF = (long)471L; // { int sctp_peeloff(int sd, uint32_t name); }
        public static readonly long SYS_SCTP_GENERIC_SENDMSG = (long)472L; // { int sctp_generic_sendmsg(int sd, caddr_t msg, int mlen, \
        public static readonly long SYS_SCTP_GENERIC_SENDMSG_IOV = (long)473L; // { int sctp_generic_sendmsg_iov(int sd, struct iovec *iov, int iovlen, \
        public static readonly long SYS_SCTP_GENERIC_RECVMSG = (long)474L; // { int sctp_generic_recvmsg(int sd, struct iovec *iov, int iovlen, \
        public static readonly long SYS_PREAD = (long)475L; // { ssize_t pread(int fd, void *buf, \
        public static readonly long SYS_PWRITE = (long)476L; // { ssize_t pwrite(int fd, const void *buf, \
        public static readonly long SYS_MMAP = (long)477L; // { caddr_t mmap(caddr_t addr, size_t len, \
        public static readonly long SYS_LSEEK = (long)478L; // { off_t lseek(int fd, off_t offset, \
        public static readonly long SYS_TRUNCATE = (long)479L; // { int truncate(char *path, off_t length); }
        public static readonly long SYS_FTRUNCATE = (long)480L; // { int ftruncate(int fd, off_t length); }
        public static readonly long SYS_THR_KILL2 = (long)481L; // { int thr_kill2(pid_t pid, long id, int sig); }
        public static readonly long SYS_SHM_OPEN = (long)482L; // { int shm_open(const char *path, int flags, \
        public static readonly long SYS_SHM_UNLINK = (long)483L; // { int shm_unlink(const char *path); }
        public static readonly long SYS_CPUSET = (long)484L; // { int cpuset(cpusetid_t *setid); }
        public static readonly long SYS_CPUSET_SETID = (long)485L; // { int cpuset_setid(cpuwhich_t which, id_t id, \
        public static readonly long SYS_CPUSET_GETID = (long)486L; // { int cpuset_getid(cpulevel_t level, \
        public static readonly long SYS_CPUSET_GETAFFINITY = (long)487L; // { int cpuset_getaffinity(cpulevel_t level, \
        public static readonly long SYS_CPUSET_SETAFFINITY = (long)488L; // { int cpuset_setaffinity(cpulevel_t level, \
        public static readonly long SYS_FACCESSAT = (long)489L; // { int faccessat(int fd, char *path, int amode, \
        public static readonly long SYS_FCHMODAT = (long)490L; // { int fchmodat(int fd, char *path, mode_t mode, \
        public static readonly long SYS_FCHOWNAT = (long)491L; // { int fchownat(int fd, char *path, uid_t uid, \
        public static readonly long SYS_FEXECVE = (long)492L; // { int fexecve(int fd, char **argv, \
        public static readonly long SYS_FSTATAT = (long)493L; // { int fstatat(int fd, char *path, \
        public static readonly long SYS_FUTIMESAT = (long)494L; // { int futimesat(int fd, char *path, \
        public static readonly long SYS_LINKAT = (long)495L; // { int linkat(int fd1, char *path1, int fd2, \
        public static readonly long SYS_MKDIRAT = (long)496L; // { int mkdirat(int fd, char *path, mode_t mode); }
        public static readonly long SYS_MKFIFOAT = (long)497L; // { int mkfifoat(int fd, char *path, mode_t mode); }
        public static readonly long SYS_MKNODAT = (long)498L; // { int mknodat(int fd, char *path, mode_t mode, \
        public static readonly long SYS_OPENAT = (long)499L; // { int openat(int fd, char *path, int flag, \
        public static readonly long SYS_READLINKAT = (long)500L; // { int readlinkat(int fd, char *path, char *buf, \
        public static readonly long SYS_RENAMEAT = (long)501L; // { int renameat(int oldfd, char *old, int newfd, \
        public static readonly long SYS_SYMLINKAT = (long)502L; // { int symlinkat(char *path1, int fd, \
        public static readonly long SYS_UNLINKAT = (long)503L; // { int unlinkat(int fd, char *path, int flag); }
        public static readonly long SYS_POSIX_OPENPT = (long)504L; // { int posix_openpt(int flags); }
        public static readonly long SYS_JAIL_GET = (long)506L; // { int jail_get(struct iovec *iovp, \
        public static readonly long SYS_JAIL_SET = (long)507L; // { int jail_set(struct iovec *iovp, \
        public static readonly long SYS_JAIL_REMOVE = (long)508L; // { int jail_remove(int jid); }
        public static readonly long SYS_CLOSEFROM = (long)509L; // { int closefrom(int lowfd); }
        public static readonly long SYS_LPATHCONF = (long)513L; // { int lpathconf(char *path, int name); }
        public static readonly long SYS_CAP_NEW = (long)514L; // { int cap_new(int fd, uint64_t rights); }
        public static readonly long SYS_CAP_GETRIGHTS = (long)515L; // { int cap_getrights(int fd, \
        public static readonly long SYS_CAP_ENTER = (long)516L; // { int cap_enter(void); }
        public static readonly long SYS_CAP_GETMODE = (long)517L; // { int cap_getmode(u_int *modep); }
        public static readonly long SYS_PDFORK = (long)518L; // { int pdfork(int *fdp, int flags); }
        public static readonly long SYS_PDKILL = (long)519L; // { int pdkill(int fd, int signum); }
        public static readonly long SYS_PDGETPID = (long)520L; // { int pdgetpid(int fd, pid_t *pidp); }
        public static readonly long SYS_PSELECT = (long)522L; // { int pselect(int nd, fd_set *in, \
        public static readonly long SYS_GETLOGINCLASS = (long)523L; // { int getloginclass(char *namebuf, \
        public static readonly long SYS_SETLOGINCLASS = (long)524L; // { int setloginclass(const char *namebuf); }
        public static readonly long SYS_RCTL_GET_RACCT = (long)525L; // { int rctl_get_racct(const void *inbufp, \
        public static readonly long SYS_RCTL_GET_RULES = (long)526L; // { int rctl_get_rules(const void *inbufp, \
        public static readonly long SYS_RCTL_GET_LIMITS = (long)527L; // { int rctl_get_limits(const void *inbufp, \
        public static readonly long SYS_RCTL_ADD_RULE = (long)528L; // { int rctl_add_rule(const void *inbufp, \
        public static readonly long SYS_RCTL_REMOVE_RULE = (long)529L; // { int rctl_remove_rule(const void *inbufp, \
        public static readonly long SYS_POSIX_FALLOCATE = (long)530L; // { int posix_fallocate(int fd, \
        public static readonly long SYS_POSIX_FADVISE = (long)531L; // { int posix_fadvise(int fd, off_t offset, \
        public static readonly long SYS_WAIT6 = (long)532L; // { int wait6(idtype_t idtype, id_t id, \
        public static readonly long SYS_BINDAT = (long)538L; // { int bindat(int fd, int s, caddr_t name, \
        public static readonly long SYS_CONNECTAT = (long)539L; // { int connectat(int fd, int s, caddr_t name, \
        public static readonly long SYS_CHFLAGSAT = (long)540L; // { int chflagsat(int fd, const char *path, \
        public static readonly long SYS_ACCEPT4 = (long)541L; // { int accept4(int s, \
        public static readonly long SYS_PIPE2 = (long)542L; // { int pipe2(int *fildes, int flags); }
        public static readonly long SYS_PROCCTL = (long)544L; // { int procctl(idtype_t idtype, id_t id, \
        public static readonly long SYS_UTIMENSAT = (long)547L; // { int utimensat(int fd, \
    }
}
