// Code generated by 'go generate'; DO NOT EDIT.

// package syscall -- go2cs converted at 2022 March 06 22:29:47 UTC
// import "syscall" ==> using syscall = go.syscall_package
// Original source: C:\Program Files\Go\src\syscall\zsyscall_windows.go
using sysdll = go.@internal.syscall.windows.sysdll_package;
using @unsafe = go.@unsafe_package;

namespace go;

public static partial class syscall_package {

private static unsafe.Pointer _ = default;

// Do the interface allocations only once for common
// Errno values.
private static readonly nint errnoERROR_IO_PENDING = 997;


private static error errERROR_IO_PENDING = error.As(Errno(errnoERROR_IO_PENDING))!;private static error errERROR_EINVAL = error.As(EINVAL)!;

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
private static error errnoErr(Errno e) {

    if (e == 0) 
        return error.As(errERROR_EINVAL)!;
    else if (e == errnoERROR_IO_PENDING) 
        return error.As(errERROR_IO_PENDING)!;
    // TODO: add more here, after collecting data on the common
    // error values see on Windows. (perhaps when running
    // all.bat?)
    return error.As(e)!;

}

private static var modadvapi32 = NewLazyDLL(sysdll.Add("advapi32.dll"));private static var modcrypt32 = NewLazyDLL(sysdll.Add("crypt32.dll"));private static var moddnsapi = NewLazyDLL(sysdll.Add("dnsapi.dll"));private static var modiphlpapi = NewLazyDLL(sysdll.Add("iphlpapi.dll"));private static var modkernel32 = NewLazyDLL(sysdll.Add("kernel32.dll"));private static var modmswsock = NewLazyDLL(sysdll.Add("mswsock.dll"));private static var modnetapi32 = NewLazyDLL(sysdll.Add("netapi32.dll"));private static var modntdll = NewLazyDLL(sysdll.Add("ntdll.dll"));private static var modsecur32 = NewLazyDLL(sysdll.Add("secur32.dll"));private static var modshell32 = NewLazyDLL(sysdll.Add("shell32.dll"));private static var moduserenv = NewLazyDLL(sysdll.Add("userenv.dll"));private static var modws2_32 = NewLazyDLL(sysdll.Add("ws2_32.dll"));private static var procConvertSidToStringSidW = modadvapi32.NewProc("ConvertSidToStringSidW");private static var procConvertStringSidToSidW = modadvapi32.NewProc("ConvertStringSidToSidW");private static var procCopySid = modadvapi32.NewProc("CopySid");private static var procCreateProcessAsUserW = modadvapi32.NewProc("CreateProcessAsUserW");private static var procCryptAcquireContextW = modadvapi32.NewProc("CryptAcquireContextW");private static var procCryptGenRandom = modadvapi32.NewProc("CryptGenRandom");private static var procCryptReleaseContext = modadvapi32.NewProc("CryptReleaseContext");private static var procGetLengthSid = modadvapi32.NewProc("GetLengthSid");private static var procGetTokenInformation = modadvapi32.NewProc("GetTokenInformation");private static var procLookupAccountNameW = modadvapi32.NewProc("LookupAccountNameW");private static var procLookupAccountSidW = modadvapi32.NewProc("LookupAccountSidW");private static var procOpenProcessToken = modadvapi32.NewProc("OpenProcessToken");private static var procRegCloseKey = modadvapi32.NewProc("RegCloseKey");private static var procRegEnumKeyExW = modadvapi32.NewProc("RegEnumKeyExW");private static var procRegOpenKeyExW = modadvapi32.NewProc("RegOpenKeyExW");private static var procRegQueryInfoKeyW = modadvapi32.NewProc("RegQueryInfoKeyW");private static var procRegQueryValueExW = modadvapi32.NewProc("RegQueryValueExW");private static var procCertAddCertificateContextToStore = modcrypt32.NewProc("CertAddCertificateContextToStore");private static var procCertCloseStore = modcrypt32.NewProc("CertCloseStore");private static var procCertCreateCertificateContext = modcrypt32.NewProc("CertCreateCertificateContext");private static var procCertEnumCertificatesInStore = modcrypt32.NewProc("CertEnumCertificatesInStore");private static var procCertFreeCertificateChain = modcrypt32.NewProc("CertFreeCertificateChain");private static var procCertFreeCertificateContext = modcrypt32.NewProc("CertFreeCertificateContext");private static var procCertGetCertificateChain = modcrypt32.NewProc("CertGetCertificateChain");private static var procCertOpenStore = modcrypt32.NewProc("CertOpenStore");private static var procCertOpenSystemStoreW = modcrypt32.NewProc("CertOpenSystemStoreW");private static var procCertVerifyCertificateChainPolicy = modcrypt32.NewProc("CertVerifyCertificateChainPolicy");private static var procDnsNameCompare_W = moddnsapi.NewProc("DnsNameCompare_W");private static var procDnsQuery_W = moddnsapi.NewProc("DnsQuery_W");private static var procDnsRecordListFree = moddnsapi.NewProc("DnsRecordListFree");private static var procGetAdaptersInfo = modiphlpapi.NewProc("GetAdaptersInfo");private static var procGetIfEntry = modiphlpapi.NewProc("GetIfEntry");private static var procCancelIo = modkernel32.NewProc("CancelIo");private static var procCancelIoEx = modkernel32.NewProc("CancelIoEx");private static var procCloseHandle = modkernel32.NewProc("CloseHandle");private static var procCreateDirectoryW = modkernel32.NewProc("CreateDirectoryW");private static var procCreateFileMappingW = modkernel32.NewProc("CreateFileMappingW");private static var procCreateFileW = modkernel32.NewProc("CreateFileW");private static var procCreateHardLinkW = modkernel32.NewProc("CreateHardLinkW");private static var procCreateIoCompletionPort = modkernel32.NewProc("CreateIoCompletionPort");private static var procCreatePipe = modkernel32.NewProc("CreatePipe");private static var procCreateProcessW = modkernel32.NewProc("CreateProcessW");private static var procCreateSymbolicLinkW = modkernel32.NewProc("CreateSymbolicLinkW");private static var procCreateToolhelp32Snapshot = modkernel32.NewProc("CreateToolhelp32Snapshot");private static var procDeleteFileW = modkernel32.NewProc("DeleteFileW");private static var procDeleteProcThreadAttributeList = modkernel32.NewProc("DeleteProcThreadAttributeList");private static var procDeviceIoControl = modkernel32.NewProc("DeviceIoControl");private static var procDuplicateHandle = modkernel32.NewProc("DuplicateHandle");private static var procExitProcess = modkernel32.NewProc("ExitProcess");private static var procFindClose = modkernel32.NewProc("FindClose");private static var procFindFirstFileW = modkernel32.NewProc("FindFirstFileW");private static var procFindNextFileW = modkernel32.NewProc("FindNextFileW");private static var procFlushFileBuffers = modkernel32.NewProc("FlushFileBuffers");private static var procFlushViewOfFile = modkernel32.NewProc("FlushViewOfFile");private static var procFormatMessageW = modkernel32.NewProc("FormatMessageW");private static var procFreeEnvironmentStringsW = modkernel32.NewProc("FreeEnvironmentStringsW");private static var procFreeLibrary = modkernel32.NewProc("FreeLibrary");private static var procGetCommandLineW = modkernel32.NewProc("GetCommandLineW");private static var procGetComputerNameW = modkernel32.NewProc("GetComputerNameW");private static var procGetConsoleMode = modkernel32.NewProc("GetConsoleMode");private static var procGetCurrentDirectoryW = modkernel32.NewProc("GetCurrentDirectoryW");private static var procGetCurrentProcess = modkernel32.NewProc("GetCurrentProcess");private static var procGetCurrentProcessId = modkernel32.NewProc("GetCurrentProcessId");private static var procGetEnvironmentStringsW = modkernel32.NewProc("GetEnvironmentStringsW");private static var procGetEnvironmentVariableW = modkernel32.NewProc("GetEnvironmentVariableW");private static var procGetExitCodeProcess = modkernel32.NewProc("GetExitCodeProcess");private static var procGetFileAttributesExW = modkernel32.NewProc("GetFileAttributesExW");private static var procGetFileAttributesW = modkernel32.NewProc("GetFileAttributesW");private static var procGetFileInformationByHandle = modkernel32.NewProc("GetFileInformationByHandle");private static var procGetFileType = modkernel32.NewProc("GetFileType");private static var procGetFullPathNameW = modkernel32.NewProc("GetFullPathNameW");private static var procGetLastError = modkernel32.NewProc("GetLastError");private static var procGetLongPathNameW = modkernel32.NewProc("GetLongPathNameW");private static var procGetProcAddress = modkernel32.NewProc("GetProcAddress");private static var procGetProcessTimes = modkernel32.NewProc("GetProcessTimes");private static var procGetQueuedCompletionStatus = modkernel32.NewProc("GetQueuedCompletionStatus");private static var procGetShortPathNameW = modkernel32.NewProc("GetShortPathNameW");private static var procGetStartupInfoW = modkernel32.NewProc("GetStartupInfoW");private static var procGetStdHandle = modkernel32.NewProc("GetStdHandle");private static var procGetSystemDirectoryW = modkernel32.NewProc("GetSystemDirectoryW");private static var procGetSystemTimeAsFileTime = modkernel32.NewProc("GetSystemTimeAsFileTime");private static var procGetTempPathW = modkernel32.NewProc("GetTempPathW");private static var procGetTimeZoneInformation = modkernel32.NewProc("GetTimeZoneInformation");private static var procGetVersion = modkernel32.NewProc("GetVersion");private static var procInitializeProcThreadAttributeList = modkernel32.NewProc("InitializeProcThreadAttributeList");private static var procLoadLibraryW = modkernel32.NewProc("LoadLibraryW");private static var procLocalFree = modkernel32.NewProc("LocalFree");private static var procMapViewOfFile = modkernel32.NewProc("MapViewOfFile");private static var procMoveFileW = modkernel32.NewProc("MoveFileW");private static var procOpenProcess = modkernel32.NewProc("OpenProcess");private static var procPostQueuedCompletionStatus = modkernel32.NewProc("PostQueuedCompletionStatus");private static var procProcess32FirstW = modkernel32.NewProc("Process32FirstW");private static var procProcess32NextW = modkernel32.NewProc("Process32NextW");private static var procReadConsoleW = modkernel32.NewProc("ReadConsoleW");private static var procReadDirectoryChangesW = modkernel32.NewProc("ReadDirectoryChangesW");private static var procReadFile = modkernel32.NewProc("ReadFile");private static var procRemoveDirectoryW = modkernel32.NewProc("RemoveDirectoryW");private static var procSetCurrentDirectoryW = modkernel32.NewProc("SetCurrentDirectoryW");private static var procSetEndOfFile = modkernel32.NewProc("SetEndOfFile");private static var procSetEnvironmentVariableW = modkernel32.NewProc("SetEnvironmentVariableW");private static var procSetFileAttributesW = modkernel32.NewProc("SetFileAttributesW");private static var procSetFileCompletionNotificationModes = modkernel32.NewProc("SetFileCompletionNotificationModes");private static var procSetFilePointer = modkernel32.NewProc("SetFilePointer");private static var procSetFileTime = modkernel32.NewProc("SetFileTime");private static var procSetHandleInformation = modkernel32.NewProc("SetHandleInformation");private static var procTerminateProcess = modkernel32.NewProc("TerminateProcess");private static var procUnmapViewOfFile = modkernel32.NewProc("UnmapViewOfFile");private static var procUpdateProcThreadAttribute = modkernel32.NewProc("UpdateProcThreadAttribute");private static var procVirtualLock = modkernel32.NewProc("VirtualLock");private static var procVirtualUnlock = modkernel32.NewProc("VirtualUnlock");private static var procWaitForSingleObject = modkernel32.NewProc("WaitForSingleObject");private static var procWriteConsoleW = modkernel32.NewProc("WriteConsoleW");private static var procWriteFile = modkernel32.NewProc("WriteFile");private static var procAcceptEx = modmswsock.NewProc("AcceptEx");private static var procGetAcceptExSockaddrs = modmswsock.NewProc("GetAcceptExSockaddrs");private static var procTransmitFile = modmswsock.NewProc("TransmitFile");private static var procNetApiBufferFree = modnetapi32.NewProc("NetApiBufferFree");private static var procNetGetJoinInformation = modnetapi32.NewProc("NetGetJoinInformation");private static var procNetUserGetInfo = modnetapi32.NewProc("NetUserGetInfo");private static var procRtlGetNtVersionNumbers = modntdll.NewProc("RtlGetNtVersionNumbers");private static var procGetUserNameExW = modsecur32.NewProc("GetUserNameExW");private static var procTranslateNameW = modsecur32.NewProc("TranslateNameW");private static var procCommandLineToArgvW = modshell32.NewProc("CommandLineToArgvW");private static var procGetUserProfileDirectoryW = moduserenv.NewProc("GetUserProfileDirectoryW");private static var procFreeAddrInfoW = modws2_32.NewProc("FreeAddrInfoW");private static var procGetAddrInfoW = modws2_32.NewProc("GetAddrInfoW");private static var procWSACleanup = modws2_32.NewProc("WSACleanup");private static var procWSAEnumProtocolsW = modws2_32.NewProc("WSAEnumProtocolsW");private static var procWSAIoctl = modws2_32.NewProc("WSAIoctl");private static var procWSARecv = modws2_32.NewProc("WSARecv");private static var procWSARecvFrom = modws2_32.NewProc("WSARecvFrom");private static var procWSASend = modws2_32.NewProc("WSASend");private static var procWSASendTo = modws2_32.NewProc("WSASendTo");private static var procWSAStartup = modws2_32.NewProc("WSAStartup");private static var procbind = modws2_32.NewProc("bind");private static var procclosesocket = modws2_32.NewProc("closesocket");private static var procconnect = modws2_32.NewProc("connect");private static var procgethostbyname = modws2_32.NewProc("gethostbyname");private static var procgetpeername = modws2_32.NewProc("getpeername");private static var procgetprotobyname = modws2_32.NewProc("getprotobyname");private static var procgetservbyname = modws2_32.NewProc("getservbyname");private static var procgetsockname = modws2_32.NewProc("getsockname");private static var procgetsockopt = modws2_32.NewProc("getsockopt");private static var proclisten = modws2_32.NewProc("listen");private static var procntohs = modws2_32.NewProc("ntohs");private static var procsetsockopt = modws2_32.NewProc("setsockopt");private static var procshutdown = modws2_32.NewProc("shutdown");private static var procsocket = modws2_32.NewProc("socket");

public static error ConvertSidToStringSid(ptr<SID> _addr_sid, ptr<ptr<ushort>> _addr_stringSid) {
    error err = default!;
    ref SID sid = ref _addr_sid.val;
    ref ptr<ushort> stringSid = ref _addr_stringSid.val;

    var (r1, _, e1) = Syscall(procConvertSidToStringSidW.Addr(), 2, uintptr(@unsafe.Pointer(sid)), uintptr(@unsafe.Pointer(stringSid)), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error ConvertStringSidToSid(ptr<ushort> _addr_stringSid, ptr<ptr<SID>> _addr_sid) {
    error err = default!;
    ref ushort stringSid = ref _addr_stringSid.val;
    ref ptr<SID> sid = ref _addr_sid.val;

    var (r1, _, e1) = Syscall(procConvertStringSidToSidW.Addr(), 2, uintptr(@unsafe.Pointer(stringSid)), uintptr(@unsafe.Pointer(sid)), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error CopySid(uint destSidLen, ptr<SID> _addr_destSid, ptr<SID> _addr_srcSid) {
    error err = default!;
    ref SID destSid = ref _addr_destSid.val;
    ref SID srcSid = ref _addr_srcSid.val;

    var (r1, _, e1) = Syscall(procCopySid.Addr(), 3, uintptr(destSidLen), uintptr(@unsafe.Pointer(destSid)), uintptr(@unsafe.Pointer(srcSid)));
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error CreateProcessAsUser(Token token, ptr<ushort> _addr_appName, ptr<ushort> _addr_commandLine, ptr<SecurityAttributes> _addr_procSecurity, ptr<SecurityAttributes> _addr_threadSecurity, bool inheritHandles, uint creationFlags, ptr<ushort> _addr_env, ptr<ushort> _addr_currentDir, ptr<StartupInfo> _addr_startupInfo, ptr<ProcessInformation> _addr_outProcInfo) {
    error err = default!;
    ref ushort appName = ref _addr_appName.val;
    ref ushort commandLine = ref _addr_commandLine.val;
    ref SecurityAttributes procSecurity = ref _addr_procSecurity.val;
    ref SecurityAttributes threadSecurity = ref _addr_threadSecurity.val;
    ref ushort env = ref _addr_env.val;
    ref ushort currentDir = ref _addr_currentDir.val;
    ref StartupInfo startupInfo = ref _addr_startupInfo.val;
    ref ProcessInformation outProcInfo = ref _addr_outProcInfo.val;

    uint _p0 = default;
    if (inheritHandles) {
        _p0 = 1;
    }
    var (r1, _, e1) = Syscall12(procCreateProcessAsUserW.Addr(), 11, uintptr(token), uintptr(@unsafe.Pointer(appName)), uintptr(@unsafe.Pointer(commandLine)), uintptr(@unsafe.Pointer(procSecurity)), uintptr(@unsafe.Pointer(threadSecurity)), uintptr(_p0), uintptr(creationFlags), uintptr(@unsafe.Pointer(env)), uintptr(@unsafe.Pointer(currentDir)), uintptr(@unsafe.Pointer(startupInfo)), uintptr(@unsafe.Pointer(outProcInfo)), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error CryptAcquireContext(ptr<Handle> _addr_provhandle, ptr<ushort> _addr_container, ptr<ushort> _addr_provider, uint provtype, uint flags) {
    error err = default!;
    ref Handle provhandle = ref _addr_provhandle.val;
    ref ushort container = ref _addr_container.val;
    ref ushort provider = ref _addr_provider.val;

    var (r1, _, e1) = Syscall6(procCryptAcquireContextW.Addr(), 5, uintptr(@unsafe.Pointer(provhandle)), uintptr(@unsafe.Pointer(container)), uintptr(@unsafe.Pointer(provider)), uintptr(provtype), uintptr(flags), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error CryptGenRandom(Handle provhandle, uint buflen, ptr<byte> _addr_buf) {
    error err = default!;
    ref byte buf = ref _addr_buf.val;

    var (r1, _, e1) = Syscall(procCryptGenRandom.Addr(), 3, uintptr(provhandle), uintptr(buflen), uintptr(@unsafe.Pointer(buf)));
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error CryptReleaseContext(Handle provhandle, uint flags) {
    error err = default!;

    var (r1, _, e1) = Syscall(procCryptReleaseContext.Addr(), 2, uintptr(provhandle), uintptr(flags), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static uint GetLengthSid(ptr<SID> _addr_sid) {
    uint len = default;
    ref SID sid = ref _addr_sid.val;

    var (r0, _, _) = Syscall(procGetLengthSid.Addr(), 1, uintptr(@unsafe.Pointer(sid)), 0, 0);
    len = uint32(r0);
    return ;
}

public static error GetTokenInformation(Token t, uint infoClass, ptr<byte> _addr_info, uint infoLen, ptr<uint> _addr_returnedLen) {
    error err = default!;
    ref byte info = ref _addr_info.val;
    ref uint returnedLen = ref _addr_returnedLen.val;

    var (r1, _, e1) = Syscall6(procGetTokenInformation.Addr(), 5, uintptr(t), uintptr(infoClass), uintptr(@unsafe.Pointer(info)), uintptr(infoLen), uintptr(@unsafe.Pointer(returnedLen)), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error LookupAccountName(ptr<ushort> _addr_systemName, ptr<ushort> _addr_accountName, ptr<SID> _addr_sid, ptr<uint> _addr_sidLen, ptr<ushort> _addr_refdDomainName, ptr<uint> _addr_refdDomainNameLen, ptr<uint> _addr_use) {
    error err = default!;
    ref ushort systemName = ref _addr_systemName.val;
    ref ushort accountName = ref _addr_accountName.val;
    ref SID sid = ref _addr_sid.val;
    ref uint sidLen = ref _addr_sidLen.val;
    ref ushort refdDomainName = ref _addr_refdDomainName.val;
    ref uint refdDomainNameLen = ref _addr_refdDomainNameLen.val;
    ref uint use = ref _addr_use.val;

    var (r1, _, e1) = Syscall9(procLookupAccountNameW.Addr(), 7, uintptr(@unsafe.Pointer(systemName)), uintptr(@unsafe.Pointer(accountName)), uintptr(@unsafe.Pointer(sid)), uintptr(@unsafe.Pointer(sidLen)), uintptr(@unsafe.Pointer(refdDomainName)), uintptr(@unsafe.Pointer(refdDomainNameLen)), uintptr(@unsafe.Pointer(use)), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error LookupAccountSid(ptr<ushort> _addr_systemName, ptr<SID> _addr_sid, ptr<ushort> _addr_name, ptr<uint> _addr_nameLen, ptr<ushort> _addr_refdDomainName, ptr<uint> _addr_refdDomainNameLen, ptr<uint> _addr_use) {
    error err = default!;
    ref ushort systemName = ref _addr_systemName.val;
    ref SID sid = ref _addr_sid.val;
    ref ushort name = ref _addr_name.val;
    ref uint nameLen = ref _addr_nameLen.val;
    ref ushort refdDomainName = ref _addr_refdDomainName.val;
    ref uint refdDomainNameLen = ref _addr_refdDomainNameLen.val;
    ref uint use = ref _addr_use.val;

    var (r1, _, e1) = Syscall9(procLookupAccountSidW.Addr(), 7, uintptr(@unsafe.Pointer(systemName)), uintptr(@unsafe.Pointer(sid)), uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(nameLen)), uintptr(@unsafe.Pointer(refdDomainName)), uintptr(@unsafe.Pointer(refdDomainNameLen)), uintptr(@unsafe.Pointer(use)), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error OpenProcessToken(Handle h, uint access, ptr<Token> _addr_token) {
    error err = default!;
    ref Token token = ref _addr_token.val;

    var (r1, _, e1) = Syscall(procOpenProcessToken.Addr(), 3, uintptr(h), uintptr(access), uintptr(@unsafe.Pointer(token)));
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error RegCloseKey(Handle key) {
    error regerrno = default!;

    var (r0, _, _) = Syscall(procRegCloseKey.Addr(), 1, uintptr(key), 0, 0);
    if (r0 != 0) {
        regerrno = Errno(r0);
    }
    return ;

}

public static error RegEnumKeyEx(Handle key, uint index, ptr<ushort> _addr_name, ptr<uint> _addr_nameLen, ptr<uint> _addr_reserved, ptr<ushort> _addr_@class, ptr<uint> _addr_classLen, ptr<Filetime> _addr_lastWriteTime) {
    error regerrno = default!;
    ref ushort name = ref _addr_name.val;
    ref uint nameLen = ref _addr_nameLen.val;
    ref uint reserved = ref _addr_reserved.val;
    ref ushort @class = ref _addr_@class.val;
    ref uint classLen = ref _addr_classLen.val;
    ref Filetime lastWriteTime = ref _addr_lastWriteTime.val;

    var (r0, _, _) = Syscall9(procRegEnumKeyExW.Addr(), 8, uintptr(key), uintptr(index), uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(nameLen)), uintptr(@unsafe.Pointer(reserved)), uintptr(@unsafe.Pointer(class)), uintptr(@unsafe.Pointer(classLen)), uintptr(@unsafe.Pointer(lastWriteTime)), 0);
    if (r0 != 0) {
        regerrno = Errno(r0);
    }
    return ;

}

public static error RegOpenKeyEx(Handle key, ptr<ushort> _addr_subkey, uint options, uint desiredAccess, ptr<Handle> _addr_result) {
    error regerrno = default!;
    ref ushort subkey = ref _addr_subkey.val;
    ref Handle result = ref _addr_result.val;

    var (r0, _, _) = Syscall6(procRegOpenKeyExW.Addr(), 5, uintptr(key), uintptr(@unsafe.Pointer(subkey)), uintptr(options), uintptr(desiredAccess), uintptr(@unsafe.Pointer(result)), 0);
    if (r0 != 0) {
        regerrno = Errno(r0);
    }
    return ;

}

public static error RegQueryInfoKey(Handle key, ptr<ushort> _addr_@class, ptr<uint> _addr_classLen, ptr<uint> _addr_reserved, ptr<uint> _addr_subkeysLen, ptr<uint> _addr_maxSubkeyLen, ptr<uint> _addr_maxClassLen, ptr<uint> _addr_valuesLen, ptr<uint> _addr_maxValueNameLen, ptr<uint> _addr_maxValueLen, ptr<uint> _addr_saLen, ptr<Filetime> _addr_lastWriteTime) {
    error regerrno = default!;
    ref ushort @class = ref _addr_@class.val;
    ref uint classLen = ref _addr_classLen.val;
    ref uint reserved = ref _addr_reserved.val;
    ref uint subkeysLen = ref _addr_subkeysLen.val;
    ref uint maxSubkeyLen = ref _addr_maxSubkeyLen.val;
    ref uint maxClassLen = ref _addr_maxClassLen.val;
    ref uint valuesLen = ref _addr_valuesLen.val;
    ref uint maxValueNameLen = ref _addr_maxValueNameLen.val;
    ref uint maxValueLen = ref _addr_maxValueLen.val;
    ref uint saLen = ref _addr_saLen.val;
    ref Filetime lastWriteTime = ref _addr_lastWriteTime.val;

    var (r0, _, _) = Syscall12(procRegQueryInfoKeyW.Addr(), 12, uintptr(key), uintptr(@unsafe.Pointer(class)), uintptr(@unsafe.Pointer(classLen)), uintptr(@unsafe.Pointer(reserved)), uintptr(@unsafe.Pointer(subkeysLen)), uintptr(@unsafe.Pointer(maxSubkeyLen)), uintptr(@unsafe.Pointer(maxClassLen)), uintptr(@unsafe.Pointer(valuesLen)), uintptr(@unsafe.Pointer(maxValueNameLen)), uintptr(@unsafe.Pointer(maxValueLen)), uintptr(@unsafe.Pointer(saLen)), uintptr(@unsafe.Pointer(lastWriteTime)));
    if (r0 != 0) {
        regerrno = Errno(r0);
    }
    return ;

}

public static error RegQueryValueEx(Handle key, ptr<ushort> _addr_name, ptr<uint> _addr_reserved, ptr<uint> _addr_valtype, ptr<byte> _addr_buf, ptr<uint> _addr_buflen) {
    error regerrno = default!;
    ref ushort name = ref _addr_name.val;
    ref uint reserved = ref _addr_reserved.val;
    ref uint valtype = ref _addr_valtype.val;
    ref byte buf = ref _addr_buf.val;
    ref uint buflen = ref _addr_buflen.val;

    var (r0, _, _) = Syscall6(procRegQueryValueExW.Addr(), 6, uintptr(key), uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(reserved)), uintptr(@unsafe.Pointer(valtype)), uintptr(@unsafe.Pointer(buf)), uintptr(@unsafe.Pointer(buflen)));
    if (r0 != 0) {
        regerrno = Errno(r0);
    }
    return ;

}

public static error CertAddCertificateContextToStore(Handle store, ptr<CertContext> _addr_certContext, uint addDisposition, ptr<ptr<CertContext>> _addr_storeContext) {
    error err = default!;
    ref CertContext certContext = ref _addr_certContext.val;
    ref ptr<CertContext> storeContext = ref _addr_storeContext.val;

    var (r1, _, e1) = Syscall6(procCertAddCertificateContextToStore.Addr(), 4, uintptr(store), uintptr(@unsafe.Pointer(certContext)), uintptr(addDisposition), uintptr(@unsafe.Pointer(storeContext)), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error CertCloseStore(Handle store, uint flags) {
    error err = default!;

    var (r1, _, e1) = Syscall(procCertCloseStore.Addr(), 2, uintptr(store), uintptr(flags), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static (ptr<CertContext>, error) CertCreateCertificateContext(uint certEncodingType, ptr<byte> _addr_certEncoded, uint encodedLen) {
    ptr<CertContext> context = default!;
    error err = default!;
    ref byte certEncoded = ref _addr_certEncoded.val;

    var (r0, _, e1) = Syscall(procCertCreateCertificateContext.Addr(), 3, uintptr(certEncodingType), uintptr(@unsafe.Pointer(certEncoded)), uintptr(encodedLen));
    context = (CertContext.val)(@unsafe.Pointer(r0));
    if (context == null) {
        err = errnoErr(e1);
    }
    return ;

}

public static (ptr<CertContext>, error) CertEnumCertificatesInStore(Handle store, ptr<CertContext> _addr_prevContext) {
    ptr<CertContext> context = default!;
    error err = default!;
    ref CertContext prevContext = ref _addr_prevContext.val;

    var (r0, _, e1) = Syscall(procCertEnumCertificatesInStore.Addr(), 2, uintptr(store), uintptr(@unsafe.Pointer(prevContext)), 0);
    context = (CertContext.val)(@unsafe.Pointer(r0));
    if (context == null) {
        err = errnoErr(e1);
    }
    return ;

}

public static void CertFreeCertificateChain(ptr<CertChainContext> _addr_ctx) {
    ref CertChainContext ctx = ref _addr_ctx.val;

    Syscall(procCertFreeCertificateChain.Addr(), 1, uintptr(@unsafe.Pointer(ctx)), 0, 0);
    return ;
}

public static error CertFreeCertificateContext(ptr<CertContext> _addr_ctx) {
    error err = default!;
    ref CertContext ctx = ref _addr_ctx.val;

    var (r1, _, e1) = Syscall(procCertFreeCertificateContext.Addr(), 1, uintptr(@unsafe.Pointer(ctx)), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error CertGetCertificateChain(Handle engine, ptr<CertContext> _addr_leaf, ptr<Filetime> _addr_time, Handle additionalStore, ptr<CertChainPara> _addr_para, uint flags, System.UIntPtr reserved, ptr<ptr<CertChainContext>> _addr_chainCtx) {
    error err = default!;
    ref CertContext leaf = ref _addr_leaf.val;
    ref Filetime time = ref _addr_time.val;
    ref CertChainPara para = ref _addr_para.val;
    ref ptr<CertChainContext> chainCtx = ref _addr_chainCtx.val;

    var (r1, _, e1) = Syscall9(procCertGetCertificateChain.Addr(), 8, uintptr(engine), uintptr(@unsafe.Pointer(leaf)), uintptr(@unsafe.Pointer(time)), uintptr(additionalStore), uintptr(@unsafe.Pointer(para)), uintptr(flags), uintptr(reserved), uintptr(@unsafe.Pointer(chainCtx)), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static (Handle, error) CertOpenStore(System.UIntPtr storeProvider, uint msgAndCertEncodingType, System.UIntPtr cryptProv, uint flags, System.UIntPtr para) {
    Handle handle = default;
    error err = default!;

    var (r0, _, e1) = Syscall6(procCertOpenStore.Addr(), 5, uintptr(storeProvider), uintptr(msgAndCertEncodingType), uintptr(cryptProv), uintptr(flags), uintptr(para), 0);
    handle = Handle(r0);
    if (handle == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static (Handle, error) CertOpenSystemStore(Handle hprov, ptr<ushort> _addr_name) {
    Handle store = default;
    error err = default!;
    ref ushort name = ref _addr_name.val;

    var (r0, _, e1) = Syscall(procCertOpenSystemStoreW.Addr(), 2, uintptr(hprov), uintptr(@unsafe.Pointer(name)), 0);
    store = Handle(r0);
    if (store == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error CertVerifyCertificateChainPolicy(System.UIntPtr policyOID, ptr<CertChainContext> _addr_chain, ptr<CertChainPolicyPara> _addr_para, ptr<CertChainPolicyStatus> _addr_status) {
    error err = default!;
    ref CertChainContext chain = ref _addr_chain.val;
    ref CertChainPolicyPara para = ref _addr_para.val;
    ref CertChainPolicyStatus status = ref _addr_status.val;

    var (r1, _, e1) = Syscall6(procCertVerifyCertificateChainPolicy.Addr(), 4, uintptr(policyOID), uintptr(@unsafe.Pointer(chain)), uintptr(@unsafe.Pointer(para)), uintptr(@unsafe.Pointer(status)), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static bool DnsNameCompare(ptr<ushort> _addr_name1, ptr<ushort> _addr_name2) {
    bool same = default;
    ref ushort name1 = ref _addr_name1.val;
    ref ushort name2 = ref _addr_name2.val;

    var (r0, _, _) = Syscall(procDnsNameCompare_W.Addr(), 2, uintptr(@unsafe.Pointer(name1)), uintptr(@unsafe.Pointer(name2)), 0);
    same = r0 != 0;
    return ;
}

public static error DnsQuery(@string name, ushort qtype, uint options, ptr<byte> _addr_extra, ptr<ptr<DNSRecord>> _addr_qrs, ptr<byte> _addr_pr) {
    error status = default!;
    ref byte extra = ref _addr_extra.val;
    ref ptr<DNSRecord> qrs = ref _addr_qrs.val;
    ref byte pr = ref _addr_pr.val;

    ptr<ushort> _p0;
    _p0, status = UTF16PtrFromString(name);
    if (status != null) {
        return ;
    }
    return error.As(_DnsQuery(_p0, qtype, options, _addr_extra, _addr_qrs, _addr_pr))!;

}

private static error _DnsQuery(ptr<ushort> _addr_name, ushort qtype, uint options, ptr<byte> _addr_extra, ptr<ptr<DNSRecord>> _addr_qrs, ptr<byte> _addr_pr) {
    error status = default!;
    ref ushort name = ref _addr_name.val;
    ref byte extra = ref _addr_extra.val;
    ref ptr<DNSRecord> qrs = ref _addr_qrs.val;
    ref byte pr = ref _addr_pr.val;

    var (r0, _, _) = Syscall6(procDnsQuery_W.Addr(), 6, uintptr(@unsafe.Pointer(name)), uintptr(qtype), uintptr(options), uintptr(@unsafe.Pointer(extra)), uintptr(@unsafe.Pointer(qrs)), uintptr(@unsafe.Pointer(pr)));
    if (r0 != 0) {
        status = Errno(r0);
    }
    return ;

}

public static void DnsRecordListFree(ptr<DNSRecord> _addr_rl, uint freetype) {
    ref DNSRecord rl = ref _addr_rl.val;

    Syscall(procDnsRecordListFree.Addr(), 2, uintptr(@unsafe.Pointer(rl)), uintptr(freetype), 0);
    return ;
}

public static error GetAdaptersInfo(ptr<IpAdapterInfo> _addr_ai, ptr<uint> _addr_ol) {
    error errcode = default!;
    ref IpAdapterInfo ai = ref _addr_ai.val;
    ref uint ol = ref _addr_ol.val;

    var (r0, _, _) = Syscall(procGetAdaptersInfo.Addr(), 2, uintptr(@unsafe.Pointer(ai)), uintptr(@unsafe.Pointer(ol)), 0);
    if (r0 != 0) {
        errcode = Errno(r0);
    }
    return ;

}

public static error GetIfEntry(ptr<MibIfRow> _addr_pIfRow) {
    error errcode = default!;
    ref MibIfRow pIfRow = ref _addr_pIfRow.val;

    var (r0, _, _) = Syscall(procGetIfEntry.Addr(), 1, uintptr(@unsafe.Pointer(pIfRow)), 0, 0);
    if (r0 != 0) {
        errcode = Errno(r0);
    }
    return ;

}

public static error CancelIo(Handle s) {
    error err = default!;

    var (r1, _, e1) = Syscall(procCancelIo.Addr(), 1, uintptr(s), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error CancelIoEx(Handle s, ptr<Overlapped> _addr_o) {
    error err = default!;
    ref Overlapped o = ref _addr_o.val;

    var (r1, _, e1) = Syscall(procCancelIoEx.Addr(), 2, uintptr(s), uintptr(@unsafe.Pointer(o)), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error CloseHandle(Handle handle) {
    error err = default!;

    var (r1, _, e1) = Syscall(procCloseHandle.Addr(), 1, uintptr(handle), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error CreateDirectory(ptr<ushort> _addr_path, ptr<SecurityAttributes> _addr_sa) {
    error err = default!;
    ref ushort path = ref _addr_path.val;
    ref SecurityAttributes sa = ref _addr_sa.val;

    var (r1, _, e1) = Syscall(procCreateDirectoryW.Addr(), 2, uintptr(@unsafe.Pointer(path)), uintptr(@unsafe.Pointer(sa)), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static (Handle, error) CreateFileMapping(Handle fhandle, ptr<SecurityAttributes> _addr_sa, uint prot, uint maxSizeHigh, uint maxSizeLow, ptr<ushort> _addr_name) {
    Handle handle = default;
    error err = default!;
    ref SecurityAttributes sa = ref _addr_sa.val;
    ref ushort name = ref _addr_name.val;

    var (r0, _, e1) = Syscall6(procCreateFileMappingW.Addr(), 6, uintptr(fhandle), uintptr(@unsafe.Pointer(sa)), uintptr(prot), uintptr(maxSizeHigh), uintptr(maxSizeLow), uintptr(@unsafe.Pointer(name)));
    handle = Handle(r0);
    if (handle == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static (Handle, error) CreateFile(ptr<ushort> _addr_name, uint access, uint mode, ptr<SecurityAttributes> _addr_sa, uint createmode, uint attrs, int templatefile) {
    Handle handle = default;
    error err = default!;
    ref ushort name = ref _addr_name.val;
    ref SecurityAttributes sa = ref _addr_sa.val;

    var (r0, _, e1) = Syscall9(procCreateFileW.Addr(), 7, uintptr(@unsafe.Pointer(name)), uintptr(access), uintptr(mode), uintptr(@unsafe.Pointer(sa)), uintptr(createmode), uintptr(attrs), uintptr(templatefile), 0, 0);
    handle = Handle(r0);
    if (handle == InvalidHandle) {
        err = errnoErr(e1);
    }
    return ;

}

public static error CreateHardLink(ptr<ushort> _addr_filename, ptr<ushort> _addr_existingfilename, System.UIntPtr reserved) {
    error err = default!;
    ref ushort filename = ref _addr_filename.val;
    ref ushort existingfilename = ref _addr_existingfilename.val;

    var (r1, _, e1) = Syscall(procCreateHardLinkW.Addr(), 3, uintptr(@unsafe.Pointer(filename)), uintptr(@unsafe.Pointer(existingfilename)), uintptr(reserved));
    if (r1 & 0xff == 0) {
        err = errnoErr(e1);
    }
    return ;

}

private static (Handle, error) createIoCompletionPort(Handle filehandle, Handle cphandle, System.UIntPtr key, uint threadcnt) {
    Handle handle = default;
    error err = default!;

    var (r0, _, e1) = Syscall6(procCreateIoCompletionPort.Addr(), 4, uintptr(filehandle), uintptr(cphandle), uintptr(key), uintptr(threadcnt), 0, 0);
    handle = Handle(r0);
    if (handle == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error CreatePipe(ptr<Handle> _addr_readhandle, ptr<Handle> _addr_writehandle, ptr<SecurityAttributes> _addr_sa, uint size) {
    error err = default!;
    ref Handle readhandle = ref _addr_readhandle.val;
    ref Handle writehandle = ref _addr_writehandle.val;
    ref SecurityAttributes sa = ref _addr_sa.val;

    var (r1, _, e1) = Syscall6(procCreatePipe.Addr(), 4, uintptr(@unsafe.Pointer(readhandle)), uintptr(@unsafe.Pointer(writehandle)), uintptr(@unsafe.Pointer(sa)), uintptr(size), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error CreateProcess(ptr<ushort> _addr_appName, ptr<ushort> _addr_commandLine, ptr<SecurityAttributes> _addr_procSecurity, ptr<SecurityAttributes> _addr_threadSecurity, bool inheritHandles, uint creationFlags, ptr<ushort> _addr_env, ptr<ushort> _addr_currentDir, ptr<StartupInfo> _addr_startupInfo, ptr<ProcessInformation> _addr_outProcInfo) {
    error err = default!;
    ref ushort appName = ref _addr_appName.val;
    ref ushort commandLine = ref _addr_commandLine.val;
    ref SecurityAttributes procSecurity = ref _addr_procSecurity.val;
    ref SecurityAttributes threadSecurity = ref _addr_threadSecurity.val;
    ref ushort env = ref _addr_env.val;
    ref ushort currentDir = ref _addr_currentDir.val;
    ref StartupInfo startupInfo = ref _addr_startupInfo.val;
    ref ProcessInformation outProcInfo = ref _addr_outProcInfo.val;

    uint _p0 = default;
    if (inheritHandles) {
        _p0 = 1;
    }
    var (r1, _, e1) = Syscall12(procCreateProcessW.Addr(), 10, uintptr(@unsafe.Pointer(appName)), uintptr(@unsafe.Pointer(commandLine)), uintptr(@unsafe.Pointer(procSecurity)), uintptr(@unsafe.Pointer(threadSecurity)), uintptr(_p0), uintptr(creationFlags), uintptr(@unsafe.Pointer(env)), uintptr(@unsafe.Pointer(currentDir)), uintptr(@unsafe.Pointer(startupInfo)), uintptr(@unsafe.Pointer(outProcInfo)), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error CreateSymbolicLink(ptr<ushort> _addr_symlinkfilename, ptr<ushort> _addr_targetfilename, uint flags) {
    error err = default!;
    ref ushort symlinkfilename = ref _addr_symlinkfilename.val;
    ref ushort targetfilename = ref _addr_targetfilename.val;

    var (r1, _, e1) = Syscall(procCreateSymbolicLinkW.Addr(), 3, uintptr(@unsafe.Pointer(symlinkfilename)), uintptr(@unsafe.Pointer(targetfilename)), uintptr(flags));
    if (r1 & 0xff == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static (Handle, error) CreateToolhelp32Snapshot(uint flags, uint processId) {
    Handle handle = default;
    error err = default!;

    var (r0, _, e1) = Syscall(procCreateToolhelp32Snapshot.Addr(), 2, uintptr(flags), uintptr(processId), 0);
    handle = Handle(r0);
    if (handle == InvalidHandle) {
        err = errnoErr(e1);
    }
    return ;

}

public static error DeleteFile(ptr<ushort> _addr_path) {
    error err = default!;
    ref ushort path = ref _addr_path.val;

    var (r1, _, e1) = Syscall(procDeleteFileW.Addr(), 1, uintptr(@unsafe.Pointer(path)), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

private static void deleteProcThreadAttributeList(ptr<_PROC_THREAD_ATTRIBUTE_LIST> _addr_attrlist) {
    ref _PROC_THREAD_ATTRIBUTE_LIST attrlist = ref _addr_attrlist.val;

    Syscall(procDeleteProcThreadAttributeList.Addr(), 1, uintptr(@unsafe.Pointer(attrlist)), 0, 0);
    return ;
}

public static error DeviceIoControl(Handle handle, uint ioControlCode, ptr<byte> _addr_inBuffer, uint inBufferSize, ptr<byte> _addr_outBuffer, uint outBufferSize, ptr<uint> _addr_bytesReturned, ptr<Overlapped> _addr_overlapped) {
    error err = default!;
    ref byte inBuffer = ref _addr_inBuffer.val;
    ref byte outBuffer = ref _addr_outBuffer.val;
    ref uint bytesReturned = ref _addr_bytesReturned.val;
    ref Overlapped overlapped = ref _addr_overlapped.val;

    var (r1, _, e1) = Syscall9(procDeviceIoControl.Addr(), 8, uintptr(handle), uintptr(ioControlCode), uintptr(@unsafe.Pointer(inBuffer)), uintptr(inBufferSize), uintptr(@unsafe.Pointer(outBuffer)), uintptr(outBufferSize), uintptr(@unsafe.Pointer(bytesReturned)), uintptr(@unsafe.Pointer(overlapped)), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error DuplicateHandle(Handle hSourceProcessHandle, Handle hSourceHandle, Handle hTargetProcessHandle, ptr<Handle> _addr_lpTargetHandle, uint dwDesiredAccess, bool bInheritHandle, uint dwOptions) {
    error err = default!;
    ref Handle lpTargetHandle = ref _addr_lpTargetHandle.val;

    uint _p0 = default;
    if (bInheritHandle) {
        _p0 = 1;
    }
    var (r1, _, e1) = Syscall9(procDuplicateHandle.Addr(), 7, uintptr(hSourceProcessHandle), uintptr(hSourceHandle), uintptr(hTargetProcessHandle), uintptr(@unsafe.Pointer(lpTargetHandle)), uintptr(dwDesiredAccess), uintptr(_p0), uintptr(dwOptions), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static void ExitProcess(uint exitcode) {
    Syscall(procExitProcess.Addr(), 1, uintptr(exitcode), 0, 0);
    return ;
}

public static error FindClose(Handle handle) {
    error err = default!;

    var (r1, _, e1) = Syscall(procFindClose.Addr(), 1, uintptr(handle), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

private static (Handle, error) findFirstFile1(ptr<ushort> _addr_name, ptr<win32finddata1> _addr_data) {
    Handle handle = default;
    error err = default!;
    ref ushort name = ref _addr_name.val;
    ref win32finddata1 data = ref _addr_data.val;

    var (r0, _, e1) = Syscall(procFindFirstFileW.Addr(), 2, uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(data)), 0);
    handle = Handle(r0);
    if (handle == InvalidHandle) {
        err = errnoErr(e1);
    }
    return ;

}

private static error findNextFile1(Handle handle, ptr<win32finddata1> _addr_data) {
    error err = default!;
    ref win32finddata1 data = ref _addr_data.val;

    var (r1, _, e1) = Syscall(procFindNextFileW.Addr(), 2, uintptr(handle), uintptr(@unsafe.Pointer(data)), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error FlushFileBuffers(Handle handle) {
    error err = default!;

    var (r1, _, e1) = Syscall(procFlushFileBuffers.Addr(), 1, uintptr(handle), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error FlushViewOfFile(System.UIntPtr addr, System.UIntPtr length) {
    error err = default!;

    var (r1, _, e1) = Syscall(procFlushViewOfFile.Addr(), 2, uintptr(addr), uintptr(length), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

private static (uint, error) formatMessage(uint flags, System.UIntPtr msgsrc, uint msgid, uint langid, slice<ushort> buf, ptr<byte> _addr_args) {
    uint n = default;
    error err = default!;
    ref byte args = ref _addr_args.val;

    ptr<ushort> _p0;
    if (len(buf) > 0) {
        _p0 = _addr_buf[0];
    }
    var (r0, _, e1) = Syscall9(procFormatMessageW.Addr(), 7, uintptr(flags), uintptr(msgsrc), uintptr(msgid), uintptr(langid), uintptr(@unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(@unsafe.Pointer(args)), 0, 0);
    n = uint32(r0);
    if (n == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error FreeEnvironmentStrings(ptr<ushort> _addr_envs) {
    error err = default!;
    ref ushort envs = ref _addr_envs.val;

    var (r1, _, e1) = Syscall(procFreeEnvironmentStringsW.Addr(), 1, uintptr(@unsafe.Pointer(envs)), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error FreeLibrary(Handle handle) {
    error err = default!;

    var (r1, _, e1) = Syscall(procFreeLibrary.Addr(), 1, uintptr(handle), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static ptr<ushort> GetCommandLine() {
    ptr<ushort> cmd = default!;

    var (r0, _, _) = Syscall(procGetCommandLineW.Addr(), 0, 0, 0, 0);
    cmd = (uint16.val)(@unsafe.Pointer(r0));
    return ;
}

public static error GetComputerName(ptr<ushort> _addr_buf, ptr<uint> _addr_n) {
    error err = default!;
    ref ushort buf = ref _addr_buf.val;
    ref uint n = ref _addr_n.val;

    var (r1, _, e1) = Syscall(procGetComputerNameW.Addr(), 2, uintptr(@unsafe.Pointer(buf)), uintptr(@unsafe.Pointer(n)), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error GetConsoleMode(Handle console, ptr<uint> _addr_mode) {
    error err = default!;
    ref uint mode = ref _addr_mode.val;

    var (r1, _, e1) = Syscall(procGetConsoleMode.Addr(), 2, uintptr(console), uintptr(@unsafe.Pointer(mode)), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static (uint, error) GetCurrentDirectory(uint buflen, ptr<ushort> _addr_buf) {
    uint n = default;
    error err = default!;
    ref ushort buf = ref _addr_buf.val;

    var (r0, _, e1) = Syscall(procGetCurrentDirectoryW.Addr(), 2, uintptr(buflen), uintptr(@unsafe.Pointer(buf)), 0);
    n = uint32(r0);
    if (n == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static (Handle, error) GetCurrentProcess() {
    Handle pseudoHandle = default;
    error err = default!;

    var (r0, _, e1) = Syscall(procGetCurrentProcess.Addr(), 0, 0, 0, 0);
    pseudoHandle = Handle(r0);
    if (pseudoHandle == 0) {
        err = errnoErr(e1);
    }
    return ;

}

private static uint getCurrentProcessId() {
    uint pid = default;

    var (r0, _, _) = Syscall(procGetCurrentProcessId.Addr(), 0, 0, 0, 0);
    pid = uint32(r0);
    return ;
}

public static (ptr<ushort>, error) GetEnvironmentStrings() {
    ptr<ushort> envs = default!;
    error err = default!;

    var (r0, _, e1) = Syscall(procGetEnvironmentStringsW.Addr(), 0, 0, 0, 0);
    envs = (uint16.val)(@unsafe.Pointer(r0));
    if (envs == null) {
        err = errnoErr(e1);
    }
    return ;

}

public static (uint, error) GetEnvironmentVariable(ptr<ushort> _addr_name, ptr<ushort> _addr_buffer, uint size) {
    uint n = default;
    error err = default!;
    ref ushort name = ref _addr_name.val;
    ref ushort buffer = ref _addr_buffer.val;

    var (r0, _, e1) = Syscall(procGetEnvironmentVariableW.Addr(), 3, uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(buffer)), uintptr(size));
    n = uint32(r0);
    if (n == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error GetExitCodeProcess(Handle handle, ptr<uint> _addr_exitcode) {
    error err = default!;
    ref uint exitcode = ref _addr_exitcode.val;

    var (r1, _, e1) = Syscall(procGetExitCodeProcess.Addr(), 2, uintptr(handle), uintptr(@unsafe.Pointer(exitcode)), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error GetFileAttributesEx(ptr<ushort> _addr_name, uint level, ptr<byte> _addr_info) {
    error err = default!;
    ref ushort name = ref _addr_name.val;
    ref byte info = ref _addr_info.val;

    var (r1, _, e1) = Syscall(procGetFileAttributesExW.Addr(), 3, uintptr(@unsafe.Pointer(name)), uintptr(level), uintptr(@unsafe.Pointer(info)));
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static (uint, error) GetFileAttributes(ptr<ushort> _addr_name) {
    uint attrs = default;
    error err = default!;
    ref ushort name = ref _addr_name.val;

    var (r0, _, e1) = Syscall(procGetFileAttributesW.Addr(), 1, uintptr(@unsafe.Pointer(name)), 0, 0);
    attrs = uint32(r0);
    if (attrs == INVALID_FILE_ATTRIBUTES) {
        err = errnoErr(e1);
    }
    return ;

}

public static error GetFileInformationByHandle(Handle handle, ptr<ByHandleFileInformation> _addr_data) {
    error err = default!;
    ref ByHandleFileInformation data = ref _addr_data.val;

    var (r1, _, e1) = Syscall(procGetFileInformationByHandle.Addr(), 2, uintptr(handle), uintptr(@unsafe.Pointer(data)), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static (uint, error) GetFileType(Handle filehandle) {
    uint n = default;
    error err = default!;

    var (r0, _, e1) = Syscall(procGetFileType.Addr(), 1, uintptr(filehandle), 0, 0);
    n = uint32(r0);
    if (n == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static (uint, error) GetFullPathName(ptr<ushort> _addr_path, uint buflen, ptr<ushort> _addr_buf, ptr<ptr<ushort>> _addr_fname) {
    uint n = default;
    error err = default!;
    ref ushort path = ref _addr_path.val;
    ref ushort buf = ref _addr_buf.val;
    ref ptr<ushort> fname = ref _addr_fname.val;

    var (r0, _, e1) = Syscall6(procGetFullPathNameW.Addr(), 4, uintptr(@unsafe.Pointer(path)), uintptr(buflen), uintptr(@unsafe.Pointer(buf)), uintptr(@unsafe.Pointer(fname)), 0, 0);
    n = uint32(r0);
    if (n == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error GetLastError() {
    error lasterr = default!;

    var (r0, _, _) = Syscall(procGetLastError.Addr(), 0, 0, 0, 0);
    if (r0 != 0) {
        lasterr = Errno(r0);
    }
    return ;

}

public static (uint, error) GetLongPathName(ptr<ushort> _addr_path, ptr<ushort> _addr_buf, uint buflen) {
    uint n = default;
    error err = default!;
    ref ushort path = ref _addr_path.val;
    ref ushort buf = ref _addr_buf.val;

    var (r0, _, e1) = Syscall(procGetLongPathNameW.Addr(), 3, uintptr(@unsafe.Pointer(path)), uintptr(@unsafe.Pointer(buf)), uintptr(buflen));
    n = uint32(r0);
    if (n == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static (System.UIntPtr, error) GetProcAddress(Handle module, @string procname) {
    System.UIntPtr proc = default;
    error err = default!;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(procname);
    if (err != null) {
        return ;
    }
    return _GetProcAddress(module, _p0);

}

private static (System.UIntPtr, error) _GetProcAddress(Handle module, ptr<byte> _addr_procname) {
    System.UIntPtr proc = default;
    error err = default!;
    ref byte procname = ref _addr_procname.val;

    var (r0, _, e1) = Syscall(procGetProcAddress.Addr(), 2, uintptr(module), uintptr(@unsafe.Pointer(procname)), 0);
    proc = uintptr(r0);
    if (proc == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error GetProcessTimes(Handle handle, ptr<Filetime> _addr_creationTime, ptr<Filetime> _addr_exitTime, ptr<Filetime> _addr_kernelTime, ptr<Filetime> _addr_userTime) {
    error err = default!;
    ref Filetime creationTime = ref _addr_creationTime.val;
    ref Filetime exitTime = ref _addr_exitTime.val;
    ref Filetime kernelTime = ref _addr_kernelTime.val;
    ref Filetime userTime = ref _addr_userTime.val;

    var (r1, _, e1) = Syscall6(procGetProcessTimes.Addr(), 5, uintptr(handle), uintptr(@unsafe.Pointer(creationTime)), uintptr(@unsafe.Pointer(exitTime)), uintptr(@unsafe.Pointer(kernelTime)), uintptr(@unsafe.Pointer(userTime)), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

private static error getQueuedCompletionStatus(Handle cphandle, ptr<uint> _addr_qty, ptr<System.UIntPtr> _addr_key, ptr<ptr<Overlapped>> _addr_overlapped, uint timeout) {
    error err = default!;
    ref uint qty = ref _addr_qty.val;
    ref System.UIntPtr key = ref _addr_key.val;
    ref ptr<Overlapped> overlapped = ref _addr_overlapped.val;

    var (r1, _, e1) = Syscall6(procGetQueuedCompletionStatus.Addr(), 5, uintptr(cphandle), uintptr(@unsafe.Pointer(qty)), uintptr(@unsafe.Pointer(key)), uintptr(@unsafe.Pointer(overlapped)), uintptr(timeout), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static (uint, error) GetShortPathName(ptr<ushort> _addr_longpath, ptr<ushort> _addr_shortpath, uint buflen) {
    uint n = default;
    error err = default!;
    ref ushort longpath = ref _addr_longpath.val;
    ref ushort shortpath = ref _addr_shortpath.val;

    var (r0, _, e1) = Syscall(procGetShortPathNameW.Addr(), 3, uintptr(@unsafe.Pointer(longpath)), uintptr(@unsafe.Pointer(shortpath)), uintptr(buflen));
    n = uint32(r0);
    if (n == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error GetStartupInfo(ptr<StartupInfo> _addr_startupInfo) {
    error err = default!;
    ref StartupInfo startupInfo = ref _addr_startupInfo.val;

    var (r1, _, e1) = Syscall(procGetStartupInfoW.Addr(), 1, uintptr(@unsafe.Pointer(startupInfo)), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static (Handle, error) GetStdHandle(nint stdhandle) {
    Handle handle = default;
    error err = default!;

    var (r0, _, e1) = Syscall(procGetStdHandle.Addr(), 1, uintptr(stdhandle), 0, 0);
    handle = Handle(r0);
    if (handle == InvalidHandle) {
        err = errnoErr(e1);
    }
    return ;

}

private static (uint, error) getSystemDirectory(ptr<ushort> _addr_dir, uint dirLen) {
    uint len = default;
    error err = default!;
    ref ushort dir = ref _addr_dir.val;

    var (r0, _, e1) = Syscall(procGetSystemDirectoryW.Addr(), 2, uintptr(@unsafe.Pointer(dir)), uintptr(dirLen), 0);
    len = uint32(r0);
    if (len == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static void GetSystemTimeAsFileTime(ptr<Filetime> _addr_time) {
    ref Filetime time = ref _addr_time.val;

    Syscall(procGetSystemTimeAsFileTime.Addr(), 1, uintptr(@unsafe.Pointer(time)), 0, 0);
    return ;
}

public static (uint, error) GetTempPath(uint buflen, ptr<ushort> _addr_buf) {
    uint n = default;
    error err = default!;
    ref ushort buf = ref _addr_buf.val;

    var (r0, _, e1) = Syscall(procGetTempPathW.Addr(), 2, uintptr(buflen), uintptr(@unsafe.Pointer(buf)), 0);
    n = uint32(r0);
    if (n == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static (uint, error) GetTimeZoneInformation(ptr<Timezoneinformation> _addr_tzi) {
    uint rc = default;
    error err = default!;
    ref Timezoneinformation tzi = ref _addr_tzi.val;

    var (r0, _, e1) = Syscall(procGetTimeZoneInformation.Addr(), 1, uintptr(@unsafe.Pointer(tzi)), 0, 0);
    rc = uint32(r0);
    if (rc == 0xffffffff) {
        err = errnoErr(e1);
    }
    return ;

}

public static (uint, error) GetVersion() {
    uint ver = default;
    error err = default!;

    var (r0, _, e1) = Syscall(procGetVersion.Addr(), 0, 0, 0, 0);
    ver = uint32(r0);
    if (ver == 0) {
        err = errnoErr(e1);
    }
    return ;

}

private static error initializeProcThreadAttributeList(ptr<_PROC_THREAD_ATTRIBUTE_LIST> _addr_attrlist, uint attrcount, uint flags, ptr<System.UIntPtr> _addr_size) {
    error err = default!;
    ref _PROC_THREAD_ATTRIBUTE_LIST attrlist = ref _addr_attrlist.val;
    ref System.UIntPtr size = ref _addr_size.val;

    var (r1, _, e1) = Syscall6(procInitializeProcThreadAttributeList.Addr(), 4, uintptr(@unsafe.Pointer(attrlist)), uintptr(attrcount), uintptr(flags), uintptr(@unsafe.Pointer(size)), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static (Handle, error) LoadLibrary(@string libname) {
    Handle handle = default;
    error err = default!;

    ptr<ushort> _p0;
    _p0, err = UTF16PtrFromString(libname);
    if (err != null) {
        return ;
    }
    return _LoadLibrary(_p0);

}

private static (Handle, error) _LoadLibrary(ptr<ushort> _addr_libname) {
    Handle handle = default;
    error err = default!;
    ref ushort libname = ref _addr_libname.val;

    var (r0, _, e1) = Syscall(procLoadLibraryW.Addr(), 1, uintptr(@unsafe.Pointer(libname)), 0, 0);
    handle = Handle(r0);
    if (handle == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static (Handle, error) LocalFree(Handle hmem) {
    Handle handle = default;
    error err = default!;

    var (r0, _, e1) = Syscall(procLocalFree.Addr(), 1, uintptr(hmem), 0, 0);
    handle = Handle(r0);
    if (handle != 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static (System.UIntPtr, error) MapViewOfFile(Handle handle, uint access, uint offsetHigh, uint offsetLow, System.UIntPtr length) {
    System.UIntPtr addr = default;
    error err = default!;

    var (r0, _, e1) = Syscall6(procMapViewOfFile.Addr(), 5, uintptr(handle), uintptr(access), uintptr(offsetHigh), uintptr(offsetLow), uintptr(length), 0);
    addr = uintptr(r0);
    if (addr == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error MoveFile(ptr<ushort> _addr_from, ptr<ushort> _addr_to) {
    error err = default!;
    ref ushort from = ref _addr_from.val;
    ref ushort to = ref _addr_to.val;

    var (r1, _, e1) = Syscall(procMoveFileW.Addr(), 2, uintptr(@unsafe.Pointer(from)), uintptr(@unsafe.Pointer(to)), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static (Handle, error) OpenProcess(uint da, bool inheritHandle, uint pid) {
    Handle handle = default;
    error err = default!;

    uint _p0 = default;
    if (inheritHandle) {
        _p0 = 1;
    }
    var (r0, _, e1) = Syscall(procOpenProcess.Addr(), 3, uintptr(da), uintptr(_p0), uintptr(pid));
    handle = Handle(r0);
    if (handle == 0) {
        err = errnoErr(e1);
    }
    return ;

}

private static error postQueuedCompletionStatus(Handle cphandle, uint qty, System.UIntPtr key, ptr<Overlapped> _addr_overlapped) {
    error err = default!;
    ref Overlapped overlapped = ref _addr_overlapped.val;

    var (r1, _, e1) = Syscall6(procPostQueuedCompletionStatus.Addr(), 4, uintptr(cphandle), uintptr(qty), uintptr(key), uintptr(@unsafe.Pointer(overlapped)), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error Process32First(Handle snapshot, ptr<ProcessEntry32> _addr_procEntry) {
    error err = default!;
    ref ProcessEntry32 procEntry = ref _addr_procEntry.val;

    var (r1, _, e1) = Syscall(procProcess32FirstW.Addr(), 2, uintptr(snapshot), uintptr(@unsafe.Pointer(procEntry)), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error Process32Next(Handle snapshot, ptr<ProcessEntry32> _addr_procEntry) {
    error err = default!;
    ref ProcessEntry32 procEntry = ref _addr_procEntry.val;

    var (r1, _, e1) = Syscall(procProcess32NextW.Addr(), 2, uintptr(snapshot), uintptr(@unsafe.Pointer(procEntry)), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error ReadConsole(Handle console, ptr<ushort> _addr_buf, uint toread, ptr<uint> _addr_read, ptr<byte> _addr_inputControl) {
    error err = default!;
    ref ushort buf = ref _addr_buf.val;
    ref uint read = ref _addr_read.val;
    ref byte inputControl = ref _addr_inputControl.val;

    var (r1, _, e1) = Syscall6(procReadConsoleW.Addr(), 5, uintptr(console), uintptr(@unsafe.Pointer(buf)), uintptr(toread), uintptr(@unsafe.Pointer(read)), uintptr(@unsafe.Pointer(inputControl)), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error ReadDirectoryChanges(Handle handle, ptr<byte> _addr_buf, uint buflen, bool watchSubTree, uint mask, ptr<uint> _addr_retlen, ptr<Overlapped> _addr_overlapped, System.UIntPtr completionRoutine) {
    error err = default!;
    ref byte buf = ref _addr_buf.val;
    ref uint retlen = ref _addr_retlen.val;
    ref Overlapped overlapped = ref _addr_overlapped.val;

    uint _p0 = default;
    if (watchSubTree) {
        _p0 = 1;
    }
    var (r1, _, e1) = Syscall9(procReadDirectoryChangesW.Addr(), 8, uintptr(handle), uintptr(@unsafe.Pointer(buf)), uintptr(buflen), uintptr(_p0), uintptr(mask), uintptr(@unsafe.Pointer(retlen)), uintptr(@unsafe.Pointer(overlapped)), uintptr(completionRoutine), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error ReadFile(Handle handle, slice<byte> buf, ptr<uint> _addr_done, ptr<Overlapped> _addr_overlapped) {
    error err = default!;
    ref uint done = ref _addr_done.val;
    ref Overlapped overlapped = ref _addr_overlapped.val;

    ptr<byte> _p0;
    if (len(buf) > 0) {
        _p0 = _addr_buf[0];
    }
    var (r1, _, e1) = Syscall6(procReadFile.Addr(), 5, uintptr(handle), uintptr(@unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(@unsafe.Pointer(done)), uintptr(@unsafe.Pointer(overlapped)), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error RemoveDirectory(ptr<ushort> _addr_path) {
    error err = default!;
    ref ushort path = ref _addr_path.val;

    var (r1, _, e1) = Syscall(procRemoveDirectoryW.Addr(), 1, uintptr(@unsafe.Pointer(path)), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error SetCurrentDirectory(ptr<ushort> _addr_path) {
    error err = default!;
    ref ushort path = ref _addr_path.val;

    var (r1, _, e1) = Syscall(procSetCurrentDirectoryW.Addr(), 1, uintptr(@unsafe.Pointer(path)), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error SetEndOfFile(Handle handle) {
    error err = default!;

    var (r1, _, e1) = Syscall(procSetEndOfFile.Addr(), 1, uintptr(handle), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error SetEnvironmentVariable(ptr<ushort> _addr_name, ptr<ushort> _addr_value) {
    error err = default!;
    ref ushort name = ref _addr_name.val;
    ref ushort value = ref _addr_value.val;

    var (r1, _, e1) = Syscall(procSetEnvironmentVariableW.Addr(), 2, uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(value)), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error SetFileAttributes(ptr<ushort> _addr_name, uint attrs) {
    error err = default!;
    ref ushort name = ref _addr_name.val;

    var (r1, _, e1) = Syscall(procSetFileAttributesW.Addr(), 2, uintptr(@unsafe.Pointer(name)), uintptr(attrs), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error SetFileCompletionNotificationModes(Handle handle, byte flags) {
    error err = default!;

    var (r1, _, e1) = Syscall(procSetFileCompletionNotificationModes.Addr(), 2, uintptr(handle), uintptr(flags), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static (uint, error) SetFilePointer(Handle handle, int lowoffset, ptr<int> _addr_highoffsetptr, uint whence) {
    uint newlowoffset = default;
    error err = default!;
    ref int highoffsetptr = ref _addr_highoffsetptr.val;

    var (r0, _, e1) = Syscall6(procSetFilePointer.Addr(), 4, uintptr(handle), uintptr(lowoffset), uintptr(@unsafe.Pointer(highoffsetptr)), uintptr(whence), 0, 0);
    newlowoffset = uint32(r0);
    if (newlowoffset == 0xffffffff) {
        err = errnoErr(e1);
    }
    return ;

}

public static error SetFileTime(Handle handle, ptr<Filetime> _addr_ctime, ptr<Filetime> _addr_atime, ptr<Filetime> _addr_wtime) {
    error err = default!;
    ref Filetime ctime = ref _addr_ctime.val;
    ref Filetime atime = ref _addr_atime.val;
    ref Filetime wtime = ref _addr_wtime.val;

    var (r1, _, e1) = Syscall6(procSetFileTime.Addr(), 4, uintptr(handle), uintptr(@unsafe.Pointer(ctime)), uintptr(@unsafe.Pointer(atime)), uintptr(@unsafe.Pointer(wtime)), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error SetHandleInformation(Handle handle, uint mask, uint flags) {
    error err = default!;

    var (r1, _, e1) = Syscall(procSetHandleInformation.Addr(), 3, uintptr(handle), uintptr(mask), uintptr(flags));
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error TerminateProcess(Handle handle, uint exitcode) {
    error err = default!;

    var (r1, _, e1) = Syscall(procTerminateProcess.Addr(), 2, uintptr(handle), uintptr(exitcode), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error UnmapViewOfFile(System.UIntPtr addr) {
    error err = default!;

    var (r1, _, e1) = Syscall(procUnmapViewOfFile.Addr(), 1, uintptr(addr), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

private static error updateProcThreadAttribute(ptr<_PROC_THREAD_ATTRIBUTE_LIST> _addr_attrlist, uint flags, System.UIntPtr attr, unsafe.Pointer value, System.UIntPtr size, unsafe.Pointer prevvalue, ptr<System.UIntPtr> _addr_returnedsize) {
    error err = default!;
    ref _PROC_THREAD_ATTRIBUTE_LIST attrlist = ref _addr_attrlist.val;
    ref System.UIntPtr returnedsize = ref _addr_returnedsize.val;

    var (r1, _, e1) = Syscall9(procUpdateProcThreadAttribute.Addr(), 7, uintptr(@unsafe.Pointer(attrlist)), uintptr(flags), uintptr(attr), uintptr(value), uintptr(size), uintptr(prevvalue), uintptr(@unsafe.Pointer(returnedsize)), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error VirtualLock(System.UIntPtr addr, System.UIntPtr length) {
    error err = default!;

    var (r1, _, e1) = Syscall(procVirtualLock.Addr(), 2, uintptr(addr), uintptr(length), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error VirtualUnlock(System.UIntPtr addr, System.UIntPtr length) {
    error err = default!;

    var (r1, _, e1) = Syscall(procVirtualUnlock.Addr(), 2, uintptr(addr), uintptr(length), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static (uint, error) WaitForSingleObject(Handle handle, uint waitMilliseconds) {
    uint @event = default;
    error err = default!;

    var (r0, _, e1) = Syscall(procWaitForSingleObject.Addr(), 2, uintptr(handle), uintptr(waitMilliseconds), 0);
    event = uint32(r0);
    if (event == 0xffffffff) {
        err = errnoErr(e1);
    }
    return ;

}

public static error WriteConsole(Handle console, ptr<ushort> _addr_buf, uint towrite, ptr<uint> _addr_written, ptr<byte> _addr_reserved) {
    error err = default!;
    ref ushort buf = ref _addr_buf.val;
    ref uint written = ref _addr_written.val;
    ref byte reserved = ref _addr_reserved.val;

    var (r1, _, e1) = Syscall6(procWriteConsoleW.Addr(), 5, uintptr(console), uintptr(@unsafe.Pointer(buf)), uintptr(towrite), uintptr(@unsafe.Pointer(written)), uintptr(@unsafe.Pointer(reserved)), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error WriteFile(Handle handle, slice<byte> buf, ptr<uint> _addr_done, ptr<Overlapped> _addr_overlapped) {
    error err = default!;
    ref uint done = ref _addr_done.val;
    ref Overlapped overlapped = ref _addr_overlapped.val;

    ptr<byte> _p0;
    if (len(buf) > 0) {
        _p0 = _addr_buf[0];
    }
    var (r1, _, e1) = Syscall6(procWriteFile.Addr(), 5, uintptr(handle), uintptr(@unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(@unsafe.Pointer(done)), uintptr(@unsafe.Pointer(overlapped)), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error AcceptEx(Handle ls, Handle @as, ptr<byte> _addr_buf, uint rxdatalen, uint laddrlen, uint raddrlen, ptr<uint> _addr_recvd, ptr<Overlapped> _addr_overlapped) {
    error err = default!;
    ref byte buf = ref _addr_buf.val;
    ref uint recvd = ref _addr_recvd.val;
    ref Overlapped overlapped = ref _addr_overlapped.val;

    var (r1, _, e1) = Syscall9(procAcceptEx.Addr(), 8, uintptr(ls), uintptr(as), uintptr(@unsafe.Pointer(buf)), uintptr(rxdatalen), uintptr(laddrlen), uintptr(raddrlen), uintptr(@unsafe.Pointer(recvd)), uintptr(@unsafe.Pointer(overlapped)), 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static void GetAcceptExSockaddrs(ptr<byte> _addr_buf, uint rxdatalen, uint laddrlen, uint raddrlen, ptr<ptr<RawSockaddrAny>> _addr_lrsa, ptr<int> _addr_lrsalen, ptr<ptr<RawSockaddrAny>> _addr_rrsa, ptr<int> _addr_rrsalen) {
    ref byte buf = ref _addr_buf.val;
    ref ptr<RawSockaddrAny> lrsa = ref _addr_lrsa.val;
    ref int lrsalen = ref _addr_lrsalen.val;
    ref ptr<RawSockaddrAny> rrsa = ref _addr_rrsa.val;
    ref int rrsalen = ref _addr_rrsalen.val;

    Syscall9(procGetAcceptExSockaddrs.Addr(), 8, uintptr(@unsafe.Pointer(buf)), uintptr(rxdatalen), uintptr(laddrlen), uintptr(raddrlen), uintptr(@unsafe.Pointer(lrsa)), uintptr(@unsafe.Pointer(lrsalen)), uintptr(@unsafe.Pointer(rrsa)), uintptr(@unsafe.Pointer(rrsalen)), 0);
    return ;
}

public static error TransmitFile(Handle s, Handle handle, uint bytesToWrite, uint bytsPerSend, ptr<Overlapped> _addr_overlapped, ptr<TransmitFileBuffers> _addr_transmitFileBuf, uint flags) {
    error err = default!;
    ref Overlapped overlapped = ref _addr_overlapped.val;
    ref TransmitFileBuffers transmitFileBuf = ref _addr_transmitFileBuf.val;

    var (r1, _, e1) = Syscall9(procTransmitFile.Addr(), 7, uintptr(s), uintptr(handle), uintptr(bytesToWrite), uintptr(bytsPerSend), uintptr(@unsafe.Pointer(overlapped)), uintptr(@unsafe.Pointer(transmitFileBuf)), uintptr(flags), 0, 0);
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error NetApiBufferFree(ptr<byte> _addr_buf) {
    error neterr = default!;
    ref byte buf = ref _addr_buf.val;

    var (r0, _, _) = Syscall(procNetApiBufferFree.Addr(), 1, uintptr(@unsafe.Pointer(buf)), 0, 0);
    if (r0 != 0) {
        neterr = Errno(r0);
    }
    return ;

}

public static error NetGetJoinInformation(ptr<ushort> _addr_server, ptr<ptr<ushort>> _addr_name, ptr<uint> _addr_bufType) {
    error neterr = default!;
    ref ushort server = ref _addr_server.val;
    ref ptr<ushort> name = ref _addr_name.val;
    ref uint bufType = ref _addr_bufType.val;

    var (r0, _, _) = Syscall(procNetGetJoinInformation.Addr(), 3, uintptr(@unsafe.Pointer(server)), uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(bufType)));
    if (r0 != 0) {
        neterr = Errno(r0);
    }
    return ;

}

public static error NetUserGetInfo(ptr<ushort> _addr_serverName, ptr<ushort> _addr_userName, uint level, ptr<ptr<byte>> _addr_buf) {
    error neterr = default!;
    ref ushort serverName = ref _addr_serverName.val;
    ref ushort userName = ref _addr_userName.val;
    ref ptr<byte> buf = ref _addr_buf.val;

    var (r0, _, _) = Syscall6(procNetUserGetInfo.Addr(), 4, uintptr(@unsafe.Pointer(serverName)), uintptr(@unsafe.Pointer(userName)), uintptr(level), uintptr(@unsafe.Pointer(buf)), 0, 0);
    if (r0 != 0) {
        neterr = Errno(r0);
    }
    return ;

}

private static void rtlGetNtVersionNumbers(ptr<uint> _addr_majorVersion, ptr<uint> _addr_minorVersion, ptr<uint> _addr_buildNumber) {
    ref uint majorVersion = ref _addr_majorVersion.val;
    ref uint minorVersion = ref _addr_minorVersion.val;
    ref uint buildNumber = ref _addr_buildNumber.val;

    Syscall(procRtlGetNtVersionNumbers.Addr(), 3, uintptr(@unsafe.Pointer(majorVersion)), uintptr(@unsafe.Pointer(minorVersion)), uintptr(@unsafe.Pointer(buildNumber)));
    return ;
}

public static error GetUserNameEx(uint nameFormat, ptr<ushort> _addr_nameBuffre, ptr<uint> _addr_nSize) {
    error err = default!;
    ref ushort nameBuffre = ref _addr_nameBuffre.val;
    ref uint nSize = ref _addr_nSize.val;

    var (r1, _, e1) = Syscall(procGetUserNameExW.Addr(), 3, uintptr(nameFormat), uintptr(@unsafe.Pointer(nameBuffre)), uintptr(@unsafe.Pointer(nSize)));
    if (r1 & 0xff == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static error TranslateName(ptr<ushort> _addr_accName, uint accNameFormat, uint desiredNameFormat, ptr<ushort> _addr_translatedName, ptr<uint> _addr_nSize) {
    error err = default!;
    ref ushort accName = ref _addr_accName.val;
    ref ushort translatedName = ref _addr_translatedName.val;
    ref uint nSize = ref _addr_nSize.val;

    var (r1, _, e1) = Syscall6(procTranslateNameW.Addr(), 5, uintptr(@unsafe.Pointer(accName)), uintptr(accNameFormat), uintptr(desiredNameFormat), uintptr(@unsafe.Pointer(translatedName)), uintptr(@unsafe.Pointer(nSize)), 0);
    if (r1 & 0xff == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static (ptr<array<ptr<array<ushort>>>>, error) CommandLineToArgv(ptr<ushort> _addr_cmd, ptr<int> _addr_argc) {
    ptr<array<ptr<array<ushort>>>> argv = default!;
    error err = default!;
    ref ushort cmd = ref _addr_cmd.val;
    ref int argc = ref _addr_argc.val;

    var (r0, _, e1) = Syscall(procCommandLineToArgvW.Addr(), 2, uintptr(@unsafe.Pointer(cmd)), uintptr(@unsafe.Pointer(argc)), 0);
    argv = new ptr<ptr<array<ptr<array<ushort>>>>>(@unsafe.Pointer(r0));
    if (argv == null) {
        err = errnoErr(e1);
    }
    return ;

}

public static error GetUserProfileDirectory(Token t, ptr<ushort> _addr_dir, ptr<uint> _addr_dirLen) {
    error err = default!;
    ref ushort dir = ref _addr_dir.val;
    ref uint dirLen = ref _addr_dirLen.val;

    var (r1, _, e1) = Syscall(procGetUserProfileDirectoryW.Addr(), 3, uintptr(t), uintptr(@unsafe.Pointer(dir)), uintptr(@unsafe.Pointer(dirLen)));
    if (r1 == 0) {
        err = errnoErr(e1);
    }
    return ;

}

public static void FreeAddrInfoW(ptr<AddrinfoW> _addr_addrinfo) {
    ref AddrinfoW addrinfo = ref _addr_addrinfo.val;

    Syscall(procFreeAddrInfoW.Addr(), 1, uintptr(@unsafe.Pointer(addrinfo)), 0, 0);
    return ;
}

public static error GetAddrInfoW(ptr<ushort> _addr_nodename, ptr<ushort> _addr_servicename, ptr<AddrinfoW> _addr_hints, ptr<ptr<AddrinfoW>> _addr_result) {
    error sockerr = default!;
    ref ushort nodename = ref _addr_nodename.val;
    ref ushort servicename = ref _addr_servicename.val;
    ref AddrinfoW hints = ref _addr_hints.val;
    ref ptr<AddrinfoW> result = ref _addr_result.val;

    var (r0, _, _) = Syscall6(procGetAddrInfoW.Addr(), 4, uintptr(@unsafe.Pointer(nodename)), uintptr(@unsafe.Pointer(servicename)), uintptr(@unsafe.Pointer(hints)), uintptr(@unsafe.Pointer(result)), 0, 0);
    if (r0 != 0) {
        sockerr = Errno(r0);
    }
    return ;

}

public static error WSACleanup() {
    error err = default!;

    var (r1, _, e1) = Syscall(procWSACleanup.Addr(), 0, 0, 0, 0);
    if (r1 == socket_error) {
        err = errnoErr(e1);
    }
    return ;

}

public static (int, error) WSAEnumProtocols(ptr<int> _addr_protocols, ptr<WSAProtocolInfo> _addr_protocolBuffer, ptr<uint> _addr_bufferLength) {
    int n = default;
    error err = default!;
    ref int protocols = ref _addr_protocols.val;
    ref WSAProtocolInfo protocolBuffer = ref _addr_protocolBuffer.val;
    ref uint bufferLength = ref _addr_bufferLength.val;

    var (r0, _, e1) = Syscall(procWSAEnumProtocolsW.Addr(), 3, uintptr(@unsafe.Pointer(protocols)), uintptr(@unsafe.Pointer(protocolBuffer)), uintptr(@unsafe.Pointer(bufferLength)));
    n = int32(r0);
    if (n == -1) {
        err = errnoErr(e1);
    }
    return ;

}

public static error WSAIoctl(Handle s, uint iocc, ptr<byte> _addr_inbuf, uint cbif, ptr<byte> _addr_outbuf, uint cbob, ptr<uint> _addr_cbbr, ptr<Overlapped> _addr_overlapped, System.UIntPtr completionRoutine) {
    error err = default!;
    ref byte inbuf = ref _addr_inbuf.val;
    ref byte outbuf = ref _addr_outbuf.val;
    ref uint cbbr = ref _addr_cbbr.val;
    ref Overlapped overlapped = ref _addr_overlapped.val;

    var (r1, _, e1) = Syscall9(procWSAIoctl.Addr(), 9, uintptr(s), uintptr(iocc), uintptr(@unsafe.Pointer(inbuf)), uintptr(cbif), uintptr(@unsafe.Pointer(outbuf)), uintptr(cbob), uintptr(@unsafe.Pointer(cbbr)), uintptr(@unsafe.Pointer(overlapped)), uintptr(completionRoutine));
    if (r1 == socket_error) {
        err = errnoErr(e1);
    }
    return ;

}

public static error WSARecv(Handle s, ptr<WSABuf> _addr_bufs, uint bufcnt, ptr<uint> _addr_recvd, ptr<uint> _addr_flags, ptr<Overlapped> _addr_overlapped, ptr<byte> _addr_croutine) {
    error err = default!;
    ref WSABuf bufs = ref _addr_bufs.val;
    ref uint recvd = ref _addr_recvd.val;
    ref uint flags = ref _addr_flags.val;
    ref Overlapped overlapped = ref _addr_overlapped.val;
    ref byte croutine = ref _addr_croutine.val;

    var (r1, _, e1) = Syscall9(procWSARecv.Addr(), 7, uintptr(s), uintptr(@unsafe.Pointer(bufs)), uintptr(bufcnt), uintptr(@unsafe.Pointer(recvd)), uintptr(@unsafe.Pointer(flags)), uintptr(@unsafe.Pointer(overlapped)), uintptr(@unsafe.Pointer(croutine)), 0, 0);
    if (r1 == socket_error) {
        err = errnoErr(e1);
    }
    return ;

}

public static error WSARecvFrom(Handle s, ptr<WSABuf> _addr_bufs, uint bufcnt, ptr<uint> _addr_recvd, ptr<uint> _addr_flags, ptr<RawSockaddrAny> _addr_from, ptr<int> _addr_fromlen, ptr<Overlapped> _addr_overlapped, ptr<byte> _addr_croutine) {
    error err = default!;
    ref WSABuf bufs = ref _addr_bufs.val;
    ref uint recvd = ref _addr_recvd.val;
    ref uint flags = ref _addr_flags.val;
    ref RawSockaddrAny from = ref _addr_from.val;
    ref int fromlen = ref _addr_fromlen.val;
    ref Overlapped overlapped = ref _addr_overlapped.val;
    ref byte croutine = ref _addr_croutine.val;

    var (r1, _, e1) = Syscall9(procWSARecvFrom.Addr(), 9, uintptr(s), uintptr(@unsafe.Pointer(bufs)), uintptr(bufcnt), uintptr(@unsafe.Pointer(recvd)), uintptr(@unsafe.Pointer(flags)), uintptr(@unsafe.Pointer(from)), uintptr(@unsafe.Pointer(fromlen)), uintptr(@unsafe.Pointer(overlapped)), uintptr(@unsafe.Pointer(croutine)));
    if (r1 == socket_error) {
        err = errnoErr(e1);
    }
    return ;

}

public static error WSASend(Handle s, ptr<WSABuf> _addr_bufs, uint bufcnt, ptr<uint> _addr_sent, uint flags, ptr<Overlapped> _addr_overlapped, ptr<byte> _addr_croutine) {
    error err = default!;
    ref WSABuf bufs = ref _addr_bufs.val;
    ref uint sent = ref _addr_sent.val;
    ref Overlapped overlapped = ref _addr_overlapped.val;
    ref byte croutine = ref _addr_croutine.val;

    var (r1, _, e1) = Syscall9(procWSASend.Addr(), 7, uintptr(s), uintptr(@unsafe.Pointer(bufs)), uintptr(bufcnt), uintptr(@unsafe.Pointer(sent)), uintptr(flags), uintptr(@unsafe.Pointer(overlapped)), uintptr(@unsafe.Pointer(croutine)), 0, 0);
    if (r1 == socket_error) {
        err = errnoErr(e1);
    }
    return ;

}

public static error WSASendTo(Handle s, ptr<WSABuf> _addr_bufs, uint bufcnt, ptr<uint> _addr_sent, uint flags, ptr<RawSockaddrAny> _addr_to, int tolen, ptr<Overlapped> _addr_overlapped, ptr<byte> _addr_croutine) {
    error err = default!;
    ref WSABuf bufs = ref _addr_bufs.val;
    ref uint sent = ref _addr_sent.val;
    ref RawSockaddrAny to = ref _addr_to.val;
    ref Overlapped overlapped = ref _addr_overlapped.val;
    ref byte croutine = ref _addr_croutine.val;

    var (r1, _, e1) = Syscall9(procWSASendTo.Addr(), 9, uintptr(s), uintptr(@unsafe.Pointer(bufs)), uintptr(bufcnt), uintptr(@unsafe.Pointer(sent)), uintptr(flags), uintptr(@unsafe.Pointer(to)), uintptr(tolen), uintptr(@unsafe.Pointer(overlapped)), uintptr(@unsafe.Pointer(croutine)));
    if (r1 == socket_error) {
        err = errnoErr(e1);
    }
    return ;

}

public static error WSAStartup(uint verreq, ptr<WSAData> _addr_data) {
    error sockerr = default!;
    ref WSAData data = ref _addr_data.val;

    var (r0, _, _) = Syscall(procWSAStartup.Addr(), 2, uintptr(verreq), uintptr(@unsafe.Pointer(data)), 0);
    if (r0 != 0) {
        sockerr = Errno(r0);
    }
    return ;

}

private static error bind(Handle s, unsafe.Pointer name, int namelen) {
    error err = default!;

    var (r1, _, e1) = Syscall(procbind.Addr(), 3, uintptr(s), uintptr(name), uintptr(namelen));
    if (r1 == socket_error) {
        err = errnoErr(e1);
    }
    return ;

}

public static error Closesocket(Handle s) {
    error err = default!;

    var (r1, _, e1) = Syscall(procclosesocket.Addr(), 1, uintptr(s), 0, 0);
    if (r1 == socket_error) {
        err = errnoErr(e1);
    }
    return ;

}

private static error connect(Handle s, unsafe.Pointer name, int namelen) {
    error err = default!;

    var (r1, _, e1) = Syscall(procconnect.Addr(), 3, uintptr(s), uintptr(name), uintptr(namelen));
    if (r1 == socket_error) {
        err = errnoErr(e1);
    }
    return ;

}

public static (ptr<Hostent>, error) GetHostByName(@string name) {
    ptr<Hostent> h = default!;
    error err = default!;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(name);
    if (err != null) {
        return ;
    }
    return _addr__GetHostByName(_p0)!;

}

private static (ptr<Hostent>, error) _GetHostByName(ptr<byte> _addr_name) {
    ptr<Hostent> h = default!;
    error err = default!;
    ref byte name = ref _addr_name.val;

    var (r0, _, e1) = Syscall(procgethostbyname.Addr(), 1, uintptr(@unsafe.Pointer(name)), 0, 0);
    h = (Hostent.val)(@unsafe.Pointer(r0));
    if (h == null) {
        err = errnoErr(e1);
    }
    return ;

}

private static error getpeername(Handle s, ptr<RawSockaddrAny> _addr_rsa, ptr<int> _addr_addrlen) {
    error err = default!;
    ref RawSockaddrAny rsa = ref _addr_rsa.val;
    ref int addrlen = ref _addr_addrlen.val;

    var (r1, _, e1) = Syscall(procgetpeername.Addr(), 3, uintptr(s), uintptr(@unsafe.Pointer(rsa)), uintptr(@unsafe.Pointer(addrlen)));
    if (r1 == socket_error) {
        err = errnoErr(e1);
    }
    return ;

}

public static (ptr<Protoent>, error) GetProtoByName(@string name) {
    ptr<Protoent> p = default!;
    error err = default!;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(name);
    if (err != null) {
        return ;
    }
    return _addr__GetProtoByName(_p0)!;

}

private static (ptr<Protoent>, error) _GetProtoByName(ptr<byte> _addr_name) {
    ptr<Protoent> p = default!;
    error err = default!;
    ref byte name = ref _addr_name.val;

    var (r0, _, e1) = Syscall(procgetprotobyname.Addr(), 1, uintptr(@unsafe.Pointer(name)), 0, 0);
    p = (Protoent.val)(@unsafe.Pointer(r0));
    if (p == null) {
        err = errnoErr(e1);
    }
    return ;

}

public static (ptr<Servent>, error) GetServByName(@string name, @string proto) {
    ptr<Servent> s = default!;
    error err = default!;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(name);
    if (err != null) {
        return ;
    }
    ptr<byte> _p1;
    _p1, err = BytePtrFromString(proto);
    if (err != null) {
        return ;
    }
    return _addr__GetServByName(_p0, _p1)!;

}

private static (ptr<Servent>, error) _GetServByName(ptr<byte> _addr_name, ptr<byte> _addr_proto) {
    ptr<Servent> s = default!;
    error err = default!;
    ref byte name = ref _addr_name.val;
    ref byte proto = ref _addr_proto.val;

    var (r0, _, e1) = Syscall(procgetservbyname.Addr(), 2, uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(proto)), 0);
    s = (Servent.val)(@unsafe.Pointer(r0));
    if (s == null) {
        err = errnoErr(e1);
    }
    return ;

}

private static error getsockname(Handle s, ptr<RawSockaddrAny> _addr_rsa, ptr<int> _addr_addrlen) {
    error err = default!;
    ref RawSockaddrAny rsa = ref _addr_rsa.val;
    ref int addrlen = ref _addr_addrlen.val;

    var (r1, _, e1) = Syscall(procgetsockname.Addr(), 3, uintptr(s), uintptr(@unsafe.Pointer(rsa)), uintptr(@unsafe.Pointer(addrlen)));
    if (r1 == socket_error) {
        err = errnoErr(e1);
    }
    return ;

}

public static error Getsockopt(Handle s, int level, int optname, ptr<byte> _addr_optval, ptr<int> _addr_optlen) {
    error err = default!;
    ref byte optval = ref _addr_optval.val;
    ref int optlen = ref _addr_optlen.val;

    var (r1, _, e1) = Syscall6(procgetsockopt.Addr(), 5, uintptr(s), uintptr(level), uintptr(optname), uintptr(@unsafe.Pointer(optval)), uintptr(@unsafe.Pointer(optlen)), 0);
    if (r1 == socket_error) {
        err = errnoErr(e1);
    }
    return ;

}

private static error listen(Handle s, int backlog) {
    error err = default!;

    var (r1, _, e1) = Syscall(proclisten.Addr(), 2, uintptr(s), uintptr(backlog), 0);
    if (r1 == socket_error) {
        err = errnoErr(e1);
    }
    return ;

}

public static ushort Ntohs(ushort netshort) {
    ushort u = default;

    var (r0, _, _) = Syscall(procntohs.Addr(), 1, uintptr(netshort), 0, 0);
    u = uint16(r0);
    return ;
}

public static error Setsockopt(Handle s, int level, int optname, ptr<byte> _addr_optval, int optlen) {
    error err = default!;
    ref byte optval = ref _addr_optval.val;

    var (r1, _, e1) = Syscall6(procsetsockopt.Addr(), 5, uintptr(s), uintptr(level), uintptr(optname), uintptr(@unsafe.Pointer(optval)), uintptr(optlen), 0);
    if (r1 == socket_error) {
        err = errnoErr(e1);
    }
    return ;

}

private static error shutdown(Handle s, int how) {
    error err = default!;

    var (r1, _, e1) = Syscall(procshutdown.Addr(), 2, uintptr(s), uintptr(how), 0);
    if (r1 == socket_error) {
        err = errnoErr(e1);
    }
    return ;

}

private static (Handle, error) socket(int af, int typ, int protocol) {
    Handle handle = default;
    error err = default!;

    var (r0, _, e1) = Syscall(procsocket.Addr(), 3, uintptr(af), uintptr(typ), uintptr(protocol));
    handle = Handle(r0);
    if (handle == InvalidHandle) {
        err = errnoErr(e1);
    }
    return ;

}

} // end syscall_package
