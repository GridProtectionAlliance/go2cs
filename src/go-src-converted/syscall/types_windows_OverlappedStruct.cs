//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 03:27:53 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;


namespace go
{
    public static partial class syscall_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Overlapped
        {
            // Constructors
            public Overlapped(NilType _)
            {
                this.Internal = default;
                this.InternalHigh = default;
                this.Offset = default;
                this.OffsetHigh = default;
                this.HEvent = default;
            }

            public Overlapped(System.UIntPtr Internal = default, System.UIntPtr InternalHigh = default, uint Offset = default, uint OffsetHigh = default, Handle HEvent = default)
            {
                this.Internal = Internal;
                this.InternalHigh = InternalHigh;
                this.Offset = Offset;
                this.OffsetHigh = OffsetHigh;
                this.HEvent = HEvent;
            }

            // Enable comparisons between nil and Overlapped struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Overlapped value, NilType nil) => value.Equals(default(Overlapped));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Overlapped value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Overlapped value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Overlapped value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Overlapped(NilType nil) => default(Overlapped);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Overlapped Overlapped_cast(dynamic value)
        {
            return new Overlapped(value.Internal, value.InternalHigh, value.Offset, value.OffsetHigh, value.HEvent);
        }
    }
}