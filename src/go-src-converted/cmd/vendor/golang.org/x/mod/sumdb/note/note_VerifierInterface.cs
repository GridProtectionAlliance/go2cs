//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:26:16 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using bytes = go.bytes_package;
using sha256 = go.crypto.sha256_package;
using base64 = go.encoding.base64_package;
using binary = go.encoding.binary_package;
using errors = go.errors_package;
using fmt = go.fmt_package;
using io = go.io_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using unicode = go.unicode_package;
using utf8 = go.unicode.utf8_package;
using ed25519 = go.golang.org.x.crypto.ed25519_package;
using go;

#nullable enable
#pragma warning disable CS0660, CS0661

namespace go {
namespace cmd {
namespace vendor {
namespace golang.org {
namespace x {
namespace mod {
namespace sumdb
{
    public static partial class note_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface Verifier
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Verifier As<T>(in T target) => (Verifier<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Verifier As<T>(ptr<T> target_ptr) => (Verifier<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Verifier? As(object target) =>
                typeof(Verifier<>).CreateInterfaceHandler<Verifier>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class Verifier<T> : Verifier
        {
            private T m_target = default!;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && m_target_ptr is not null)
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public Verifier(in T target) => m_target = target;

            public Verifier(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate bool NameByPtr(ptr<T> value);
            private delegate bool NameByVal(T value);

            private static readonly NameByPtr? s_NameByPtr;
            private static readonly NameByVal? s_NameByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Name()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_NameByPtr is null || !m_target_is_ptr)
                    return s_NameByVal!(target);

                return s_NameByPtr(m_target_ptr!);
            }

            private delegate bool KeyHashByPtr(ptr<T> value);
            private delegate bool KeyHashByVal(T value);

            private static readonly KeyHashByPtr? s_KeyHashByPtr;
            private static readonly KeyHashByVal? s_KeyHashByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool KeyHash()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_KeyHashByPtr is null || !m_target_is_ptr)
                    return s_KeyHashByVal!(target);

                return s_KeyHashByPtr(m_target_ptr!);
            }

            private delegate bool VerifyByPtr(ptr<T> value, slice<byte> msg, slice<byte> sig);
            private delegate bool VerifyByVal(T value, slice<byte> msg, slice<byte> sig);

            private static readonly VerifyByPtr? s_VerifyByPtr;
            private static readonly VerifyByVal? s_VerifyByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Verify(slice<byte> msg, slice<byte> sig)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_VerifyByPtr is null || !m_target_is_ptr)
                    return s_VerifyByVal!(target, msg, sig);

                return s_VerifyByPtr(m_target_ptr!, msg, sig);
            }
            
            public string ToString(string? format, IFormatProvider? formatProvider) => format ?? GetGoTypeName(typeof(T));

            [DebuggerStepperBoundary]
            static Verifier()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Name");

                if (extensionMethod is not null)
                    s_NameByPtr = extensionMethod.CreateStaticDelegate(typeof(NameByPtr)) as NameByPtr;

                extensionMethod = targetType.GetExtensionMethod("Name");

                if (extensionMethod is not null)
                    s_NameByVal = extensionMethod.CreateStaticDelegate(typeof(NameByVal)) as NameByVal;

                if (s_NameByPtr is null && s_NameByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Verifier.Name method", new Exception("Name"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("KeyHash");

                if (extensionMethod is not null)
                    s_KeyHashByPtr = extensionMethod.CreateStaticDelegate(typeof(KeyHashByPtr)) as KeyHashByPtr;

                extensionMethod = targetType.GetExtensionMethod("KeyHash");

                if (extensionMethod is not null)
                    s_KeyHashByVal = extensionMethod.CreateStaticDelegate(typeof(KeyHashByVal)) as KeyHashByVal;

                if (s_KeyHashByPtr is null && s_KeyHashByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Verifier.KeyHash method", new Exception("KeyHash"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Verify");

                if (extensionMethod is not null)
                    s_VerifyByPtr = extensionMethod.CreateStaticDelegate(typeof(VerifyByPtr)) as VerifyByPtr;

                extensionMethod = targetType.GetExtensionMethod("Verify");

                if (extensionMethod is not null)
                    s_VerifyByVal = extensionMethod.CreateStaticDelegate(typeof(VerifyByVal)) as VerifyByVal;

                if (s_VerifyByPtr is null && s_VerifyByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Verifier.Verify method", new Exception("Verify"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Verifier<T>(in ptr<T> target_ptr) => new Verifier<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Verifier<T>(in T target) => new Verifier<T>(target);

            // Enable comparisons between nil and Verifier<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Verifier<T> value, NilType nil) => Activator.CreateInstance<Verifier<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Verifier<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Verifier<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Verifier<T> value) => value != nil;
        }
    }
}}}}}}}

namespace go
{
    public static class note_VerifierExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.cmd.vendor.golang.org.x.mod.sumdb.note_package.Verifier target)
        {
            try
            {
                return ((go.cmd.vendor.golang.org.x.mod.sumdb.note_package.Verifier<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.cmd.vendor.golang.org.x.mod.sumdb.note_package.Verifier target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.cmd.vendor.golang.org.x.mod.sumdb.note_package.Verifier target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.cmd.vendor.golang.org.x.mod.sumdb.note_package.Verifier<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.cmd.vendor.golang.org.x.mod.sumdb.note_package.Verifier target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}