//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:27:25 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using bytes = go.bytes_package;
using runtime = go.runtime_package;
using sort = go.sort_package;
using sync = go.sync_package;
using syscall = go.syscall_package;
using @unsafe = go.@unsafe_package;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace vendor {
namespace golang.org {
namespace x {
namespace sys
{
    public static partial class unix_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct nwmTCPStatsEntry
        {
            // Constructors
            public nwmTCPStatsEntry(NilType _)
            {
                this.ident = default;
                this.currEstab = default;
                this.activeOpened = default;
                this.passiveOpened = default;
                this.connClosed = default;
                this.estabResets = default;
                this.attemptFails = default;
                this.passiveDrops = default;
                this.timeWaitReused = default;
                this.inSegs = default;
                this.predictAck = default;
                this.predictData = default;
                this.inDupAck = default;
                this.inBadSum = default;
                this.inBadLen = default;
                this.inShort = default;
                this.inDiscOldTime = default;
                this.inAllBeforeWin = default;
                this.inSomeBeforeWin = default;
                this.inAllAfterWin = default;
                this.inSomeAfterWin = default;
                this.inOutOfOrder = default;
                this.inAfterClose = default;
                this.inWinProbes = default;
                this.inWinUpdates = default;
                this.outWinUpdates = default;
                this.outSegs = default;
                this.outDelayAcks = default;
                this.outRsts = default;
                this.retransSegs = default;
                this.retransTimeouts = default;
                this.retransDrops = default;
                this.pmtuRetrans = default;
                this.pmtuErrors = default;
                this.outWinProbes = default;
                this.probeDrops = default;
                this.keepAliveProbes = default;
                this.keepAliveDrops = default;
                this.finwait2Drops = default;
                this.acceptCount = default;
                this.inBulkQSegs = default;
                this.inDiscards = default;
                this.connFloods = default;
                this.connStalls = default;
                this.cfgEphemDef = default;
                this.ephemInUse = default;
                this.ephemHiWater = default;
                this.flags = default;
                this._ = default;
                this.ephemExhaust = default;
                this.smcRCurrEstabLnks = default;
                this.smcRLnkActTimeOut = default;
                this.smcRActLnkOpened = default;
                this.smcRPasLnkOpened = default;
                this.smcRLnksClosed = default;
                this.smcRCurrEstab = default;
                this.smcRActiveOpened = default;
                this.smcRPassiveOpened = default;
                this.smcRConnClosed = default;
                this.smcRInSegs = default;
                this.smcROutSegs = default;
                this.smcRInRsts = default;
                this.smcROutRsts = default;
                this.smcDCurrEstabLnks = default;
                this.smcDActLnkOpened = default;
                this.smcDPasLnkOpened = default;
                this.smcDLnksClosed = default;
                this.smcDCurrEstab = default;
                this.smcDActiveOpened = default;
                this.smcDPassiveOpened = default;
                this.smcDConnClosed = default;
                this.smcDInSegs = default;
                this.smcDOutSegs = default;
                this.smcDInRsts = default;
                this.smcDOutRsts = default;
            }

            public nwmTCPStatsEntry(ulong ident = default, uint currEstab = default, uint activeOpened = default, uint passiveOpened = default, uint connClosed = default, uint estabResets = default, uint attemptFails = default, uint passiveDrops = default, uint timeWaitReused = default, ulong inSegs = default, uint predictAck = default, uint predictData = default, uint inDupAck = default, uint inBadSum = default, uint inBadLen = default, uint inShort = default, uint inDiscOldTime = default, uint inAllBeforeWin = default, uint inSomeBeforeWin = default, uint inAllAfterWin = default, uint inSomeAfterWin = default, uint inOutOfOrder = default, uint inAfterClose = default, uint inWinProbes = default, uint inWinUpdates = default, uint outWinUpdates = default, ulong outSegs = default, uint outDelayAcks = default, uint outRsts = default, uint retransSegs = default, uint retransTimeouts = default, uint retransDrops = default, uint pmtuRetrans = default, uint pmtuErrors = default, uint outWinProbes = default, uint probeDrops = default, uint keepAliveProbes = default, uint keepAliveDrops = default, uint finwait2Drops = default, ulong acceptCount = default, ulong inBulkQSegs = default, ulong inDiscards = default, uint connFloods = default, uint connStalls = default, ushort cfgEphemDef = default, ushort ephemInUse = default, ushort ephemHiWater = default, byte flags = default, array<byte> _ = default, uint ephemExhaust = default, uint smcRCurrEstabLnks = default, uint smcRLnkActTimeOut = default, uint smcRActLnkOpened = default, uint smcRPasLnkOpened = default, uint smcRLnksClosed = default, uint smcRCurrEstab = default, uint smcRActiveOpened = default, uint smcRPassiveOpened = default, uint smcRConnClosed = default, ulong smcRInSegs = default, ulong smcROutSegs = default, uint smcRInRsts = default, uint smcROutRsts = default, uint smcDCurrEstabLnks = default, uint smcDActLnkOpened = default, uint smcDPasLnkOpened = default, uint smcDLnksClosed = default, uint smcDCurrEstab = default, uint smcDActiveOpened = default, uint smcDPassiveOpened = default, uint smcDConnClosed = default, ulong smcDInSegs = default, ulong smcDOutSegs = default, uint smcDInRsts = default, uint smcDOutRsts = default)
            {
                this.ident = ident;
                this.currEstab = currEstab;
                this.activeOpened = activeOpened;
                this.passiveOpened = passiveOpened;
                this.connClosed = connClosed;
                this.estabResets = estabResets;
                this.attemptFails = attemptFails;
                this.passiveDrops = passiveDrops;
                this.timeWaitReused = timeWaitReused;
                this.inSegs = inSegs;
                this.predictAck = predictAck;
                this.predictData = predictData;
                this.inDupAck = inDupAck;
                this.inBadSum = inBadSum;
                this.inBadLen = inBadLen;
                this.inShort = inShort;
                this.inDiscOldTime = inDiscOldTime;
                this.inAllBeforeWin = inAllBeforeWin;
                this.inSomeBeforeWin = inSomeBeforeWin;
                this.inAllAfterWin = inAllAfterWin;
                this.inSomeAfterWin = inSomeAfterWin;
                this.inOutOfOrder = inOutOfOrder;
                this.inAfterClose = inAfterClose;
                this.inWinProbes = inWinProbes;
                this.inWinUpdates = inWinUpdates;
                this.outWinUpdates = outWinUpdates;
                this.outSegs = outSegs;
                this.outDelayAcks = outDelayAcks;
                this.outRsts = outRsts;
                this.retransSegs = retransSegs;
                this.retransTimeouts = retransTimeouts;
                this.retransDrops = retransDrops;
                this.pmtuRetrans = pmtuRetrans;
                this.pmtuErrors = pmtuErrors;
                this.outWinProbes = outWinProbes;
                this.probeDrops = probeDrops;
                this.keepAliveProbes = keepAliveProbes;
                this.keepAliveDrops = keepAliveDrops;
                this.finwait2Drops = finwait2Drops;
                this.acceptCount = acceptCount;
                this.inBulkQSegs = inBulkQSegs;
                this.inDiscards = inDiscards;
                this.connFloods = connFloods;
                this.connStalls = connStalls;
                this.cfgEphemDef = cfgEphemDef;
                this.ephemInUse = ephemInUse;
                this.ephemHiWater = ephemHiWater;
                this.flags = flags;
                this._ = _;
                this.ephemExhaust = ephemExhaust;
                this.smcRCurrEstabLnks = smcRCurrEstabLnks;
                this.smcRLnkActTimeOut = smcRLnkActTimeOut;
                this.smcRActLnkOpened = smcRActLnkOpened;
                this.smcRPasLnkOpened = smcRPasLnkOpened;
                this.smcRLnksClosed = smcRLnksClosed;
                this.smcRCurrEstab = smcRCurrEstab;
                this.smcRActiveOpened = smcRActiveOpened;
                this.smcRPassiveOpened = smcRPassiveOpened;
                this.smcRConnClosed = smcRConnClosed;
                this.smcRInSegs = smcRInSegs;
                this.smcROutSegs = smcROutSegs;
                this.smcRInRsts = smcRInRsts;
                this.smcROutRsts = smcROutRsts;
                this.smcDCurrEstabLnks = smcDCurrEstabLnks;
                this.smcDActLnkOpened = smcDActLnkOpened;
                this.smcDPasLnkOpened = smcDPasLnkOpened;
                this.smcDLnksClosed = smcDLnksClosed;
                this.smcDCurrEstab = smcDCurrEstab;
                this.smcDActiveOpened = smcDActiveOpened;
                this.smcDPassiveOpened = smcDPassiveOpened;
                this.smcDConnClosed = smcDConnClosed;
                this.smcDInSegs = smcDInSegs;
                this.smcDOutSegs = smcDOutSegs;
                this.smcDInRsts = smcDInRsts;
                this.smcDOutRsts = smcDOutRsts;
            }

            // Enable comparisons between nil and nwmTCPStatsEntry struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(nwmTCPStatsEntry value, NilType nil) => value.Equals(default(nwmTCPStatsEntry));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(nwmTCPStatsEntry value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, nwmTCPStatsEntry value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, nwmTCPStatsEntry value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator nwmTCPStatsEntry(NilType nil) => default(nwmTCPStatsEntry);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static nwmTCPStatsEntry nwmTCPStatsEntry_cast(dynamic value)
        {
            return new nwmTCPStatsEntry(value.ident, value.currEstab, value.activeOpened, value.passiveOpened, value.connClosed, value.estabResets, value.attemptFails, value.passiveDrops, value.timeWaitReused, value.inSegs, value.predictAck, value.predictData, value.inDupAck, value.inBadSum, value.inBadLen, value.inShort, value.inDiscOldTime, value.inAllBeforeWin, value.inSomeBeforeWin, value.inAllAfterWin, value.inSomeAfterWin, value.inOutOfOrder, value.inAfterClose, value.inWinProbes, value.inWinUpdates, value.outWinUpdates, value.outSegs, value.outDelayAcks, value.outRsts, value.retransSegs, value.retransTimeouts, value.retransDrops, value.pmtuRetrans, value.pmtuErrors, value.outWinProbes, value.probeDrops, value.keepAliveProbes, value.keepAliveDrops, value.finwait2Drops, value.acceptCount, value.inBulkQSegs, value.inDiscards, value.connFloods, value.connStalls, value.cfgEphemDef, value.ephemInUse, value.ephemHiWater, value.flags, value._, value.ephemExhaust, value.smcRCurrEstabLnks, value.smcRLnkActTimeOut, value.smcRActLnkOpened, value.smcRPasLnkOpened, value.smcRLnksClosed, value.smcRCurrEstab, value.smcRActiveOpened, value.smcRPassiveOpened, value.smcRConnClosed, value.smcRInSegs, value.smcROutSegs, value.smcRInRsts, value.smcROutRsts, value.smcDCurrEstabLnks, value.smcDActLnkOpened, value.smcDPasLnkOpened, value.smcDLnksClosed, value.smcDCurrEstab, value.smcDActiveOpened, value.smcDPassiveOpened, value.smcDConnClosed, value.smcDInSegs, value.smcDOutSegs, value.smcDInRsts, value.smcDOutRsts);
        }
    }
}}}}}}