// go run mksysnum.go https://svn.freebsd.org/base/stable/11/sys/kern/syscalls.master
// Code generated by the command above; see README.md. DO NOT EDIT.

// +build arm64,freebsd

// package unix -- go2cs converted at 2020 October 08 04:53:24 UTC
// import "cmd/vendor/golang.org/x/sys/unix" ==> using unix = go.cmd.vendor.golang.org.x.sys.unix_package
// Original source: C:\Go\src\cmd\vendor\golang.org\x\sys\unix\zsysnum_freebsd_arm64.go

using static go.builtin;

namespace go {
namespace cmd {
namespace vendor {
namespace golang.org {
namespace x {
namespace sys
{
    public static partial class unix_package
    {
 
        // SYS_NOSYS = 0;  // { int nosys(void); } syscall nosys_args int
        public static readonly long SYS_EXIT = (long)1L; // { void sys_exit(int rval); } exit sys_exit_args void
        public static readonly long SYS_FORK = (long)2L; // { int fork(void); }
        public static readonly long SYS_READ = (long)3L; // { ssize_t read(int fd, void *buf, size_t nbyte); }
        public static readonly long SYS_WRITE = (long)4L; // { ssize_t write(int fd, const void *buf, size_t nbyte); }
        public static readonly long SYS_OPEN = (long)5L; // { int open(char *path, int flags, int mode); }
        public static readonly long SYS_CLOSE = (long)6L; // { int close(int fd); }
        public static readonly long SYS_WAIT4 = (long)7L; // { int wait4(int pid, int *status, int options, struct rusage *rusage); }
        public static readonly long SYS_LINK = (long)9L; // { int link(char *path, char *link); }
        public static readonly long SYS_UNLINK = (long)10L; // { int unlink(char *path); }
        public static readonly long SYS_CHDIR = (long)12L; // { int chdir(char *path); }
        public static readonly long SYS_FCHDIR = (long)13L; // { int fchdir(int fd); }
        public static readonly long SYS_MKNOD = (long)14L; // { int mknod(char *path, int mode, int dev); }
        public static readonly long SYS_CHMOD = (long)15L; // { int chmod(char *path, int mode); }
        public static readonly long SYS_CHOWN = (long)16L; // { int chown(char *path, int uid, int gid); }
        public static readonly long SYS_OBREAK = (long)17L; // { int obreak(char *nsize); } break obreak_args int
        public static readonly long SYS_GETPID = (long)20L; // { pid_t getpid(void); }
        public static readonly long SYS_MOUNT = (long)21L; // { int mount(char *type, char *path, int flags, caddr_t data); }
        public static readonly long SYS_UNMOUNT = (long)22L; // { int unmount(char *path, int flags); }
        public static readonly long SYS_SETUID = (long)23L; // { int setuid(uid_t uid); }
        public static readonly long SYS_GETUID = (long)24L; // { uid_t getuid(void); }
        public static readonly long SYS_GETEUID = (long)25L; // { uid_t geteuid(void); }
        public static readonly long SYS_PTRACE = (long)26L; // { int ptrace(int req, pid_t pid, caddr_t addr, int data); }
        public static readonly long SYS_RECVMSG = (long)27L; // { int recvmsg(int s, struct msghdr *msg, int flags); }
        public static readonly long SYS_SENDMSG = (long)28L; // { int sendmsg(int s, struct msghdr *msg, int flags); }
        public static readonly long SYS_RECVFROM = (long)29L; // { int recvfrom(int s, caddr_t buf, size_t len, int flags, struct sockaddr * __restrict from, __socklen_t * __restrict fromlenaddr); }
        public static readonly long SYS_ACCEPT = (long)30L; // { int accept(int s, struct sockaddr * __restrict name, __socklen_t * __restrict anamelen); }
        public static readonly long SYS_GETPEERNAME = (long)31L; // { int getpeername(int fdes, struct sockaddr * __restrict asa, __socklen_t * __restrict alen); }
        public static readonly long SYS_GETSOCKNAME = (long)32L; // { int getsockname(int fdes, struct sockaddr * __restrict asa, __socklen_t * __restrict alen); }
        public static readonly long SYS_ACCESS = (long)33L; // { int access(char *path, int amode); }
        public static readonly long SYS_CHFLAGS = (long)34L; // { int chflags(const char *path, u_long flags); }
        public static readonly long SYS_FCHFLAGS = (long)35L; // { int fchflags(int fd, u_long flags); }
        public static readonly long SYS_SYNC = (long)36L; // { int sync(void); }
        public static readonly long SYS_KILL = (long)37L; // { int kill(int pid, int signum); }
        public static readonly long SYS_GETPPID = (long)39L; // { pid_t getppid(void); }
        public static readonly long SYS_DUP = (long)41L; // { int dup(u_int fd); }
        public static readonly long SYS_PIPE = (long)42L; // { int pipe(void); }
        public static readonly long SYS_GETEGID = (long)43L; // { gid_t getegid(void); }
        public static readonly long SYS_PROFIL = (long)44L; // { int profil(caddr_t samples, size_t size, size_t offset, u_int scale); }
        public static readonly long SYS_KTRACE = (long)45L; // { int ktrace(const char *fname, int ops, int facs, int pid); }
        public static readonly long SYS_GETGID = (long)47L; // { gid_t getgid(void); }
        public static readonly long SYS_GETLOGIN = (long)49L; // { int getlogin(char *namebuf, u_int namelen); }
        public static readonly long SYS_SETLOGIN = (long)50L; // { int setlogin(char *namebuf); }
        public static readonly long SYS_ACCT = (long)51L; // { int acct(char *path); }
        public static readonly long SYS_SIGALTSTACK = (long)53L; // { int sigaltstack(stack_t *ss, stack_t *oss); }
        public static readonly long SYS_IOCTL = (long)54L; // { int ioctl(int fd, u_long com, caddr_t data); }
        public static readonly long SYS_REBOOT = (long)55L; // { int reboot(int opt); }
        public static readonly long SYS_REVOKE = (long)56L; // { int revoke(char *path); }
        public static readonly long SYS_SYMLINK = (long)57L; // { int symlink(char *path, char *link); }
        public static readonly long SYS_READLINK = (long)58L; // { ssize_t readlink(char *path, char *buf, size_t count); }
        public static readonly long SYS_EXECVE = (long)59L; // { int execve(char *fname, char **argv, char **envv); }
        public static readonly long SYS_UMASK = (long)60L; // { int umask(int newmask); } umask umask_args int
        public static readonly long SYS_CHROOT = (long)61L; // { int chroot(char *path); }
        public static readonly long SYS_MSYNC = (long)65L; // { int msync(void *addr, size_t len, int flags); }
        public static readonly long SYS_VFORK = (long)66L; // { int vfork(void); }
        public static readonly long SYS_SBRK = (long)69L; // { int sbrk(int incr); }
        public static readonly long SYS_SSTK = (long)70L; // { int sstk(int incr); }
        public static readonly long SYS_OVADVISE = (long)72L; // { int ovadvise(int anom); } vadvise ovadvise_args int
        public static readonly long SYS_MUNMAP = (long)73L; // { int munmap(void *addr, size_t len); }
        public static readonly long SYS_MPROTECT = (long)74L; // { int mprotect(const void *addr, size_t len, int prot); }
        public static readonly long SYS_MADVISE = (long)75L; // { int madvise(void *addr, size_t len, int behav); }
        public static readonly long SYS_MINCORE = (long)78L; // { int mincore(const void *addr, size_t len, char *vec); }
        public static readonly long SYS_GETGROUPS = (long)79L; // { int getgroups(u_int gidsetsize, gid_t *gidset); }
        public static readonly long SYS_SETGROUPS = (long)80L; // { int setgroups(u_int gidsetsize, gid_t *gidset); }
        public static readonly long SYS_GETPGRP = (long)81L; // { int getpgrp(void); }
        public static readonly long SYS_SETPGID = (long)82L; // { int setpgid(int pid, int pgid); }
        public static readonly long SYS_SETITIMER = (long)83L; // { int setitimer(u_int which, struct itimerval *itv, struct itimerval *oitv); }
        public static readonly long SYS_SWAPON = (long)85L; // { int swapon(char *name); }
        public static readonly long SYS_GETITIMER = (long)86L; // { int getitimer(u_int which, struct itimerval *itv); }
        public static readonly long SYS_GETDTABLESIZE = (long)89L; // { int getdtablesize(void); }
        public static readonly long SYS_DUP2 = (long)90L; // { int dup2(u_int from, u_int to); }
        public static readonly long SYS_FCNTL = (long)92L; // { int fcntl(int fd, int cmd, long arg); }
        public static readonly long SYS_SELECT = (long)93L; // { int select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }
        public static readonly long SYS_FSYNC = (long)95L; // { int fsync(int fd); }
        public static readonly long SYS_SETPRIORITY = (long)96L; // { int setpriority(int which, int who, int prio); }
        public static readonly long SYS_SOCKET = (long)97L; // { int socket(int domain, int type, int protocol); }
        public static readonly long SYS_CONNECT = (long)98L; // { int connect(int s, caddr_t name, int namelen); }
        public static readonly long SYS_GETPRIORITY = (long)100L; // { int getpriority(int which, int who); }
        public static readonly long SYS_BIND = (long)104L; // { int bind(int s, caddr_t name, int namelen); }
        public static readonly long SYS_SETSOCKOPT = (long)105L; // { int setsockopt(int s, int level, int name, caddr_t val, int valsize); }
        public static readonly long SYS_LISTEN = (long)106L; // { int listen(int s, int backlog); }
        public static readonly long SYS_GETTIMEOFDAY = (long)116L; // { int gettimeofday(struct timeval *tp, struct timezone *tzp); }
        public static readonly long SYS_GETRUSAGE = (long)117L; // { int getrusage(int who, struct rusage *rusage); }
        public static readonly long SYS_GETSOCKOPT = (long)118L; // { int getsockopt(int s, int level, int name, caddr_t val, int *avalsize); }
        public static readonly long SYS_READV = (long)120L; // { int readv(int fd, struct iovec *iovp, u_int iovcnt); }
        public static readonly long SYS_WRITEV = (long)121L; // { int writev(int fd, struct iovec *iovp, u_int iovcnt); }
        public static readonly long SYS_SETTIMEOFDAY = (long)122L; // { int settimeofday(struct timeval *tv, struct timezone *tzp); }
        public static readonly long SYS_FCHOWN = (long)123L; // { int fchown(int fd, int uid, int gid); }
        public static readonly long SYS_FCHMOD = (long)124L; // { int fchmod(int fd, int mode); }
        public static readonly long SYS_SETREUID = (long)126L; // { int setreuid(int ruid, int euid); }
        public static readonly long SYS_SETREGID = (long)127L; // { int setregid(int rgid, int egid); }
        public static readonly long SYS_RENAME = (long)128L; // { int rename(char *from, char *to); }
        public static readonly long SYS_FLOCK = (long)131L; // { int flock(int fd, int how); }
        public static readonly long SYS_MKFIFO = (long)132L; // { int mkfifo(char *path, int mode); }
        public static readonly long SYS_SENDTO = (long)133L; // { int sendto(int s, caddr_t buf, size_t len, int flags, caddr_t to, int tolen); }
        public static readonly long SYS_SHUTDOWN = (long)134L; // { int shutdown(int s, int how); }
        public static readonly long SYS_SOCKETPAIR = (long)135L; // { int socketpair(int domain, int type, int protocol, int *rsv); }
        public static readonly long SYS_MKDIR = (long)136L; // { int mkdir(char *path, int mode); }
        public static readonly long SYS_RMDIR = (long)137L; // { int rmdir(char *path); }
        public static readonly long SYS_UTIMES = (long)138L; // { int utimes(char *path, struct timeval *tptr); }
        public static readonly long SYS_ADJTIME = (long)140L; // { int adjtime(struct timeval *delta, struct timeval *olddelta); }
        public static readonly long SYS_SETSID = (long)147L; // { int setsid(void); }
        public static readonly long SYS_QUOTACTL = (long)148L; // { int quotactl(char *path, int cmd, int uid, caddr_t arg); }
        public static readonly long SYS_NLM_SYSCALL = (long)154L; // { int nlm_syscall(int debug_level, int grace_period, int addr_count, char **addrs); }
        public static readonly long SYS_NFSSVC = (long)155L; // { int nfssvc(int flag, caddr_t argp); }
        public static readonly long SYS_LGETFH = (long)160L; // { int lgetfh(char *fname, struct fhandle *fhp); }
        public static readonly long SYS_GETFH = (long)161L; // { int getfh(char *fname, struct fhandle *fhp); }
        public static readonly long SYS_SYSARCH = (long)165L; // { int sysarch(int op, char *parms); }
        public static readonly long SYS_RTPRIO = (long)166L; // { int rtprio(int function, pid_t pid, struct rtprio *rtp); }
        public static readonly long SYS_SEMSYS = (long)169L; // { int semsys(int which, int a2, int a3, int a4, int a5); }
        public static readonly long SYS_MSGSYS = (long)170L; // { int msgsys(int which, int a2, int a3, int a4, int a5, int a6); }
        public static readonly long SYS_SHMSYS = (long)171L; // { int shmsys(int which, int a2, int a3, int a4); }
        public static readonly long SYS_SETFIB = (long)175L; // { int setfib(int fibnum); }
        public static readonly long SYS_NTP_ADJTIME = (long)176L; // { int ntp_adjtime(struct timex *tp); }
        public static readonly long SYS_SETGID = (long)181L; // { int setgid(gid_t gid); }
        public static readonly long SYS_SETEGID = (long)182L; // { int setegid(gid_t egid); }
        public static readonly long SYS_SETEUID = (long)183L; // { int seteuid(uid_t euid); }
        public static readonly long SYS_STAT = (long)188L; // { int stat(char *path, struct stat *ub); }
        public static readonly long SYS_FSTAT = (long)189L; // { int fstat(int fd, struct stat *sb); }
        public static readonly long SYS_LSTAT = (long)190L; // { int lstat(char *path, struct stat *ub); }
        public static readonly long SYS_PATHCONF = (long)191L; // { int pathconf(char *path, int name); }
        public static readonly long SYS_FPATHCONF = (long)192L; // { int fpathconf(int fd, int name); }
        public static readonly long SYS_GETRLIMIT = (long)194L; // { int getrlimit(u_int which, struct rlimit *rlp); } getrlimit __getrlimit_args int
        public static readonly long SYS_SETRLIMIT = (long)195L; // { int setrlimit(u_int which, struct rlimit *rlp); } setrlimit __setrlimit_args int
        public static readonly long SYS_GETDIRENTRIES = (long)196L; // { int getdirentries(int fd, char *buf, u_int count, long *basep); }
        public static readonly long SYS___SYSCTL = (long)202L; // { int __sysctl(int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); } __sysctl sysctl_args int
        public static readonly long SYS_MLOCK = (long)203L; // { int mlock(const void *addr, size_t len); }
        public static readonly long SYS_MUNLOCK = (long)204L; // { int munlock(const void *addr, size_t len); }
        public static readonly long SYS_UNDELETE = (long)205L; // { int undelete(char *path); }
        public static readonly long SYS_FUTIMES = (long)206L; // { int futimes(int fd, struct timeval *tptr); }
        public static readonly long SYS_GETPGID = (long)207L; // { int getpgid(pid_t pid); }
        public static readonly long SYS_POLL = (long)209L; // { int poll(struct pollfd *fds, u_int nfds, int timeout); }
        public static readonly long SYS_SEMGET = (long)221L; // { int semget(key_t key, int nsems, int semflg); }
        public static readonly long SYS_SEMOP = (long)222L; // { int semop(int semid, struct sembuf *sops, size_t nsops); }
        public static readonly long SYS_MSGGET = (long)225L; // { int msgget(key_t key, int msgflg); }
        public static readonly long SYS_MSGSND = (long)226L; // { int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); }
        public static readonly long SYS_MSGRCV = (long)227L; // { int msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }
        public static readonly long SYS_SHMAT = (long)228L; // { int shmat(int shmid, const void *shmaddr, int shmflg); }
        public static readonly long SYS_SHMDT = (long)230L; // { int shmdt(const void *shmaddr); }
        public static readonly long SYS_SHMGET = (long)231L; // { int shmget(key_t key, size_t size, int shmflg); }
        public static readonly long SYS_CLOCK_GETTIME = (long)232L; // { int clock_gettime(clockid_t clock_id, struct timespec *tp); }
        public static readonly long SYS_CLOCK_SETTIME = (long)233L; // { int clock_settime( clockid_t clock_id, const struct timespec *tp); }
        public static readonly long SYS_CLOCK_GETRES = (long)234L; // { int clock_getres(clockid_t clock_id, struct timespec *tp); }
        public static readonly long SYS_KTIMER_CREATE = (long)235L; // { int ktimer_create(clockid_t clock_id, struct sigevent *evp, int *timerid); }
        public static readonly long SYS_KTIMER_DELETE = (long)236L; // { int ktimer_delete(int timerid); }
        public static readonly long SYS_KTIMER_SETTIME = (long)237L; // { int ktimer_settime(int timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue); }
        public static readonly long SYS_KTIMER_GETTIME = (long)238L; // { int ktimer_gettime(int timerid, struct itimerspec *value); }
        public static readonly long SYS_KTIMER_GETOVERRUN = (long)239L; // { int ktimer_getoverrun(int timerid); }
        public static readonly long SYS_NANOSLEEP = (long)240L; // { int nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }
        public static readonly long SYS_FFCLOCK_GETCOUNTER = (long)241L; // { int ffclock_getcounter(ffcounter *ffcount); }
        public static readonly long SYS_FFCLOCK_SETESTIMATE = (long)242L; // { int ffclock_setestimate( struct ffclock_estimate *cest); }
        public static readonly long SYS_FFCLOCK_GETESTIMATE = (long)243L; // { int ffclock_getestimate( struct ffclock_estimate *cest); }
        public static readonly long SYS_CLOCK_NANOSLEEP = (long)244L; // { int clock_nanosleep(clockid_t clock_id, int flags, const struct timespec *rqtp, struct timespec *rmtp); }
        public static readonly long SYS_CLOCK_GETCPUCLOCKID2 = (long)247L; // { int clock_getcpuclockid2(id_t id,int which, clockid_t *clock_id); }
        public static readonly long SYS_NTP_GETTIME = (long)248L; // { int ntp_gettime(struct ntptimeval *ntvp); }
        public static readonly long SYS_MINHERIT = (long)250L; // { int minherit(void *addr, size_t len, int inherit); }
        public static readonly long SYS_RFORK = (long)251L; // { int rfork(int flags); }
        public static readonly long SYS_OPENBSD_POLL = (long)252L; // { int openbsd_poll(struct pollfd *fds, u_int nfds, int timeout); }
        public static readonly long SYS_ISSETUGID = (long)253L; // { int issetugid(void); }
        public static readonly long SYS_LCHOWN = (long)254L; // { int lchown(char *path, int uid, int gid); }
        public static readonly long SYS_AIO_READ = (long)255L; // { int aio_read(struct aiocb *aiocbp); }
        public static readonly long SYS_AIO_WRITE = (long)256L; // { int aio_write(struct aiocb *aiocbp); }
        public static readonly long SYS_LIO_LISTIO = (long)257L; // { int lio_listio(int mode, struct aiocb * const *acb_list, int nent, struct sigevent *sig); }
        public static readonly long SYS_GETDENTS = (long)272L; // { int getdents(int fd, char *buf, size_t count); }
        public static readonly long SYS_LCHMOD = (long)274L; // { int lchmod(char *path, mode_t mode); }
        public static readonly long SYS_LUTIMES = (long)276L; // { int lutimes(char *path, struct timeval *tptr); }
        public static readonly long SYS_NSTAT = (long)278L; // { int nstat(char *path, struct nstat *ub); }
        public static readonly long SYS_NFSTAT = (long)279L; // { int nfstat(int fd, struct nstat *sb); }
        public static readonly long SYS_NLSTAT = (long)280L; // { int nlstat(char *path, struct nstat *ub); }
        public static readonly long SYS_PREADV = (long)289L; // { ssize_t preadv(int fd, struct iovec *iovp, u_int iovcnt, off_t offset); }
        public static readonly long SYS_PWRITEV = (long)290L; // { ssize_t pwritev(int fd, struct iovec *iovp, u_int iovcnt, off_t offset); }
        public static readonly long SYS_FHOPEN = (long)298L; // { int fhopen(const struct fhandle *u_fhp, int flags); }
        public static readonly long SYS_FHSTAT = (long)299L; // { int fhstat(const struct fhandle *u_fhp, struct stat *sb); }
        public static readonly long SYS_MODNEXT = (long)300L; // { int modnext(int modid); }
        public static readonly long SYS_MODSTAT = (long)301L; // { int modstat(int modid, struct module_stat *stat); }
        public static readonly long SYS_MODFNEXT = (long)302L; // { int modfnext(int modid); }
        public static readonly long SYS_MODFIND = (long)303L; // { int modfind(const char *name); }
        public static readonly long SYS_KLDLOAD = (long)304L; // { int kldload(const char *file); }
        public static readonly long SYS_KLDUNLOAD = (long)305L; // { int kldunload(int fileid); }
        public static readonly long SYS_KLDFIND = (long)306L; // { int kldfind(const char *file); }
        public static readonly long SYS_KLDNEXT = (long)307L; // { int kldnext(int fileid); }
        public static readonly long SYS_KLDSTAT = (long)308L; // { int kldstat(int fileid, struct kld_file_stat* stat); }
        public static readonly long SYS_KLDFIRSTMOD = (long)309L; // { int kldfirstmod(int fileid); }
        public static readonly long SYS_GETSID = (long)310L; // { int getsid(pid_t pid); }
        public static readonly long SYS_SETRESUID = (long)311L; // { int setresuid(uid_t ruid, uid_t euid, uid_t suid); }
        public static readonly long SYS_SETRESGID = (long)312L; // { int setresgid(gid_t rgid, gid_t egid, gid_t sgid); }
        public static readonly long SYS_AIO_RETURN = (long)314L; // { ssize_t aio_return(struct aiocb *aiocbp); }
        public static readonly long SYS_AIO_SUSPEND = (long)315L; // { int aio_suspend( struct aiocb * const * aiocbp, int nent, const struct timespec *timeout); }
        public static readonly long SYS_AIO_CANCEL = (long)316L; // { int aio_cancel(int fd, struct aiocb *aiocbp); }
        public static readonly long SYS_AIO_ERROR = (long)317L; // { int aio_error(struct aiocb *aiocbp); }
        public static readonly long SYS_YIELD = (long)321L; // { int yield(void); }
        public static readonly long SYS_MLOCKALL = (long)324L; // { int mlockall(int how); }
        public static readonly long SYS_MUNLOCKALL = (long)325L; // { int munlockall(void); }
        public static readonly long SYS___GETCWD = (long)326L; // { int __getcwd(char *buf, u_int buflen); }
        public static readonly long SYS_SCHED_SETPARAM = (long)327L; // { int sched_setparam (pid_t pid, const struct sched_param *param); }
        public static readonly long SYS_SCHED_GETPARAM = (long)328L; // { int sched_getparam (pid_t pid, struct sched_param *param); }
        public static readonly long SYS_SCHED_SETSCHEDULER = (long)329L; // { int sched_setscheduler (pid_t pid, int policy, const struct sched_param *param); }
        public static readonly long SYS_SCHED_GETSCHEDULER = (long)330L; // { int sched_getscheduler (pid_t pid); }
        public static readonly long SYS_SCHED_YIELD = (long)331L; // { int sched_yield (void); }
        public static readonly long SYS_SCHED_GET_PRIORITY_MAX = (long)332L; // { int sched_get_priority_max (int policy); }
        public static readonly long SYS_SCHED_GET_PRIORITY_MIN = (long)333L; // { int sched_get_priority_min (int policy); }
        public static readonly long SYS_SCHED_RR_GET_INTERVAL = (long)334L; // { int sched_rr_get_interval (pid_t pid, struct timespec *interval); }
        public static readonly long SYS_UTRACE = (long)335L; // { int utrace(const void *addr, size_t len); }
        public static readonly long SYS_KLDSYM = (long)337L; // { int kldsym(int fileid, int cmd, void *data); }
        public static readonly long SYS_JAIL = (long)338L; // { int jail(struct jail *jail); }
        public static readonly long SYS_SIGPROCMASK = (long)340L; // { int sigprocmask(int how, const sigset_t *set, sigset_t *oset); }
        public static readonly long SYS_SIGSUSPEND = (long)341L; // { int sigsuspend(const sigset_t *sigmask); }
        public static readonly long SYS_SIGPENDING = (long)343L; // { int sigpending(sigset_t *set); }
        public static readonly long SYS_SIGTIMEDWAIT = (long)345L; // { int sigtimedwait(const sigset_t *set, siginfo_t *info, const struct timespec *timeout); }
        public static readonly long SYS_SIGWAITINFO = (long)346L; // { int sigwaitinfo(const sigset_t *set, siginfo_t *info); }
        public static readonly long SYS___ACL_GET_FILE = (long)347L; // { int __acl_get_file(const char *path, acl_type_t type, struct acl *aclp); }
        public static readonly long SYS___ACL_SET_FILE = (long)348L; // { int __acl_set_file(const char *path, acl_type_t type, struct acl *aclp); }
        public static readonly long SYS___ACL_GET_FD = (long)349L; // { int __acl_get_fd(int filedes, acl_type_t type, struct acl *aclp); }
        public static readonly long SYS___ACL_SET_FD = (long)350L; // { int __acl_set_fd(int filedes, acl_type_t type, struct acl *aclp); }
        public static readonly long SYS___ACL_DELETE_FILE = (long)351L; // { int __acl_delete_file(const char *path, acl_type_t type); }
        public static readonly long SYS___ACL_DELETE_FD = (long)352L; // { int __acl_delete_fd(int filedes, acl_type_t type); }
        public static readonly long SYS___ACL_ACLCHECK_FILE = (long)353L; // { int __acl_aclcheck_file(const char *path, acl_type_t type, struct acl *aclp); }
        public static readonly long SYS___ACL_ACLCHECK_FD = (long)354L; // { int __acl_aclcheck_fd(int filedes, acl_type_t type, struct acl *aclp); }
        public static readonly long SYS_EXTATTRCTL = (long)355L; // { int extattrctl(const char *path, int cmd, const char *filename, int attrnamespace, const char *attrname); }
        public static readonly long SYS_EXTATTR_SET_FILE = (long)356L; // { ssize_t extattr_set_file( const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
        public static readonly long SYS_EXTATTR_GET_FILE = (long)357L; // { ssize_t extattr_get_file( const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
        public static readonly long SYS_EXTATTR_DELETE_FILE = (long)358L; // { int extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }
        public static readonly long SYS_AIO_WAITCOMPLETE = (long)359L; // { ssize_t aio_waitcomplete( struct aiocb **aiocbp, struct timespec *timeout); }
        public static readonly long SYS_GETRESUID = (long)360L; // { int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid); }
        public static readonly long SYS_GETRESGID = (long)361L; // { int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); }
        public static readonly long SYS_KQUEUE = (long)362L; // { int kqueue(void); }
        public static readonly long SYS_KEVENT = (long)363L; // { int kevent(int fd, struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); }
        public static readonly long SYS_EXTATTR_SET_FD = (long)371L; // { ssize_t extattr_set_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
        public static readonly long SYS_EXTATTR_GET_FD = (long)372L; // { ssize_t extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
        public static readonly long SYS_EXTATTR_DELETE_FD = (long)373L; // { int extattr_delete_fd(int fd, int attrnamespace, const char *attrname); }
        public static readonly long SYS___SETUGID = (long)374L; // { int __setugid(int flag); }
        public static readonly long SYS_EACCESS = (long)376L; // { int eaccess(char *path, int amode); }
        public static readonly long SYS_NMOUNT = (long)378L; // { int nmount(struct iovec *iovp, unsigned int iovcnt, int flags); }
        public static readonly long SYS___MAC_GET_PROC = (long)384L; // { int __mac_get_proc(struct mac *mac_p); }
        public static readonly long SYS___MAC_SET_PROC = (long)385L; // { int __mac_set_proc(struct mac *mac_p); }
        public static readonly long SYS___MAC_GET_FD = (long)386L; // { int __mac_get_fd(int fd, struct mac *mac_p); }
        public static readonly long SYS___MAC_GET_FILE = (long)387L; // { int __mac_get_file(const char *path_p, struct mac *mac_p); }
        public static readonly long SYS___MAC_SET_FD = (long)388L; // { int __mac_set_fd(int fd, struct mac *mac_p); }
        public static readonly long SYS___MAC_SET_FILE = (long)389L; // { int __mac_set_file(const char *path_p, struct mac *mac_p); }
        public static readonly long SYS_KENV = (long)390L; // { int kenv(int what, const char *name, char *value, int len); }
        public static readonly long SYS_LCHFLAGS = (long)391L; // { int lchflags(const char *path, u_long flags); }
        public static readonly long SYS_UUIDGEN = (long)392L; // { int uuidgen(struct uuid *store, int count); }
        public static readonly long SYS_SENDFILE = (long)393L; // { int sendfile(int fd, int s, off_t offset, size_t nbytes, struct sf_hdtr *hdtr, off_t *sbytes, int flags); }
        public static readonly long SYS_MAC_SYSCALL = (long)394L; // { int mac_syscall(const char *policy, int call, void *arg); }
        public static readonly long SYS_GETFSSTAT = (long)395L; // { int getfsstat(struct statfs *buf, long bufsize, int mode); }
        public static readonly long SYS_STATFS = (long)396L; // { int statfs(char *path, struct statfs *buf); }
        public static readonly long SYS_FSTATFS = (long)397L; // { int fstatfs(int fd, struct statfs *buf); }
        public static readonly long SYS_FHSTATFS = (long)398L; // { int fhstatfs(const struct fhandle *u_fhp, struct statfs *buf); }
        public static readonly long SYS_KSEM_CLOSE = (long)400L; // { int ksem_close(semid_t id); }
        public static readonly long SYS_KSEM_POST = (long)401L; // { int ksem_post(semid_t id); }
        public static readonly long SYS_KSEM_WAIT = (long)402L; // { int ksem_wait(semid_t id); }
        public static readonly long SYS_KSEM_TRYWAIT = (long)403L; // { int ksem_trywait(semid_t id); }
        public static readonly long SYS_KSEM_INIT = (long)404L; // { int ksem_init(semid_t *idp, unsigned int value); }
        public static readonly long SYS_KSEM_OPEN = (long)405L; // { int ksem_open(semid_t *idp, const char *name, int oflag, mode_t mode, unsigned int value); }
        public static readonly long SYS_KSEM_UNLINK = (long)406L; // { int ksem_unlink(const char *name); }
        public static readonly long SYS_KSEM_GETVALUE = (long)407L; // { int ksem_getvalue(semid_t id, int *val); }
        public static readonly long SYS_KSEM_DESTROY = (long)408L; // { int ksem_destroy(semid_t id); }
        public static readonly long SYS___MAC_GET_PID = (long)409L; // { int __mac_get_pid(pid_t pid, struct mac *mac_p); }
        public static readonly long SYS___MAC_GET_LINK = (long)410L; // { int __mac_get_link(const char *path_p, struct mac *mac_p); }
        public static readonly long SYS___MAC_SET_LINK = (long)411L; // { int __mac_set_link(const char *path_p, struct mac *mac_p); }
        public static readonly long SYS_EXTATTR_SET_LINK = (long)412L; // { ssize_t extattr_set_link( const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
        public static readonly long SYS_EXTATTR_GET_LINK = (long)413L; // { ssize_t extattr_get_link( const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }
        public static readonly long SYS_EXTATTR_DELETE_LINK = (long)414L; // { int extattr_delete_link( const char *path, int attrnamespace, const char *attrname); }
        public static readonly long SYS___MAC_EXECVE = (long)415L; // { int __mac_execve(char *fname, char **argv, char **envv, struct mac *mac_p); }
        public static readonly long SYS_SIGACTION = (long)416L; // { int sigaction(int sig, const struct sigaction *act, struct sigaction *oact); }
        public static readonly long SYS_SIGRETURN = (long)417L; // { int sigreturn( const struct __ucontext *sigcntxp); }
        public static readonly long SYS_GETCONTEXT = (long)421L; // { int getcontext(struct __ucontext *ucp); }
        public static readonly long SYS_SETCONTEXT = (long)422L; // { int setcontext( const struct __ucontext *ucp); }
        public static readonly long SYS_SWAPCONTEXT = (long)423L; // { int swapcontext(struct __ucontext *oucp, const struct __ucontext *ucp); }
        public static readonly long SYS_SWAPOFF = (long)424L; // { int swapoff(const char *name); }
        public static readonly long SYS___ACL_GET_LINK = (long)425L; // { int __acl_get_link(const char *path, acl_type_t type, struct acl *aclp); }
        public static readonly long SYS___ACL_SET_LINK = (long)426L; // { int __acl_set_link(const char *path, acl_type_t type, struct acl *aclp); }
        public static readonly long SYS___ACL_DELETE_LINK = (long)427L; // { int __acl_delete_link(const char *path, acl_type_t type); }
        public static readonly long SYS___ACL_ACLCHECK_LINK = (long)428L; // { int __acl_aclcheck_link(const char *path, acl_type_t type, struct acl *aclp); }
        public static readonly long SYS_SIGWAIT = (long)429L; // { int sigwait(const sigset_t *set, int *sig); }
        public static readonly long SYS_THR_CREATE = (long)430L; // { int thr_create(ucontext_t *ctx, long *id, int flags); }
        public static readonly long SYS_THR_EXIT = (long)431L; // { void thr_exit(long *state); }
        public static readonly long SYS_THR_SELF = (long)432L; // { int thr_self(long *id); }
        public static readonly long SYS_THR_KILL = (long)433L; // { int thr_kill(long id, int sig); }
        public static readonly long SYS_JAIL_ATTACH = (long)436L; // { int jail_attach(int jid); }
        public static readonly long SYS_EXTATTR_LIST_FD = (long)437L; // { ssize_t extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }
        public static readonly long SYS_EXTATTR_LIST_FILE = (long)438L; // { ssize_t extattr_list_file( const char *path, int attrnamespace, void *data, size_t nbytes); }
        public static readonly long SYS_EXTATTR_LIST_LINK = (long)439L; // { ssize_t extattr_list_link( const char *path, int attrnamespace, void *data, size_t nbytes); }
        public static readonly long SYS_KSEM_TIMEDWAIT = (long)441L; // { int ksem_timedwait(semid_t id, const struct timespec *abstime); }
        public static readonly long SYS_THR_SUSPEND = (long)442L; // { int thr_suspend( const struct timespec *timeout); }
        public static readonly long SYS_THR_WAKE = (long)443L; // { int thr_wake(long id); }
        public static readonly long SYS_KLDUNLOADF = (long)444L; // { int kldunloadf(int fileid, int flags); }
        public static readonly long SYS_AUDIT = (long)445L; // { int audit(const void *record, u_int length); }
        public static readonly long SYS_AUDITON = (long)446L; // { int auditon(int cmd, void *data, u_int length); }
        public static readonly long SYS_GETAUID = (long)447L; // { int getauid(uid_t *auid); }
        public static readonly long SYS_SETAUID = (long)448L; // { int setauid(uid_t *auid); }
        public static readonly long SYS_GETAUDIT = (long)449L; // { int getaudit(struct auditinfo *auditinfo); }
        public static readonly long SYS_SETAUDIT = (long)450L; // { int setaudit(struct auditinfo *auditinfo); }
        public static readonly long SYS_GETAUDIT_ADDR = (long)451L; // { int getaudit_addr( struct auditinfo_addr *auditinfo_addr, u_int length); }
        public static readonly long SYS_SETAUDIT_ADDR = (long)452L; // { int setaudit_addr( struct auditinfo_addr *auditinfo_addr, u_int length); }
        public static readonly long SYS_AUDITCTL = (long)453L; // { int auditctl(char *path); }
        public static readonly long SYS__UMTX_OP = (long)454L; // { int _umtx_op(void *obj, int op, u_long val, void *uaddr1, void *uaddr2); }
        public static readonly long SYS_THR_NEW = (long)455L; // { int thr_new(struct thr_param *param, int param_size); }
        public static readonly long SYS_SIGQUEUE = (long)456L; // { int sigqueue(pid_t pid, int signum, void *value); }
        public static readonly long SYS_KMQ_OPEN = (long)457L; // { int kmq_open(const char *path, int flags, mode_t mode, const struct mq_attr *attr); }
        public static readonly long SYS_KMQ_SETATTR = (long)458L; // { int kmq_setattr(int mqd,        const struct mq_attr *attr,        struct mq_attr *oattr); }
        public static readonly long SYS_KMQ_TIMEDRECEIVE = (long)459L; // { int kmq_timedreceive(int mqd,    char *msg_ptr, size_t msg_len,    unsigned *msg_prio,            const struct timespec *abs_timeout); }
        public static readonly long SYS_KMQ_TIMEDSEND = (long)460L; // { int kmq_timedsend(int mqd,        const char *msg_ptr, size_t msg_len,unsigned msg_prio,            const struct timespec *abs_timeout);}
        public static readonly long SYS_KMQ_NOTIFY = (long)461L; // { int kmq_notify(int mqd,        const struct sigevent *sigev); }
        public static readonly long SYS_KMQ_UNLINK = (long)462L; // { int kmq_unlink(const char *path); }
        public static readonly long SYS_ABORT2 = (long)463L; // { int abort2(const char *why, int nargs, void **args); }
        public static readonly long SYS_THR_SET_NAME = (long)464L; // { int thr_set_name(long id, const char *name); }
        public static readonly long SYS_AIO_FSYNC = (long)465L; // { int aio_fsync(int op, struct aiocb *aiocbp); }
        public static readonly long SYS_RTPRIO_THREAD = (long)466L; // { int rtprio_thread(int function, lwpid_t lwpid, struct rtprio *rtp); }
        public static readonly long SYS_SCTP_PEELOFF = (long)471L; // { int sctp_peeloff(int sd, uint32_t name); }
        public static readonly long SYS_SCTP_GENERIC_SENDMSG = (long)472L; // { int sctp_generic_sendmsg(int sd, caddr_t msg, int mlen, caddr_t to, __socklen_t tolen, struct sctp_sndrcvinfo *sinfo, int flags); }
        public static readonly long SYS_SCTP_GENERIC_SENDMSG_IOV = (long)473L; // { int sctp_generic_sendmsg_iov(int sd, struct iovec *iov, int iovlen, caddr_t to, __socklen_t tolen, struct sctp_sndrcvinfo *sinfo, int flags); }
        public static readonly long SYS_SCTP_GENERIC_RECVMSG = (long)474L; // { int sctp_generic_recvmsg(int sd, struct iovec *iov, int iovlen, struct sockaddr * from, __socklen_t *fromlenaddr, struct sctp_sndrcvinfo *sinfo, int *msg_flags); }
        public static readonly long SYS_PREAD = (long)475L; // { ssize_t pread(int fd, void *buf, size_t nbyte, off_t offset); }
        public static readonly long SYS_PWRITE = (long)476L; // { ssize_t pwrite(int fd, const void *buf, size_t nbyte, off_t offset); }
        public static readonly long SYS_MMAP = (long)477L; // { caddr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, off_t pos); }
        public static readonly long SYS_LSEEK = (long)478L; // { off_t lseek(int fd, off_t offset, int whence); }
        public static readonly long SYS_TRUNCATE = (long)479L; // { int truncate(char *path, off_t length); }
        public static readonly long SYS_FTRUNCATE = (long)480L; // { int ftruncate(int fd, off_t length); }
        public static readonly long SYS_THR_KILL2 = (long)481L; // { int thr_kill2(pid_t pid, long id, int sig); }
        public static readonly long SYS_SHM_OPEN = (long)482L; // { int shm_open(const char *path, int flags, mode_t mode); }
        public static readonly long SYS_SHM_UNLINK = (long)483L; // { int shm_unlink(const char *path); }
        public static readonly long SYS_CPUSET = (long)484L; // { int cpuset(cpusetid_t *setid); }
        public static readonly long SYS_CPUSET_SETID = (long)485L; // { int cpuset_setid(cpuwhich_t which, id_t id, cpusetid_t setid); }
        public static readonly long SYS_CPUSET_GETID = (long)486L; // { int cpuset_getid(cpulevel_t level, cpuwhich_t which, id_t id, cpusetid_t *setid); }
        public static readonly long SYS_CPUSET_GETAFFINITY = (long)487L; // { int cpuset_getaffinity(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, cpuset_t *mask); }
        public static readonly long SYS_CPUSET_SETAFFINITY = (long)488L; // { int cpuset_setaffinity(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, const cpuset_t *mask); }
        public static readonly long SYS_FACCESSAT = (long)489L; // { int faccessat(int fd, char *path, int amode, int flag); }
        public static readonly long SYS_FCHMODAT = (long)490L; // { int fchmodat(int fd, char *path, mode_t mode, int flag); }
        public static readonly long SYS_FCHOWNAT = (long)491L; // { int fchownat(int fd, char *path, uid_t uid, gid_t gid, int flag); }
        public static readonly long SYS_FEXECVE = (long)492L; // { int fexecve(int fd, char **argv, char **envv); }
        public static readonly long SYS_FSTATAT = (long)493L; // { int fstatat(int fd, char *path, struct stat *buf, int flag); }
        public static readonly long SYS_FUTIMESAT = (long)494L; // { int futimesat(int fd, char *path, struct timeval *times); }
        public static readonly long SYS_LINKAT = (long)495L; // { int linkat(int fd1, char *path1, int fd2, char *path2, int flag); }
        public static readonly long SYS_MKDIRAT = (long)496L; // { int mkdirat(int fd, char *path, mode_t mode); }
        public static readonly long SYS_MKFIFOAT = (long)497L; // { int mkfifoat(int fd, char *path, mode_t mode); }
        public static readonly long SYS_MKNODAT = (long)498L; // { int mknodat(int fd, char *path, mode_t mode, dev_t dev); }
        public static readonly long SYS_OPENAT = (long)499L; // { int openat(int fd, char *path, int flag, mode_t mode); }
        public static readonly long SYS_READLINKAT = (long)500L; // { int readlinkat(int fd, char *path, char *buf, size_t bufsize); }
        public static readonly long SYS_RENAMEAT = (long)501L; // { int renameat(int oldfd, char *old, int newfd, char *new); }
        public static readonly long SYS_SYMLINKAT = (long)502L; // { int symlinkat(char *path1, int fd, char *path2); }
        public static readonly long SYS_UNLINKAT = (long)503L; // { int unlinkat(int fd, char *path, int flag); }
        public static readonly long SYS_POSIX_OPENPT = (long)504L; // { int posix_openpt(int flags); }
        public static readonly long SYS_GSSD_SYSCALL = (long)505L; // { int gssd_syscall(char *path); }
        public static readonly long SYS_JAIL_GET = (long)506L; // { int jail_get(struct iovec *iovp, unsigned int iovcnt, int flags); }
        public static readonly long SYS_JAIL_SET = (long)507L; // { int jail_set(struct iovec *iovp, unsigned int iovcnt, int flags); }
        public static readonly long SYS_JAIL_REMOVE = (long)508L; // { int jail_remove(int jid); }
        public static readonly long SYS_CLOSEFROM = (long)509L; // { int closefrom(int lowfd); }
        public static readonly long SYS___SEMCTL = (long)510L; // { int __semctl(int semid, int semnum, int cmd, union semun *arg); }
        public static readonly long SYS_MSGCTL = (long)511L; // { int msgctl(int msqid, int cmd, struct msqid_ds *buf); }
        public static readonly long SYS_SHMCTL = (long)512L; // { int shmctl(int shmid, int cmd, struct shmid_ds *buf); }
        public static readonly long SYS_LPATHCONF = (long)513L; // { int lpathconf(char *path, int name); }
        public static readonly long SYS___CAP_RIGHTS_GET = (long)515L; // { int __cap_rights_get(int version, int fd, cap_rights_t *rightsp); }
        public static readonly long SYS_CAP_ENTER = (long)516L; // { int cap_enter(void); }
        public static readonly long SYS_CAP_GETMODE = (long)517L; // { int cap_getmode(u_int *modep); }
        public static readonly long SYS_PDFORK = (long)518L; // { int pdfork(int *fdp, int flags); }
        public static readonly long SYS_PDKILL = (long)519L; // { int pdkill(int fd, int signum); }
        public static readonly long SYS_PDGETPID = (long)520L; // { int pdgetpid(int fd, pid_t *pidp); }
        public static readonly long SYS_PSELECT = (long)522L; // { int pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *sm); }
        public static readonly long SYS_GETLOGINCLASS = (long)523L; // { int getloginclass(char *namebuf, size_t namelen); }
        public static readonly long SYS_SETLOGINCLASS = (long)524L; // { int setloginclass(const char *namebuf); }
        public static readonly long SYS_RCTL_GET_RACCT = (long)525L; // { int rctl_get_racct(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
        public static readonly long SYS_RCTL_GET_RULES = (long)526L; // { int rctl_get_rules(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
        public static readonly long SYS_RCTL_GET_LIMITS = (long)527L; // { int rctl_get_limits(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
        public static readonly long SYS_RCTL_ADD_RULE = (long)528L; // { int rctl_add_rule(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
        public static readonly long SYS_RCTL_REMOVE_RULE = (long)529L; // { int rctl_remove_rule(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }
        public static readonly long SYS_POSIX_FALLOCATE = (long)530L; // { int posix_fallocate(int fd, off_t offset, off_t len); }
        public static readonly long SYS_POSIX_FADVISE = (long)531L; // { int posix_fadvise(int fd, off_t offset, off_t len, int advice); }
        public static readonly long SYS_WAIT6 = (long)532L; // { int wait6(idtype_t idtype, id_t id, int *status, int options, struct __wrusage *wrusage, siginfo_t *info); }
        public static readonly long SYS_CAP_RIGHTS_LIMIT = (long)533L; // { int cap_rights_limit(int fd, cap_rights_t *rightsp); }
        public static readonly long SYS_CAP_IOCTLS_LIMIT = (long)534L; // { int cap_ioctls_limit(int fd, const u_long *cmds, size_t ncmds); }
        public static readonly long SYS_CAP_IOCTLS_GET = (long)535L; // { ssize_t cap_ioctls_get(int fd, u_long *cmds, size_t maxcmds); }
        public static readonly long SYS_CAP_FCNTLS_LIMIT = (long)536L; // { int cap_fcntls_limit(int fd, uint32_t fcntlrights); }
        public static readonly long SYS_CAP_FCNTLS_GET = (long)537L; // { int cap_fcntls_get(int fd, uint32_t *fcntlrightsp); }
        public static readonly long SYS_BINDAT = (long)538L; // { int bindat(int fd, int s, caddr_t name, int namelen); }
        public static readonly long SYS_CONNECTAT = (long)539L; // { int connectat(int fd, int s, caddr_t name, int namelen); }
        public static readonly long SYS_CHFLAGSAT = (long)540L; // { int chflagsat(int fd, const char *path, u_long flags, int atflag); }
        public static readonly long SYS_ACCEPT4 = (long)541L; // { int accept4(int s, struct sockaddr * __restrict name, __socklen_t * __restrict anamelen, int flags); }
        public static readonly long SYS_PIPE2 = (long)542L; // { int pipe2(int *fildes, int flags); }
        public static readonly long SYS_AIO_MLOCK = (long)543L; // { int aio_mlock(struct aiocb *aiocbp); }
        public static readonly long SYS_PROCCTL = (long)544L; // { int procctl(idtype_t idtype, id_t id, int com, void *data); }
        public static readonly long SYS_PPOLL = (long)545L; // { int ppoll(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *set); }
        public static readonly long SYS_FUTIMENS = (long)546L; // { int futimens(int fd, struct timespec *times); }
        public static readonly long SYS_UTIMENSAT = (long)547L; // { int utimensat(int fd, char *path, struct timespec *times, int flag); }
        public static readonly long SYS_NUMA_GETAFFINITY = (long)548L; // { int numa_getaffinity(cpuwhich_t which, id_t id, struct vm_domain_policy_entry *policy); }
        public static readonly long SYS_NUMA_SETAFFINITY = (long)549L; // { int numa_setaffinity(cpuwhich_t which, id_t id, const struct vm_domain_policy_entry *policy); }
        public static readonly long SYS_FDATASYNC = (long)550L; // { int fdatasync(int fd); }
    }
}}}}}}
