//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:27:25 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using bytes = go.bytes_package;
using runtime = go.runtime_package;
using sort = go.sort_package;
using sync = go.sync_package;
using syscall = go.syscall_package;
using @unsafe = go.@unsafe_package;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace vendor {
namespace golang.org {
namespace x {
namespace sys
{
    public static partial class unix_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct nwmConnEntry
        {
            // Constructors
            public nwmConnEntry(NilType _)
            {
                this.ident = default;
                this.local = default;
                this.remote = default;
                this.startTime = default;
                this.lastActivity = default;
                this.bytesIn = default;
                this.bytesOut = default;
                this.inSegs = default;
                this.outSegs = default;
                this.state = default;
                this.activeOpen = default;
                this.flag01 = default;
                this.outBuffered = default;
                this.inBuffered = default;
                this.maxSndWnd = default;
                this.reXmtCount = default;
                this.congestionWnd = default;
                this.ssThresh = default;
                this.roundTripTime = default;
                this.roundTripVar = default;
                this.sendMSS = default;
                this.sndWnd = default;
                this.rcvBufSize = default;
                this.sndBufSize = default;
                this.outOfOrderCount = default;
                this.lcl0WindowCount = default;
                this.rmt0WindowCount = default;
                this.dupacks = default;
                this.flag02 = default;
                this.sockOpt6Cont = default;
                this.asid = default;
                this.resourceName = default;
                this.resourceId = default;
                this.subtask = default;
                this.sockOpt = default;
                this.sockOpt6 = default;
                this.clusterConnFlag = default;
                this.proto = default;
                this.targetAppl = default;
                this.luName = default;
                this.clientUserId = default;
                this.logMode = default;
                this.timeStamp = default;
                this.timeStampAge = default;
                this.serverResourceId = default;
                this.intfName = default;
                this.ttlsStatPol = default;
                this.ttlsStatConn = default;
                this.ttlsSSLProt = default;
                this.ttlsNegCiph = default;
                this.ttlsSecType = default;
                this.ttlsFIPS140Mode = default;
                this.ttlsUserID = default;
                this.applData = default;
                this.inOldestTime = default;
                this.outOldestTime = default;
                this.tcpTrustedPartner = default;
                this._ = default;
                this.bulkDataIntfName = default;
                this.ttlsNegCiph4 = default;
                this.smcReason = default;
                this.lclSMCLinkId = default;
                this.rmtSMCLinkId = default;
                this.smcStatus = default;
                this.smcFlags = default;
                this._ = default;
                this.rcvWnd = default;
                this.lclSMCBufSz = default;
                this.rmtSMCBufSz = default;
                this.ttlsSessID = default;
                this.ttlsSessIDLen = default;
                this._ = default;
                this.smcDStatus = default;
                this.smcDReason = default;
            }

            public nwmConnEntry(uint ident = default, array<byte> local = default, array<byte> remote = default, array<byte> startTime = default, array<byte> lastActivity = default, array<byte> bytesIn = default, array<byte> bytesOut = default, array<byte> inSegs = default, array<byte> outSegs = default, ushort state = default, byte activeOpen = default, byte flag01 = default, uint outBuffered = default, uint inBuffered = default, uint maxSndWnd = default, uint reXmtCount = default, uint congestionWnd = default, uint ssThresh = default, uint roundTripTime = default, uint roundTripVar = default, uint sendMSS = default, uint sndWnd = default, uint rcvBufSize = default, uint sndBufSize = default, uint outOfOrderCount = default, uint lcl0WindowCount = default, uint rmt0WindowCount = default, uint dupacks = default, byte flag02 = default, byte sockOpt6Cont = default, ushort asid = default, array<byte> resourceName = default, uint resourceId = default, uint subtask = default, byte sockOpt = default, byte sockOpt6 = default, byte clusterConnFlag = default, byte proto = default, array<byte> targetAppl = default, array<byte> luName = default, array<byte> clientUserId = default, array<byte> logMode = default, uint timeStamp = default, uint timeStampAge = default, uint serverResourceId = default, array<byte> intfName = default, byte ttlsStatPol = default, byte ttlsStatConn = default, ushort ttlsSSLProt = default, array<byte> ttlsNegCiph = default, byte ttlsSecType = default, byte ttlsFIPS140Mode = default, array<byte> ttlsUserID = default, array<byte> applData = default, array<byte> inOldestTime = default, array<byte> outOldestTime = default, byte tcpTrustedPartner = default, array<byte> _ = default, array<byte> bulkDataIntfName = default, array<byte> ttlsNegCiph4 = default, uint smcReason = default, uint lclSMCLinkId = default, uint rmtSMCLinkId = default, byte smcStatus = default, byte smcFlags = default, array<byte> _ = default, uint rcvWnd = default, uint lclSMCBufSz = default, uint rmtSMCBufSz = default, array<byte> ttlsSessID = default, short ttlsSessIDLen = default, array<byte> _ = default, byte smcDStatus = default, uint smcDReason = default)
            {
                this.ident = ident;
                this.local = local;
                this.remote = remote;
                this.startTime = startTime;
                this.lastActivity = lastActivity;
                this.bytesIn = bytesIn;
                this.bytesOut = bytesOut;
                this.inSegs = inSegs;
                this.outSegs = outSegs;
                this.state = state;
                this.activeOpen = activeOpen;
                this.flag01 = flag01;
                this.outBuffered = outBuffered;
                this.inBuffered = inBuffered;
                this.maxSndWnd = maxSndWnd;
                this.reXmtCount = reXmtCount;
                this.congestionWnd = congestionWnd;
                this.ssThresh = ssThresh;
                this.roundTripTime = roundTripTime;
                this.roundTripVar = roundTripVar;
                this.sendMSS = sendMSS;
                this.sndWnd = sndWnd;
                this.rcvBufSize = rcvBufSize;
                this.sndBufSize = sndBufSize;
                this.outOfOrderCount = outOfOrderCount;
                this.lcl0WindowCount = lcl0WindowCount;
                this.rmt0WindowCount = rmt0WindowCount;
                this.dupacks = dupacks;
                this.flag02 = flag02;
                this.sockOpt6Cont = sockOpt6Cont;
                this.asid = asid;
                this.resourceName = resourceName;
                this.resourceId = resourceId;
                this.subtask = subtask;
                this.sockOpt = sockOpt;
                this.sockOpt6 = sockOpt6;
                this.clusterConnFlag = clusterConnFlag;
                this.proto = proto;
                this.targetAppl = targetAppl;
                this.luName = luName;
                this.clientUserId = clientUserId;
                this.logMode = logMode;
                this.timeStamp = timeStamp;
                this.timeStampAge = timeStampAge;
                this.serverResourceId = serverResourceId;
                this.intfName = intfName;
                this.ttlsStatPol = ttlsStatPol;
                this.ttlsStatConn = ttlsStatConn;
                this.ttlsSSLProt = ttlsSSLProt;
                this.ttlsNegCiph = ttlsNegCiph;
                this.ttlsSecType = ttlsSecType;
                this.ttlsFIPS140Mode = ttlsFIPS140Mode;
                this.ttlsUserID = ttlsUserID;
                this.applData = applData;
                this.inOldestTime = inOldestTime;
                this.outOldestTime = outOldestTime;
                this.tcpTrustedPartner = tcpTrustedPartner;
                this._ = _;
                this.bulkDataIntfName = bulkDataIntfName;
                this.ttlsNegCiph4 = ttlsNegCiph4;
                this.smcReason = smcReason;
                this.lclSMCLinkId = lclSMCLinkId;
                this.rmtSMCLinkId = rmtSMCLinkId;
                this.smcStatus = smcStatus;
                this.smcFlags = smcFlags;
                this._ = _;
                this.rcvWnd = rcvWnd;
                this.lclSMCBufSz = lclSMCBufSz;
                this.rmtSMCBufSz = rmtSMCBufSz;
                this.ttlsSessID = ttlsSessID;
                this.ttlsSessIDLen = ttlsSessIDLen;
                this._ = _;
                this.smcDStatus = smcDStatus;
                this.smcDReason = smcDReason;
            }

            // Enable comparisons between nil and nwmConnEntry struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(nwmConnEntry value, NilType nil) => value.Equals(default(nwmConnEntry));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(nwmConnEntry value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, nwmConnEntry value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, nwmConnEntry value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator nwmConnEntry(NilType nil) => default(nwmConnEntry);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static nwmConnEntry nwmConnEntry_cast(dynamic value)
        {
            return new nwmConnEntry(value.ident, value.local, value.remote, value.startTime, value.lastActivity, value.bytesIn, value.bytesOut, value.inSegs, value.outSegs, value.state, value.activeOpen, value.flag01, value.outBuffered, value.inBuffered, value.maxSndWnd, value.reXmtCount, value.congestionWnd, value.ssThresh, value.roundTripTime, value.roundTripVar, value.sendMSS, value.sndWnd, value.rcvBufSize, value.sndBufSize, value.outOfOrderCount, value.lcl0WindowCount, value.rmt0WindowCount, value.dupacks, value.flag02, value.sockOpt6Cont, value.asid, value.resourceName, value.resourceId, value.subtask, value.sockOpt, value.sockOpt6, value.clusterConnFlag, value.proto, value.targetAppl, value.luName, value.clientUserId, value.logMode, value.timeStamp, value.timeStampAge, value.serverResourceId, value.intfName, value.ttlsStatPol, value.ttlsStatConn, value.ttlsSSLProt, value.ttlsNegCiph, value.ttlsSecType, value.ttlsFIPS140Mode, value.ttlsUserID, value.applData, value.inOldestTime, value.outOldestTime, value.tcpTrustedPartner, value._, value.bulkDataIntfName, value.ttlsNegCiph4, value.smcReason, value.lclSMCLinkId, value.rmtSMCLinkId, value.smcStatus, value.smcFlags, value._, value.rcvWnd, value.lclSMCBufSz, value.rmtSMCBufSz, value.ttlsSessID, value.ttlsSessIDLen, value._, value.smcDStatus, value.smcDReason);
        }
    }
}}}}}}