// go run mksyscall_aix_ppc64.go -aix -tags aix,ppc64 syscall_aix.go syscall_aix_ppc64.go
// Code generated by the command above; see README.md. DO NOT EDIT.

//go:build aix && ppc64
// +build aix,ppc64

// package unix -- go2cs converted at 2022 March 06 23:28:02 UTC
// import "cmd/vendor/golang.org/x/sys/unix" ==> using unix = go.cmd.vendor.golang.org.x.sys.unix_package
// Original source: C:\Program Files\Go\src\cmd\vendor\golang.org\x\sys\unix\zsyscall_aix_ppc64.go
using @unsafe = go.@unsafe_package;

namespace go.cmd.vendor.golang.org.x.sys;

public static partial class unix_package {

    // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
private static error utimes(@string path, ptr<array<Timeval>> _addr_times) {
    error err = default!;
    ref array<Timeval> times = ref _addr_times.val;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (_, e1) = callutimes(uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(times)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static error utimensat(nint dirfd, @string path, ptr<array<Timespec>> _addr_times, nint flag) {
    error err = default!;
    ref array<Timespec> times = ref _addr_times.val;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (_, e1) = callutimensat(dirfd, uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(times)), flag);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static error getcwd(slice<byte> buf) {
    error err = default!;

    ptr<byte> _p0;
    if (len(buf) > 0) {
        _p0 = _addr_buf[0];
    }
    var (_, e1) = callgetcwd(uintptr(@unsafe.Pointer(_p0)), len(buf));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static (nint, error) accept(nint s, ptr<RawSockaddrAny> _addr_rsa, ptr<_Socklen> _addr_addrlen) {
    nint fd = default;
    error err = default!;
    ref RawSockaddrAny rsa = ref _addr_rsa.val;
    ref _Socklen addrlen = ref _addr_addrlen.val;

    var (r0, e1) = callaccept(s, uintptr(@unsafe.Pointer(rsa)), uintptr(@unsafe.Pointer(addrlen)));
    fd = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static (nint, error) getdirent(nint fd, slice<byte> buf) {
    nint n = default;
    error err = default!;

    ptr<byte> _p0;
    if (len(buf) > 0) {
        _p0 = _addr_buf[0];
    }
    var (r0, e1) = callgetdirent(fd, uintptr(@unsafe.Pointer(_p0)), len(buf));
    n = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static (Pid_t, error) wait4(Pid_t pid, ptr<_C_int> _addr_status, nint options, ptr<Rusage> _addr_rusage) {
    Pid_t wpid = default;
    error err = default!;
    ref _C_int status = ref _addr_status.val;
    ref Rusage rusage = ref _addr_rusage.val;

    var (r0, e1) = callwait4(int(pid), uintptr(@unsafe.Pointer(status)), options, uintptr(@unsafe.Pointer(rusage)));
    wpid = Pid_t(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static error ioctl(nint fd, nuint req, System.UIntPtr arg) {
    error err = default!;

    var (_, e1) = callioctl(fd, int(req), arg);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static (nint, error) FcntlInt(System.UIntPtr fd, nint cmd, nint arg) {
    nint r = default;
    error err = default!;

    var (r0, e1) = callfcntl(fd, cmd, uintptr(arg));
    r = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error FcntlFlock(System.UIntPtr fd, nint cmd, ptr<Flock_t> _addr_lk) {
    error err = default!;
    ref Flock_t lk = ref _addr_lk.val;

    var (_, e1) = callfcntl(fd, cmd, uintptr(@unsafe.Pointer(lk)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static (nint, error) fcntl(nint fd, nint cmd, nint arg) {
    nint val = default;
    error err = default!;

    var (r0, e1) = callfcntl(uintptr(fd), cmd, uintptr(arg));
    val = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Acct(@string path) {
    error err = default!;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (_, e1) = callacct(uintptr(@unsafe.Pointer(_p0)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Chdir(@string path) {
    error err = default!;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (_, e1) = callchdir(uintptr(@unsafe.Pointer(_p0)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Chroot(@string path) {
    error err = default!;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (_, e1) = callchroot(uintptr(@unsafe.Pointer(_p0)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Close(nint fd) {
    error err = default!;

    var (_, e1) = callclose(fd);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static (nint, error) Dup(nint oldfd) {
    nint fd = default;
    error err = default!;

    var (r0, e1) = calldup(oldfd);
    fd = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static void Exit(nint code) {
    callexit(code);
    return ;
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Faccessat(nint dirfd, @string path, uint mode, nint flags) {
    error err = default!;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (_, e1) = callfaccessat(dirfd, uintptr(@unsafe.Pointer(_p0)), mode, flags);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Fchdir(nint fd) {
    error err = default!;

    var (_, e1) = callfchdir(fd);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Fchmod(nint fd, uint mode) {
    error err = default!;

    var (_, e1) = callfchmod(fd, mode);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Fchmodat(nint dirfd, @string path, uint mode, nint flags) {
    error err = default!;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (_, e1) = callfchmodat(dirfd, uintptr(@unsafe.Pointer(_p0)), mode, flags);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Fchownat(nint dirfd, @string path, nint uid, nint gid, nint flags) {
    error err = default!;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (_, e1) = callfchownat(dirfd, uintptr(@unsafe.Pointer(_p0)), uid, gid, flags);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Fdatasync(nint fd) {
    error err = default!;

    var (_, e1) = callfdatasync(fd);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Fsync(nint fd) {
    error err = default!;

    var (_, e1) = callfsync(fd);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static (nint, error) Getpgid(nint pid) {
    nint pgid = default;
    error err = default!;

    var (r0, e1) = callgetpgid(pid);
    pgid = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static nint Getpgrp() {
    nint pid = default;

    var (r0, _) = callgetpgrp();
    pid = int(r0);
    return ;
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static nint Getpid() {
    nint pid = default;

    var (r0, _) = callgetpid();
    pid = int(r0);
    return ;
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static nint Getppid() {
    nint ppid = default;

    var (r0, _) = callgetppid();
    ppid = int(r0);
    return ;
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static (nint, error) Getpriority(nint which, nint who) {
    nint prio = default;
    error err = default!;

    var (r0, e1) = callgetpriority(which, who);
    prio = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Getrusage(nint who, ptr<Rusage> _addr_rusage) {
    error err = default!;
    ref Rusage rusage = ref _addr_rusage.val;

    var (_, e1) = callgetrusage(who, uintptr(@unsafe.Pointer(rusage)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static (nint, error) Getsid(nint pid) {
    nint sid = default;
    error err = default!;

    var (r0, e1) = callgetsid(pid);
    sid = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Kill(nint pid, Signal sig) {
    error err = default!;

    var (_, e1) = callkill(pid, int(sig));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static (nint, error) Klogctl(nint typ, slice<byte> buf) {
    nint n = default;
    error err = default!;

    ptr<byte> _p0;
    if (len(buf) > 0) {
        _p0 = _addr_buf[0];
    }
    var (r0, e1) = callsyslog(typ, uintptr(@unsafe.Pointer(_p0)), len(buf));
    n = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Mkdir(nint dirfd, @string path, uint mode) {
    error err = default!;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (_, e1) = callmkdir(dirfd, uintptr(@unsafe.Pointer(_p0)), mode);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Mkdirat(nint dirfd, @string path, uint mode) {
    error err = default!;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (_, e1) = callmkdirat(dirfd, uintptr(@unsafe.Pointer(_p0)), mode);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Mkfifo(@string path, uint mode) {
    error err = default!;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (_, e1) = callmkfifo(uintptr(@unsafe.Pointer(_p0)), mode);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Mknod(@string path, uint mode, nint dev) {
    error err = default!;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (_, e1) = callmknod(uintptr(@unsafe.Pointer(_p0)), mode, dev);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Mknodat(nint dirfd, @string path, uint mode, nint dev) {
    error err = default!;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (_, e1) = callmknodat(dirfd, uintptr(@unsafe.Pointer(_p0)), mode, dev);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Nanosleep(ptr<Timespec> _addr_time, ptr<Timespec> _addr_leftover) {
    error err = default!;
    ref Timespec time = ref _addr_time.val;
    ref Timespec leftover = ref _addr_leftover.val;

    var (_, e1) = callnanosleep(uintptr(@unsafe.Pointer(time)), uintptr(@unsafe.Pointer(leftover)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static (nint, error) Open(@string path, nint mode, uint perm) {
    nint fd = default;
    error err = default!;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (r0, e1) = callopen64(uintptr(@unsafe.Pointer(_p0)), mode, perm);
    fd = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static (nint, error) Openat(nint dirfd, @string path, nint flags, uint mode) {
    nint fd = default;
    error err = default!;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (r0, e1) = callopenat(dirfd, uintptr(@unsafe.Pointer(_p0)), flags, mode);
    fd = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static (nint, error) read(nint fd, slice<byte> p) {
    nint n = default;
    error err = default!;

    ptr<byte> _p0;
    if (len(p) > 0) {
        _p0 = _addr_p[0];
    }
    var (r0, e1) = callread(fd, uintptr(@unsafe.Pointer(_p0)), len(p));
    n = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static (nint, error) Readlink(@string path, slice<byte> buf) {
    nint n = default;
    error err = default!;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    ptr<byte> _p1;
    if (len(buf) > 0) {
        _p1 = _addr_buf[0];
    }
    var (r0, e1) = callreadlink(uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(_p1)), len(buf));
    n = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Renameat(nint olddirfd, @string oldpath, nint newdirfd, @string newpath) {
    error err = default!;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(oldpath);
    if (err != null) {
        return ;
    }
    ptr<byte> _p1;
    _p1, err = BytePtrFromString(newpath);
    if (err != null) {
        return ;
    }
    var (_, e1) = callrenameat(olddirfd, uintptr(@unsafe.Pointer(_p0)), newdirfd, uintptr(@unsafe.Pointer(_p1)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Setdomainname(slice<byte> p) {
    error err = default!;

    ptr<byte> _p0;
    if (len(p) > 0) {
        _p0 = _addr_p[0];
    }
    var (_, e1) = callsetdomainname(uintptr(@unsafe.Pointer(_p0)), len(p));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Sethostname(slice<byte> p) {
    error err = default!;

    ptr<byte> _p0;
    if (len(p) > 0) {
        _p0 = _addr_p[0];
    }
    var (_, e1) = callsethostname(uintptr(@unsafe.Pointer(_p0)), len(p));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Setpgid(nint pid, nint pgid) {
    error err = default!;

    var (_, e1) = callsetpgid(pid, pgid);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static (nint, error) Setsid() {
    nint pid = default;
    error err = default!;

    var (r0, e1) = callsetsid();
    pid = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Settimeofday(ptr<Timeval> _addr_tv) {
    error err = default!;
    ref Timeval tv = ref _addr_tv.val;

    var (_, e1) = callsettimeofday(uintptr(@unsafe.Pointer(tv)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Setuid(nint uid) {
    error err = default!;

    var (_, e1) = callsetuid(uid);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Setgid(nint uid) {
    error err = default!;

    var (_, e1) = callsetgid(uid);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Setpriority(nint which, nint who, nint prio) {
    error err = default!;

    var (_, e1) = callsetpriority(which, who, prio);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Statx(nint dirfd, @string path, nint flags, nint mask, ptr<Statx_t> _addr_stat) {
    error err = default!;
    ref Statx_t stat = ref _addr_stat.val;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (_, e1) = callstatx(dirfd, uintptr(@unsafe.Pointer(_p0)), flags, mask, uintptr(@unsafe.Pointer(stat)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static void Sync() {
    callsync();
    return ;
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static (System.UIntPtr, error) Times(ptr<Tms> _addr_tms) {
    System.UIntPtr ticks = default;
    error err = default!;
    ref Tms tms = ref _addr_tms.val;

    var (r0, e1) = calltimes(uintptr(@unsafe.Pointer(tms)));
    ticks = uintptr(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static nint Umask(nint mask) {
    nint oldmask = default;

    var (r0, _) = callumask(mask);
    oldmask = int(r0);
    return ;
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Uname(ptr<Utsname> _addr_buf) {
    error err = default!;
    ref Utsname buf = ref _addr_buf.val;

    var (_, e1) = calluname(uintptr(@unsafe.Pointer(buf)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Unlink(@string path) {
    error err = default!;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (_, e1) = callunlink(uintptr(@unsafe.Pointer(_p0)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Unlinkat(nint dirfd, @string path, nint flags) {
    error err = default!;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (_, e1) = callunlinkat(dirfd, uintptr(@unsafe.Pointer(_p0)), flags);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Ustat(nint dev, ptr<Ustat_t> _addr_ubuf) {
    error err = default!;
    ref Ustat_t ubuf = ref _addr_ubuf.val;

    var (_, e1) = callustat(dev, uintptr(@unsafe.Pointer(ubuf)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static (nint, error) write(nint fd, slice<byte> p) {
    nint n = default;
    error err = default!;

    ptr<byte> _p0;
    if (len(p) > 0) {
        _p0 = _addr_p[0];
    }
    var (r0, e1) = callwrite(fd, uintptr(@unsafe.Pointer(_p0)), len(p));
    n = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static (nint, error) readlen(nint fd, ptr<byte> _addr_p, nint np) {
    nint n = default;
    error err = default!;
    ref byte p = ref _addr_p.val;

    var (r0, e1) = callread(fd, uintptr(@unsafe.Pointer(p)), np);
    n = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static (nint, error) writelen(nint fd, ptr<byte> _addr_p, nint np) {
    nint n = default;
    error err = default!;
    ref byte p = ref _addr_p.val;

    var (r0, e1) = callwrite(fd, uintptr(@unsafe.Pointer(p)), np);
    n = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Dup2(nint oldfd, nint newfd) {
    error err = default!;

    var (_, e1) = calldup2(oldfd, newfd);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Fadvise(nint fd, long offset, long length, nint advice) {
    error err = default!;

    var (_, e1) = callposix_fadvise64(fd, offset, length, advice);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Fchown(nint fd, nint uid, nint gid) {
    error err = default!;

    var (_, e1) = callfchown(fd, uid, gid);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static error fstat(nint fd, ptr<Stat_t> _addr_stat) {
    error err = default!;
    ref Stat_t stat = ref _addr_stat.val;

    var (_, e1) = callfstat(fd, uintptr(@unsafe.Pointer(stat)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static error fstatat(nint dirfd, @string path, ptr<Stat_t> _addr_stat, nint flags) {
    error err = default!;
    ref Stat_t stat = ref _addr_stat.val;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (_, e1) = callfstatat(dirfd, uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(stat)), flags);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Fstatfs(nint fd, ptr<Statfs_t> _addr_buf) {
    error err = default!;
    ref Statfs_t buf = ref _addr_buf.val;

    var (_, e1) = callfstatfs(fd, uintptr(@unsafe.Pointer(buf)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Ftruncate(nint fd, long length) {
    error err = default!;

    var (_, e1) = callftruncate(fd, length);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static nint Getegid() {
    nint egid = default;

    var (r0, _) = callgetegid();
    egid = int(r0);
    return ;
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static nint Geteuid() {
    nint euid = default;

    var (r0, _) = callgeteuid();
    euid = int(r0);
    return ;
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static nint Getgid() {
    nint gid = default;

    var (r0, _) = callgetgid();
    gid = int(r0);
    return ;
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static nint Getuid() {
    nint uid = default;

    var (r0, _) = callgetuid();
    uid = int(r0);
    return ;
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Lchown(@string path, nint uid, nint gid) {
    error err = default!;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (_, e1) = calllchown(uintptr(@unsafe.Pointer(_p0)), uid, gid);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Listen(nint s, nint n) {
    error err = default!;

    var (_, e1) = calllisten(s, n);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static error lstat(@string path, ptr<Stat_t> _addr_stat) {
    error err = default!;
    ref Stat_t stat = ref _addr_stat.val;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (_, e1) = calllstat(uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(stat)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Pause() {
    error err = default!;

    var (_, e1) = callpause();
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static (nint, error) Pread(nint fd, slice<byte> p, long offset) {
    nint n = default;
    error err = default!;

    ptr<byte> _p0;
    if (len(p) > 0) {
        _p0 = _addr_p[0];
    }
    var (r0, e1) = callpread64(fd, uintptr(@unsafe.Pointer(_p0)), len(p), offset);
    n = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static (nint, error) Pwrite(nint fd, slice<byte> p, long offset) {
    nint n = default;
    error err = default!;

    ptr<byte> _p0;
    if (len(p) > 0) {
        _p0 = _addr_p[0];
    }
    var (r0, e1) = callpwrite64(fd, uintptr(@unsafe.Pointer(_p0)), len(p), offset);
    n = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static (nint, error) Select(nint nfd, ptr<FdSet> _addr_r, ptr<FdSet> _addr_w, ptr<FdSet> _addr_e, ptr<Timeval> _addr_timeout) {
    nint n = default;
    error err = default!;
    ref FdSet r = ref _addr_r.val;
    ref FdSet w = ref _addr_w.val;
    ref FdSet e = ref _addr_e.val;
    ref Timeval timeout = ref _addr_timeout.val;

    var (r0, e1) = callselect(nfd, uintptr(@unsafe.Pointer(r)), uintptr(@unsafe.Pointer(w)), uintptr(@unsafe.Pointer(e)), uintptr(@unsafe.Pointer(timeout)));
    n = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static (nint, error) Pselect(nint nfd, ptr<FdSet> _addr_r, ptr<FdSet> _addr_w, ptr<FdSet> _addr_e, ptr<Timespec> _addr_timeout, ptr<Sigset_t> _addr_sigmask) {
    nint n = default;
    error err = default!;
    ref FdSet r = ref _addr_r.val;
    ref FdSet w = ref _addr_w.val;
    ref FdSet e = ref _addr_e.val;
    ref Timespec timeout = ref _addr_timeout.val;
    ref Sigset_t sigmask = ref _addr_sigmask.val;

    var (r0, e1) = callpselect(nfd, uintptr(@unsafe.Pointer(r)), uintptr(@unsafe.Pointer(w)), uintptr(@unsafe.Pointer(e)), uintptr(@unsafe.Pointer(timeout)), uintptr(@unsafe.Pointer(sigmask)));
    n = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Setregid(nint rgid, nint egid) {
    error err = default!;

    var (_, e1) = callsetregid(rgid, egid);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Setreuid(nint ruid, nint euid) {
    error err = default!;

    var (_, e1) = callsetreuid(ruid, euid);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Shutdown(nint fd, nint how) {
    error err = default!;

    var (_, e1) = callshutdown(fd, how);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static (long, error) Splice(nint rfd, ptr<long> _addr_roff, nint wfd, ptr<long> _addr_woff, nint len, nint flags) {
    long n = default;
    error err = default!;
    ref long roff = ref _addr_roff.val;
    ref long woff = ref _addr_woff.val;

    var (r0, e1) = callsplice(rfd, uintptr(@unsafe.Pointer(roff)), wfd, uintptr(@unsafe.Pointer(woff)), len, flags);
    n = int64(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static error stat(@string path, ptr<Stat_t> _addr_statptr) {
    error err = default!;
    ref Stat_t statptr = ref _addr_statptr.val;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (_, e1) = callstat(uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(statptr)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Statfs(@string path, ptr<Statfs_t> _addr_buf) {
    error err = default!;
    ref Statfs_t buf = ref _addr_buf.val;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (_, e1) = callstatfs(uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(buf)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Truncate(@string path, long length) {
    error err = default!;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (_, e1) = calltruncate(uintptr(@unsafe.Pointer(_p0)), length);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static error bind(nint s, unsafe.Pointer addr, _Socklen addrlen) {
    error err = default!;

    var (_, e1) = callbind(s, uintptr(addr), uintptr(addrlen));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static error connect(nint s, unsafe.Pointer addr, _Socklen addrlen) {
    error err = default!;

    var (_, e1) = callconnect(s, uintptr(addr), uintptr(addrlen));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static (nint, error) getgroups(nint n, ptr<_Gid_t> _addr_list) {
    nint nn = default;
    error err = default!;
    ref _Gid_t list = ref _addr_list.val;

    var (r0, e1) = callgetgroups(n, uintptr(@unsafe.Pointer(list)));
    nn = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static error setgroups(nint n, ptr<_Gid_t> _addr_list) {
    error err = default!;
    ref _Gid_t list = ref _addr_list.val;

    var (_, e1) = callsetgroups(n, uintptr(@unsafe.Pointer(list)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static error getsockopt(nint s, nint level, nint name, unsafe.Pointer val, ptr<_Socklen> _addr_vallen) {
    error err = default!;
    ref _Socklen vallen = ref _addr_vallen.val;

    var (_, e1) = callgetsockopt(s, level, name, uintptr(val), uintptr(@unsafe.Pointer(vallen)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static error setsockopt(nint s, nint level, nint name, unsafe.Pointer val, System.UIntPtr vallen) {
    error err = default!;

    var (_, e1) = callsetsockopt(s, level, name, uintptr(val), vallen);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static (nint, error) socket(nint domain, nint typ, nint proto) {
    nint fd = default;
    error err = default!;

    var (r0, e1) = callsocket(domain, typ, proto);
    fd = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static error socketpair(nint domain, nint typ, nint proto, ptr<array<int>> _addr_fd) {
    error err = default!;
    ref array<int> fd = ref _addr_fd.val;

    var (_, e1) = callsocketpair(domain, typ, proto, uintptr(@unsafe.Pointer(fd)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static error getpeername(nint fd, ptr<RawSockaddrAny> _addr_rsa, ptr<_Socklen> _addr_addrlen) {
    error err = default!;
    ref RawSockaddrAny rsa = ref _addr_rsa.val;
    ref _Socklen addrlen = ref _addr_addrlen.val;

    var (_, e1) = callgetpeername(fd, uintptr(@unsafe.Pointer(rsa)), uintptr(@unsafe.Pointer(addrlen)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static error getsockname(nint fd, ptr<RawSockaddrAny> _addr_rsa, ptr<_Socklen> _addr_addrlen) {
    error err = default!;
    ref RawSockaddrAny rsa = ref _addr_rsa.val;
    ref _Socklen addrlen = ref _addr_addrlen.val;

    var (_, e1) = callgetsockname(fd, uintptr(@unsafe.Pointer(rsa)), uintptr(@unsafe.Pointer(addrlen)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static (nint, error) recvfrom(nint fd, slice<byte> p, nint flags, ptr<RawSockaddrAny> _addr_from, ptr<_Socklen> _addr_fromlen) {
    nint n = default;
    error err = default!;
    ref RawSockaddrAny from = ref _addr_from.val;
    ref _Socklen fromlen = ref _addr_fromlen.val;

    ptr<byte> _p0;
    if (len(p) > 0) {
        _p0 = _addr_p[0];
    }
    var (r0, e1) = callrecvfrom(fd, uintptr(@unsafe.Pointer(_p0)), len(p), flags, uintptr(@unsafe.Pointer(from)), uintptr(@unsafe.Pointer(fromlen)));
    n = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static error sendto(nint s, slice<byte> buf, nint flags, unsafe.Pointer to, _Socklen addrlen) {
    error err = default!;

    ptr<byte> _p0;
    if (len(buf) > 0) {
        _p0 = _addr_buf[0];
    }
    var (_, e1) = callsendto(s, uintptr(@unsafe.Pointer(_p0)), len(buf), flags, uintptr(to), uintptr(addrlen));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static (nint, error) recvmsg(nint s, ptr<Msghdr> _addr_msg, nint flags) {
    nint n = default;
    error err = default!;
    ref Msghdr msg = ref _addr_msg.val;

    var (r0, e1) = callnrecvmsg(s, uintptr(@unsafe.Pointer(msg)), flags);
    n = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static (nint, error) sendmsg(nint s, ptr<Msghdr> _addr_msg, nint flags) {
    nint n = default;
    error err = default!;
    ref Msghdr msg = ref _addr_msg.val;

    var (r0, e1) = callnsendmsg(s, uintptr(@unsafe.Pointer(msg)), flags);
    n = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static error munmap(System.UIntPtr addr, System.UIntPtr length) {
    error err = default!;

    var (_, e1) = callmunmap(addr, length);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Madvise(slice<byte> b, nint advice) {
    error err = default!;

    ptr<byte> _p0;
    if (len(b) > 0) {
        _p0 = _addr_b[0];
    }
    var (_, e1) = callmadvise(uintptr(@unsafe.Pointer(_p0)), len(b), advice);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Mprotect(slice<byte> b, nint prot) {
    error err = default!;

    ptr<byte> _p0;
    if (len(b) > 0) {
        _p0 = _addr_b[0];
    }
    var (_, e1) = callmprotect(uintptr(@unsafe.Pointer(_p0)), len(b), prot);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Mlock(slice<byte> b) {
    error err = default!;

    ptr<byte> _p0;
    if (len(b) > 0) {
        _p0 = _addr_b[0];
    }
    var (_, e1) = callmlock(uintptr(@unsafe.Pointer(_p0)), len(b));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Mlockall(nint flags) {
    error err = default!;

    var (_, e1) = callmlockall(flags);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Msync(slice<byte> b, nint flags) {
    error err = default!;

    ptr<byte> _p0;
    if (len(b) > 0) {
        _p0 = _addr_b[0];
    }
    var (_, e1) = callmsync(uintptr(@unsafe.Pointer(_p0)), len(b), flags);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Munlock(slice<byte> b) {
    error err = default!;

    ptr<byte> _p0;
    if (len(b) > 0) {
        _p0 = _addr_b[0];
    }
    var (_, e1) = callmunlock(uintptr(@unsafe.Pointer(_p0)), len(b));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Munlockall() {
    error err = default!;

    var (_, e1) = callmunlockall();
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static error pipe(ptr<array<_C_int>> _addr_p) {
    error err = default!;
    ref array<_C_int> p = ref _addr_p.val;

    var (_, e1) = callpipe(uintptr(@unsafe.Pointer(p)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static (nint, error) poll(ptr<PollFd> _addr_fds, nint nfds, nint timeout) {
    nint n = default;
    error err = default!;
    ref PollFd fds = ref _addr_fds.val;

    var (r0, e1) = callpoll(uintptr(@unsafe.Pointer(fds)), nfds, timeout);
    n = int(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static error gettimeofday(ptr<Timeval> _addr_tv, ptr<Timezone> _addr_tzp) {
    error err = default!;
    ref Timeval tv = ref _addr_tv.val;
    ref Timezone tzp = ref _addr_tzp.val;

    var (_, e1) = callgettimeofday(uintptr(@unsafe.Pointer(tv)), uintptr(@unsafe.Pointer(tzp)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static (Time_t, error) Time(ptr<Time_t> _addr_t) {
    Time_t tt = default;
    error err = default!;
    ref Time_t t = ref _addr_t.val;

    var (r0, e1) = calltime(uintptr(@unsafe.Pointer(t)));
    tt = Time_t(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Utime(@string path, ptr<Utimbuf> _addr_buf) {
    error err = default!;
    ref Utimbuf buf = ref _addr_buf.val;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(path);
    if (err != null) {
        return ;
    }
    var (_, e1) = callutime(uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(buf)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static ulong Getsystemcfg(nint label) {
    ulong n = default;

    var (r0, _) = callgetsystemcfg(label);
    n = uint64(r0);
    return ;
}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static error umount(@string target) {
    error err = default!;

    ptr<byte> _p0;
    _p0, err = BytePtrFromString(target);
    if (err != null) {
        return ;
    }
    var (_, e1) = callumount(uintptr(@unsafe.Pointer(_p0)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Getrlimit(nint resource, ptr<Rlimit> _addr_rlim) {
    error err = default!;
    ref Rlimit rlim = ref _addr_rlim.val;

    var (_, e1) = callgetrlimit(resource, uintptr(@unsafe.Pointer(rlim)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static error Setrlimit(nint resource, ptr<Rlimit> _addr_rlim) {
    error err = default!;
    ref Rlimit rlim = ref _addr_rlim.val;

    var (_, e1) = callsetrlimit(resource, uintptr(@unsafe.Pointer(rlim)));
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

public static (long, error) Seek(nint fd, long offset, nint whence) {
    long off = default;
    error err = default!;

    var (r0, e1) = calllseek(fd, offset, whence);
    off = int64(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

private static (System.UIntPtr, error) mmap(System.UIntPtr addr, System.UIntPtr length, nint prot, nint flags, nint fd, long offset) {
    System.UIntPtr xaddr = default;
    error err = default!;

    var (r0, e1) = callmmap64(addr, length, prot, flags, fd, offset);
    xaddr = uintptr(r0);
    if (e1 != 0) {
        err = errnoErr(e1);
    }
    return ;

}

} // end unix_package
