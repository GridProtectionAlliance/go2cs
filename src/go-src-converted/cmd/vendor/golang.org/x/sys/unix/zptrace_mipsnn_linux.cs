// Code generated by linux/mkall.go generatePtracePair("mips", "mips64"). DO NOT EDIT.

//go:build linux && (mips || mips64)
// +build linux
// +build mips mips64

// package unix -- go2cs converted at 2022 March 06 23:27:54 UTC
// import "cmd/vendor/golang.org/x/sys/unix" ==> using unix = go.cmd.vendor.golang.org.x.sys.unix_package
// Original source: C:\Program Files\Go\src\cmd\vendor\golang.org\x\sys\unix\zptrace_mipsnn_linux.go
using @unsafe = go.@unsafe_package;

namespace go.cmd.vendor.golang.org.x.sys;

public static partial class unix_package {

    // PtraceRegsMips is the registers used by mips binaries.
public partial struct PtraceRegsMips {
    public array<ulong> Regs;
    public ulong Lo;
    public ulong Hi;
    public ulong Epc;
    public ulong Badvaddr;
    public ulong Status;
    public ulong Cause;
}

// PtraceGetRegsMips fetches the registers used by mips binaries.
public static error PtraceGetRegsMips(nint pid, ptr<PtraceRegsMips> _addr_regsout) {
    ref PtraceRegsMips regsout = ref _addr_regsout.val;

    return error.As(ptrace(PTRACE_GETREGS, pid, 0, uintptr(@unsafe.Pointer(regsout))))!;
}

// PtraceSetRegsMips sets the registers used by mips binaries.
public static error PtraceSetRegsMips(nint pid, ptr<PtraceRegsMips> _addr_regs) {
    ref PtraceRegsMips regs = ref _addr_regs.val;

    return error.As(ptrace(PTRACE_SETREGS, pid, 0, uintptr(@unsafe.Pointer(regs))))!;
}

// PtraceRegsMips64 is the registers used by mips64 binaries.
public partial struct PtraceRegsMips64 {
    public array<ulong> Regs;
    public ulong Lo;
    public ulong Hi;
    public ulong Epc;
    public ulong Badvaddr;
    public ulong Status;
    public ulong Cause;
}

// PtraceGetRegsMips64 fetches the registers used by mips64 binaries.
public static error PtraceGetRegsMips64(nint pid, ptr<PtraceRegsMips64> _addr_regsout) {
    ref PtraceRegsMips64 regsout = ref _addr_regsout.val;

    return error.As(ptrace(PTRACE_GETREGS, pid, 0, uintptr(@unsafe.Pointer(regsout))))!;
}

// PtraceSetRegsMips64 sets the registers used by mips64 binaries.
public static error PtraceSetRegsMips64(nint pid, ptr<PtraceRegsMips64> _addr_regs) {
    ref PtraceRegsMips64 regs = ref _addr_regs.val;

    return error.As(ptrace(PTRACE_SETREGS, pid, 0, uintptr(@unsafe.Pointer(regs))))!;
}

} // end unix_package
