// Code generated by linux/mkall.go generatePtracePair("386", "amd64"). DO NOT EDIT.

// +build linux
// +build 386 amd64

// package unix -- go2cs converted at 2020 October 09 05:57:36 UTC
// import "cmd/vendor/golang.org/x/sys/unix" ==> using unix = go.cmd.vendor.golang.org.x.sys.unix_package
// Original source: C:\Go\src\cmd\vendor\golang.org\x\sys\unix\zptrace_x86_linux.go
using @unsafe = go.@unsafe_package;
using static go.builtin;

namespace go {
namespace cmd {
namespace vendor {
namespace golang.org {
namespace x {
namespace sys
{
    public static partial class unix_package
    {
        // PtraceRegs386 is the registers used by 386 binaries.
        public partial struct PtraceRegs386
        {
            public int Ebx;
            public int Ecx;
            public int Edx;
            public int Esi;
            public int Edi;
            public int Ebp;
            public int Eax;
            public int Xds;
            public int Xes;
            public int Xfs;
            public int Xgs;
            public int Orig_eax;
            public int Eip;
            public int Xcs;
            public int Eflags;
            public int Esp;
            public int Xss;
        }

        // PtraceGetRegs386 fetches the registers used by 386 binaries.
        public static error PtraceGetRegs386(long pid, ptr<PtraceRegs386> _addr_regsout)
        {
            ref PtraceRegs386 regsout = ref _addr_regsout.val;

            return error.As(ptrace(PTRACE_GETREGS, pid, 0L, uintptr(@unsafe.Pointer(regsout))))!;
        }

        // PtraceSetRegs386 sets the registers used by 386 binaries.
        public static error PtraceSetRegs386(long pid, ptr<PtraceRegs386> _addr_regs)
        {
            ref PtraceRegs386 regs = ref _addr_regs.val;

            return error.As(ptrace(PTRACE_SETREGS, pid, 0L, uintptr(@unsafe.Pointer(regs))))!;
        }

        // PtraceRegsAmd64 is the registers used by amd64 binaries.
        public partial struct PtraceRegsAmd64
        {
            public ulong R15;
            public ulong R14;
            public ulong R13;
            public ulong R12;
            public ulong Rbp;
            public ulong Rbx;
            public ulong R11;
            public ulong R10;
            public ulong R9;
            public ulong R8;
            public ulong Rax;
            public ulong Rcx;
            public ulong Rdx;
            public ulong Rsi;
            public ulong Rdi;
            public ulong Orig_rax;
            public ulong Rip;
            public ulong Cs;
            public ulong Eflags;
            public ulong Rsp;
            public ulong Ss;
            public ulong Fs_base;
            public ulong Gs_base;
            public ulong Ds;
            public ulong Es;
            public ulong Fs;
            public ulong Gs;
        }

        // PtraceGetRegsAmd64 fetches the registers used by amd64 binaries.
        public static error PtraceGetRegsAmd64(long pid, ptr<PtraceRegsAmd64> _addr_regsout)
        {
            ref PtraceRegsAmd64 regsout = ref _addr_regsout.val;

            return error.As(ptrace(PTRACE_GETREGS, pid, 0L, uintptr(@unsafe.Pointer(regsout))))!;
        }

        // PtraceSetRegsAmd64 sets the registers used by amd64 binaries.
        public static error PtraceSetRegsAmd64(long pid, ptr<PtraceRegsAmd64> _addr_regs)
        {
            ref PtraceRegsAmd64 regs = ref _addr_regs.val;

            return error.As(ptrace(PTRACE_SETREGS, pid, 0L, uintptr(@unsafe.Pointer(regs))))!;
        }
    }
}}}}}}
