// cgo -godefs -- -fsigned-char types_freebsd.go | go run mkpost.go
// Code generated by the command above; see README.md. DO NOT EDIT.

//go:build arm64 && freebsd
// +build arm64,freebsd

// package unix -- go2cs converted at 2022 March 06 23:30:29 UTC
// import "cmd/vendor/golang.org/x/sys/unix" ==> using unix = go.cmd.vendor.golang.org.x.sys.unix_package
// Original source: C:\Program Files\Go\src\cmd\vendor\golang.org\x\sys\unix\ztypes_freebsd_arm64.go


namespace go.cmd.vendor.golang.org.x.sys;

public static partial class unix_package {

public static readonly nuint SizeofPtr = 0x8;
public static readonly nuint SizeofShort = 0x2;
public static readonly nuint SizeofInt = 0x4;
public static readonly nuint SizeofLong = 0x8;
public static readonly nuint SizeofLongLong = 0x8;


private partial struct _C_short { // : short
}
private partial struct _C_int { // : int
}
private partial struct _C_long { // : long
}
private partial struct _C_long_long { // : long
}
public partial struct Timespec {
    public long Sec;
    public long Nsec;
}

public partial struct Timeval {
    public long Sec;
    public long Usec;
}

public partial struct Rusage {
    public Timeval Utime;
    public Timeval Stime;
    public long Maxrss;
    public long Ixrss;
    public long Idrss;
    public long Isrss;
    public long Minflt;
    public long Majflt;
    public long Nswap;
    public long Inblock;
    public long Oublock;
    public long Msgsnd;
    public long Msgrcv;
    public long Nsignals;
    public long Nvcsw;
    public long Nivcsw;
}

public partial struct Rlimit {
    public long Cur;
    public long Max;
}

private partial struct _Gid_t { // : uint
}

private static readonly nuint _statfsVersion = 0x20140518;
private static readonly nuint _dirblksiz = 0x400;


public partial struct Stat_t {
    public ulong Dev;
    public ulong Ino;
    public ulong Nlink;
    public ushort Mode;
    public short _0;
    public uint Uid;
    public uint Gid;
    public int _1;
    public ulong Rdev;
    public Timespec Atim;
    public Timespec Mtim;
    public Timespec Ctim;
    public Timespec Btim;
    public long Size;
    public long Blocks;
    public int Blksize;
    public uint Flags;
    public ulong Gen;
    public array<ulong> Spare;
}

private partial struct stat_freebsd11_t {
    public uint Dev;
    public uint Ino;
    public ushort Mode;
    public ushort Nlink;
    public uint Uid;
    public uint Gid;
    public uint Rdev;
    public Timespec Atim;
    public Timespec Mtim;
    public Timespec Ctim;
    public long Size;
    public long Blocks;
    public int Blksize;
    public uint Flags;
    public uint Gen;
    public int Lspare;
    public Timespec Btim;
}

public partial struct Statfs_t {
    public uint Version;
    public uint Type;
    public ulong Flags;
    public ulong Bsize;
    public ulong Iosize;
    public ulong Blocks;
    public ulong Bfree;
    public long Bavail;
    public ulong Files;
    public long Ffree;
    public ulong Syncwrites;
    public ulong Asyncwrites;
    public ulong Syncreads;
    public ulong Asyncreads;
    public array<ulong> Spare;
    public uint Namemax;
    public uint Owner;
    public Fsid Fsid;
    public array<sbyte> Charspare;
    public array<byte> Fstypename;
    public array<byte> Mntfromname;
    public array<byte> Mntonname;
}

private partial struct statfs_freebsd11_t {
    public uint Version;
    public uint Type;
    public ulong Flags;
    public ulong Bsize;
    public ulong Iosize;
    public ulong Blocks;
    public ulong Bfree;
    public long Bavail;
    public ulong Files;
    public long Ffree;
    public ulong Syncwrites;
    public ulong Asyncwrites;
    public ulong Syncreads;
    public ulong Asyncreads;
    public array<ulong> Spare;
    public uint Namemax;
    public uint Owner;
    public Fsid Fsid;
    public array<sbyte> Charspare;
    public array<byte> Fstypename;
    public array<byte> Mntfromname;
    public array<byte> Mntonname;
}

public partial struct Flock_t {
    public long Start;
    public long Len;
    public int Pid;
    public short Type;
    public short Whence;
    public int Sysid;
    public array<byte> _;
}

public partial struct Dirent {
    public ulong Fileno;
    public long Off;
    public ushort Reclen;
    public byte Type;
    public byte Pad0;
    public ushort Namlen;
    public ushort Pad1;
    public array<sbyte> Name;
}

private partial struct dirent_freebsd11 {
    public uint Fileno;
    public ushort Reclen;
    public byte Type;
    public byte Namlen;
    public array<sbyte> Name;
}

public partial struct Fsid {
    public array<int> Val;
}

public static readonly nuint PathMax = 0x400;


public static readonly nuint FADV_NORMAL = 0x0;
public static readonly nuint FADV_RANDOM = 0x1;
public static readonly nuint FADV_SEQUENTIAL = 0x2;
public static readonly nuint FADV_WILLNEED = 0x3;
public static readonly nuint FADV_DONTNEED = 0x4;
public static readonly nuint FADV_NOREUSE = 0x5;


public partial struct RawSockaddrInet4 {
    public byte Len;
    public byte Family;
    public ushort Port;
    public array<byte> Addr; /* in_addr */
    public array<sbyte> Zero;
}

public partial struct RawSockaddrInet6 {
    public byte Len;
    public byte Family;
    public ushort Port;
    public uint Flowinfo;
    public array<byte> Addr; /* in6_addr */
    public uint Scope_id;
}

public partial struct RawSockaddrUnix {
    public byte Len;
    public byte Family;
    public array<sbyte> Path;
}

public partial struct RawSockaddrDatalink {
    public byte Len;
    public byte Family;
    public ushort Index;
    public byte Type;
    public byte Nlen;
    public byte Alen;
    public byte Slen;
    public array<sbyte> Data;
}

public partial struct RawSockaddr {
    public byte Len;
    public byte Family;
    public array<sbyte> Data;
}

public partial struct RawSockaddrAny {
    public RawSockaddr Addr;
    public array<sbyte> Pad;
}

private partial struct _Socklen { // : uint
}

public partial struct Xucred {
    public uint Version;
    public uint Uid;
    public short Ngroups;
    public array<uint> Groups;
    public ptr<byte> _;
}

public partial struct Linger {
    public int Onoff;
    public int Linger;
}

public partial struct Iovec {
    public ptr<byte> Base;
    public ulong Len;
}

public partial struct IPMreq {
    public array<byte> Multiaddr; /* in_addr */
    public array<byte> Interface; /* in_addr */
}

public partial struct IPMreqn {
    public array<byte> Multiaddr; /* in_addr */
    public array<byte> Address; /* in_addr */
    public int Ifindex;
}

public partial struct IPv6Mreq {
    public array<byte> Multiaddr; /* in6_addr */
    public uint Interface;
}

public partial struct Msghdr {
    public ptr<byte> Name;
    public uint Namelen;
    public ptr<Iovec> Iov;
    public int Iovlen;
    public ptr<byte> Control;
    public uint Controllen;
    public int Flags;
}

public partial struct Cmsghdr {
    public uint Len;
    public int Level;
    public int Type;
}

public partial struct Inet6Pktinfo {
    public array<byte> Addr; /* in6_addr */
    public uint Ifindex;
}

public partial struct IPv6MTUInfo {
    public RawSockaddrInet6 Addr;
    public uint Mtu;
}

public partial struct ICMPv6Filter {
    public array<uint> Filt;
}

public static readonly nuint SizeofSockaddrInet4 = 0x10;
public static readonly nuint SizeofSockaddrInet6 = 0x1c;
public static readonly nuint SizeofSockaddrAny = 0x6c;
public static readonly nuint SizeofSockaddrUnix = 0x6a;
public static readonly nuint SizeofSockaddrDatalink = 0x36;
public static readonly nuint SizeofXucred = 0x58;
public static readonly nuint SizeofLinger = 0x8;
public static readonly nuint SizeofIovec = 0x10;
public static readonly nuint SizeofIPMreq = 0x8;
public static readonly nuint SizeofIPMreqn = 0xc;
public static readonly nuint SizeofIPv6Mreq = 0x14;
public static readonly nuint SizeofMsghdr = 0x30;
public static readonly nuint SizeofCmsghdr = 0xc;
public static readonly nuint SizeofInet6Pktinfo = 0x14;
public static readonly nuint SizeofIPv6MTUInfo = 0x20;
public static readonly nuint SizeofICMPv6Filter = 0x20;


public static readonly nuint PTRACE_ATTACH = 0xa;
public static readonly nuint PTRACE_CONT = 0x7;
public static readonly nuint PTRACE_DETACH = 0xb;
public static readonly nuint PTRACE_GETFPREGS = 0x23;
public static readonly nuint PTRACE_GETLWPLIST = 0xf;
public static readonly nuint PTRACE_GETNUMLWPS = 0xe;
public static readonly nuint PTRACE_GETREGS = 0x21;
public static readonly nuint PTRACE_IO = 0xc;
public static readonly nuint PTRACE_KILL = 0x8;
public static readonly nuint PTRACE_LWPEVENTS = 0x18;
public static readonly nuint PTRACE_LWPINFO = 0xd;
public static readonly nuint PTRACE_SETFPREGS = 0x24;
public static readonly nuint PTRACE_SETREGS = 0x22;
public static readonly nuint PTRACE_SINGLESTEP = 0x9;
public static readonly nuint PTRACE_TRACEME = 0x0;


public static readonly nuint PIOD_READ_D = 0x1;
public static readonly nuint PIOD_WRITE_D = 0x2;
public static readonly nuint PIOD_READ_I = 0x3;
public static readonly nuint PIOD_WRITE_I = 0x4;


public static readonly nuint PL_FLAG_BORN = 0x100;
public static readonly nuint PL_FLAG_EXITED = 0x200;
public static readonly nuint PL_FLAG_SI = 0x20;


public static readonly nuint TRAP_BRKPT = 0x1;
public static readonly nuint TRAP_TRACE = 0x2;


public partial struct PtraceLwpInfoStruct {
    public int Lwpid;
    public int Event;
    public int Flags;
    public Sigset_t Sigmask;
    public Sigset_t Siglist;
    public __Siginfo Siginfo;
    public array<sbyte> Tdname;
    public int Child_pid;
    public uint Syscall_code;
    public uint Syscall_narg;
}

private partial struct __Siginfo {
    public int Signo;
    public int Errno;
    public int Code;
    public int Pid;
    public uint Uid;
    public int Status;
    public ptr<byte> Addr;
    public array<byte> Value;
    public array<byte> _;
}

public partial struct Sigset_t {
    public array<uint> Val;
}

public partial struct Reg {
    public array<ulong> X;
    public ulong Lr;
    public ulong Sp;
    public ulong Elr;
    public uint Spsr;
    public array<byte> _;
}

public partial struct FpReg {
    public array<array<byte>> Q;
    public uint Sr;
    public uint Cr;
    public array<byte> _;
}

public partial struct PtraceIoDesc {
    public int Op;
    public ptr<byte> Offs;
    public ptr<byte> Addr;
    public ulong Len;
}

public partial struct Kevent_t {
    public ulong Ident;
    public short Filter;
    public ushort Flags;
    public uint Fflags;
    public long Data;
    public ptr<byte> Udata;
}

public partial struct FdSet {
    public array<ulong> Bits;
}

private static readonly nuint sizeofIfMsghdr = 0xa8;
public static readonly nuint SizeofIfMsghdr = 0xa8;
private static readonly nuint sizeofIfData = 0x98;
public static readonly nuint SizeofIfData = 0x98;
public static readonly nuint SizeofIfaMsghdr = 0x14;
public static readonly nuint SizeofIfmaMsghdr = 0x10;
public static readonly nuint SizeofIfAnnounceMsghdr = 0x18;
public static readonly nuint SizeofRtMsghdr = 0x98;
public static readonly nuint SizeofRtMetrics = 0x70;


private partial struct ifMsghdr {
    public ushort Msglen;
    public byte Version;
    public byte Type;
    public int Addrs;
    public int Flags;
    public ushort Index;
    public ushort _;
    public ifData Data;
}

public partial struct IfMsghdr {
    public ushort Msglen;
    public byte Version;
    public byte Type;
    public int Addrs;
    public int Flags;
    public ushort Index;
    public IfData Data;
}

private partial struct ifData {
    public byte Type;
    public byte Physical;
    public byte Addrlen;
    public byte Hdrlen;
    public byte Link_state;
    public byte Vhid;
    public ushort Datalen;
    public uint Mtu;
    public uint Metric;
    public ulong Baudrate;
    public ulong Ipackets;
    public ulong Ierrors;
    public ulong Opackets;
    public ulong Oerrors;
    public ulong Collisions;
    public ulong Ibytes;
    public ulong Obytes;
    public ulong Imcasts;
    public ulong Omcasts;
    public ulong Iqdrops;
    public ulong Oqdrops;
    public ulong Noproto;
    public ulong Hwassist;
    public array<byte> _;
    public array<byte> _;
}

public partial struct IfData {
    public byte Type;
    public byte Physical;
    public byte Addrlen;
    public byte Hdrlen;
    public byte Link_state;
    public byte Spare_char1;
    public byte Spare_char2;
    public byte Datalen;
    public ulong Mtu;
    public ulong Metric;
    public ulong Baudrate;
    public ulong Ipackets;
    public ulong Ierrors;
    public ulong Opackets;
    public ulong Oerrors;
    public ulong Collisions;
    public ulong Ibytes;
    public ulong Obytes;
    public ulong Imcasts;
    public ulong Omcasts;
    public ulong Iqdrops;
    public ulong Noproto;
    public ulong Hwassist;
    public long Epoch;
    public Timeval Lastchange;
}

public partial struct IfaMsghdr {
    public ushort Msglen;
    public byte Version;
    public byte Type;
    public int Addrs;
    public int Flags;
    public ushort Index;
    public ushort _;
    public int Metric;
}

public partial struct IfmaMsghdr {
    public ushort Msglen;
    public byte Version;
    public byte Type;
    public int Addrs;
    public int Flags;
    public ushort Index;
    public ushort _;
}

public partial struct IfAnnounceMsghdr {
    public ushort Msglen;
    public byte Version;
    public byte Type;
    public ushort Index;
    public array<sbyte> Name;
    public ushort What;
}

public partial struct RtMsghdr {
    public ushort Msglen;
    public byte Version;
    public byte Type;
    public ushort Index;
    public ushort _;
    public int Flags;
    public int Addrs;
    public int Pid;
    public int Seq;
    public int Errno;
    public int Fmask;
    public ulong Inits;
    public RtMetrics Rmx;
}

public partial struct RtMetrics {
    public ulong Locks;
    public ulong Mtu;
    public ulong Hopcount;
    public ulong Expire;
    public ulong Recvpipe;
    public ulong Sendpipe;
    public ulong Ssthresh;
    public ulong Rtt;
    public ulong Rttvar;
    public ulong Pksent;
    public ulong Weight;
    public array<ulong> Filler;
}

public static readonly nuint SizeofBpfVersion = 0x4;
public static readonly nuint SizeofBpfStat = 0x8;
public static readonly nuint SizeofBpfZbuf = 0x18;
public static readonly nuint SizeofBpfProgram = 0x10;
public static readonly nuint SizeofBpfInsn = 0x8;
public static readonly nuint SizeofBpfHdr = 0x20;
public static readonly nuint SizeofBpfZbufHeader = 0x20;


public partial struct BpfVersion {
    public ushort Major;
    public ushort Minor;
}

public partial struct BpfStat {
    public uint Recv;
    public uint Drop;
}

public partial struct BpfZbuf {
    public ptr<byte> Bufa;
    public ptr<byte> Bufb;
    public ulong Buflen;
}

public partial struct BpfProgram {
    public uint Len;
    public ptr<BpfInsn> Insns;
}

public partial struct BpfInsn {
    public ushort Code;
    public byte Jt;
    public byte Jf;
    public uint K;
}

public partial struct BpfHdr {
    public Timeval Tstamp;
    public uint Caplen;
    public uint Datalen;
    public ushort Hdrlen;
    public array<byte> _;
}

public partial struct BpfZbufHeader {
    public uint Kernel_gen;
    public uint Kernel_len;
    public uint User_gen;
    public array<uint> _;
}

public partial struct Termios {
    public uint Iflag;
    public uint Oflag;
    public uint Cflag;
    public uint Lflag;
    public array<byte> Cc;
    public uint Ispeed;
    public uint Ospeed;
}

public partial struct Winsize {
    public ushort Row;
    public ushort Col;
    public ushort Xpixel;
    public ushort Ypixel;
}

public static readonly nuint AT_FDCWD = -0x64;
public static readonly nuint AT_REMOVEDIR = 0x800;
public static readonly nuint AT_SYMLINK_FOLLOW = 0x400;
public static readonly nuint AT_SYMLINK_NOFOLLOW = 0x200;


public partial struct PollFd {
    public int Fd;
    public short Events;
    public short Revents;
}

public static readonly nuint POLLERR = 0x8;
public static readonly nuint POLLHUP = 0x10;
public static readonly nuint POLLIN = 0x1;
public static readonly nuint POLLINIGNEOF = 0x2000;
public static readonly nuint POLLNVAL = 0x20;
public static readonly nuint POLLOUT = 0x4;
public static readonly nuint POLLPRI = 0x2;
public static readonly nuint POLLRDBAND = 0x80;
public static readonly nuint POLLRDNORM = 0x40;
public static readonly nuint POLLWRBAND = 0x100;
public static readonly nuint POLLWRNORM = 0x4;


public partial struct CapRights {
    public array<ulong> Rights;
}

public partial struct Utsname {
    public array<byte> Sysname;
    public array<byte> Nodename;
    public array<byte> Release;
    public array<byte> Version;
    public array<byte> Machine;
}

public static readonly nuint SizeofClockinfo = 0x14;



public partial struct Clockinfo {
    public int Hz;
    public int Tick;
    public int Spare;
    public int Stathz;
    public int Profhz;
}

} // end unix_package
