// Code generated by linux/mkall.go generatePtraceRegSet("arm64"). DO NOT EDIT.

// package unix -- go2cs converted at 2020 October 09 05:57:35 UTC
// import "cmd/vendor/golang.org/x/sys/unix" ==> using unix = go.cmd.vendor.golang.org.x.sys.unix_package
// Original source: C:\Go\src\cmd\vendor\golang.org\x\sys\unix\zptrace_linux_arm64.go
using @unsafe = go.@unsafe_package;
using static go.builtin;

namespace go {
namespace cmd {
namespace vendor {
namespace golang.org {
namespace x {
namespace sys
{
    public static partial class unix_package
    {
        // PtraceGetRegSetArm64 fetches the registers used by arm64 binaries.
        public static error PtraceGetRegSetArm64(long pid, long addr, ptr<PtraceRegsArm64> _addr_regsout)
        {
            ref PtraceRegsArm64 regsout = ref _addr_regsout.val;

            ref Iovec iovec = ref heap(new Iovec((*byte)(unsafe.Pointer(regsout)),uint64(unsafe.Sizeof(*regsout))), out ptr<Iovec> _addr_iovec);
            return error.As(ptrace(PTRACE_GETREGSET, pid, uintptr(addr), uintptr(@unsafe.Pointer(_addr_iovec))))!;
        }

        // PtraceSetRegSetArm64 sets the registers used by arm64 binaries.
        public static error PtraceSetRegSetArm64(long pid, long addr, ptr<PtraceRegsArm64> _addr_regs)
        {
            ref PtraceRegsArm64 regs = ref _addr_regs.val;

            ref Iovec iovec = ref heap(new Iovec((*byte)(unsafe.Pointer(regs)),uint64(unsafe.Sizeof(*regs))), out ptr<Iovec> _addr_iovec);
            return error.As(ptrace(PTRACE_SETREGSET, pid, uintptr(addr), uintptr(@unsafe.Pointer(_addr_iovec))))!;
        }
    }
}}}}}}
