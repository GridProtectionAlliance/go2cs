// Code generated by linux/mkall.go generatePtracePair("arm", "arm64"). DO NOT EDIT.

// +build linux
// +build arm arm64

// package unix -- go2cs converted at 2020 October 09 05:57:35 UTC
// import "cmd/vendor/golang.org/x/sys/unix" ==> using unix = go.cmd.vendor.golang.org.x.sys.unix_package
// Original source: C:\Go\src\cmd\vendor\golang.org\x\sys\unix\zptrace_armnn_linux.go
using @unsafe = go.@unsafe_package;
using static go.builtin;

namespace go {
namespace cmd {
namespace vendor {
namespace golang.org {
namespace x {
namespace sys
{
    public static partial class unix_package
    {
        // PtraceRegsArm is the registers used by arm binaries.
        public partial struct PtraceRegsArm
        {
            public array<uint> Uregs;
        }

        // PtraceGetRegsArm fetches the registers used by arm binaries.
        public static error PtraceGetRegsArm(long pid, ptr<PtraceRegsArm> _addr_regsout)
        {
            ref PtraceRegsArm regsout = ref _addr_regsout.val;

            return error.As(ptrace(PTRACE_GETREGS, pid, 0L, uintptr(@unsafe.Pointer(regsout))))!;
        }

        // PtraceSetRegsArm sets the registers used by arm binaries.
        public static error PtraceSetRegsArm(long pid, ptr<PtraceRegsArm> _addr_regs)
        {
            ref PtraceRegsArm regs = ref _addr_regs.val;

            return error.As(ptrace(PTRACE_SETREGS, pid, 0L, uintptr(@unsafe.Pointer(regs))))!;
        }

        // PtraceRegsArm64 is the registers used by arm64 binaries.
        public partial struct PtraceRegsArm64
        {
            public array<ulong> Regs;
            public ulong Sp;
            public ulong Pc;
            public ulong Pstate;
        }

        // PtraceGetRegsArm64 fetches the registers used by arm64 binaries.
        public static error PtraceGetRegsArm64(long pid, ptr<PtraceRegsArm64> _addr_regsout)
        {
            ref PtraceRegsArm64 regsout = ref _addr_regsout.val;

            return error.As(ptrace(PTRACE_GETREGS, pid, 0L, uintptr(@unsafe.Pointer(regsout))))!;
        }

        // PtraceSetRegsArm64 sets the registers used by arm64 binaries.
        public static error PtraceSetRegsArm64(long pid, ptr<PtraceRegsArm64> _addr_regs)
        {
            ref PtraceRegsArm64 regs = ref _addr_regs.val;

            return error.As(ptrace(PTRACE_SETREGS, pid, 0L, uintptr(@unsafe.Pointer(regs))))!;
        }
    }
}}}}}}
