// go run mksyscall_solaris.go -tags solaris,amd64 syscall_solaris.go syscall_solaris_amd64.go
// Code generated by the command above; see README.md. DO NOT EDIT.

// +build solaris,amd64

// package unix -- go2cs converted at 2020 October 09 06:00:21 UTC
// import "cmd/vendor/golang.org/x/sys/unix" ==> using unix = go.cmd.vendor.golang.org.x.sys.unix_package
// Original source: C:\Go\src\cmd\vendor\golang.org\x\sys\unix\zsyscall_solaris_amd64.go
using syscall = go.syscall_package;
using @unsafe = go.@unsafe_package;
using static go.builtin;

namespace go {
namespace cmd {
namespace vendor {
namespace golang.org {
namespace x {
namespace sys
{
    public static partial class unix_package
    {
        //go:cgo_import_dynamic libc_pipe pipe "libc.so"
        //go:cgo_import_dynamic libc_getsockname getsockname "libsocket.so"
        //go:cgo_import_dynamic libc_getcwd getcwd "libc.so"
        //go:cgo_import_dynamic libc_getgroups getgroups "libc.so"
        //go:cgo_import_dynamic libc_setgroups setgroups "libc.so"
        //go:cgo_import_dynamic libc_wait4 wait4 "libc.so"
        //go:cgo_import_dynamic libc_gethostname gethostname "libc.so"
        //go:cgo_import_dynamic libc_utimes utimes "libc.so"
        //go:cgo_import_dynamic libc_utimensat utimensat "libc.so"
        //go:cgo_import_dynamic libc_fcntl fcntl "libc.so"
        //go:cgo_import_dynamic libc_futimesat futimesat "libc.so"
        //go:cgo_import_dynamic libc_accept accept "libsocket.so"
        //go:cgo_import_dynamic libc___xnet_recvmsg __xnet_recvmsg "libsocket.so"
        //go:cgo_import_dynamic libc___xnet_sendmsg __xnet_sendmsg "libsocket.so"
        //go:cgo_import_dynamic libc_acct acct "libc.so"
        //go:cgo_import_dynamic libc___makedev __makedev "libc.so"
        //go:cgo_import_dynamic libc___major __major "libc.so"
        //go:cgo_import_dynamic libc___minor __minor "libc.so"
        //go:cgo_import_dynamic libc_ioctl ioctl "libc.so"
        //go:cgo_import_dynamic libc_poll poll "libc.so"
        //go:cgo_import_dynamic libc_access access "libc.so"
        //go:cgo_import_dynamic libc_adjtime adjtime "libc.so"
        //go:cgo_import_dynamic libc_chdir chdir "libc.so"
        //go:cgo_import_dynamic libc_chmod chmod "libc.so"
        //go:cgo_import_dynamic libc_chown chown "libc.so"
        //go:cgo_import_dynamic libc_chroot chroot "libc.so"
        //go:cgo_import_dynamic libc_close close "libc.so"
        //go:cgo_import_dynamic libc_creat creat "libc.so"
        //go:cgo_import_dynamic libc_dup dup "libc.so"
        //go:cgo_import_dynamic libc_dup2 dup2 "libc.so"
        //go:cgo_import_dynamic libc_exit exit "libc.so"
        //go:cgo_import_dynamic libc_faccessat faccessat "libc.so"
        //go:cgo_import_dynamic libc_fchdir fchdir "libc.so"
        //go:cgo_import_dynamic libc_fchmod fchmod "libc.so"
        //go:cgo_import_dynamic libc_fchmodat fchmodat "libc.so"
        //go:cgo_import_dynamic libc_fchown fchown "libc.so"
        //go:cgo_import_dynamic libc_fchownat fchownat "libc.so"
        //go:cgo_import_dynamic libc_fdatasync fdatasync "libc.so"
        //go:cgo_import_dynamic libc_flock flock "libc.so"
        //go:cgo_import_dynamic libc_fpathconf fpathconf "libc.so"
        //go:cgo_import_dynamic libc_fstat fstat "libc.so"
        //go:cgo_import_dynamic libc_fstatat fstatat "libc.so"
        //go:cgo_import_dynamic libc_fstatvfs fstatvfs "libc.so"
        //go:cgo_import_dynamic libc_getdents getdents "libc.so"
        //go:cgo_import_dynamic libc_getgid getgid "libc.so"
        //go:cgo_import_dynamic libc_getpid getpid "libc.so"
        //go:cgo_import_dynamic libc_getpgid getpgid "libc.so"
        //go:cgo_import_dynamic libc_getpgrp getpgrp "libc.so"
        //go:cgo_import_dynamic libc_geteuid geteuid "libc.so"
        //go:cgo_import_dynamic libc_getegid getegid "libc.so"
        //go:cgo_import_dynamic libc_getppid getppid "libc.so"
        //go:cgo_import_dynamic libc_getpriority getpriority "libc.so"
        //go:cgo_import_dynamic libc_getrlimit getrlimit "libc.so"
        //go:cgo_import_dynamic libc_getrusage getrusage "libc.so"
        //go:cgo_import_dynamic libc_gettimeofday gettimeofday "libc.so"
        //go:cgo_import_dynamic libc_getuid getuid "libc.so"
        //go:cgo_import_dynamic libc_kill kill "libc.so"
        //go:cgo_import_dynamic libc_lchown lchown "libc.so"
        //go:cgo_import_dynamic libc_link link "libc.so"
        //go:cgo_import_dynamic libc___xnet_llisten __xnet_llisten "libsocket.so"
        //go:cgo_import_dynamic libc_lstat lstat "libc.so"
        //go:cgo_import_dynamic libc_madvise madvise "libc.so"
        //go:cgo_import_dynamic libc_mkdir mkdir "libc.so"
        //go:cgo_import_dynamic libc_mkdirat mkdirat "libc.so"
        //go:cgo_import_dynamic libc_mkfifo mkfifo "libc.so"
        //go:cgo_import_dynamic libc_mkfifoat mkfifoat "libc.so"
        //go:cgo_import_dynamic libc_mknod mknod "libc.so"
        //go:cgo_import_dynamic libc_mknodat mknodat "libc.so"
        //go:cgo_import_dynamic libc_mlock mlock "libc.so"
        //go:cgo_import_dynamic libc_mlockall mlockall "libc.so"
        //go:cgo_import_dynamic libc_mprotect mprotect "libc.so"
        //go:cgo_import_dynamic libc_msync msync "libc.so"
        //go:cgo_import_dynamic libc_munlock munlock "libc.so"
        //go:cgo_import_dynamic libc_munlockall munlockall "libc.so"
        //go:cgo_import_dynamic libc_nanosleep nanosleep "libc.so"
        //go:cgo_import_dynamic libc_open open "libc.so"
        //go:cgo_import_dynamic libc_openat openat "libc.so"
        //go:cgo_import_dynamic libc_pathconf pathconf "libc.so"
        //go:cgo_import_dynamic libc_pause pause "libc.so"
        //go:cgo_import_dynamic libc_pread pread "libc.so"
        //go:cgo_import_dynamic libc_pwrite pwrite "libc.so"
        //go:cgo_import_dynamic libc_read read "libc.so"
        //go:cgo_import_dynamic libc_readlink readlink "libc.so"
        //go:cgo_import_dynamic libc_rename rename "libc.so"
        //go:cgo_import_dynamic libc_renameat renameat "libc.so"
        //go:cgo_import_dynamic libc_rmdir rmdir "libc.so"
        //go:cgo_import_dynamic libc_lseek lseek "libc.so"
        //go:cgo_import_dynamic libc_select select "libc.so"
        //go:cgo_import_dynamic libc_setegid setegid "libc.so"
        //go:cgo_import_dynamic libc_seteuid seteuid "libc.so"
        //go:cgo_import_dynamic libc_setgid setgid "libc.so"
        //go:cgo_import_dynamic libc_sethostname sethostname "libc.so"
        //go:cgo_import_dynamic libc_setpgid setpgid "libc.so"
        //go:cgo_import_dynamic libc_setpriority setpriority "libc.so"
        //go:cgo_import_dynamic libc_setregid setregid "libc.so"
        //go:cgo_import_dynamic libc_setreuid setreuid "libc.so"
        //go:cgo_import_dynamic libc_setrlimit setrlimit "libc.so"
        //go:cgo_import_dynamic libc_setsid setsid "libc.so"
        //go:cgo_import_dynamic libc_setuid setuid "libc.so"
        //go:cgo_import_dynamic libc_shutdown shutdown "libsocket.so"
        //go:cgo_import_dynamic libc_stat stat "libc.so"
        //go:cgo_import_dynamic libc_statvfs statvfs "libc.so"
        //go:cgo_import_dynamic libc_symlink symlink "libc.so"
        //go:cgo_import_dynamic libc_sync sync "libc.so"
        //go:cgo_import_dynamic libc_times times "libc.so"
        //go:cgo_import_dynamic libc_truncate truncate "libc.so"
        //go:cgo_import_dynamic libc_fsync fsync "libc.so"
        //go:cgo_import_dynamic libc_ftruncate ftruncate "libc.so"
        //go:cgo_import_dynamic libc_umask umask "libc.so"
        //go:cgo_import_dynamic libc_uname uname "libc.so"
        //go:cgo_import_dynamic libc_umount umount "libc.so"
        //go:cgo_import_dynamic libc_unlink unlink "libc.so"
        //go:cgo_import_dynamic libc_unlinkat unlinkat "libc.so"
        //go:cgo_import_dynamic libc_ustat ustat "libc.so"
        //go:cgo_import_dynamic libc_utime utime "libc.so"
        //go:cgo_import_dynamic libc___xnet_bind __xnet_bind "libsocket.so"
        //go:cgo_import_dynamic libc___xnet_connect __xnet_connect "libsocket.so"
        //go:cgo_import_dynamic libc_mmap mmap "libc.so"
        //go:cgo_import_dynamic libc_munmap munmap "libc.so"
        //go:cgo_import_dynamic libc_sendfile sendfile "libsendfile.so"
        //go:cgo_import_dynamic libc___xnet_sendto __xnet_sendto "libsocket.so"
        //go:cgo_import_dynamic libc___xnet_socket __xnet_socket "libsocket.so"
        //go:cgo_import_dynamic libc___xnet_socketpair __xnet_socketpair "libsocket.so"
        //go:cgo_import_dynamic libc_write write "libc.so"
        //go:cgo_import_dynamic libc___xnet_getsockopt __xnet_getsockopt "libsocket.so"
        //go:cgo_import_dynamic libc_getpeername getpeername "libsocket.so"
        //go:cgo_import_dynamic libc_setsockopt setsockopt "libsocket.so"
        //go:cgo_import_dynamic libc_recvfrom recvfrom "libsocket.so"

        //go:linkname procpipe libc_pipe
        //go:linkname procgetsockname libc_getsockname
        //go:linkname procGetcwd libc_getcwd
        //go:linkname procgetgroups libc_getgroups
        //go:linkname procsetgroups libc_setgroups
        //go:linkname procwait4 libc_wait4
        //go:linkname procgethostname libc_gethostname
        //go:linkname procutimes libc_utimes
        //go:linkname procutimensat libc_utimensat
        //go:linkname procfcntl libc_fcntl
        //go:linkname procfutimesat libc_futimesat
        //go:linkname procaccept libc_accept
        //go:linkname proc__xnet_recvmsg libc___xnet_recvmsg
        //go:linkname proc__xnet_sendmsg libc___xnet_sendmsg
        //go:linkname procacct libc_acct
        //go:linkname proc__makedev libc___makedev
        //go:linkname proc__major libc___major
        //go:linkname proc__minor libc___minor
        //go:linkname procioctl libc_ioctl
        //go:linkname procpoll libc_poll
        //go:linkname procAccess libc_access
        //go:linkname procAdjtime libc_adjtime
        //go:linkname procChdir libc_chdir
        //go:linkname procChmod libc_chmod
        //go:linkname procChown libc_chown
        //go:linkname procChroot libc_chroot
        //go:linkname procClose libc_close
        //go:linkname procCreat libc_creat
        //go:linkname procDup libc_dup
        //go:linkname procDup2 libc_dup2
        //go:linkname procExit libc_exit
        //go:linkname procFaccessat libc_faccessat
        //go:linkname procFchdir libc_fchdir
        //go:linkname procFchmod libc_fchmod
        //go:linkname procFchmodat libc_fchmodat
        //go:linkname procFchown libc_fchown
        //go:linkname procFchownat libc_fchownat
        //go:linkname procFdatasync libc_fdatasync
        //go:linkname procFlock libc_flock
        //go:linkname procFpathconf libc_fpathconf
        //go:linkname procFstat libc_fstat
        //go:linkname procFstatat libc_fstatat
        //go:linkname procFstatvfs libc_fstatvfs
        //go:linkname procGetdents libc_getdents
        //go:linkname procGetgid libc_getgid
        //go:linkname procGetpid libc_getpid
        //go:linkname procGetpgid libc_getpgid
        //go:linkname procGetpgrp libc_getpgrp
        //go:linkname procGeteuid libc_geteuid
        //go:linkname procGetegid libc_getegid
        //go:linkname procGetppid libc_getppid
        //go:linkname procGetpriority libc_getpriority
        //go:linkname procGetrlimit libc_getrlimit
        //go:linkname procGetrusage libc_getrusage
        //go:linkname procGettimeofday libc_gettimeofday
        //go:linkname procGetuid libc_getuid
        //go:linkname procKill libc_kill
        //go:linkname procLchown libc_lchown
        //go:linkname procLink libc_link
        //go:linkname proc__xnet_llisten libc___xnet_llisten
        //go:linkname procLstat libc_lstat
        //go:linkname procMadvise libc_madvise
        //go:linkname procMkdir libc_mkdir
        //go:linkname procMkdirat libc_mkdirat
        //go:linkname procMkfifo libc_mkfifo
        //go:linkname procMkfifoat libc_mkfifoat
        //go:linkname procMknod libc_mknod
        //go:linkname procMknodat libc_mknodat
        //go:linkname procMlock libc_mlock
        //go:linkname procMlockall libc_mlockall
        //go:linkname procMprotect libc_mprotect
        //go:linkname procMsync libc_msync
        //go:linkname procMunlock libc_munlock
        //go:linkname procMunlockall libc_munlockall
        //go:linkname procNanosleep libc_nanosleep
        //go:linkname procOpen libc_open
        //go:linkname procOpenat libc_openat
        //go:linkname procPathconf libc_pathconf
        //go:linkname procPause libc_pause
        //go:linkname procPread libc_pread
        //go:linkname procPwrite libc_pwrite
        //go:linkname procread libc_read
        //go:linkname procReadlink libc_readlink
        //go:linkname procRename libc_rename
        //go:linkname procRenameat libc_renameat
        //go:linkname procRmdir libc_rmdir
        //go:linkname proclseek libc_lseek
        //go:linkname procSelect libc_select
        //go:linkname procSetegid libc_setegid
        //go:linkname procSeteuid libc_seteuid
        //go:linkname procSetgid libc_setgid
        //go:linkname procSethostname libc_sethostname
        //go:linkname procSetpgid libc_setpgid
        //go:linkname procSetpriority libc_setpriority
        //go:linkname procSetregid libc_setregid
        //go:linkname procSetreuid libc_setreuid
        //go:linkname procSetrlimit libc_setrlimit
        //go:linkname procSetsid libc_setsid
        //go:linkname procSetuid libc_setuid
        //go:linkname procshutdown libc_shutdown
        //go:linkname procStat libc_stat
        //go:linkname procStatvfs libc_statvfs
        //go:linkname procSymlink libc_symlink
        //go:linkname procSync libc_sync
        //go:linkname procTimes libc_times
        //go:linkname procTruncate libc_truncate
        //go:linkname procFsync libc_fsync
        //go:linkname procFtruncate libc_ftruncate
        //go:linkname procUmask libc_umask
        //go:linkname procUname libc_uname
        //go:linkname procumount libc_umount
        //go:linkname procUnlink libc_unlink
        //go:linkname procUnlinkat libc_unlinkat
        //go:linkname procUstat libc_ustat
        //go:linkname procUtime libc_utime
        //go:linkname proc__xnet_bind libc___xnet_bind
        //go:linkname proc__xnet_connect libc___xnet_connect
        //go:linkname procmmap libc_mmap
        //go:linkname procmunmap libc_munmap
        //go:linkname procsendfile libc_sendfile
        //go:linkname proc__xnet_sendto libc___xnet_sendto
        //go:linkname proc__xnet_socket libc___xnet_socket
        //go:linkname proc__xnet_socketpair libc___xnet_socketpair
        //go:linkname procwrite libc_write
        //go:linkname proc__xnet_getsockopt libc___xnet_getsockopt
        //go:linkname procgetpeername libc_getpeername
        //go:linkname procsetsockopt libc_setsockopt
        //go:linkname procrecvfrom libc_recvfrom
        private static syscallFunc procpipe = default;        private static syscallFunc procgetsockname = default;        private static syscallFunc procGetcwd = default;        private static syscallFunc procgetgroups = default;        private static syscallFunc procsetgroups = default;        private static syscallFunc procwait4 = default;        private static syscallFunc procgethostname = default;        private static syscallFunc procutimes = default;        private static syscallFunc procutimensat = default;        private static syscallFunc procfcntl = default;        private static syscallFunc procfutimesat = default;        private static syscallFunc procaccept = default;        private static syscallFunc proc__xnet_recvmsg = default;        private static syscallFunc proc__xnet_sendmsg = default;        private static syscallFunc procacct = default;        private static syscallFunc proc__makedev = default;        private static syscallFunc proc__major = default;        private static syscallFunc proc__minor = default;        private static syscallFunc procioctl = default;        private static syscallFunc procpoll = default;        private static syscallFunc procAccess = default;        private static syscallFunc procAdjtime = default;        private static syscallFunc procChdir = default;        private static syscallFunc procChmod = default;        private static syscallFunc procChown = default;        private static syscallFunc procChroot = default;        private static syscallFunc procClose = default;        private static syscallFunc procCreat = default;        private static syscallFunc procDup = default;        private static syscallFunc procDup2 = default;        private static syscallFunc procExit = default;        private static syscallFunc procFaccessat = default;        private static syscallFunc procFchdir = default;        private static syscallFunc procFchmod = default;        private static syscallFunc procFchmodat = default;        private static syscallFunc procFchown = default;        private static syscallFunc procFchownat = default;        private static syscallFunc procFdatasync = default;        private static syscallFunc procFlock = default;        private static syscallFunc procFpathconf = default;        private static syscallFunc procFstat = default;        private static syscallFunc procFstatat = default;        private static syscallFunc procFstatvfs = default;        private static syscallFunc procGetdents = default;        private static syscallFunc procGetgid = default;        private static syscallFunc procGetpid = default;        private static syscallFunc procGetpgid = default;        private static syscallFunc procGetpgrp = default;        private static syscallFunc procGeteuid = default;        private static syscallFunc procGetegid = default;        private static syscallFunc procGetppid = default;        private static syscallFunc procGetpriority = default;        private static syscallFunc procGetrlimit = default;        private static syscallFunc procGetrusage = default;        private static syscallFunc procGettimeofday = default;        private static syscallFunc procGetuid = default;        private static syscallFunc procKill = default;        private static syscallFunc procLchown = default;        private static syscallFunc procLink = default;        private static syscallFunc proc__xnet_llisten = default;        private static syscallFunc procLstat = default;        private static syscallFunc procMadvise = default;        private static syscallFunc procMkdir = default;        private static syscallFunc procMkdirat = default;        private static syscallFunc procMkfifo = default;        private static syscallFunc procMkfifoat = default;        private static syscallFunc procMknod = default;        private static syscallFunc procMknodat = default;        private static syscallFunc procMlock = default;        private static syscallFunc procMlockall = default;        private static syscallFunc procMprotect = default;        private static syscallFunc procMsync = default;        private static syscallFunc procMunlock = default;        private static syscallFunc procMunlockall = default;        private static syscallFunc procNanosleep = default;        private static syscallFunc procOpen = default;        private static syscallFunc procOpenat = default;        private static syscallFunc procPathconf = default;        private static syscallFunc procPause = default;        private static syscallFunc procPread = default;        private static syscallFunc procPwrite = default;        private static syscallFunc procread = default;        private static syscallFunc procReadlink = default;        private static syscallFunc procRename = default;        private static syscallFunc procRenameat = default;        private static syscallFunc procRmdir = default;        private static syscallFunc proclseek = default;        private static syscallFunc procSelect = default;        private static syscallFunc procSetegid = default;        private static syscallFunc procSeteuid = default;        private static syscallFunc procSetgid = default;        private static syscallFunc procSethostname = default;        private static syscallFunc procSetpgid = default;        private static syscallFunc procSetpriority = default;        private static syscallFunc procSetregid = default;        private static syscallFunc procSetreuid = default;        private static syscallFunc procSetrlimit = default;        private static syscallFunc procSetsid = default;        private static syscallFunc procSetuid = default;        private static syscallFunc procshutdown = default;        private static syscallFunc procStat = default;        private static syscallFunc procStatvfs = default;        private static syscallFunc procSymlink = default;        private static syscallFunc procSync = default;        private static syscallFunc procTimes = default;        private static syscallFunc procTruncate = default;        private static syscallFunc procFsync = default;        private static syscallFunc procFtruncate = default;        private static syscallFunc procUmask = default;        private static syscallFunc procUname = default;        private static syscallFunc procumount = default;        private static syscallFunc procUnlink = default;        private static syscallFunc procUnlinkat = default;        private static syscallFunc procUstat = default;        private static syscallFunc procUtime = default;        private static syscallFunc proc__xnet_bind = default;        private static syscallFunc proc__xnet_connect = default;        private static syscallFunc procmmap = default;        private static syscallFunc procmunmap = default;        private static syscallFunc procsendfile = default;        private static syscallFunc proc__xnet_sendto = default;        private static syscallFunc proc__xnet_socket = default;        private static syscallFunc proc__xnet_socketpair = default;        private static syscallFunc procwrite = default;        private static syscallFunc proc__xnet_getsockopt = default;        private static syscallFunc procgetpeername = default;        private static syscallFunc procsetsockopt = default;        private static syscallFunc procrecvfrom = default;


        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) pipe(ptr<array<_C_int>> _addr_p)
        {
            long n = default;
            error err = default!;
            ref array<_C_int> p = ref _addr_p.val;

            var (r0, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_procpipe)), 1L, uintptr(@unsafe.Pointer(p)), 0L, 0L, 0L, 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error getsockname(long fd, ptr<RawSockaddrAny> _addr_rsa, ptr<_Socklen> _addr_addrlen)
        {
            error err = default!;
            ref RawSockaddrAny rsa = ref _addr_rsa.val;
            ref _Socklen addrlen = ref _addr_addrlen.val;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procgetsockname)), 3L, uintptr(fd), uintptr(@unsafe.Pointer(rsa)), uintptr(@unsafe.Pointer(addrlen)), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Getcwd(slice<byte> buf)
        {
            long n = default;
            error err = default!;

            ptr<byte> _p0;
            if (len(buf) > 0L)
            {
                _p0 = _addr_buf[0L];
            }

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procGetcwd)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(len(buf)), 0L, 0L, 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) getgroups(long ngid, ptr<_Gid_t> _addr_gid)
        {
            long n = default;
            error err = default!;
            ref _Gid_t gid = ref _addr_gid.val;

            var (r0, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_procgetgroups)), 2L, uintptr(ngid), uintptr(@unsafe.Pointer(gid)), 0L, 0L, 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error setgroups(long ngid, ptr<_Gid_t> _addr_gid)
        {
            error err = default!;
            ref _Gid_t gid = ref _addr_gid.val;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_procsetgroups)), 2L, uintptr(ngid), uintptr(@unsafe.Pointer(gid)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (int, error) wait4(int pid, ptr<_C_int> _addr_statusp, long options, ptr<Rusage> _addr_rusage)
        {
            int wpid = default;
            error err = default!;
            ref _C_int statusp = ref _addr_statusp.val;
            ref Rusage rusage = ref _addr_rusage.val;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procwait4)), 4L, uintptr(pid), uintptr(@unsafe.Pointer(statusp)), uintptr(options), uintptr(@unsafe.Pointer(rusage)), 0L, 0L);
            wpid = int32(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) gethostname(slice<byte> buf)
        {
            long n = default;
            error err = default!;

            ptr<byte> _p0;
            if (len(buf) > 0L)
            {
                _p0 = _addr_buf[0L];
            }

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procgethostname)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(len(buf)), 0L, 0L, 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error utimes(@string path, ptr<array<Timeval>> _addr_times)
        {
            error err = default!;
            ref array<Timeval> times = ref _addr_times.val;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procutimes)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(times)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error utimensat(long fd, @string path, ptr<array<Timespec>> _addr_times, long flag)
        {
            error err = default!;
            ref array<Timespec> times = ref _addr_times.val;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procutimensat)), 4L, uintptr(fd), uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(times)), uintptr(flag), 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) fcntl(long fd, long cmd, long arg)
        {
            long val = default;
            error err = default!;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procfcntl)), 3L, uintptr(fd), uintptr(cmd), uintptr(arg), 0L, 0L, 0L);
            val = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error futimesat(long fildes, ptr<byte> _addr_path, ptr<array<Timeval>> _addr_times)
        {
            error err = default!;
            ref byte path = ref _addr_path.val;
            ref array<Timeval> times = ref _addr_times.val;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procfutimesat)), 3L, uintptr(fildes), uintptr(@unsafe.Pointer(path)), uintptr(@unsafe.Pointer(times)), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) accept(long s, ptr<RawSockaddrAny> _addr_rsa, ptr<_Socklen> _addr_addrlen)
        {
            long fd = default;
            error err = default!;
            ref RawSockaddrAny rsa = ref _addr_rsa.val;
            ref _Socklen addrlen = ref _addr_addrlen.val;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procaccept)), 3L, uintptr(s), uintptr(@unsafe.Pointer(rsa)), uintptr(@unsafe.Pointer(addrlen)), 0L, 0L, 0L);
            fd = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) recvmsg(long s, ptr<Msghdr> _addr_msg, long flags)
        {
            long n = default;
            error err = default!;
            ref Msghdr msg = ref _addr_msg.val;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_proc__xnet_recvmsg)), 3L, uintptr(s), uintptr(@unsafe.Pointer(msg)), uintptr(flags), 0L, 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) sendmsg(long s, ptr<Msghdr> _addr_msg, long flags)
        {
            long n = default;
            error err = default!;
            ref Msghdr msg = ref _addr_msg.val;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_proc__xnet_sendmsg)), 3L, uintptr(s), uintptr(@unsafe.Pointer(msg)), uintptr(flags), 0L, 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error acct(ptr<byte> _addr_path)
        {
            error err = default!;
            ref byte path = ref _addr_path.val;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procacct)), 1L, uintptr(@unsafe.Pointer(path)), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static ulong __makedev(long version, ulong major, ulong minor)
        {
            ulong val = default;

            var (r0, _, _) = sysvicall6(uintptr(@unsafe.Pointer(_addr_proc__makedev)), 3L, uintptr(version), uintptr(major), uintptr(minor), 0L, 0L, 0L);
            val = uint64(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static ulong __major(long version, ulong dev)
        {
            ulong val = default;

            var (r0, _, _) = sysvicall6(uintptr(@unsafe.Pointer(_addr_proc__major)), 2L, uintptr(version), uintptr(dev), 0L, 0L, 0L, 0L);
            val = uint(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static ulong __minor(long version, ulong dev)
        {
            ulong val = default;

            var (r0, _, _) = sysvicall6(uintptr(@unsafe.Pointer(_addr_proc__minor)), 2L, uintptr(version), uintptr(dev), 0L, 0L, 0L, 0L);
            val = uint(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error ioctl(long fd, ulong req, System.UIntPtr arg)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procioctl)), 3L, uintptr(fd), uintptr(req), uintptr(arg), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) poll(ptr<PollFd> _addr_fds, long nfds, long timeout)
        {
            long n = default;
            error err = default!;
            ref PollFd fds = ref _addr_fds.val;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procpoll)), 3L, uintptr(@unsafe.Pointer(fds)), uintptr(nfds), uintptr(timeout), 0L, 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Access(@string path, uint mode)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procAccess)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(mode), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Adjtime(ptr<Timeval> _addr_delta, ptr<Timeval> _addr_olddelta)
        {
            error err = default!;
            ref Timeval delta = ref _addr_delta.val;
            ref Timeval olddelta = ref _addr_olddelta.val;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procAdjtime)), 2L, uintptr(@unsafe.Pointer(delta)), uintptr(@unsafe.Pointer(olddelta)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Chdir(@string path)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procChdir)), 1L, uintptr(@unsafe.Pointer(_p0)), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Chmod(@string path, uint mode)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procChmod)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(mode), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Chown(@string path, long uid, long gid)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procChown)), 3L, uintptr(@unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Chroot(@string path)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procChroot)), 1L, uintptr(@unsafe.Pointer(_p0)), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Close(long fd)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procClose)), 1L, uintptr(fd), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Creat(@string path, uint mode)
        {
            long fd = default;
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procCreat)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(mode), 0L, 0L, 0L, 0L);
            fd = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Dup(long fd)
        {
            long nfd = default;
            error err = default!;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procDup)), 1L, uintptr(fd), 0L, 0L, 0L, 0L, 0L);
            nfd = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Dup2(long oldfd, long newfd)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procDup2)), 2L, uintptr(oldfd), uintptr(newfd), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static void Exit(long code)
        {
            sysvicall6(uintptr(@unsafe.Pointer(_addr_procExit)), 1L, uintptr(code), 0L, 0L, 0L, 0L, 0L);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Faccessat(long dirfd, @string path, uint mode, long flags)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procFaccessat)), 4L, uintptr(dirfd), uintptr(@unsafe.Pointer(_p0)), uintptr(mode), uintptr(flags), 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Fchdir(long fd)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procFchdir)), 1L, uintptr(fd), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Fchmod(long fd, uint mode)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procFchmod)), 2L, uintptr(fd), uintptr(mode), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Fchmodat(long dirfd, @string path, uint mode, long flags)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procFchmodat)), 4L, uintptr(dirfd), uintptr(@unsafe.Pointer(_p0)), uintptr(mode), uintptr(flags), 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Fchown(long fd, long uid, long gid)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procFchown)), 3L, uintptr(fd), uintptr(uid), uintptr(gid), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Fchownat(long dirfd, @string path, long uid, long gid, long flags)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procFchownat)), 5L, uintptr(dirfd), uintptr(@unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid), uintptr(flags), 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Fdatasync(long fd)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procFdatasync)), 1L, uintptr(fd), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Flock(long fd, long how)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procFlock)), 2L, uintptr(fd), uintptr(how), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Fpathconf(long fd, long name)
        {
            long val = default;
            error err = default!;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procFpathconf)), 2L, uintptr(fd), uintptr(name), 0L, 0L, 0L, 0L);
            val = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Fstat(long fd, ptr<Stat_t> _addr_stat)
        {
            error err = default!;
            ref Stat_t stat = ref _addr_stat.val;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procFstat)), 2L, uintptr(fd), uintptr(@unsafe.Pointer(stat)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Fstatat(long fd, @string path, ptr<Stat_t> _addr_stat, long flags)
        {
            error err = default!;
            ref Stat_t stat = ref _addr_stat.val;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procFstatat)), 4L, uintptr(fd), uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(stat)), uintptr(flags), 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Fstatvfs(long fd, ptr<Statvfs_t> _addr_vfsstat)
        {
            error err = default!;
            ref Statvfs_t vfsstat = ref _addr_vfsstat.val;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procFstatvfs)), 2L, uintptr(fd), uintptr(@unsafe.Pointer(vfsstat)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Getdents(long fd, slice<byte> buf, ptr<System.UIntPtr> _addr_basep)
        {
            long n = default;
            error err = default!;
            ref System.UIntPtr basep = ref _addr_basep.val;

            ptr<byte> _p0;
            if (len(buf) > 0L)
            {
                _p0 = _addr_buf[0L];
            }

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procGetdents)), 4L, uintptr(fd), uintptr(@unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(@unsafe.Pointer(basep)), 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static long Getgid()
        {
            long gid = default;

            var (r0, _, _) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_procGetgid)), 0L, 0L, 0L, 0L, 0L, 0L, 0L);
            gid = int(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static long Getpid()
        {
            long pid = default;

            var (r0, _, _) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_procGetpid)), 0L, 0L, 0L, 0L, 0L, 0L, 0L);
            pid = int(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Getpgid(long pid)
        {
            long pgid = default;
            error err = default!;

            var (r0, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_procGetpgid)), 1L, uintptr(pid), 0L, 0L, 0L, 0L, 0L);
            pgid = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Getpgrp()
        {
            long pgid = default;
            error err = default!;

            var (r0, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_procGetpgrp)), 0L, 0L, 0L, 0L, 0L, 0L, 0L);
            pgid = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static long Geteuid()
        {
            long euid = default;

            var (r0, _, _) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procGeteuid)), 0L, 0L, 0L, 0L, 0L, 0L, 0L);
            euid = int(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static long Getegid()
        {
            long egid = default;

            var (r0, _, _) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procGetegid)), 0L, 0L, 0L, 0L, 0L, 0L, 0L);
            egid = int(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static long Getppid()
        {
            long ppid = default;

            var (r0, _, _) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procGetppid)), 0L, 0L, 0L, 0L, 0L, 0L, 0L);
            ppid = int(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Getpriority(long which, long who)
        {
            long n = default;
            error err = default!;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procGetpriority)), 2L, uintptr(which), uintptr(who), 0L, 0L, 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Getrlimit(long which, ptr<Rlimit> _addr_lim)
        {
            error err = default!;
            ref Rlimit lim = ref _addr_lim.val;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_procGetrlimit)), 2L, uintptr(which), uintptr(@unsafe.Pointer(lim)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Getrusage(long who, ptr<Rusage> _addr_rusage)
        {
            error err = default!;
            ref Rusage rusage = ref _addr_rusage.val;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_procGetrusage)), 2L, uintptr(who), uintptr(@unsafe.Pointer(rusage)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Gettimeofday(ptr<Timeval> _addr_tv)
        {
            error err = default!;
            ref Timeval tv = ref _addr_tv.val;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_procGettimeofday)), 1L, uintptr(@unsafe.Pointer(tv)), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static long Getuid()
        {
            long uid = default;

            var (r0, _, _) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_procGetuid)), 0L, 0L, 0L, 0L, 0L, 0L, 0L);
            uid = int(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Kill(long pid, syscall.Signal signum)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procKill)), 2L, uintptr(pid), uintptr(signum), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Lchown(@string path, long uid, long gid)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procLchown)), 3L, uintptr(@unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Link(@string path, @string link)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            ptr<byte> _p1;
            _p1, err = BytePtrFromString(link);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procLink)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(_p1)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Listen(long s, long backlog)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_proc__xnet_llisten)), 2L, uintptr(s), uintptr(backlog), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Lstat(@string path, ptr<Stat_t> _addr_stat)
        {
            error err = default!;
            ref Stat_t stat = ref _addr_stat.val;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procLstat)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(stat)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Madvise(slice<byte> b, long advice)
        {
            error err = default!;

            ptr<byte> _p0;
            if (len(b) > 0L)
            {
                _p0 = _addr_b[0L];
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procMadvise)), 3L, uintptr(@unsafe.Pointer(_p0)), uintptr(len(b)), uintptr(advice), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Mkdir(@string path, uint mode)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procMkdir)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(mode), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Mkdirat(long dirfd, @string path, uint mode)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procMkdirat)), 3L, uintptr(dirfd), uintptr(@unsafe.Pointer(_p0)), uintptr(mode), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Mkfifo(@string path, uint mode)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procMkfifo)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(mode), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Mkfifoat(long dirfd, @string path, uint mode)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procMkfifoat)), 3L, uintptr(dirfd), uintptr(@unsafe.Pointer(_p0)), uintptr(mode), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Mknod(@string path, uint mode, long dev)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procMknod)), 3L, uintptr(@unsafe.Pointer(_p0)), uintptr(mode), uintptr(dev), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Mknodat(long dirfd, @string path, uint mode, long dev)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procMknodat)), 4L, uintptr(dirfd), uintptr(@unsafe.Pointer(_p0)), uintptr(mode), uintptr(dev), 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Mlock(slice<byte> b)
        {
            error err = default!;

            ptr<byte> _p0;
            if (len(b) > 0L)
            {
                _p0 = _addr_b[0L];
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procMlock)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(len(b)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Mlockall(long flags)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procMlockall)), 1L, uintptr(flags), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Mprotect(slice<byte> b, long prot)
        {
            error err = default!;

            ptr<byte> _p0;
            if (len(b) > 0L)
            {
                _p0 = _addr_b[0L];
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procMprotect)), 3L, uintptr(@unsafe.Pointer(_p0)), uintptr(len(b)), uintptr(prot), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Msync(slice<byte> b, long flags)
        {
            error err = default!;

            ptr<byte> _p0;
            if (len(b) > 0L)
            {
                _p0 = _addr_b[0L];
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procMsync)), 3L, uintptr(@unsafe.Pointer(_p0)), uintptr(len(b)), uintptr(flags), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Munlock(slice<byte> b)
        {
            error err = default!;

            ptr<byte> _p0;
            if (len(b) > 0L)
            {
                _p0 = _addr_b[0L];
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procMunlock)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(len(b)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Munlockall()
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procMunlockall)), 0L, 0L, 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Nanosleep(ptr<Timespec> _addr_time, ptr<Timespec> _addr_leftover)
        {
            error err = default!;
            ref Timespec time = ref _addr_time.val;
            ref Timespec leftover = ref _addr_leftover.val;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procNanosleep)), 2L, uintptr(@unsafe.Pointer(time)), uintptr(@unsafe.Pointer(leftover)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Open(@string path, long mode, uint perm)
        {
            long fd = default;
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procOpen)), 3L, uintptr(@unsafe.Pointer(_p0)), uintptr(mode), uintptr(perm), 0L, 0L, 0L);
            fd = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Openat(long dirfd, @string path, long flags, uint mode)
        {
            long fd = default;
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procOpenat)), 4L, uintptr(dirfd), uintptr(@unsafe.Pointer(_p0)), uintptr(flags), uintptr(mode), 0L, 0L);
            fd = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Pathconf(@string path, long name)
        {
            long val = default;
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procPathconf)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(name), 0L, 0L, 0L, 0L);
            val = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Pause()
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procPause)), 0L, 0L, 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Pread(long fd, slice<byte> p, long offset)
        {
            long n = default;
            error err = default!;

            ptr<byte> _p0;
            if (len(p) > 0L)
            {
                _p0 = _addr_p[0L];
            }

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procPread)), 4L, uintptr(fd), uintptr(@unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(offset), 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Pwrite(long fd, slice<byte> p, long offset)
        {
            long n = default;
            error err = default!;

            ptr<byte> _p0;
            if (len(p) > 0L)
            {
                _p0 = _addr_p[0L];
            }

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procPwrite)), 4L, uintptr(fd), uintptr(@unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(offset), 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) read(long fd, slice<byte> p)
        {
            long n = default;
            error err = default!;

            ptr<byte> _p0;
            if (len(p) > 0L)
            {
                _p0 = _addr_p[0L];
            }

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procread)), 3L, uintptr(fd), uintptr(@unsafe.Pointer(_p0)), uintptr(len(p)), 0L, 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Readlink(@string path, slice<byte> buf)
        {
            long n = default;
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            ptr<byte> _p1;
            if (len(buf) > 0L)
            {
                _p1 = _addr_buf[0L];
            }

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procReadlink)), 3L, uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(_p1)), uintptr(len(buf)), 0L, 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Rename(@string from, @string to)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(from);
            if (err != null)
            {
                return ;
            }

            ptr<byte> _p1;
            _p1, err = BytePtrFromString(to);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procRename)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(_p1)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Renameat(long olddirfd, @string oldpath, long newdirfd, @string newpath)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(oldpath);
            if (err != null)
            {
                return ;
            }

            ptr<byte> _p1;
            _p1, err = BytePtrFromString(newpath);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procRenameat)), 4L, uintptr(olddirfd), uintptr(@unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(@unsafe.Pointer(_p1)), 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Rmdir(@string path)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procRmdir)), 1L, uintptr(@unsafe.Pointer(_p0)), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Seek(long fd, long offset, long whence)
        {
            long newoffset = default;
            error err = default!;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_proclseek)), 3L, uintptr(fd), uintptr(offset), uintptr(whence), 0L, 0L, 0L);
            newoffset = int64(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Select(long nfd, ptr<FdSet> _addr_r, ptr<FdSet> _addr_w, ptr<FdSet> _addr_e, ptr<Timeval> _addr_timeout)
        {
            long n = default;
            error err = default!;
            ref FdSet r = ref _addr_r.val;
            ref FdSet w = ref _addr_w.val;
            ref FdSet e = ref _addr_e.val;
            ref Timeval timeout = ref _addr_timeout.val;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procSelect)), 5L, uintptr(nfd), uintptr(@unsafe.Pointer(r)), uintptr(@unsafe.Pointer(w)), uintptr(@unsafe.Pointer(e)), uintptr(@unsafe.Pointer(timeout)), 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Setegid(long egid)
        {
            error err = default!;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_procSetegid)), 1L, uintptr(egid), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Seteuid(long euid)
        {
            error err = default!;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_procSeteuid)), 1L, uintptr(euid), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Setgid(long gid)
        {
            error err = default!;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_procSetgid)), 1L, uintptr(gid), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Sethostname(slice<byte> p)
        {
            error err = default!;

            ptr<byte> _p0;
            if (len(p) > 0L)
            {
                _p0 = _addr_p[0L];
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procSethostname)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(len(p)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Setpgid(long pid, long pgid)
        {
            error err = default!;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_procSetpgid)), 2L, uintptr(pid), uintptr(pgid), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Setpriority(long which, long who, long prio)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procSetpriority)), 3L, uintptr(which), uintptr(who), uintptr(prio), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Setregid(long rgid, long egid)
        {
            error err = default!;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_procSetregid)), 2L, uintptr(rgid), uintptr(egid), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Setreuid(long ruid, long euid)
        {
            error err = default!;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_procSetreuid)), 2L, uintptr(ruid), uintptr(euid), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Setrlimit(long which, ptr<Rlimit> _addr_lim)
        {
            error err = default!;
            ref Rlimit lim = ref _addr_lim.val;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_procSetrlimit)), 2L, uintptr(which), uintptr(@unsafe.Pointer(lim)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Setsid()
        {
            long pid = default;
            error err = default!;

            var (r0, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_procSetsid)), 0L, 0L, 0L, 0L, 0L, 0L, 0L);
            pid = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Setuid(long uid)
        {
            error err = default!;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_procSetuid)), 1L, uintptr(uid), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Shutdown(long s, long how)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procshutdown)), 2L, uintptr(s), uintptr(how), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Stat(@string path, ptr<Stat_t> _addr_stat)
        {
            error err = default!;
            ref Stat_t stat = ref _addr_stat.val;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procStat)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(stat)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Statvfs(@string path, ptr<Statvfs_t> _addr_vfsstat)
        {
            error err = default!;
            ref Statvfs_t vfsstat = ref _addr_vfsstat.val;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procStatvfs)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(vfsstat)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Symlink(@string path, @string link)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            ptr<byte> _p1;
            _p1, err = BytePtrFromString(link);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procSymlink)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(_p1)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Sync()
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procSync)), 0L, 0L, 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (System.UIntPtr, error) Times(ptr<Tms> _addr_tms)
        {
            System.UIntPtr ticks = default;
            error err = default!;
            ref Tms tms = ref _addr_tms.val;

            var (r0, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_procTimes)), 1L, uintptr(@unsafe.Pointer(tms)), 0L, 0L, 0L, 0L, 0L);
            ticks = uintptr(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Truncate(@string path, long length)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procTruncate)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(length), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Fsync(long fd)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procFsync)), 1L, uintptr(fd), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Ftruncate(long fd, long length)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procFtruncate)), 2L, uintptr(fd), uintptr(length), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static long Umask(long mask)
        {
            long oldmask = default;

            var (r0, _, _) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procUmask)), 1L, uintptr(mask), 0L, 0L, 0L, 0L, 0L);
            oldmask = int(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Uname(ptr<Utsname> _addr_buf)
        {
            error err = default!;
            ref Utsname buf = ref _addr_buf.val;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_procUname)), 1L, uintptr(@unsafe.Pointer(buf)), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Unmount(@string target, long flags)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(target);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procumount)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(flags), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Unlink(@string path)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procUnlink)), 1L, uintptr(@unsafe.Pointer(_p0)), 0L, 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Unlinkat(long dirfd, @string path, long flags)
        {
            error err = default!;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procUnlinkat)), 3L, uintptr(dirfd), uintptr(@unsafe.Pointer(_p0)), uintptr(flags), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Ustat(long dev, ptr<Ustat_t> _addr_ubuf)
        {
            error err = default!;
            ref Ustat_t ubuf = ref _addr_ubuf.val;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procUstat)), 2L, uintptr(dev), uintptr(@unsafe.Pointer(ubuf)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Utime(@string path, ptr<Utimbuf> _addr_buf)
        {
            error err = default!;
            ref Utimbuf buf = ref _addr_buf.val;

            ptr<byte> _p0;
            _p0, err = BytePtrFromString(path);
            if (err != null)
            {
                return ;
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procUtime)), 2L, uintptr(@unsafe.Pointer(_p0)), uintptr(@unsafe.Pointer(buf)), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error bind(long s, unsafe.Pointer addr, _Socklen addrlen)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_proc__xnet_bind)), 3L, uintptr(s), uintptr(addr), uintptr(addrlen), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error connect(long s, unsafe.Pointer addr, _Socklen addrlen)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_proc__xnet_connect)), 3L, uintptr(s), uintptr(addr), uintptr(addrlen), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (System.UIntPtr, error) mmap(System.UIntPtr addr, System.UIntPtr length, long prot, long flag, long fd, long pos)
        {
            System.UIntPtr ret = default;
            error err = default!;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procmmap)), 6L, uintptr(addr), uintptr(length), uintptr(prot), uintptr(flag), uintptr(fd), uintptr(pos));
            ret = uintptr(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error munmap(System.UIntPtr addr, System.UIntPtr length)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procmunmap)), 2L, uintptr(addr), uintptr(length), 0L, 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) sendfile(long outfd, long infd, ptr<long> _addr_offset, long count)
        {
            long written = default;
            error err = default!;
            ref long offset = ref _addr_offset.val;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procsendfile)), 4L, uintptr(outfd), uintptr(infd), uintptr(@unsafe.Pointer(offset)), uintptr(count), 0L, 0L);
            written = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error sendto(long s, slice<byte> buf, long flags, unsafe.Pointer to, _Socklen addrlen)
        {
            error err = default!;

            ptr<byte> _p0;
            if (len(buf) > 0L)
            {
                _p0 = _addr_buf[0L];
            }

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_proc__xnet_sendto)), 6L, uintptr(s), uintptr(@unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(flags), uintptr(to), uintptr(addrlen));
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) socket(long domain, long typ, long proto)
        {
            long fd = default;
            error err = default!;

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_proc__xnet_socket)), 3L, uintptr(domain), uintptr(typ), uintptr(proto), 0L, 0L, 0L);
            fd = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error socketpair(long domain, long typ, long proto, ptr<array<int>> _addr_fd)
        {
            error err = default!;
            ref array<int> fd = ref _addr_fd.val;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_proc__xnet_socketpair)), 4L, uintptr(domain), uintptr(typ), uintptr(proto), uintptr(@unsafe.Pointer(fd)), 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) write(long fd, slice<byte> p)
        {
            long n = default;
            error err = default!;

            ptr<byte> _p0;
            if (len(p) > 0L)
            {
                _p0 = _addr_p[0L];
            }

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procwrite)), 3L, uintptr(fd), uintptr(@unsafe.Pointer(_p0)), uintptr(len(p)), 0L, 0L, 0L);
            n = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error getsockopt(long s, long level, long name, unsafe.Pointer val, ptr<_Socklen> _addr_vallen)
        {
            error err = default!;
            ref _Socklen vallen = ref _addr_vallen.val;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_proc__xnet_getsockopt)), 5L, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(@unsafe.Pointer(vallen)), 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error getpeername(long fd, ptr<RawSockaddrAny> _addr_rsa, ptr<_Socklen> _addr_addrlen)
        {
            error err = default!;
            ref RawSockaddrAny rsa = ref _addr_rsa.val;
            ref _Socklen addrlen = ref _addr_addrlen.val;

            var (_, _, e1) = rawSysvicall6(uintptr(@unsafe.Pointer(_addr_procgetpeername)), 3L, uintptr(fd), uintptr(@unsafe.Pointer(rsa)), uintptr(@unsafe.Pointer(addrlen)), 0L, 0L, 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error setsockopt(long s, long level, long name, unsafe.Pointer val, System.UIntPtr vallen)
        {
            error err = default!;

            var (_, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procsetsockopt)), 5L, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(vallen), 0L);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) recvfrom(long fd, slice<byte> p, long flags, ptr<RawSockaddrAny> _addr_from, ptr<_Socklen> _addr_fromlen)
        {
            long n = default;
            error err = default!;
            ref RawSockaddrAny from = ref _addr_from.val;
            ref _Socklen fromlen = ref _addr_fromlen.val;

            ptr<byte> _p0;
            if (len(p) > 0L)
            {
                _p0 = _addr_p[0L];
            }

            var (r0, _, e1) = sysvicall6(uintptr(@unsafe.Pointer(_addr_procrecvfrom)), 6L, uintptr(fd), uintptr(@unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(flags), uintptr(@unsafe.Pointer(from)), uintptr(@unsafe.Pointer(fromlen)));
            n = int(r0);
            if (e1 != 0L)
            {
                err = e1;
            }

            return ;

        }
    }
}}}}}}
