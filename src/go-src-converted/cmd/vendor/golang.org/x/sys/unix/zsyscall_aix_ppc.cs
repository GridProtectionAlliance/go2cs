// go run mksyscall_aix_ppc.go -aix -tags aix,ppc syscall_aix.go syscall_aix_ppc.go
// Code generated by the command above; see README.md. DO NOT EDIT.

// +build aix,ppc

// package unix -- go2cs converted at 2020 October 08 04:49:36 UTC
// import "cmd/vendor/golang.org/x/sys/unix" ==> using unix = go.cmd.vendor.golang.org.x.sys.unix_package
// Original source: C:\Go\src\cmd\vendor\golang.org\x\sys\unix\zsyscall_aix_ppc.go
/*
#include <stdint.h>
#include <stddef.h>
int utimes(uintptr_t, uintptr_t);
int utimensat(int, uintptr_t, uintptr_t, int);
int getcwd(uintptr_t, size_t);
int accept(int, uintptr_t, uintptr_t);
int getdirent(int, uintptr_t, size_t);
int wait4(int, uintptr_t, int, uintptr_t);
int ioctl(int, int, uintptr_t);
int fcntl(uintptr_t, int, uintptr_t);
int acct(uintptr_t);
int chdir(uintptr_t);
int chroot(uintptr_t);
int close(int);
int dup(int);
void exit(int);
int faccessat(int, uintptr_t, unsigned int, int);
int fchdir(int);
int fchmod(int, unsigned int);
int fchmodat(int, uintptr_t, unsigned int, int);
int fchownat(int, uintptr_t, int, int, int);
int fdatasync(int);
int fsync(int);
int getpgid(int);
int getpgrp();
int getpid();
int getppid();
int getpriority(int, int);
int getrusage(int, uintptr_t);
int getsid(int);
int kill(int, int);
int syslog(int, uintptr_t, size_t);
int mkdir(int, uintptr_t, unsigned int);
int mkdirat(int, uintptr_t, unsigned int);
int mkfifo(uintptr_t, unsigned int);
int mknod(uintptr_t, unsigned int, int);
int mknodat(int, uintptr_t, unsigned int, int);
int nanosleep(uintptr_t, uintptr_t);
int open64(uintptr_t, int, unsigned int);
int openat(int, uintptr_t, int, unsigned int);
int read(int, uintptr_t, size_t);
int readlink(uintptr_t, uintptr_t, size_t);
int renameat(int, uintptr_t, int, uintptr_t);
int setdomainname(uintptr_t, size_t);
int sethostname(uintptr_t, size_t);
int setpgid(int, int);
int setsid();
int settimeofday(uintptr_t);
int setuid(int);
int setgid(int);
int setpriority(int, int, int);
int statx(int, uintptr_t, int, int, uintptr_t);
int sync();
uintptr_t times(uintptr_t);
int umask(int);
int uname(uintptr_t);
int unlink(uintptr_t);
int unlinkat(int, uintptr_t, int);
int ustat(int, uintptr_t);
int write(int, uintptr_t, size_t);
int dup2(int, int);
int posix_fadvise64(int, long long, long long, int);
int fchown(int, int, int);
int fstat(int, uintptr_t);
int fstatat(int, uintptr_t, uintptr_t, int);
int fstatfs(int, uintptr_t);
int ftruncate(int, long long);
int getegid();
int geteuid();
int getgid();
int getuid();
int lchown(uintptr_t, int, int);
int listen(int, int);
int lstat(uintptr_t, uintptr_t);
int pause();
int pread64(int, uintptr_t, size_t, long long);
int pwrite64(int, uintptr_t, size_t, long long);
#define c_select select
int select(int, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
int pselect(int, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
int setregid(int, int);
int setreuid(int, int);
int shutdown(int, int);
long long splice(int, uintptr_t, int, uintptr_t, int, int);
int stat(uintptr_t, uintptr_t);
int statfs(uintptr_t, uintptr_t);
int truncate(uintptr_t, long long);
int bind(int, uintptr_t, uintptr_t);
int connect(int, uintptr_t, uintptr_t);
int getgroups(int, uintptr_t);
int setgroups(int, uintptr_t);
int getsockopt(int, int, int, uintptr_t, uintptr_t);
int setsockopt(int, int, int, uintptr_t, uintptr_t);
int socket(int, int, int);
int socketpair(int, int, int, uintptr_t);
int getpeername(int, uintptr_t, uintptr_t);
int getsockname(int, uintptr_t, uintptr_t);
int recvfrom(int, uintptr_t, size_t, int, uintptr_t, uintptr_t);
int sendto(int, uintptr_t, size_t, int, uintptr_t, uintptr_t);
int nrecvmsg(int, uintptr_t, int);
int nsendmsg(int, uintptr_t, int);
int munmap(uintptr_t, uintptr_t);
int madvise(uintptr_t, size_t, int);
int mprotect(uintptr_t, size_t, int);
int mlock(uintptr_t, size_t);
int mlockall(int);
int msync(uintptr_t, size_t, int);
int munlock(uintptr_t, size_t);
int munlockall();
int pipe(uintptr_t);
int poll(uintptr_t, int, int);
int gettimeofday(uintptr_t, uintptr_t);
int time(uintptr_t);
int utime(uintptr_t, uintptr_t);
unsigned long long getsystemcfg(int);
int umount(uintptr_t);
int getrlimit64(int, uintptr_t);
int setrlimit64(int, uintptr_t);
long long lseek64(int, long long, int);
uintptr_t mmap(uintptr_t, uintptr_t, int, int, int, long long);

*/
using C = go.C_package;/*
#include <stdint.h>
#include <stddef.h>
int utimes(uintptr_t, uintptr_t);
int utimensat(int, uintptr_t, uintptr_t, int);
int getcwd(uintptr_t, size_t);
int accept(int, uintptr_t, uintptr_t);
int getdirent(int, uintptr_t, size_t);
int wait4(int, uintptr_t, int, uintptr_t);
int ioctl(int, int, uintptr_t);
int fcntl(uintptr_t, int, uintptr_t);
int acct(uintptr_t);
int chdir(uintptr_t);
int chroot(uintptr_t);
int close(int);
int dup(int);
void exit(int);
int faccessat(int, uintptr_t, unsigned int, int);
int fchdir(int);
int fchmod(int, unsigned int);
int fchmodat(int, uintptr_t, unsigned int, int);
int fchownat(int, uintptr_t, int, int, int);
int fdatasync(int);
int fsync(int);
int getpgid(int);
int getpgrp();
int getpid();
int getppid();
int getpriority(int, int);
int getrusage(int, uintptr_t);
int getsid(int);
int kill(int, int);
int syslog(int, uintptr_t, size_t);
int mkdir(int, uintptr_t, unsigned int);
int mkdirat(int, uintptr_t, unsigned int);
int mkfifo(uintptr_t, unsigned int);
int mknod(uintptr_t, unsigned int, int);
int mknodat(int, uintptr_t, unsigned int, int);
int nanosleep(uintptr_t, uintptr_t);
int open64(uintptr_t, int, unsigned int);
int openat(int, uintptr_t, int, unsigned int);
int read(int, uintptr_t, size_t);
int readlink(uintptr_t, uintptr_t, size_t);
int renameat(int, uintptr_t, int, uintptr_t);
int setdomainname(uintptr_t, size_t);
int sethostname(uintptr_t, size_t);
int setpgid(int, int);
int setsid();
int settimeofday(uintptr_t);
int setuid(int);
int setgid(int);
int setpriority(int, int, int);
int statx(int, uintptr_t, int, int, uintptr_t);
int sync();
uintptr_t times(uintptr_t);
int umask(int);
int uname(uintptr_t);
int unlink(uintptr_t);
int unlinkat(int, uintptr_t, int);
int ustat(int, uintptr_t);
int write(int, uintptr_t, size_t);
int dup2(int, int);
int posix_fadvise64(int, long long, long long, int);
int fchown(int, int, int);
int fstat(int, uintptr_t);
int fstatat(int, uintptr_t, uintptr_t, int);
int fstatfs(int, uintptr_t);
int ftruncate(int, long long);
int getegid();
int geteuid();
int getgid();
int getuid();
int lchown(uintptr_t, int, int);
int listen(int, int);
int lstat(uintptr_t, uintptr_t);
int pause();
int pread64(int, uintptr_t, size_t, long long);
int pwrite64(int, uintptr_t, size_t, long long);
#define c_select select
int select(int, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
int pselect(int, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
int setregid(int, int);
int setreuid(int, int);
int shutdown(int, int);
long long splice(int, uintptr_t, int, uintptr_t, int, int);
int stat(uintptr_t, uintptr_t);
int statfs(uintptr_t, uintptr_t);
int truncate(uintptr_t, long long);
int bind(int, uintptr_t, uintptr_t);
int connect(int, uintptr_t, uintptr_t);
int getgroups(int, uintptr_t);
int setgroups(int, uintptr_t);
int getsockopt(int, int, int, uintptr_t, uintptr_t);
int setsockopt(int, int, int, uintptr_t, uintptr_t);
int socket(int, int, int);
int socketpair(int, int, int, uintptr_t);
int getpeername(int, uintptr_t, uintptr_t);
int getsockname(int, uintptr_t, uintptr_t);
int recvfrom(int, uintptr_t, size_t, int, uintptr_t, uintptr_t);
int sendto(int, uintptr_t, size_t, int, uintptr_t, uintptr_t);
int nrecvmsg(int, uintptr_t, int);
int nsendmsg(int, uintptr_t, int);
int munmap(uintptr_t, uintptr_t);
int madvise(uintptr_t, size_t, int);
int mprotect(uintptr_t, size_t, int);
int mlock(uintptr_t, size_t);
int mlockall(int);
int msync(uintptr_t, size_t, int);
int munlock(uintptr_t, size_t);
int munlockall();
int pipe(uintptr_t);
int poll(uintptr_t, int, int);
int gettimeofday(uintptr_t, uintptr_t);
int time(uintptr_t);
int utime(uintptr_t, uintptr_t);
unsigned long long getsystemcfg(int);
int umount(uintptr_t);
int getrlimit64(int, uintptr_t);
int setrlimit64(int, uintptr_t);
long long lseek64(int, long long, int);
uintptr_t mmap(uintptr_t, uintptr_t, int, int, int, long long);

*/

using @unsafe = go.@unsafe_package;
using static go.builtin;

namespace go {
namespace cmd {
namespace vendor {
namespace golang.org {
namespace x {
namespace sys
{
    public static partial class unix_package
    {
        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
        private static error utimes(@string path, ptr<array<Timeval>> _addr_times)
        {
            error err = default!;
            ref array<Timeval> times = ref _addr_times.val;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.utimes(C.uintptr_t(_p0), C.uintptr_t(uintptr(@unsafe.Pointer(times))));
            if (r0 == -1L && er != null)
            {
                err = er;
            }
            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error utimensat(long dirfd, @string path, ptr<array<Timespec>> _addr_times, long flag)
        {
            error err = default!;
            ref array<Timespec> times = ref _addr_times.val;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.utimensat(C.@int(dirfd), C.uintptr_t(_p0), C.uintptr_t(uintptr(@unsafe.Pointer(times))), C.@int(flag));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error getcwd(slice<byte> buf)
        {
            error err = default!;

            ptr<byte> _p0;
            if (len(buf) > 0L)
            {
                _p0 = _addr_buf[0L];
            }

            long _p1 = default;
            _p1 = len(buf);
            var (r0, er) = C.getcwd(C.uintptr_t(uintptr(@unsafe.Pointer(_p0))), C.size_t(_p1));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) accept(long s, ptr<RawSockaddrAny> _addr_rsa, ptr<_Socklen> _addr_addrlen)
        {
            long fd = default;
            error err = default!;
            ref RawSockaddrAny rsa = ref _addr_rsa.val;
            ref _Socklen addrlen = ref _addr_addrlen.val;

            var (r0, er) = C.accept(C.@int(s), C.uintptr_t(uintptr(@unsafe.Pointer(rsa))), C.uintptr_t(uintptr(@unsafe.Pointer(addrlen))));
            fd = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) getdirent(long fd, slice<byte> buf)
        {
            long n = default;
            error err = default!;

            ptr<byte> _p0;
            if (len(buf) > 0L)
            {
                _p0 = _addr_buf[0L];
            }

            long _p1 = default;
            _p1 = len(buf);
            var (r0, er) = C.getdirent(C.@int(fd), C.uintptr_t(uintptr(@unsafe.Pointer(_p0))), C.size_t(_p1));
            n = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (Pid_t, error) wait4(Pid_t pid, ptr<_C_int> _addr_status, long options, ptr<Rusage> _addr_rusage)
        {
            Pid_t wpid = default;
            error err = default!;
            ref _C_int status = ref _addr_status.val;
            ref Rusage rusage = ref _addr_rusage.val;

            var (r0, er) = C.wait4(C.@int(pid), C.uintptr_t(uintptr(@unsafe.Pointer(status))), C.@int(options), C.uintptr_t(uintptr(@unsafe.Pointer(rusage))));
            wpid = Pid_t(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error ioctl(long fd, ulong req, System.UIntPtr arg)
        {
            error err = default!;

            var (r0, er) = C.ioctl(C.@int(fd), C.@int(req), C.uintptr_t(arg));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) FcntlInt(System.UIntPtr fd, long cmd, long arg)
        {
            long r = default;
            error err = default!;

            var (r0, er) = C.fcntl(C.uintptr_t(fd), C.@int(cmd), C.uintptr_t(arg));
            r = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error FcntlFlock(System.UIntPtr fd, long cmd, ptr<Flock_t> _addr_lk)
        {
            error err = default!;
            ref Flock_t lk = ref _addr_lk.val;

            var (r0, er) = C.fcntl(C.uintptr_t(fd), C.@int(cmd), C.uintptr_t(uintptr(@unsafe.Pointer(lk))));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) fcntl(long fd, long cmd, long arg)
        {
            long val = default;
            error err = default!;

            var (r0, er) = C.fcntl(C.uintptr_t(fd), C.@int(cmd), C.uintptr_t(arg));
            val = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Acct(@string path)
        {
            error err = default!;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.acct(C.uintptr_t(_p0));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Chdir(@string path)
        {
            error err = default!;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.chdir(C.uintptr_t(_p0));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Chroot(@string path)
        {
            error err = default!;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.chroot(C.uintptr_t(_p0));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Close(long fd)
        {
            error err = default!;

            var (r0, er) = C.close(C.@int(fd));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Dup(long oldfd)
        {
            long fd = default;
            error err = default!;

            var (r0, er) = C.dup(C.@int(oldfd));
            fd = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static void Exit(long code)
        {
            C.exit(C.@int(code));
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Faccessat(long dirfd, @string path, uint mode, long flags)
        {
            error err = default!;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.faccessat(C.@int(dirfd), C.uintptr_t(_p0), C.@uint(mode), C.@int(flags));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Fchdir(long fd)
        {
            error err = default!;

            var (r0, er) = C.fchdir(C.@int(fd));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Fchmod(long fd, uint mode)
        {
            error err = default!;

            var (r0, er) = C.fchmod(C.@int(fd), C.@uint(mode));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Fchmodat(long dirfd, @string path, uint mode, long flags)
        {
            error err = default!;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.fchmodat(C.@int(dirfd), C.uintptr_t(_p0), C.@uint(mode), C.@int(flags));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Fchownat(long dirfd, @string path, long uid, long gid, long flags)
        {
            error err = default!;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.fchownat(C.@int(dirfd), C.uintptr_t(_p0), C.@int(uid), C.@int(gid), C.@int(flags));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Fdatasync(long fd)
        {
            error err = default!;

            var (r0, er) = C.fdatasync(C.@int(fd));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Fsync(long fd)
        {
            error err = default!;

            var (r0, er) = C.fsync(C.@int(fd));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Getpgid(long pid)
        {
            long pgid = default;
            error err = default!;

            var (r0, er) = C.getpgid(C.@int(pid));
            pgid = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static long Getpgrp()
        {
            long pid = default;

            var (r0, _) = C.getpgrp();
            pid = int(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static long Getpid()
        {
            long pid = default;

            var (r0, _) = C.getpid();
            pid = int(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static long Getppid()
        {
            long ppid = default;

            var (r0, _) = C.getppid();
            ppid = int(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Getpriority(long which, long who)
        {
            long prio = default;
            error err = default!;

            var (r0, er) = C.getpriority(C.@int(which), C.@int(who));
            prio = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Getrusage(long who, ptr<Rusage> _addr_rusage)
        {
            error err = default!;
            ref Rusage rusage = ref _addr_rusage.val;

            var (r0, er) = C.getrusage(C.@int(who), C.uintptr_t(uintptr(@unsafe.Pointer(rusage))));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Getsid(long pid)
        {
            long sid = default;
            error err = default!;

            var (r0, er) = C.getsid(C.@int(pid));
            sid = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Kill(long pid, Signal sig)
        {
            error err = default!;

            var (r0, er) = C.kill(C.@int(pid), C.@int(sig));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Klogctl(long typ, slice<byte> buf)
        {
            long n = default;
            error err = default!;

            ptr<byte> _p0;
            if (len(buf) > 0L)
            {
                _p0 = _addr_buf[0L];
            }

            long _p1 = default;
            _p1 = len(buf);
            var (r0, er) = C.syslog(C.@int(typ), C.uintptr_t(uintptr(@unsafe.Pointer(_p0))), C.size_t(_p1));
            n = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Mkdir(long dirfd, @string path, uint mode)
        {
            error err = default!;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.mkdir(C.@int(dirfd), C.uintptr_t(_p0), C.@uint(mode));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Mkdirat(long dirfd, @string path, uint mode)
        {
            error err = default!;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.mkdirat(C.@int(dirfd), C.uintptr_t(_p0), C.@uint(mode));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Mkfifo(@string path, uint mode)
        {
            error err = default!;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.mkfifo(C.uintptr_t(_p0), C.@uint(mode));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Mknod(@string path, uint mode, long dev)
        {
            error err = default!;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.mknod(C.uintptr_t(_p0), C.@uint(mode), C.@int(dev));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Mknodat(long dirfd, @string path, uint mode, long dev)
        {
            error err = default!;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.mknodat(C.@int(dirfd), C.uintptr_t(_p0), C.@uint(mode), C.@int(dev));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Nanosleep(ptr<Timespec> _addr_time, ptr<Timespec> _addr_leftover)
        {
            error err = default!;
            ref Timespec time = ref _addr_time.val;
            ref Timespec leftover = ref _addr_leftover.val;

            var (r0, er) = C.nanosleep(C.uintptr_t(uintptr(@unsafe.Pointer(time))), C.uintptr_t(uintptr(@unsafe.Pointer(leftover))));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Open(@string path, long mode, uint perm)
        {
            long fd = default;
            error err = default!;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.open64(C.uintptr_t(_p0), C.@int(mode), C.@uint(perm));
            fd = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Openat(long dirfd, @string path, long flags, uint mode)
        {
            long fd = default;
            error err = default!;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.openat(C.@int(dirfd), C.uintptr_t(_p0), C.@int(flags), C.@uint(mode));
            fd = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) read(long fd, slice<byte> p)
        {
            long n = default;
            error err = default!;

            ptr<byte> _p0;
            if (len(p) > 0L)
            {
                _p0 = _addr_p[0L];
            }

            long _p1 = default;
            _p1 = len(p);
            var (r0, er) = C.read(C.@int(fd), C.uintptr_t(uintptr(@unsafe.Pointer(_p0))), C.size_t(_p1));
            n = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Readlink(@string path, slice<byte> buf)
        {
            long n = default;
            error err = default!;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            ptr<byte> _p1;
            if (len(buf) > 0L)
            {
                _p1 = _addr_buf[0L];
            }

            long _p2 = default;
            _p2 = len(buf);
            var (r0, er) = C.readlink(C.uintptr_t(_p0), C.uintptr_t(uintptr(@unsafe.Pointer(_p1))), C.size_t(_p2));
            n = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Renameat(long olddirfd, @string oldpath, long newdirfd, @string newpath)
        {
            error err = default!;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(oldpath)));
            var _p1 = uintptr(@unsafe.Pointer(C.CString(newpath)));
            var (r0, er) = C.renameat(C.@int(olddirfd), C.uintptr_t(_p0), C.@int(newdirfd), C.uintptr_t(_p1));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Setdomainname(slice<byte> p)
        {
            error err = default!;

            ptr<byte> _p0;
            if (len(p) > 0L)
            {
                _p0 = _addr_p[0L];
            }

            long _p1 = default;
            _p1 = len(p);
            var (r0, er) = C.setdomainname(C.uintptr_t(uintptr(@unsafe.Pointer(_p0))), C.size_t(_p1));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Sethostname(slice<byte> p)
        {
            error err = default!;

            ptr<byte> _p0;
            if (len(p) > 0L)
            {
                _p0 = _addr_p[0L];
            }

            long _p1 = default;
            _p1 = len(p);
            var (r0, er) = C.sethostname(C.uintptr_t(uintptr(@unsafe.Pointer(_p0))), C.size_t(_p1));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Setpgid(long pid, long pgid)
        {
            error err = default!;

            var (r0, er) = C.setpgid(C.@int(pid), C.@int(pgid));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Setsid()
        {
            long pid = default;
            error err = default!;

            var (r0, er) = C.setsid();
            pid = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Settimeofday(ptr<Timeval> _addr_tv)
        {
            error err = default!;
            ref Timeval tv = ref _addr_tv.val;

            var (r0, er) = C.settimeofday(C.uintptr_t(uintptr(@unsafe.Pointer(tv))));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Setuid(long uid)
        {
            error err = default!;

            var (r0, er) = C.setuid(C.@int(uid));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Setgid(long uid)
        {
            error err = default!;

            var (r0, er) = C.setgid(C.@int(uid));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Setpriority(long which, long who, long prio)
        {
            error err = default!;

            var (r0, er) = C.setpriority(C.@int(which), C.@int(who), C.@int(prio));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Statx(long dirfd, @string path, long flags, long mask, ptr<Statx_t> _addr_stat)
        {
            error err = default!;
            ref Statx_t stat = ref _addr_stat.val;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.statx(C.@int(dirfd), C.uintptr_t(_p0), C.@int(flags), C.@int(mask), C.uintptr_t(uintptr(@unsafe.Pointer(stat))));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static void Sync()
        {
            C.sync();
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (System.UIntPtr, error) Times(ptr<Tms> _addr_tms)
        {
            System.UIntPtr ticks = default;
            error err = default!;
            ref Tms tms = ref _addr_tms.val;

            var (r0, er) = C.times(C.uintptr_t(uintptr(@unsafe.Pointer(tms))));
            ticks = uintptr(r0);
            if (uintptr(r0) == ~uintptr(0L) && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static long Umask(long mask)
        {
            long oldmask = default;

            var (r0, _) = C.umask(C.@int(mask));
            oldmask = int(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Uname(ptr<Utsname> _addr_buf)
        {
            error err = default!;
            ref Utsname buf = ref _addr_buf.val;

            var (r0, er) = C.uname(C.uintptr_t(uintptr(@unsafe.Pointer(buf))));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Unlink(@string path)
        {
            error err = default!;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.unlink(C.uintptr_t(_p0));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Unlinkat(long dirfd, @string path, long flags)
        {
            error err = default!;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.unlinkat(C.@int(dirfd), C.uintptr_t(_p0), C.@int(flags));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Ustat(long dev, ptr<Ustat_t> _addr_ubuf)
        {
            error err = default!;
            ref Ustat_t ubuf = ref _addr_ubuf.val;

            var (r0, er) = C.ustat(C.@int(dev), C.uintptr_t(uintptr(@unsafe.Pointer(ubuf))));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) write(long fd, slice<byte> p)
        {
            long n = default;
            error err = default!;

            ptr<byte> _p0;
            if (len(p) > 0L)
            {
                _p0 = _addr_p[0L];
            }

            long _p1 = default;
            _p1 = len(p);
            var (r0, er) = C.write(C.@int(fd), C.uintptr_t(uintptr(@unsafe.Pointer(_p0))), C.size_t(_p1));
            n = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) readlen(long fd, ptr<byte> _addr_p, long np)
        {
            long n = default;
            error err = default!;
            ref byte p = ref _addr_p.val;

            var (r0, er) = C.read(C.@int(fd), C.uintptr_t(uintptr(@unsafe.Pointer(p))), C.size_t(np));
            n = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) writelen(long fd, ptr<byte> _addr_p, long np)
        {
            long n = default;
            error err = default!;
            ref byte p = ref _addr_p.val;

            var (r0, er) = C.write(C.@int(fd), C.uintptr_t(uintptr(@unsafe.Pointer(p))), C.size_t(np));
            n = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Dup2(long oldfd, long newfd)
        {
            error err = default!;

            var (r0, er) = C.dup2(C.@int(oldfd), C.@int(newfd));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Fadvise(long fd, long offset, long length, long advice)
        {
            error err = default!;

            var (r0, er) = C.posix_fadvise64(C.@int(fd), C.longlong(offset), C.longlong(length), C.@int(advice));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Fchown(long fd, long uid, long gid)
        {
            error err = default!;

            var (r0, er) = C.fchown(C.@int(fd), C.@int(uid), C.@int(gid));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error fstat(long fd, ptr<Stat_t> _addr_stat)
        {
            error err = default!;
            ref Stat_t stat = ref _addr_stat.val;

            var (r0, er) = C.fstat(C.@int(fd), C.uintptr_t(uintptr(@unsafe.Pointer(stat))));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error fstatat(long dirfd, @string path, ptr<Stat_t> _addr_stat, long flags)
        {
            error err = default!;
            ref Stat_t stat = ref _addr_stat.val;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.fstatat(C.@int(dirfd), C.uintptr_t(_p0), C.uintptr_t(uintptr(@unsafe.Pointer(stat))), C.@int(flags));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Fstatfs(long fd, ptr<Statfs_t> _addr_buf)
        {
            error err = default!;
            ref Statfs_t buf = ref _addr_buf.val;

            var (r0, er) = C.fstatfs(C.@int(fd), C.uintptr_t(uintptr(@unsafe.Pointer(buf))));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Ftruncate(long fd, long length)
        {
            error err = default!;

            var (r0, er) = C.ftruncate(C.@int(fd), C.longlong(length));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static long Getegid()
        {
            long egid = default;

            var (r0, _) = C.getegid();
            egid = int(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static long Geteuid()
        {
            long euid = default;

            var (r0, _) = C.geteuid();
            euid = int(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static long Getgid()
        {
            long gid = default;

            var (r0, _) = C.getgid();
            gid = int(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static long Getuid()
        {
            long uid = default;

            var (r0, _) = C.getuid();
            uid = int(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Lchown(@string path, long uid, long gid)
        {
            error err = default!;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.lchown(C.uintptr_t(_p0), C.@int(uid), C.@int(gid));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Listen(long s, long n)
        {
            error err = default!;

            var (r0, er) = C.listen(C.@int(s), C.@int(n));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error lstat(@string path, ptr<Stat_t> _addr_stat)
        {
            error err = default!;
            ref Stat_t stat = ref _addr_stat.val;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.lstat(C.uintptr_t(_p0), C.uintptr_t(uintptr(@unsafe.Pointer(stat))));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Pause()
        {
            error err = default!;

            var (r0, er) = C.pause();
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Pread(long fd, slice<byte> p, long offset)
        {
            long n = default;
            error err = default!;

            ptr<byte> _p0;
            if (len(p) > 0L)
            {
                _p0 = _addr_p[0L];
            }

            long _p1 = default;
            _p1 = len(p);
            var (r0, er) = C.pread64(C.@int(fd), C.uintptr_t(uintptr(@unsafe.Pointer(_p0))), C.size_t(_p1), C.longlong(offset));
            n = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Pwrite(long fd, slice<byte> p, long offset)
        {
            long n = default;
            error err = default!;

            ptr<byte> _p0;
            if (len(p) > 0L)
            {
                _p0 = _addr_p[0L];
            }

            long _p1 = default;
            _p1 = len(p);
            var (r0, er) = C.pwrite64(C.@int(fd), C.uintptr_t(uintptr(@unsafe.Pointer(_p0))), C.size_t(_p1), C.longlong(offset));
            n = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Select(long nfd, ptr<FdSet> _addr_r, ptr<FdSet> _addr_w, ptr<FdSet> _addr_e, ptr<Timeval> _addr_timeout)
        {
            long n = default;
            error err = default!;
            ref FdSet r = ref _addr_r.val;
            ref FdSet w = ref _addr_w.val;
            ref FdSet e = ref _addr_e.val;
            ref Timeval timeout = ref _addr_timeout.val;

            var (r0, er) = C.c_select(C.@int(nfd), C.uintptr_t(uintptr(@unsafe.Pointer(r))), C.uintptr_t(uintptr(@unsafe.Pointer(w))), C.uintptr_t(uintptr(@unsafe.Pointer(e))), C.uintptr_t(uintptr(@unsafe.Pointer(timeout))));
            n = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Pselect(long nfd, ptr<FdSet> _addr_r, ptr<FdSet> _addr_w, ptr<FdSet> _addr_e, ptr<Timespec> _addr_timeout, ptr<Sigset_t> _addr_sigmask)
        {
            long n = default;
            error err = default!;
            ref FdSet r = ref _addr_r.val;
            ref FdSet w = ref _addr_w.val;
            ref FdSet e = ref _addr_e.val;
            ref Timespec timeout = ref _addr_timeout.val;
            ref Sigset_t sigmask = ref _addr_sigmask.val;

            var (r0, er) = C.pselect(C.@int(nfd), C.uintptr_t(uintptr(@unsafe.Pointer(r))), C.uintptr_t(uintptr(@unsafe.Pointer(w))), C.uintptr_t(uintptr(@unsafe.Pointer(e))), C.uintptr_t(uintptr(@unsafe.Pointer(timeout))), C.uintptr_t(uintptr(@unsafe.Pointer(sigmask))));
            n = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Setregid(long rgid, long egid)
        {
            error err = default!;

            var (r0, er) = C.setregid(C.@int(rgid), C.@int(egid));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Setreuid(long ruid, long euid)
        {
            error err = default!;

            var (r0, er) = C.setreuid(C.@int(ruid), C.@int(euid));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Shutdown(long fd, long how)
        {
            error err = default!;

            var (r0, er) = C.shutdown(C.@int(fd), C.@int(how));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Splice(long rfd, ptr<long> _addr_roff, long wfd, ptr<long> _addr_woff, long len, long flags)
        {
            long n = default;
            error err = default!;
            ref long roff = ref _addr_roff.val;
            ref long woff = ref _addr_woff.val;

            var (r0, er) = C.splice(C.@int(rfd), C.uintptr_t(uintptr(@unsafe.Pointer(roff))), C.@int(wfd), C.uintptr_t(uintptr(@unsafe.Pointer(woff))), C.@int(len), C.@int(flags));
            n = int64(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error stat(@string path, ptr<Stat_t> _addr_statptr)
        {
            error err = default!;
            ref Stat_t statptr = ref _addr_statptr.val;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.stat(C.uintptr_t(_p0), C.uintptr_t(uintptr(@unsafe.Pointer(statptr))));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Statfs(@string path, ptr<Statfs_t> _addr_buf)
        {
            error err = default!;
            ref Statfs_t buf = ref _addr_buf.val;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.statfs(C.uintptr_t(_p0), C.uintptr_t(uintptr(@unsafe.Pointer(buf))));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Truncate(@string path, long length)
        {
            error err = default!;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.truncate(C.uintptr_t(_p0), C.longlong(length));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error bind(long s, unsafe.Pointer addr, _Socklen addrlen)
        {
            error err = default!;

            var (r0, er) = C.bind(C.@int(s), C.uintptr_t(uintptr(addr)), C.uintptr_t(uintptr(addrlen)));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error connect(long s, unsafe.Pointer addr, _Socklen addrlen)
        {
            error err = default!;

            var (r0, er) = C.connect(C.@int(s), C.uintptr_t(uintptr(addr)), C.uintptr_t(uintptr(addrlen)));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) getgroups(long n, ptr<_Gid_t> _addr_list)
        {
            long nn = default;
            error err = default!;
            ref _Gid_t list = ref _addr_list.val;

            var (r0, er) = C.getgroups(C.@int(n), C.uintptr_t(uintptr(@unsafe.Pointer(list))));
            nn = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error setgroups(long n, ptr<_Gid_t> _addr_list)
        {
            error err = default!;
            ref _Gid_t list = ref _addr_list.val;

            var (r0, er) = C.setgroups(C.@int(n), C.uintptr_t(uintptr(@unsafe.Pointer(list))));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error getsockopt(long s, long level, long name, unsafe.Pointer val, ptr<_Socklen> _addr_vallen)
        {
            error err = default!;
            ref _Socklen vallen = ref _addr_vallen.val;

            var (r0, er) = C.getsockopt(C.@int(s), C.@int(level), C.@int(name), C.uintptr_t(uintptr(val)), C.uintptr_t(uintptr(@unsafe.Pointer(vallen))));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error setsockopt(long s, long level, long name, unsafe.Pointer val, System.UIntPtr vallen)
        {
            error err = default!;

            var (r0, er) = C.setsockopt(C.@int(s), C.@int(level), C.@int(name), C.uintptr_t(uintptr(val)), C.uintptr_t(vallen));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) socket(long domain, long typ, long proto)
        {
            long fd = default;
            error err = default!;

            var (r0, er) = C.socket(C.@int(domain), C.@int(typ), C.@int(proto));
            fd = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error socketpair(long domain, long typ, long proto, ptr<array<int>> _addr_fd)
        {
            error err = default!;
            ref array<int> fd = ref _addr_fd.val;

            var (r0, er) = C.socketpair(C.@int(domain), C.@int(typ), C.@int(proto), C.uintptr_t(uintptr(@unsafe.Pointer(fd))));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error getpeername(long fd, ptr<RawSockaddrAny> _addr_rsa, ptr<_Socklen> _addr_addrlen)
        {
            error err = default!;
            ref RawSockaddrAny rsa = ref _addr_rsa.val;
            ref _Socklen addrlen = ref _addr_addrlen.val;

            var (r0, er) = C.getpeername(C.@int(fd), C.uintptr_t(uintptr(@unsafe.Pointer(rsa))), C.uintptr_t(uintptr(@unsafe.Pointer(addrlen))));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error getsockname(long fd, ptr<RawSockaddrAny> _addr_rsa, ptr<_Socklen> _addr_addrlen)
        {
            error err = default!;
            ref RawSockaddrAny rsa = ref _addr_rsa.val;
            ref _Socklen addrlen = ref _addr_addrlen.val;

            var (r0, er) = C.getsockname(C.@int(fd), C.uintptr_t(uintptr(@unsafe.Pointer(rsa))), C.uintptr_t(uintptr(@unsafe.Pointer(addrlen))));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) recvfrom(long fd, slice<byte> p, long flags, ptr<RawSockaddrAny> _addr_from, ptr<_Socklen> _addr_fromlen)
        {
            long n = default;
            error err = default!;
            ref RawSockaddrAny from = ref _addr_from.val;
            ref _Socklen fromlen = ref _addr_fromlen.val;

            ptr<byte> _p0;
            if (len(p) > 0L)
            {
                _p0 = _addr_p[0L];
            }

            long _p1 = default;
            _p1 = len(p);
            var (r0, er) = C.recvfrom(C.@int(fd), C.uintptr_t(uintptr(@unsafe.Pointer(_p0))), C.size_t(_p1), C.@int(flags), C.uintptr_t(uintptr(@unsafe.Pointer(from))), C.uintptr_t(uintptr(@unsafe.Pointer(fromlen))));
            n = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error sendto(long s, slice<byte> buf, long flags, unsafe.Pointer to, _Socklen addrlen)
        {
            error err = default!;

            ptr<byte> _p0;
            if (len(buf) > 0L)
            {
                _p0 = _addr_buf[0L];
            }

            long _p1 = default;
            _p1 = len(buf);
            var (r0, er) = C.sendto(C.@int(s), C.uintptr_t(uintptr(@unsafe.Pointer(_p0))), C.size_t(_p1), C.@int(flags), C.uintptr_t(uintptr(to)), C.uintptr_t(uintptr(addrlen)));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) recvmsg(long s, ptr<Msghdr> _addr_msg, long flags)
        {
            long n = default;
            error err = default!;
            ref Msghdr msg = ref _addr_msg.val;

            var (r0, er) = C.nrecvmsg(C.@int(s), C.uintptr_t(uintptr(@unsafe.Pointer(msg))), C.@int(flags));
            n = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) sendmsg(long s, ptr<Msghdr> _addr_msg, long flags)
        {
            long n = default;
            error err = default!;
            ref Msghdr msg = ref _addr_msg.val;

            var (r0, er) = C.nsendmsg(C.@int(s), C.uintptr_t(uintptr(@unsafe.Pointer(msg))), C.@int(flags));
            n = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error munmap(System.UIntPtr addr, System.UIntPtr length)
        {
            error err = default!;

            var (r0, er) = C.munmap(C.uintptr_t(addr), C.uintptr_t(length));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Madvise(slice<byte> b, long advice)
        {
            error err = default!;

            ptr<byte> _p0;
            if (len(b) > 0L)
            {
                _p0 = _addr_b[0L];
            }

            long _p1 = default;
            _p1 = len(b);
            var (r0, er) = C.madvise(C.uintptr_t(uintptr(@unsafe.Pointer(_p0))), C.size_t(_p1), C.@int(advice));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Mprotect(slice<byte> b, long prot)
        {
            error err = default!;

            ptr<byte> _p0;
            if (len(b) > 0L)
            {
                _p0 = _addr_b[0L];
            }

            long _p1 = default;
            _p1 = len(b);
            var (r0, er) = C.mprotect(C.uintptr_t(uintptr(@unsafe.Pointer(_p0))), C.size_t(_p1), C.@int(prot));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Mlock(slice<byte> b)
        {
            error err = default!;

            ptr<byte> _p0;
            if (len(b) > 0L)
            {
                _p0 = _addr_b[0L];
            }

            long _p1 = default;
            _p1 = len(b);
            var (r0, er) = C.mlock(C.uintptr_t(uintptr(@unsafe.Pointer(_p0))), C.size_t(_p1));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Mlockall(long flags)
        {
            error err = default!;

            var (r0, er) = C.mlockall(C.@int(flags));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Msync(slice<byte> b, long flags)
        {
            error err = default!;

            ptr<byte> _p0;
            if (len(b) > 0L)
            {
                _p0 = _addr_b[0L];
            }

            long _p1 = default;
            _p1 = len(b);
            var (r0, er) = C.msync(C.uintptr_t(uintptr(@unsafe.Pointer(_p0))), C.size_t(_p1), C.@int(flags));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Munlock(slice<byte> b)
        {
            error err = default!;

            ptr<byte> _p0;
            if (len(b) > 0L)
            {
                _p0 = _addr_b[0L];
            }

            long _p1 = default;
            _p1 = len(b);
            var (r0, er) = C.munlock(C.uintptr_t(uintptr(@unsafe.Pointer(_p0))), C.size_t(_p1));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Munlockall()
        {
            error err = default!;

            var (r0, er) = C.munlockall();
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error pipe(ptr<array<_C_int>> _addr_p)
        {
            error err = default!;
            ref array<_C_int> p = ref _addr_p.val;

            var (r0, er) = C.pipe(C.uintptr_t(uintptr(@unsafe.Pointer(p))));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (long, error) poll(ptr<PollFd> _addr_fds, long nfds, long timeout)
        {
            long n = default;
            error err = default!;
            ref PollFd fds = ref _addr_fds.val;

            var (r0, er) = C.poll(C.uintptr_t(uintptr(@unsafe.Pointer(fds))), C.@int(nfds), C.@int(timeout));
            n = int(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error gettimeofday(ptr<Timeval> _addr_tv, ptr<Timezone> _addr_tzp)
        {
            error err = default!;
            ref Timeval tv = ref _addr_tv.val;
            ref Timezone tzp = ref _addr_tzp.val;

            var (r0, er) = C.gettimeofday(C.uintptr_t(uintptr(@unsafe.Pointer(tv))), C.uintptr_t(uintptr(@unsafe.Pointer(tzp))));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (Time_t, error) Time(ptr<Time_t> _addr_t)
        {
            Time_t tt = default;
            error err = default!;
            ref Time_t t = ref _addr_t.val;

            var (r0, er) = C.time(C.uintptr_t(uintptr(@unsafe.Pointer(t))));
            tt = Time_t(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Utime(@string path, ptr<Utimbuf> _addr_buf)
        {
            error err = default!;
            ref Utimbuf buf = ref _addr_buf.val;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(path)));
            var (r0, er) = C.utime(C.uintptr_t(_p0), C.uintptr_t(uintptr(@unsafe.Pointer(buf))));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static ulong Getsystemcfg(long label)
        {
            ulong n = default;

            var (r0, _) = C.getsystemcfg(C.@int(label));
            n = uint64(r0);
            return ;
        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static error umount(@string target)
        {
            error err = default!;

            var _p0 = uintptr(@unsafe.Pointer(C.CString(target)));
            var (r0, er) = C.umount(C.uintptr_t(_p0));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Getrlimit(long resource, ptr<Rlimit> _addr_rlim)
        {
            error err = default!;
            ref Rlimit rlim = ref _addr_rlim.val;

            var (r0, er) = C.getrlimit64(C.@int(resource), C.uintptr_t(uintptr(@unsafe.Pointer(rlim))));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static error Setrlimit(long resource, ptr<Rlimit> _addr_rlim)
        {
            error err = default!;
            ref Rlimit rlim = ref _addr_rlim.val;

            var (r0, er) = C.setrlimit64(C.@int(resource), C.uintptr_t(uintptr(@unsafe.Pointer(rlim))));
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        public static (long, error) Seek(long fd, long offset, long whence)
        {
            long off = default;
            error err = default!;

            var (r0, er) = C.lseek64(C.@int(fd), C.longlong(offset), C.@int(whence));
            off = int64(r0);
            if (r0 == -1L && er != null)
            {
                err = er;
            }

            return ;

        }

        // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT

        private static (System.UIntPtr, error) mmap(System.UIntPtr addr, System.UIntPtr length, long prot, long flags, long fd, long offset)
        {
            System.UIntPtr xaddr = default;
            error err = default!;

            var (r0, er) = C.mmap(C.uintptr_t(addr), C.uintptr_t(length), C.@int(prot), C.@int(flags), C.@int(fd), C.longlong(offset));
            xaddr = uintptr(r0);
            if (uintptr(r0) == ~uintptr(0L) && er != null)
            {
                err = er;
            }

            return ;

        }
    }
}}}}}}
