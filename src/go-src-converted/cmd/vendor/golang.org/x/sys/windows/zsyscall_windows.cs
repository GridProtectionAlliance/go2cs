// Code generated by 'go generate'; DO NOT EDIT.

// package windows -- go2cs converted at 2020 October 09 06:01:13 UTC
// import "cmd/vendor/golang.org/x/sys/windows" ==> using windows = go.cmd.vendor.golang.org.x.sys.windows_package
// Original source: C:\Go\src\cmd\vendor\golang.org\x\sys\windows\zsyscall_windows.go
using syscall = go.syscall_package;
using @unsafe = go.@unsafe_package;
using static go.builtin;

namespace go {
namespace cmd {
namespace vendor {
namespace golang.org {
namespace x {
namespace sys
{
    public static partial class windows_package
    {
        private static unsafe.Pointer _ = default;

        // Do the interface allocations only once for common
        // Errno values.
        private static readonly long errnoERROR_IO_PENDING = (long)997L;


        private static error errERROR_IO_PENDING = error.As(syscall.Errno(errnoERROR_IO_PENDING))!;

        // errnoErr returns common boxed Errno values, to prevent
        // allocations at runtime.
        private static error errnoErr(syscall.Errno e)
        {

            if (e == 0L) 
                return error.As(null!)!;
            else if (e == errnoERROR_IO_PENDING) 
                return error.As(errERROR_IO_PENDING)!;
            // TODO: add more here, after collecting data on the common
            // error values see on Windows. (perhaps when running
            // all.bat?)
            return error.As(e)!;

        }

        private static var modadvapi32 = NewLazySystemDLL("advapi32.dll");        private static var modkernel32 = NewLazySystemDLL("kernel32.dll");        private static var modshell32 = NewLazySystemDLL("shell32.dll");        private static var moduserenv = NewLazySystemDLL("userenv.dll");        private static var modmswsock = NewLazySystemDLL("mswsock.dll");        private static var modcrypt32 = NewLazySystemDLL("crypt32.dll");        private static var moduser32 = NewLazySystemDLL("user32.dll");        private static var modole32 = NewLazySystemDLL("ole32.dll");        private static var modntdll = NewLazySystemDLL("ntdll.dll");        private static var modpsapi = NewLazySystemDLL("psapi.dll");        private static var modws2_32 = NewLazySystemDLL("ws2_32.dll");        private static var moddnsapi = NewLazySystemDLL("dnsapi.dll");        private static var modiphlpapi = NewLazySystemDLL("iphlpapi.dll");        private static var modsecur32 = NewLazySystemDLL("secur32.dll");        private static var modnetapi32 = NewLazySystemDLL("netapi32.dll");        private static var modwtsapi32 = NewLazySystemDLL("wtsapi32.dll");        private static var procRegisterEventSourceW = modadvapi32.NewProc("RegisterEventSourceW");        private static var procDeregisterEventSource = modadvapi32.NewProc("DeregisterEventSource");        private static var procReportEventW = modadvapi32.NewProc("ReportEventW");        private static var procOpenSCManagerW = modadvapi32.NewProc("OpenSCManagerW");        private static var procCloseServiceHandle = modadvapi32.NewProc("CloseServiceHandle");        private static var procCreateServiceW = modadvapi32.NewProc("CreateServiceW");        private static var procOpenServiceW = modadvapi32.NewProc("OpenServiceW");        private static var procDeleteService = modadvapi32.NewProc("DeleteService");        private static var procStartServiceW = modadvapi32.NewProc("StartServiceW");        private static var procQueryServiceStatus = modadvapi32.NewProc("QueryServiceStatus");        private static var procQueryServiceLockStatusW = modadvapi32.NewProc("QueryServiceLockStatusW");        private static var procControlService = modadvapi32.NewProc("ControlService");        private static var procStartServiceCtrlDispatcherW = modadvapi32.NewProc("StartServiceCtrlDispatcherW");        private static var procSetServiceStatus = modadvapi32.NewProc("SetServiceStatus");        private static var procChangeServiceConfigW = modadvapi32.NewProc("ChangeServiceConfigW");        private static var procQueryServiceConfigW = modadvapi32.NewProc("QueryServiceConfigW");        private static var procChangeServiceConfig2W = modadvapi32.NewProc("ChangeServiceConfig2W");        private static var procQueryServiceConfig2W = modadvapi32.NewProc("QueryServiceConfig2W");        private static var procEnumServicesStatusExW = modadvapi32.NewProc("EnumServicesStatusExW");        private static var procQueryServiceStatusEx = modadvapi32.NewProc("QueryServiceStatusEx");        private static var procNotifyServiceStatusChangeW = modadvapi32.NewProc("NotifyServiceStatusChangeW");        private static var procGetLastError = modkernel32.NewProc("GetLastError");        private static var procLoadLibraryW = modkernel32.NewProc("LoadLibraryW");        private static var procLoadLibraryExW = modkernel32.NewProc("LoadLibraryExW");        private static var procFreeLibrary = modkernel32.NewProc("FreeLibrary");        private static var procGetProcAddress = modkernel32.NewProc("GetProcAddress");        private static var procGetModuleFileNameW = modkernel32.NewProc("GetModuleFileNameW");        private static var procGetModuleHandleExW = modkernel32.NewProc("GetModuleHandleExW");        private static var procGetVersion = modkernel32.NewProc("GetVersion");        private static var procFormatMessageW = modkernel32.NewProc("FormatMessageW");        private static var procExitProcess = modkernel32.NewProc("ExitProcess");        private static var procIsWow64Process = modkernel32.NewProc("IsWow64Process");        private static var procCreateFileW = modkernel32.NewProc("CreateFileW");        private static var procReadFile = modkernel32.NewProc("ReadFile");        private static var procWriteFile = modkernel32.NewProc("WriteFile");        private static var procGetOverlappedResult = modkernel32.NewProc("GetOverlappedResult");        private static var procSetFilePointer = modkernel32.NewProc("SetFilePointer");        private static var procCloseHandle = modkernel32.NewProc("CloseHandle");        private static var procGetStdHandle = modkernel32.NewProc("GetStdHandle");        private static var procSetStdHandle = modkernel32.NewProc("SetStdHandle");        private static var procFindFirstFileW = modkernel32.NewProc("FindFirstFileW");        private static var procFindNextFileW = modkernel32.NewProc("FindNextFileW");        private static var procFindClose = modkernel32.NewProc("FindClose");        private static var procGetFileInformationByHandle = modkernel32.NewProc("GetFileInformationByHandle");        private static var procGetFileInformationByHandleEx = modkernel32.NewProc("GetFileInformationByHandleEx");        private static var procGetCurrentDirectoryW = modkernel32.NewProc("GetCurrentDirectoryW");        private static var procSetCurrentDirectoryW = modkernel32.NewProc("SetCurrentDirectoryW");        private static var procCreateDirectoryW = modkernel32.NewProc("CreateDirectoryW");        private static var procRemoveDirectoryW = modkernel32.NewProc("RemoveDirectoryW");        private static var procDeleteFileW = modkernel32.NewProc("DeleteFileW");        private static var procMoveFileW = modkernel32.NewProc("MoveFileW");        private static var procMoveFileExW = modkernel32.NewProc("MoveFileExW");        private static var procLockFileEx = modkernel32.NewProc("LockFileEx");        private static var procUnlockFileEx = modkernel32.NewProc("UnlockFileEx");        private static var procGetComputerNameW = modkernel32.NewProc("GetComputerNameW");        private static var procGetComputerNameExW = modkernel32.NewProc("GetComputerNameExW");        private static var procSetEndOfFile = modkernel32.NewProc("SetEndOfFile");        private static var procGetSystemTimeAsFileTime = modkernel32.NewProc("GetSystemTimeAsFileTime");        private static var procGetSystemTimePreciseAsFileTime = modkernel32.NewProc("GetSystemTimePreciseAsFileTime");        private static var procGetTimeZoneInformation = modkernel32.NewProc("GetTimeZoneInformation");        private static var procCreateIoCompletionPort = modkernel32.NewProc("CreateIoCompletionPort");        private static var procGetQueuedCompletionStatus = modkernel32.NewProc("GetQueuedCompletionStatus");        private static var procPostQueuedCompletionStatus = modkernel32.NewProc("PostQueuedCompletionStatus");        private static var procCancelIo = modkernel32.NewProc("CancelIo");        private static var procCancelIoEx = modkernel32.NewProc("CancelIoEx");        private static var procCreateProcessW = modkernel32.NewProc("CreateProcessW");        private static var procOpenProcess = modkernel32.NewProc("OpenProcess");        private static var procShellExecuteW = modshell32.NewProc("ShellExecuteW");        private static var procSHGetKnownFolderPath = modshell32.NewProc("SHGetKnownFolderPath");        private static var procTerminateProcess = modkernel32.NewProc("TerminateProcess");        private static var procGetExitCodeProcess = modkernel32.NewProc("GetExitCodeProcess");        private static var procGetStartupInfoW = modkernel32.NewProc("GetStartupInfoW");        private static var procGetProcessTimes = modkernel32.NewProc("GetProcessTimes");        private static var procDuplicateHandle = modkernel32.NewProc("DuplicateHandle");        private static var procWaitForSingleObject = modkernel32.NewProc("WaitForSingleObject");        private static var procWaitForMultipleObjects = modkernel32.NewProc("WaitForMultipleObjects");        private static var procGetTempPathW = modkernel32.NewProc("GetTempPathW");        private static var procCreatePipe = modkernel32.NewProc("CreatePipe");        private static var procGetFileType = modkernel32.NewProc("GetFileType");        private static var procCryptAcquireContextW = modadvapi32.NewProc("CryptAcquireContextW");        private static var procCryptReleaseContext = modadvapi32.NewProc("CryptReleaseContext");        private static var procCryptGenRandom = modadvapi32.NewProc("CryptGenRandom");        private static var procGetEnvironmentStringsW = modkernel32.NewProc("GetEnvironmentStringsW");        private static var procFreeEnvironmentStringsW = modkernel32.NewProc("FreeEnvironmentStringsW");        private static var procGetEnvironmentVariableW = modkernel32.NewProc("GetEnvironmentVariableW");        private static var procSetEnvironmentVariableW = modkernel32.NewProc("SetEnvironmentVariableW");        private static var procCreateEnvironmentBlock = moduserenv.NewProc("CreateEnvironmentBlock");        private static var procDestroyEnvironmentBlock = moduserenv.NewProc("DestroyEnvironmentBlock");        private static var procGetTickCount64 = modkernel32.NewProc("GetTickCount64");        private static var procSetFileTime = modkernel32.NewProc("SetFileTime");        private static var procGetFileAttributesW = modkernel32.NewProc("GetFileAttributesW");        private static var procSetFileAttributesW = modkernel32.NewProc("SetFileAttributesW");        private static var procGetFileAttributesExW = modkernel32.NewProc("GetFileAttributesExW");        private static var procGetCommandLineW = modkernel32.NewProc("GetCommandLineW");        private static var procCommandLineToArgvW = modshell32.NewProc("CommandLineToArgvW");        private static var procLocalFree = modkernel32.NewProc("LocalFree");        private static var procSetHandleInformation = modkernel32.NewProc("SetHandleInformation");        private static var procFlushFileBuffers = modkernel32.NewProc("FlushFileBuffers");        private static var procGetFullPathNameW = modkernel32.NewProc("GetFullPathNameW");        private static var procGetLongPathNameW = modkernel32.NewProc("GetLongPathNameW");        private static var procGetShortPathNameW = modkernel32.NewProc("GetShortPathNameW");        private static var procCreateFileMappingW = modkernel32.NewProc("CreateFileMappingW");        private static var procMapViewOfFile = modkernel32.NewProc("MapViewOfFile");        private static var procUnmapViewOfFile = modkernel32.NewProc("UnmapViewOfFile");        private static var procFlushViewOfFile = modkernel32.NewProc("FlushViewOfFile");        private static var procVirtualLock = modkernel32.NewProc("VirtualLock");        private static var procVirtualUnlock = modkernel32.NewProc("VirtualUnlock");        private static var procVirtualAlloc = modkernel32.NewProc("VirtualAlloc");        private static var procVirtualFree = modkernel32.NewProc("VirtualFree");        private static var procVirtualProtect = modkernel32.NewProc("VirtualProtect");        private static var procTransmitFile = modmswsock.NewProc("TransmitFile");        private static var procReadDirectoryChangesW = modkernel32.NewProc("ReadDirectoryChangesW");        private static var procCertOpenSystemStoreW = modcrypt32.NewProc("CertOpenSystemStoreW");        private static var procCertOpenStore = modcrypt32.NewProc("CertOpenStore");        private static var procCertEnumCertificatesInStore = modcrypt32.NewProc("CertEnumCertificatesInStore");        private static var procCertAddCertificateContextToStore = modcrypt32.NewProc("CertAddCertificateContextToStore");        private static var procCertCloseStore = modcrypt32.NewProc("CertCloseStore");        private static var procCertGetCertificateChain = modcrypt32.NewProc("CertGetCertificateChain");        private static var procCertFreeCertificateChain = modcrypt32.NewProc("CertFreeCertificateChain");        private static var procCertCreateCertificateContext = modcrypt32.NewProc("CertCreateCertificateContext");        private static var procCertFreeCertificateContext = modcrypt32.NewProc("CertFreeCertificateContext");        private static var procCertVerifyCertificateChainPolicy = modcrypt32.NewProc("CertVerifyCertificateChainPolicy");        private static var procRegOpenKeyExW = modadvapi32.NewProc("RegOpenKeyExW");        private static var procRegCloseKey = modadvapi32.NewProc("RegCloseKey");        private static var procRegQueryInfoKeyW = modadvapi32.NewProc("RegQueryInfoKeyW");        private static var procRegEnumKeyExW = modadvapi32.NewProc("RegEnumKeyExW");        private static var procRegQueryValueExW = modadvapi32.NewProc("RegQueryValueExW");        private static var procGetCurrentProcessId = modkernel32.NewProc("GetCurrentProcessId");        private static var procGetConsoleMode = modkernel32.NewProc("GetConsoleMode");        private static var procSetConsoleMode = modkernel32.NewProc("SetConsoleMode");        private static var procGetConsoleScreenBufferInfo = modkernel32.NewProc("GetConsoleScreenBufferInfo");        private static var procWriteConsoleW = modkernel32.NewProc("WriteConsoleW");        private static var procReadConsoleW = modkernel32.NewProc("ReadConsoleW");        private static var procCreateToolhelp32Snapshot = modkernel32.NewProc("CreateToolhelp32Snapshot");        private static var procProcess32FirstW = modkernel32.NewProc("Process32FirstW");        private static var procProcess32NextW = modkernel32.NewProc("Process32NextW");        private static var procThread32First = modkernel32.NewProc("Thread32First");        private static var procThread32Next = modkernel32.NewProc("Thread32Next");        private static var procDeviceIoControl = modkernel32.NewProc("DeviceIoControl");        private static var procCreateSymbolicLinkW = modkernel32.NewProc("CreateSymbolicLinkW");        private static var procCreateHardLinkW = modkernel32.NewProc("CreateHardLinkW");        private static var procGetCurrentThreadId = modkernel32.NewProc("GetCurrentThreadId");        private static var procCreateEventW = modkernel32.NewProc("CreateEventW");        private static var procCreateEventExW = modkernel32.NewProc("CreateEventExW");        private static var procOpenEventW = modkernel32.NewProc("OpenEventW");        private static var procSetEvent = modkernel32.NewProc("SetEvent");        private static var procResetEvent = modkernel32.NewProc("ResetEvent");        private static var procPulseEvent = modkernel32.NewProc("PulseEvent");        private static var procCreateMutexW = modkernel32.NewProc("CreateMutexW");        private static var procCreateMutexExW = modkernel32.NewProc("CreateMutexExW");        private static var procOpenMutexW = modkernel32.NewProc("OpenMutexW");        private static var procReleaseMutex = modkernel32.NewProc("ReleaseMutex");        private static var procSleepEx = modkernel32.NewProc("SleepEx");        private static var procCreateJobObjectW = modkernel32.NewProc("CreateJobObjectW");        private static var procAssignProcessToJobObject = modkernel32.NewProc("AssignProcessToJobObject");        private static var procTerminateJobObject = modkernel32.NewProc("TerminateJobObject");        private static var procSetErrorMode = modkernel32.NewProc("SetErrorMode");        private static var procResumeThread = modkernel32.NewProc("ResumeThread");        private static var procSetPriorityClass = modkernel32.NewProc("SetPriorityClass");        private static var procGetPriorityClass = modkernel32.NewProc("GetPriorityClass");        private static var procSetInformationJobObject = modkernel32.NewProc("SetInformationJobObject");        private static var procGenerateConsoleCtrlEvent = modkernel32.NewProc("GenerateConsoleCtrlEvent");        private static var procGetProcessId = modkernel32.NewProc("GetProcessId");        private static var procOpenThread = modkernel32.NewProc("OpenThread");        private static var procSetProcessPriorityBoost = modkernel32.NewProc("SetProcessPriorityBoost");        private static var procDefineDosDeviceW = modkernel32.NewProc("DefineDosDeviceW");        private static var procDeleteVolumeMountPointW = modkernel32.NewProc("DeleteVolumeMountPointW");        private static var procFindFirstVolumeW = modkernel32.NewProc("FindFirstVolumeW");        private static var procFindFirstVolumeMountPointW = modkernel32.NewProc("FindFirstVolumeMountPointW");        private static var procFindNextVolumeW = modkernel32.NewProc("FindNextVolumeW");        private static var procFindNextVolumeMountPointW = modkernel32.NewProc("FindNextVolumeMountPointW");        private static var procFindVolumeClose = modkernel32.NewProc("FindVolumeClose");        private static var procFindVolumeMountPointClose = modkernel32.NewProc("FindVolumeMountPointClose");        private static var procGetDiskFreeSpaceExW = modkernel32.NewProc("GetDiskFreeSpaceExW");        private static var procGetDriveTypeW = modkernel32.NewProc("GetDriveTypeW");        private static var procGetLogicalDrives = modkernel32.NewProc("GetLogicalDrives");        private static var procGetLogicalDriveStringsW = modkernel32.NewProc("GetLogicalDriveStringsW");        private static var procGetVolumeInformationW = modkernel32.NewProc("GetVolumeInformationW");        private static var procGetVolumeInformationByHandleW = modkernel32.NewProc("GetVolumeInformationByHandleW");        private static var procGetVolumeNameForVolumeMountPointW = modkernel32.NewProc("GetVolumeNameForVolumeMountPointW");        private static var procGetVolumePathNameW = modkernel32.NewProc("GetVolumePathNameW");        private static var procGetVolumePathNamesForVolumeNameW = modkernel32.NewProc("GetVolumePathNamesForVolumeNameW");        private static var procQueryDosDeviceW = modkernel32.NewProc("QueryDosDeviceW");        private static var procSetVolumeLabelW = modkernel32.NewProc("SetVolumeLabelW");        private static var procSetVolumeMountPointW = modkernel32.NewProc("SetVolumeMountPointW");        private static var procMessageBoxW = moduser32.NewProc("MessageBoxW");        private static var procExitWindowsEx = moduser32.NewProc("ExitWindowsEx");        private static var procInitiateSystemShutdownExW = modadvapi32.NewProc("InitiateSystemShutdownExW");        private static var procSetProcessShutdownParameters = modkernel32.NewProc("SetProcessShutdownParameters");        private static var procGetProcessShutdownParameters = modkernel32.NewProc("GetProcessShutdownParameters");        private static var procCLSIDFromString = modole32.NewProc("CLSIDFromString");        private static var procStringFromGUID2 = modole32.NewProc("StringFromGUID2");        private static var procCoCreateGuid = modole32.NewProc("CoCreateGuid");        private static var procCoTaskMemFree = modole32.NewProc("CoTaskMemFree");        private static var procRtlGetVersion = modntdll.NewProc("RtlGetVersion");        private static var procRtlGetNtVersionNumbers = modntdll.NewProc("RtlGetNtVersionNumbers");        private static var procGetProcessPreferredUILanguages = modkernel32.NewProc("GetProcessPreferredUILanguages");        private static var procGetThreadPreferredUILanguages = modkernel32.NewProc("GetThreadPreferredUILanguages");        private static var procGetUserPreferredUILanguages = modkernel32.NewProc("GetUserPreferredUILanguages");        private static var procGetSystemPreferredUILanguages = modkernel32.NewProc("GetSystemPreferredUILanguages");        private static var procEnumProcesses = modpsapi.NewProc("EnumProcesses");        private static var procWSAStartup = modws2_32.NewProc("WSAStartup");        private static var procWSACleanup = modws2_32.NewProc("WSACleanup");        private static var procWSAIoctl = modws2_32.NewProc("WSAIoctl");        private static var procsocket = modws2_32.NewProc("socket");        private static var procsendto = modws2_32.NewProc("sendto");        private static var procrecvfrom = modws2_32.NewProc("recvfrom");        private static var procsetsockopt = modws2_32.NewProc("setsockopt");        private static var procgetsockopt = modws2_32.NewProc("getsockopt");        private static var procbind = modws2_32.NewProc("bind");        private static var procconnect = modws2_32.NewProc("connect");        private static var procgetsockname = modws2_32.NewProc("getsockname");        private static var procgetpeername = modws2_32.NewProc("getpeername");        private static var proclisten = modws2_32.NewProc("listen");        private static var procshutdown = modws2_32.NewProc("shutdown");        private static var procclosesocket = modws2_32.NewProc("closesocket");        private static var procAcceptEx = modmswsock.NewProc("AcceptEx");        private static var procGetAcceptExSockaddrs = modmswsock.NewProc("GetAcceptExSockaddrs");        private static var procWSARecv = modws2_32.NewProc("WSARecv");        private static var procWSASend = modws2_32.NewProc("WSASend");        private static var procWSARecvFrom = modws2_32.NewProc("WSARecvFrom");        private static var procWSASendTo = modws2_32.NewProc("WSASendTo");        private static var procgethostbyname = modws2_32.NewProc("gethostbyname");        private static var procgetservbyname = modws2_32.NewProc("getservbyname");        private static var procntohs = modws2_32.NewProc("ntohs");        private static var procgetprotobyname = modws2_32.NewProc("getprotobyname");        private static var procDnsQuery_W = moddnsapi.NewProc("DnsQuery_W");        private static var procDnsRecordListFree = moddnsapi.NewProc("DnsRecordListFree");        private static var procDnsNameCompare_W = moddnsapi.NewProc("DnsNameCompare_W");        private static var procGetAddrInfoW = modws2_32.NewProc("GetAddrInfoW");        private static var procFreeAddrInfoW = modws2_32.NewProc("FreeAddrInfoW");        private static var procGetIfEntry = modiphlpapi.NewProc("GetIfEntry");        private static var procGetAdaptersInfo = modiphlpapi.NewProc("GetAdaptersInfo");        private static var procSetFileCompletionNotificationModes = modkernel32.NewProc("SetFileCompletionNotificationModes");        private static var procWSAEnumProtocolsW = modws2_32.NewProc("WSAEnumProtocolsW");        private static var procGetAdaptersAddresses = modiphlpapi.NewProc("GetAdaptersAddresses");        private static var procGetACP = modkernel32.NewProc("GetACP");        private static var procMultiByteToWideChar = modkernel32.NewProc("MultiByteToWideChar");        private static var procTranslateNameW = modsecur32.NewProc("TranslateNameW");        private static var procGetUserNameExW = modsecur32.NewProc("GetUserNameExW");        private static var procNetUserGetInfo = modnetapi32.NewProc("NetUserGetInfo");        private static var procNetGetJoinInformation = modnetapi32.NewProc("NetGetJoinInformation");        private static var procNetApiBufferFree = modnetapi32.NewProc("NetApiBufferFree");        private static var procLookupAccountSidW = modadvapi32.NewProc("LookupAccountSidW");        private static var procLookupAccountNameW = modadvapi32.NewProc("LookupAccountNameW");        private static var procConvertSidToStringSidW = modadvapi32.NewProc("ConvertSidToStringSidW");        private static var procConvertStringSidToSidW = modadvapi32.NewProc("ConvertStringSidToSidW");        private static var procGetLengthSid = modadvapi32.NewProc("GetLengthSid");        private static var procCopySid = modadvapi32.NewProc("CopySid");        private static var procAllocateAndInitializeSid = modadvapi32.NewProc("AllocateAndInitializeSid");        private static var procCreateWellKnownSid = modadvapi32.NewProc("CreateWellKnownSid");        private static var procIsWellKnownSid = modadvapi32.NewProc("IsWellKnownSid");        private static var procFreeSid = modadvapi32.NewProc("FreeSid");        private static var procEqualSid = modadvapi32.NewProc("EqualSid");        private static var procGetSidIdentifierAuthority = modadvapi32.NewProc("GetSidIdentifierAuthority");        private static var procGetSidSubAuthorityCount = modadvapi32.NewProc("GetSidSubAuthorityCount");        private static var procGetSidSubAuthority = modadvapi32.NewProc("GetSidSubAuthority");        private static var procIsValidSid = modadvapi32.NewProc("IsValidSid");        private static var procCheckTokenMembership = modadvapi32.NewProc("CheckTokenMembership");        private static var procOpenProcessToken = modadvapi32.NewProc("OpenProcessToken");        private static var procOpenThreadToken = modadvapi32.NewProc("OpenThreadToken");        private static var procImpersonateSelf = modadvapi32.NewProc("ImpersonateSelf");        private static var procRevertToSelf = modadvapi32.NewProc("RevertToSelf");        private static var procSetThreadToken = modadvapi32.NewProc("SetThreadToken");        private static var procLookupPrivilegeValueW = modadvapi32.NewProc("LookupPrivilegeValueW");        private static var procAdjustTokenPrivileges = modadvapi32.NewProc("AdjustTokenPrivileges");        private static var procAdjustTokenGroups = modadvapi32.NewProc("AdjustTokenGroups");        private static var procGetTokenInformation = modadvapi32.NewProc("GetTokenInformation");        private static var procSetTokenInformation = modadvapi32.NewProc("SetTokenInformation");        private static var procDuplicateTokenEx = modadvapi32.NewProc("DuplicateTokenEx");        private static var procGetUserProfileDirectoryW = moduserenv.NewProc("GetUserProfileDirectoryW");        private static var procGetSystemDirectoryW = modkernel32.NewProc("GetSystemDirectoryW");        private static var procGetWindowsDirectoryW = modkernel32.NewProc("GetWindowsDirectoryW");        private static var procGetSystemWindowsDirectoryW = modkernel32.NewProc("GetSystemWindowsDirectoryW");        private static var procWTSQueryUserToken = modwtsapi32.NewProc("WTSQueryUserToken");        private static var procWTSEnumerateSessionsW = modwtsapi32.NewProc("WTSEnumerateSessionsW");        private static var procWTSFreeMemory = modwtsapi32.NewProc("WTSFreeMemory");        private static var procGetSecurityInfo = modadvapi32.NewProc("GetSecurityInfo");        private static var procSetSecurityInfo = modadvapi32.NewProc("SetSecurityInfo");        private static var procGetNamedSecurityInfoW = modadvapi32.NewProc("GetNamedSecurityInfoW");        private static var procSetNamedSecurityInfoW = modadvapi32.NewProc("SetNamedSecurityInfoW");        private static var procBuildSecurityDescriptorW = modadvapi32.NewProc("BuildSecurityDescriptorW");        private static var procInitializeSecurityDescriptor = modadvapi32.NewProc("InitializeSecurityDescriptor");        private static var procGetSecurityDescriptorControl = modadvapi32.NewProc("GetSecurityDescriptorControl");        private static var procGetSecurityDescriptorDacl = modadvapi32.NewProc("GetSecurityDescriptorDacl");        private static var procGetSecurityDescriptorSacl = modadvapi32.NewProc("GetSecurityDescriptorSacl");        private static var procGetSecurityDescriptorOwner = modadvapi32.NewProc("GetSecurityDescriptorOwner");        private static var procGetSecurityDescriptorGroup = modadvapi32.NewProc("GetSecurityDescriptorGroup");        private static var procGetSecurityDescriptorLength = modadvapi32.NewProc("GetSecurityDescriptorLength");        private static var procGetSecurityDescriptorRMControl = modadvapi32.NewProc("GetSecurityDescriptorRMControl");        private static var procIsValidSecurityDescriptor = modadvapi32.NewProc("IsValidSecurityDescriptor");        private static var procSetSecurityDescriptorControl = modadvapi32.NewProc("SetSecurityDescriptorControl");        private static var procSetSecurityDescriptorDacl = modadvapi32.NewProc("SetSecurityDescriptorDacl");        private static var procSetSecurityDescriptorSacl = modadvapi32.NewProc("SetSecurityDescriptorSacl");        private static var procSetSecurityDescriptorOwner = modadvapi32.NewProc("SetSecurityDescriptorOwner");        private static var procSetSecurityDescriptorGroup = modadvapi32.NewProc("SetSecurityDescriptorGroup");        private static var procSetSecurityDescriptorRMControl = modadvapi32.NewProc("SetSecurityDescriptorRMControl");        private static var procConvertStringSecurityDescriptorToSecurityDescriptorW = modadvapi32.NewProc("ConvertStringSecurityDescriptorToSecurityDescriptorW");        private static var procConvertSecurityDescriptorToStringSecurityDescriptorW = modadvapi32.NewProc("ConvertSecurityDescriptorToStringSecurityDescriptorW");        private static var procMakeAbsoluteSD = modadvapi32.NewProc("MakeAbsoluteSD");        private static var procMakeSelfRelativeSD = modadvapi32.NewProc("MakeSelfRelativeSD");        private static var procSetEntriesInAclW = modadvapi32.NewProc("SetEntriesInAclW");

        public static (Handle, error) RegisterEventSource(ptr<ushort> _addr_uncServerName, ptr<ushort> _addr_sourceName)
        {
            Handle handle = default;
            error err = default!;
            ref ushort uncServerName = ref _addr_uncServerName.val;
            ref ushort sourceName = ref _addr_sourceName.val;

            var (r0, _, e1) = syscall.Syscall(procRegisterEventSourceW.Addr(), 2L, uintptr(@unsafe.Pointer(uncServerName)), uintptr(@unsafe.Pointer(sourceName)), 0L);
            handle = Handle(r0);
            if (handle == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error DeregisterEventSource(Handle handle)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procDeregisterEventSource.Addr(), 1L, uintptr(handle), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error ReportEvent(Handle log, ushort etype, ushort category, uint eventId, System.UIntPtr usrSId, ushort numStrings, uint dataSize, ptr<ptr<ushort>> _addr_strings, ptr<byte> _addr_rawData)
        {
            error err = default!;
            ref ptr<ushort> strings = ref _addr_strings.val;
            ref byte rawData = ref _addr_rawData.val;

            var (r1, _, e1) = syscall.Syscall9(procReportEventW.Addr(), 9L, uintptr(log), uintptr(etype), uintptr(category), uintptr(eventId), uintptr(usrSId), uintptr(numStrings), uintptr(dataSize), uintptr(@unsafe.Pointer(strings)), uintptr(@unsafe.Pointer(rawData)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (Handle, error) OpenSCManager(ptr<ushort> _addr_machineName, ptr<ushort> _addr_databaseName, uint access)
        {
            Handle handle = default;
            error err = default!;
            ref ushort machineName = ref _addr_machineName.val;
            ref ushort databaseName = ref _addr_databaseName.val;

            var (r0, _, e1) = syscall.Syscall(procOpenSCManagerW.Addr(), 3L, uintptr(@unsafe.Pointer(machineName)), uintptr(@unsafe.Pointer(databaseName)), uintptr(access));
            handle = Handle(r0);
            if (handle == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error CloseServiceHandle(Handle handle)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procCloseServiceHandle.Addr(), 1L, uintptr(handle), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (Handle, error) CreateService(Handle mgr, ptr<ushort> _addr_serviceName, ptr<ushort> _addr_displayName, uint access, uint srvType, uint startType, uint errCtl, ptr<ushort> _addr_pathName, ptr<ushort> _addr_loadOrderGroup, ptr<uint> _addr_tagId, ptr<ushort> _addr_dependencies, ptr<ushort> _addr_serviceStartName, ptr<ushort> _addr_password)
        {
            Handle handle = default;
            error err = default!;
            ref ushort serviceName = ref _addr_serviceName.val;
            ref ushort displayName = ref _addr_displayName.val;
            ref ushort pathName = ref _addr_pathName.val;
            ref ushort loadOrderGroup = ref _addr_loadOrderGroup.val;
            ref uint tagId = ref _addr_tagId.val;
            ref ushort dependencies = ref _addr_dependencies.val;
            ref ushort serviceStartName = ref _addr_serviceStartName.val;
            ref ushort password = ref _addr_password.val;

            var (r0, _, e1) = syscall.Syscall15(procCreateServiceW.Addr(), 13L, uintptr(mgr), uintptr(@unsafe.Pointer(serviceName)), uintptr(@unsafe.Pointer(displayName)), uintptr(access), uintptr(srvType), uintptr(startType), uintptr(errCtl), uintptr(@unsafe.Pointer(pathName)), uintptr(@unsafe.Pointer(loadOrderGroup)), uintptr(@unsafe.Pointer(tagId)), uintptr(@unsafe.Pointer(dependencies)), uintptr(@unsafe.Pointer(serviceStartName)), uintptr(@unsafe.Pointer(password)), 0L, 0L);
            handle = Handle(r0);
            if (handle == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (Handle, error) OpenService(Handle mgr, ptr<ushort> _addr_serviceName, uint access)
        {
            Handle handle = default;
            error err = default!;
            ref ushort serviceName = ref _addr_serviceName.val;

            var (r0, _, e1) = syscall.Syscall(procOpenServiceW.Addr(), 3L, uintptr(mgr), uintptr(@unsafe.Pointer(serviceName)), uintptr(access));
            handle = Handle(r0);
            if (handle == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error DeleteService(Handle service)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procDeleteService.Addr(), 1L, uintptr(service), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error StartService(Handle service, uint numArgs, ptr<ptr<ushort>> _addr_argVectors)
        {
            error err = default!;
            ref ptr<ushort> argVectors = ref _addr_argVectors.val;

            var (r1, _, e1) = syscall.Syscall(procStartServiceW.Addr(), 3L, uintptr(service), uintptr(numArgs), uintptr(@unsafe.Pointer(argVectors)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error QueryServiceStatus(Handle service, ptr<SERVICE_STATUS> _addr_status)
        {
            error err = default!;
            ref SERVICE_STATUS status = ref _addr_status.val;

            var (r1, _, e1) = syscall.Syscall(procQueryServiceStatus.Addr(), 2L, uintptr(service), uintptr(@unsafe.Pointer(status)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error QueryServiceLockStatus(Handle mgr, ptr<QUERY_SERVICE_LOCK_STATUS> _addr_lockStatus, uint bufSize, ptr<uint> _addr_bytesNeeded)
        {
            error err = default!;
            ref QUERY_SERVICE_LOCK_STATUS lockStatus = ref _addr_lockStatus.val;
            ref uint bytesNeeded = ref _addr_bytesNeeded.val;

            var (r1, _, e1) = syscall.Syscall6(procQueryServiceLockStatusW.Addr(), 4L, uintptr(mgr), uintptr(@unsafe.Pointer(lockStatus)), uintptr(bufSize), uintptr(@unsafe.Pointer(bytesNeeded)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error ControlService(Handle service, uint control, ptr<SERVICE_STATUS> _addr_status)
        {
            error err = default!;
            ref SERVICE_STATUS status = ref _addr_status.val;

            var (r1, _, e1) = syscall.Syscall(procControlService.Addr(), 3L, uintptr(service), uintptr(control), uintptr(@unsafe.Pointer(status)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error StartServiceCtrlDispatcher(ptr<SERVICE_TABLE_ENTRY> _addr_serviceTable)
        {
            error err = default!;
            ref SERVICE_TABLE_ENTRY serviceTable = ref _addr_serviceTable.val;

            var (r1, _, e1) = syscall.Syscall(procStartServiceCtrlDispatcherW.Addr(), 1L, uintptr(@unsafe.Pointer(serviceTable)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error SetServiceStatus(Handle service, ptr<SERVICE_STATUS> _addr_serviceStatus)
        {
            error err = default!;
            ref SERVICE_STATUS serviceStatus = ref _addr_serviceStatus.val;

            var (r1, _, e1) = syscall.Syscall(procSetServiceStatus.Addr(), 2L, uintptr(service), uintptr(@unsafe.Pointer(serviceStatus)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error ChangeServiceConfig(Handle service, uint serviceType, uint startType, uint errorControl, ptr<ushort> _addr_binaryPathName, ptr<ushort> _addr_loadOrderGroup, ptr<uint> _addr_tagId, ptr<ushort> _addr_dependencies, ptr<ushort> _addr_serviceStartName, ptr<ushort> _addr_password, ptr<ushort> _addr_displayName)
        {
            error err = default!;
            ref ushort binaryPathName = ref _addr_binaryPathName.val;
            ref ushort loadOrderGroup = ref _addr_loadOrderGroup.val;
            ref uint tagId = ref _addr_tagId.val;
            ref ushort dependencies = ref _addr_dependencies.val;
            ref ushort serviceStartName = ref _addr_serviceStartName.val;
            ref ushort password = ref _addr_password.val;
            ref ushort displayName = ref _addr_displayName.val;

            var (r1, _, e1) = syscall.Syscall12(procChangeServiceConfigW.Addr(), 11L, uintptr(service), uintptr(serviceType), uintptr(startType), uintptr(errorControl), uintptr(@unsafe.Pointer(binaryPathName)), uintptr(@unsafe.Pointer(loadOrderGroup)), uintptr(@unsafe.Pointer(tagId)), uintptr(@unsafe.Pointer(dependencies)), uintptr(@unsafe.Pointer(serviceStartName)), uintptr(@unsafe.Pointer(password)), uintptr(@unsafe.Pointer(displayName)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error QueryServiceConfig(Handle service, ptr<QUERY_SERVICE_CONFIG> _addr_serviceConfig, uint bufSize, ptr<uint> _addr_bytesNeeded)
        {
            error err = default!;
            ref QUERY_SERVICE_CONFIG serviceConfig = ref _addr_serviceConfig.val;
            ref uint bytesNeeded = ref _addr_bytesNeeded.val;

            var (r1, _, e1) = syscall.Syscall6(procQueryServiceConfigW.Addr(), 4L, uintptr(service), uintptr(@unsafe.Pointer(serviceConfig)), uintptr(bufSize), uintptr(@unsafe.Pointer(bytesNeeded)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error ChangeServiceConfig2(Handle service, uint infoLevel, ptr<byte> _addr_info)
        {
            error err = default!;
            ref byte info = ref _addr_info.val;

            var (r1, _, e1) = syscall.Syscall(procChangeServiceConfig2W.Addr(), 3L, uintptr(service), uintptr(infoLevel), uintptr(@unsafe.Pointer(info)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error QueryServiceConfig2(Handle service, uint infoLevel, ptr<byte> _addr_buff, uint buffSize, ptr<uint> _addr_bytesNeeded)
        {
            error err = default!;
            ref byte buff = ref _addr_buff.val;
            ref uint bytesNeeded = ref _addr_bytesNeeded.val;

            var (r1, _, e1) = syscall.Syscall6(procQueryServiceConfig2W.Addr(), 5L, uintptr(service), uintptr(infoLevel), uintptr(@unsafe.Pointer(buff)), uintptr(buffSize), uintptr(@unsafe.Pointer(bytesNeeded)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error EnumServicesStatusEx(Handle mgr, uint infoLevel, uint serviceType, uint serviceState, ptr<byte> _addr_services, uint bufSize, ptr<uint> _addr_bytesNeeded, ptr<uint> _addr_servicesReturned, ptr<uint> _addr_resumeHandle, ptr<ushort> _addr_groupName)
        {
            error err = default!;
            ref byte services = ref _addr_services.val;
            ref uint bytesNeeded = ref _addr_bytesNeeded.val;
            ref uint servicesReturned = ref _addr_servicesReturned.val;
            ref uint resumeHandle = ref _addr_resumeHandle.val;
            ref ushort groupName = ref _addr_groupName.val;

            var (r1, _, e1) = syscall.Syscall12(procEnumServicesStatusExW.Addr(), 10L, uintptr(mgr), uintptr(infoLevel), uintptr(serviceType), uintptr(serviceState), uintptr(@unsafe.Pointer(services)), uintptr(bufSize), uintptr(@unsafe.Pointer(bytesNeeded)), uintptr(@unsafe.Pointer(servicesReturned)), uintptr(@unsafe.Pointer(resumeHandle)), uintptr(@unsafe.Pointer(groupName)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error QueryServiceStatusEx(Handle service, uint infoLevel, ptr<byte> _addr_buff, uint buffSize, ptr<uint> _addr_bytesNeeded)
        {
            error err = default!;
            ref byte buff = ref _addr_buff.val;
            ref uint bytesNeeded = ref _addr_bytesNeeded.val;

            var (r1, _, e1) = syscall.Syscall6(procQueryServiceStatusEx.Addr(), 5L, uintptr(service), uintptr(infoLevel), uintptr(@unsafe.Pointer(buff)), uintptr(buffSize), uintptr(@unsafe.Pointer(bytesNeeded)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error NotifyServiceStatusChange(Handle service, uint notifyMask, ptr<SERVICE_NOTIFY> _addr_notifier)
        {
            error ret = default!;
            ref SERVICE_NOTIFY notifier = ref _addr_notifier.val;

            var (r0, _, _) = syscall.Syscall(procNotifyServiceStatusChangeW.Addr(), 3L, uintptr(service), uintptr(notifyMask), uintptr(@unsafe.Pointer(notifier)));
            if (r0 != 0L)
            {
                ret = syscall.Errno(r0);
            }

            return ;

        }

        public static error GetLastError()
        {
            error lasterr = default!;

            var (r0, _, _) = syscall.Syscall(procGetLastError.Addr(), 0L, 0L, 0L, 0L);
            if (r0 != 0L)
            {
                lasterr = syscall.Errno(r0);
            }

            return ;

        }

        public static (Handle, error) LoadLibrary(@string libname)
        {
            Handle handle = default;
            error err = default!;

            ptr<ushort> _p0;
            _p0, err = syscall.UTF16PtrFromString(libname);
            if (err != null)
            {
                return ;
            }

            return _LoadLibrary(_p0);

        }

        private static (Handle, error) _LoadLibrary(ptr<ushort> _addr_libname)
        {
            Handle handle = default;
            error err = default!;
            ref ushort libname = ref _addr_libname.val;

            var (r0, _, e1) = syscall.Syscall(procLoadLibraryW.Addr(), 1L, uintptr(@unsafe.Pointer(libname)), 0L, 0L);
            handle = Handle(r0);
            if (handle == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (Handle, error) LoadLibraryEx(@string libname, Handle zero, System.UIntPtr flags)
        {
            Handle handle = default;
            error err = default!;

            ptr<ushort> _p0;
            _p0, err = syscall.UTF16PtrFromString(libname);
            if (err != null)
            {
                return ;
            }

            return _LoadLibraryEx(_p0, zero, flags);

        }

        private static (Handle, error) _LoadLibraryEx(ptr<ushort> _addr_libname, Handle zero, System.UIntPtr flags)
        {
            Handle handle = default;
            error err = default!;
            ref ushort libname = ref _addr_libname.val;

            var (r0, _, e1) = syscall.Syscall(procLoadLibraryExW.Addr(), 3L, uintptr(@unsafe.Pointer(libname)), uintptr(zero), uintptr(flags));
            handle = Handle(r0);
            if (handle == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error FreeLibrary(Handle handle)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procFreeLibrary.Addr(), 1L, uintptr(handle), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (System.UIntPtr, error) GetProcAddress(Handle module, @string procname)
        {
            System.UIntPtr proc = default;
            error err = default!;

            ptr<byte> _p0;
            _p0, err = syscall.BytePtrFromString(procname);
            if (err != null)
            {
                return ;
            }

            return _GetProcAddress(module, _p0);

        }

        private static (System.UIntPtr, error) _GetProcAddress(Handle module, ptr<byte> _addr_procname)
        {
            System.UIntPtr proc = default;
            error err = default!;
            ref byte procname = ref _addr_procname.val;

            var (r0, _, e1) = syscall.Syscall(procGetProcAddress.Addr(), 2L, uintptr(module), uintptr(@unsafe.Pointer(procname)), 0L);
            proc = uintptr(r0);
            if (proc == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (uint, error) GetModuleFileName(Handle module, ptr<ushort> _addr_filename, uint size)
        {
            uint n = default;
            error err = default!;
            ref ushort filename = ref _addr_filename.val;

            var (r0, _, e1) = syscall.Syscall(procGetModuleFileNameW.Addr(), 3L, uintptr(module), uintptr(@unsafe.Pointer(filename)), uintptr(size));
            n = uint32(r0);
            if (n == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error GetModuleHandleEx(uint flags, ptr<ushort> _addr_moduleName, ptr<Handle> _addr_module)
        {
            error err = default!;
            ref ushort moduleName = ref _addr_moduleName.val;
            ref Handle module = ref _addr_module.val;

            var (r1, _, e1) = syscall.Syscall(procGetModuleHandleExW.Addr(), 3L, uintptr(flags), uintptr(@unsafe.Pointer(moduleName)), uintptr(@unsafe.Pointer(module)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (uint, error) GetVersion()
        {
            uint ver = default;
            error err = default!;

            var (r0, _, e1) = syscall.Syscall(procGetVersion.Addr(), 0L, 0L, 0L, 0L);
            ver = uint32(r0);
            if (ver == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (uint, error) FormatMessage(uint flags, System.UIntPtr msgsrc, uint msgid, uint langid, slice<ushort> buf, ptr<byte> _addr_args)
        {
            uint n = default;
            error err = default!;
            ref byte args = ref _addr_args.val;

            ptr<ushort> _p0;
            if (len(buf) > 0L)
            {
                _p0 = _addr_buf[0L];
            }

            var (r0, _, e1) = syscall.Syscall9(procFormatMessageW.Addr(), 7L, uintptr(flags), uintptr(msgsrc), uintptr(msgid), uintptr(langid), uintptr(@unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(@unsafe.Pointer(args)), 0L, 0L);
            n = uint32(r0);
            if (n == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static void ExitProcess(uint exitcode)
        {
            syscall.Syscall(procExitProcess.Addr(), 1L, uintptr(exitcode), 0L, 0L);
            return ;
        }

        public static error IsWow64Process(Handle handle, ptr<bool> _addr_isWow64)
        {
            error err = default!;
            ref bool isWow64 = ref _addr_isWow64.val;

            ref uint _p0 = ref heap(out ptr<uint> _addr__p0);
            if (isWow64)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            var (r1, _, e1) = syscall.Syscall(procIsWow64Process.Addr(), 2L, uintptr(handle), uintptr(@unsafe.Pointer(_addr__p0)), 0L);
            isWow64 = _p0 != 0L;
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (Handle, error) CreateFile(ptr<ushort> _addr_name, uint access, uint mode, ptr<SecurityAttributes> _addr_sa, uint createmode, uint attrs, Handle templatefile)
        {
            Handle handle = default;
            error err = default!;
            ref ushort name = ref _addr_name.val;
            ref SecurityAttributes sa = ref _addr_sa.val;

            var (r0, _, e1) = syscall.Syscall9(procCreateFileW.Addr(), 7L, uintptr(@unsafe.Pointer(name)), uintptr(access), uintptr(mode), uintptr(@unsafe.Pointer(sa)), uintptr(createmode), uintptr(attrs), uintptr(templatefile), 0L, 0L);
            handle = Handle(r0);
            if (handle == InvalidHandle)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error ReadFile(Handle handle, slice<byte> buf, ptr<uint> _addr_done, ptr<Overlapped> _addr_overlapped)
        {
            error err = default!;
            ref uint done = ref _addr_done.val;
            ref Overlapped overlapped = ref _addr_overlapped.val;

            ptr<byte> _p0;
            if (len(buf) > 0L)
            {
                _p0 = _addr_buf[0L];
            }

            var (r1, _, e1) = syscall.Syscall6(procReadFile.Addr(), 5L, uintptr(handle), uintptr(@unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(@unsafe.Pointer(done)), uintptr(@unsafe.Pointer(overlapped)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error WriteFile(Handle handle, slice<byte> buf, ptr<uint> _addr_done, ptr<Overlapped> _addr_overlapped)
        {
            error err = default!;
            ref uint done = ref _addr_done.val;
            ref Overlapped overlapped = ref _addr_overlapped.val;

            ptr<byte> _p0;
            if (len(buf) > 0L)
            {
                _p0 = _addr_buf[0L];
            }

            var (r1, _, e1) = syscall.Syscall6(procWriteFile.Addr(), 5L, uintptr(handle), uintptr(@unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(@unsafe.Pointer(done)), uintptr(@unsafe.Pointer(overlapped)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error GetOverlappedResult(Handle handle, ptr<Overlapped> _addr_overlapped, ptr<uint> _addr_done, bool wait)
        {
            error err = default!;
            ref Overlapped overlapped = ref _addr_overlapped.val;
            ref uint done = ref _addr_done.val;

            uint _p0 = default;
            if (wait)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            var (r1, _, e1) = syscall.Syscall6(procGetOverlappedResult.Addr(), 4L, uintptr(handle), uintptr(@unsafe.Pointer(overlapped)), uintptr(@unsafe.Pointer(done)), uintptr(_p0), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (uint, error) SetFilePointer(Handle handle, int lowoffset, ptr<int> _addr_highoffsetptr, uint whence)
        {
            uint newlowoffset = default;
            error err = default!;
            ref int highoffsetptr = ref _addr_highoffsetptr.val;

            var (r0, _, e1) = syscall.Syscall6(procSetFilePointer.Addr(), 4L, uintptr(handle), uintptr(lowoffset), uintptr(@unsafe.Pointer(highoffsetptr)), uintptr(whence), 0L, 0L);
            newlowoffset = uint32(r0);
            if (newlowoffset == 0xffffffffUL)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error CloseHandle(Handle handle)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procCloseHandle.Addr(), 1L, uintptr(handle), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (Handle, error) GetStdHandle(uint stdhandle)
        {
            Handle handle = default;
            error err = default!;

            var (r0, _, e1) = syscall.Syscall(procGetStdHandle.Addr(), 1L, uintptr(stdhandle), 0L, 0L);
            handle = Handle(r0);
            if (handle == InvalidHandle)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error SetStdHandle(uint stdhandle, Handle handle)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procSetStdHandle.Addr(), 2L, uintptr(stdhandle), uintptr(handle), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static (Handle, error) findFirstFile1(ptr<ushort> _addr_name, ptr<win32finddata1> _addr_data)
        {
            Handle handle = default;
            error err = default!;
            ref ushort name = ref _addr_name.val;
            ref win32finddata1 data = ref _addr_data.val;

            var (r0, _, e1) = syscall.Syscall(procFindFirstFileW.Addr(), 2L, uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(data)), 0L);
            handle = Handle(r0);
            if (handle == InvalidHandle)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error findNextFile1(Handle handle, ptr<win32finddata1> _addr_data)
        {
            error err = default!;
            ref win32finddata1 data = ref _addr_data.val;

            var (r1, _, e1) = syscall.Syscall(procFindNextFileW.Addr(), 2L, uintptr(handle), uintptr(@unsafe.Pointer(data)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error FindClose(Handle handle)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procFindClose.Addr(), 1L, uintptr(handle), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error GetFileInformationByHandle(Handle handle, ptr<ByHandleFileInformation> _addr_data)
        {
            error err = default!;
            ref ByHandleFileInformation data = ref _addr_data.val;

            var (r1, _, e1) = syscall.Syscall(procGetFileInformationByHandle.Addr(), 2L, uintptr(handle), uintptr(@unsafe.Pointer(data)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error GetFileInformationByHandleEx(Handle handle, uint @class, ptr<byte> _addr_outBuffer, uint outBufferLen)
        {
            error err = default!;
            ref byte outBuffer = ref _addr_outBuffer.val;

            var (r1, _, e1) = syscall.Syscall6(procGetFileInformationByHandleEx.Addr(), 4L, uintptr(handle), uintptr(class), uintptr(@unsafe.Pointer(outBuffer)), uintptr(outBufferLen), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (uint, error) GetCurrentDirectory(uint buflen, ptr<ushort> _addr_buf)
        {
            uint n = default;
            error err = default!;
            ref ushort buf = ref _addr_buf.val;

            var (r0, _, e1) = syscall.Syscall(procGetCurrentDirectoryW.Addr(), 2L, uintptr(buflen), uintptr(@unsafe.Pointer(buf)), 0L);
            n = uint32(r0);
            if (n == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error SetCurrentDirectory(ptr<ushort> _addr_path)
        {
            error err = default!;
            ref ushort path = ref _addr_path.val;

            var (r1, _, e1) = syscall.Syscall(procSetCurrentDirectoryW.Addr(), 1L, uintptr(@unsafe.Pointer(path)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error CreateDirectory(ptr<ushort> _addr_path, ptr<SecurityAttributes> _addr_sa)
        {
            error err = default!;
            ref ushort path = ref _addr_path.val;
            ref SecurityAttributes sa = ref _addr_sa.val;

            var (r1, _, e1) = syscall.Syscall(procCreateDirectoryW.Addr(), 2L, uintptr(@unsafe.Pointer(path)), uintptr(@unsafe.Pointer(sa)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error RemoveDirectory(ptr<ushort> _addr_path)
        {
            error err = default!;
            ref ushort path = ref _addr_path.val;

            var (r1, _, e1) = syscall.Syscall(procRemoveDirectoryW.Addr(), 1L, uintptr(@unsafe.Pointer(path)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error DeleteFile(ptr<ushort> _addr_path)
        {
            error err = default!;
            ref ushort path = ref _addr_path.val;

            var (r1, _, e1) = syscall.Syscall(procDeleteFileW.Addr(), 1L, uintptr(@unsafe.Pointer(path)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error MoveFile(ptr<ushort> _addr_from, ptr<ushort> _addr_to)
        {
            error err = default!;
            ref ushort from = ref _addr_from.val;
            ref ushort to = ref _addr_to.val;

            var (r1, _, e1) = syscall.Syscall(procMoveFileW.Addr(), 2L, uintptr(@unsafe.Pointer(from)), uintptr(@unsafe.Pointer(to)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error MoveFileEx(ptr<ushort> _addr_from, ptr<ushort> _addr_to, uint flags)
        {
            error err = default!;
            ref ushort from = ref _addr_from.val;
            ref ushort to = ref _addr_to.val;

            var (r1, _, e1) = syscall.Syscall(procMoveFileExW.Addr(), 3L, uintptr(@unsafe.Pointer(from)), uintptr(@unsafe.Pointer(to)), uintptr(flags));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error LockFileEx(Handle file, uint flags, uint reserved, uint bytesLow, uint bytesHigh, ptr<Overlapped> _addr_overlapped)
        {
            error err = default!;
            ref Overlapped overlapped = ref _addr_overlapped.val;

            var (r1, _, e1) = syscall.Syscall6(procLockFileEx.Addr(), 6L, uintptr(file), uintptr(flags), uintptr(reserved), uintptr(bytesLow), uintptr(bytesHigh), uintptr(@unsafe.Pointer(overlapped)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error UnlockFileEx(Handle file, uint reserved, uint bytesLow, uint bytesHigh, ptr<Overlapped> _addr_overlapped)
        {
            error err = default!;
            ref Overlapped overlapped = ref _addr_overlapped.val;

            var (r1, _, e1) = syscall.Syscall6(procUnlockFileEx.Addr(), 5L, uintptr(file), uintptr(reserved), uintptr(bytesLow), uintptr(bytesHigh), uintptr(@unsafe.Pointer(overlapped)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error GetComputerName(ptr<ushort> _addr_buf, ptr<uint> _addr_n)
        {
            error err = default!;
            ref ushort buf = ref _addr_buf.val;
            ref uint n = ref _addr_n.val;

            var (r1, _, e1) = syscall.Syscall(procGetComputerNameW.Addr(), 2L, uintptr(@unsafe.Pointer(buf)), uintptr(@unsafe.Pointer(n)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error GetComputerNameEx(uint nametype, ptr<ushort> _addr_buf, ptr<uint> _addr_n)
        {
            error err = default!;
            ref ushort buf = ref _addr_buf.val;
            ref uint n = ref _addr_n.val;

            var (r1, _, e1) = syscall.Syscall(procGetComputerNameExW.Addr(), 3L, uintptr(nametype), uintptr(@unsafe.Pointer(buf)), uintptr(@unsafe.Pointer(n)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error SetEndOfFile(Handle handle)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procSetEndOfFile.Addr(), 1L, uintptr(handle), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static void GetSystemTimeAsFileTime(ptr<Filetime> _addr_time)
        {
            ref Filetime time = ref _addr_time.val;

            syscall.Syscall(procGetSystemTimeAsFileTime.Addr(), 1L, uintptr(@unsafe.Pointer(time)), 0L, 0L);
            return ;
        }

        public static void GetSystemTimePreciseAsFileTime(ptr<Filetime> _addr_time)
        {
            ref Filetime time = ref _addr_time.val;

            syscall.Syscall(procGetSystemTimePreciseAsFileTime.Addr(), 1L, uintptr(@unsafe.Pointer(time)), 0L, 0L);
            return ;
        }

        public static (uint, error) GetTimeZoneInformation(ptr<Timezoneinformation> _addr_tzi)
        {
            uint rc = default;
            error err = default!;
            ref Timezoneinformation tzi = ref _addr_tzi.val;

            var (r0, _, e1) = syscall.Syscall(procGetTimeZoneInformation.Addr(), 1L, uintptr(@unsafe.Pointer(tzi)), 0L, 0L);
            rc = uint32(r0);
            if (rc == 0xffffffffUL)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (Handle, error) CreateIoCompletionPort(Handle filehandle, Handle cphandle, uint key, uint threadcnt)
        {
            Handle handle = default;
            error err = default!;

            var (r0, _, e1) = syscall.Syscall6(procCreateIoCompletionPort.Addr(), 4L, uintptr(filehandle), uintptr(cphandle), uintptr(key), uintptr(threadcnt), 0L, 0L);
            handle = Handle(r0);
            if (handle == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error GetQueuedCompletionStatus(Handle cphandle, ptr<uint> _addr_qty, ptr<uint> _addr_key, ptr<ptr<Overlapped>> _addr_overlapped, uint timeout)
        {
            error err = default!;
            ref uint qty = ref _addr_qty.val;
            ref uint key = ref _addr_key.val;
            ref ptr<Overlapped> overlapped = ref _addr_overlapped.val;

            var (r1, _, e1) = syscall.Syscall6(procGetQueuedCompletionStatus.Addr(), 5L, uintptr(cphandle), uintptr(@unsafe.Pointer(qty)), uintptr(@unsafe.Pointer(key)), uintptr(@unsafe.Pointer(overlapped)), uintptr(timeout), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error PostQueuedCompletionStatus(Handle cphandle, uint qty, uint key, ptr<Overlapped> _addr_overlapped)
        {
            error err = default!;
            ref Overlapped overlapped = ref _addr_overlapped.val;

            var (r1, _, e1) = syscall.Syscall6(procPostQueuedCompletionStatus.Addr(), 4L, uintptr(cphandle), uintptr(qty), uintptr(key), uintptr(@unsafe.Pointer(overlapped)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error CancelIo(Handle s)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procCancelIo.Addr(), 1L, uintptr(s), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error CancelIoEx(Handle s, ptr<Overlapped> _addr_o)
        {
            error err = default!;
            ref Overlapped o = ref _addr_o.val;

            var (r1, _, e1) = syscall.Syscall(procCancelIoEx.Addr(), 2L, uintptr(s), uintptr(@unsafe.Pointer(o)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error CreateProcess(ptr<ushort> _addr_appName, ptr<ushort> _addr_commandLine, ptr<SecurityAttributes> _addr_procSecurity, ptr<SecurityAttributes> _addr_threadSecurity, bool inheritHandles, uint creationFlags, ptr<ushort> _addr_env, ptr<ushort> _addr_currentDir, ptr<StartupInfo> _addr_startupInfo, ptr<ProcessInformation> _addr_outProcInfo)
        {
            error err = default!;
            ref ushort appName = ref _addr_appName.val;
            ref ushort commandLine = ref _addr_commandLine.val;
            ref SecurityAttributes procSecurity = ref _addr_procSecurity.val;
            ref SecurityAttributes threadSecurity = ref _addr_threadSecurity.val;
            ref ushort env = ref _addr_env.val;
            ref ushort currentDir = ref _addr_currentDir.val;
            ref StartupInfo startupInfo = ref _addr_startupInfo.val;
            ref ProcessInformation outProcInfo = ref _addr_outProcInfo.val;

            uint _p0 = default;
            if (inheritHandles)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            var (r1, _, e1) = syscall.Syscall12(procCreateProcessW.Addr(), 10L, uintptr(@unsafe.Pointer(appName)), uintptr(@unsafe.Pointer(commandLine)), uintptr(@unsafe.Pointer(procSecurity)), uintptr(@unsafe.Pointer(threadSecurity)), uintptr(_p0), uintptr(creationFlags), uintptr(@unsafe.Pointer(env)), uintptr(@unsafe.Pointer(currentDir)), uintptr(@unsafe.Pointer(startupInfo)), uintptr(@unsafe.Pointer(outProcInfo)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (Handle, error) OpenProcess(uint desiredAccess, bool inheritHandle, uint processId)
        {
            Handle handle = default;
            error err = default!;

            uint _p0 = default;
            if (inheritHandle)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            var (r0, _, e1) = syscall.Syscall(procOpenProcess.Addr(), 3L, uintptr(desiredAccess), uintptr(_p0), uintptr(processId));
            handle = Handle(r0);
            if (handle == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error ShellExecute(Handle hwnd, ptr<ushort> _addr_verb, ptr<ushort> _addr_file, ptr<ushort> _addr_args, ptr<ushort> _addr_cwd, int showCmd)
        {
            error err = default!;
            ref ushort verb = ref _addr_verb.val;
            ref ushort file = ref _addr_file.val;
            ref ushort args = ref _addr_args.val;
            ref ushort cwd = ref _addr_cwd.val;

            var (r1, _, e1) = syscall.Syscall6(procShellExecuteW.Addr(), 6L, uintptr(hwnd), uintptr(@unsafe.Pointer(verb)), uintptr(@unsafe.Pointer(file)), uintptr(@unsafe.Pointer(args)), uintptr(@unsafe.Pointer(cwd)), uintptr(showCmd));
            if (r1 <= 32L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error shGetKnownFolderPath(ptr<KNOWNFOLDERID> _addr_id, uint flags, Token token, ptr<ptr<ushort>> _addr_path)
        {
            error ret = default!;
            ref KNOWNFOLDERID id = ref _addr_id.val;
            ref ptr<ushort> path = ref _addr_path.val;

            var (r0, _, _) = syscall.Syscall6(procSHGetKnownFolderPath.Addr(), 4L, uintptr(@unsafe.Pointer(id)), uintptr(flags), uintptr(token), uintptr(@unsafe.Pointer(path)), 0L, 0L);
            if (r0 != 0L)
            {
                ret = syscall.Errno(r0);
            }

            return ;

        }

        public static error TerminateProcess(Handle handle, uint exitcode)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procTerminateProcess.Addr(), 2L, uintptr(handle), uintptr(exitcode), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error GetExitCodeProcess(Handle handle, ptr<uint> _addr_exitcode)
        {
            error err = default!;
            ref uint exitcode = ref _addr_exitcode.val;

            var (r1, _, e1) = syscall.Syscall(procGetExitCodeProcess.Addr(), 2L, uintptr(handle), uintptr(@unsafe.Pointer(exitcode)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error GetStartupInfo(ptr<StartupInfo> _addr_startupInfo)
        {
            error err = default!;
            ref StartupInfo startupInfo = ref _addr_startupInfo.val;

            var (r1, _, e1) = syscall.Syscall(procGetStartupInfoW.Addr(), 1L, uintptr(@unsafe.Pointer(startupInfo)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error GetProcessTimes(Handle handle, ptr<Filetime> _addr_creationTime, ptr<Filetime> _addr_exitTime, ptr<Filetime> _addr_kernelTime, ptr<Filetime> _addr_userTime)
        {
            error err = default!;
            ref Filetime creationTime = ref _addr_creationTime.val;
            ref Filetime exitTime = ref _addr_exitTime.val;
            ref Filetime kernelTime = ref _addr_kernelTime.val;
            ref Filetime userTime = ref _addr_userTime.val;

            var (r1, _, e1) = syscall.Syscall6(procGetProcessTimes.Addr(), 5L, uintptr(handle), uintptr(@unsafe.Pointer(creationTime)), uintptr(@unsafe.Pointer(exitTime)), uintptr(@unsafe.Pointer(kernelTime)), uintptr(@unsafe.Pointer(userTime)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error DuplicateHandle(Handle hSourceProcessHandle, Handle hSourceHandle, Handle hTargetProcessHandle, ptr<Handle> _addr_lpTargetHandle, uint dwDesiredAccess, bool bInheritHandle, uint dwOptions)
        {
            error err = default!;
            ref Handle lpTargetHandle = ref _addr_lpTargetHandle.val;

            uint _p0 = default;
            if (bInheritHandle)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            var (r1, _, e1) = syscall.Syscall9(procDuplicateHandle.Addr(), 7L, uintptr(hSourceProcessHandle), uintptr(hSourceHandle), uintptr(hTargetProcessHandle), uintptr(@unsafe.Pointer(lpTargetHandle)), uintptr(dwDesiredAccess), uintptr(_p0), uintptr(dwOptions), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (uint, error) WaitForSingleObject(Handle handle, uint waitMilliseconds)
        {
            uint @event = default;
            error err = default!;

            var (r0, _, e1) = syscall.Syscall(procWaitForSingleObject.Addr(), 2L, uintptr(handle), uintptr(waitMilliseconds), 0L);
            event = uint32(r0);
            if (event == 0xffffffffUL)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static (uint, error) waitForMultipleObjects(uint count, System.UIntPtr handles, bool waitAll, uint waitMilliseconds)
        {
            uint @event = default;
            error err = default!;

            uint _p0 = default;
            if (waitAll)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            var (r0, _, e1) = syscall.Syscall6(procWaitForMultipleObjects.Addr(), 4L, uintptr(count), uintptr(handles), uintptr(_p0), uintptr(waitMilliseconds), 0L, 0L);
            event = uint32(r0);
            if (event == 0xffffffffUL)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (uint, error) GetTempPath(uint buflen, ptr<ushort> _addr_buf)
        {
            uint n = default;
            error err = default!;
            ref ushort buf = ref _addr_buf.val;

            var (r0, _, e1) = syscall.Syscall(procGetTempPathW.Addr(), 2L, uintptr(buflen), uintptr(@unsafe.Pointer(buf)), 0L);
            n = uint32(r0);
            if (n == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error CreatePipe(ptr<Handle> _addr_readhandle, ptr<Handle> _addr_writehandle, ptr<SecurityAttributes> _addr_sa, uint size)
        {
            error err = default!;
            ref Handle readhandle = ref _addr_readhandle.val;
            ref Handle writehandle = ref _addr_writehandle.val;
            ref SecurityAttributes sa = ref _addr_sa.val;

            var (r1, _, e1) = syscall.Syscall6(procCreatePipe.Addr(), 4L, uintptr(@unsafe.Pointer(readhandle)), uintptr(@unsafe.Pointer(writehandle)), uintptr(@unsafe.Pointer(sa)), uintptr(size), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (uint, error) GetFileType(Handle filehandle)
        {
            uint n = default;
            error err = default!;

            var (r0, _, e1) = syscall.Syscall(procGetFileType.Addr(), 1L, uintptr(filehandle), 0L, 0L);
            n = uint32(r0);
            if (n == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error CryptAcquireContext(ptr<Handle> _addr_provhandle, ptr<ushort> _addr_container, ptr<ushort> _addr_provider, uint provtype, uint flags)
        {
            error err = default!;
            ref Handle provhandle = ref _addr_provhandle.val;
            ref ushort container = ref _addr_container.val;
            ref ushort provider = ref _addr_provider.val;

            var (r1, _, e1) = syscall.Syscall6(procCryptAcquireContextW.Addr(), 5L, uintptr(@unsafe.Pointer(provhandle)), uintptr(@unsafe.Pointer(container)), uintptr(@unsafe.Pointer(provider)), uintptr(provtype), uintptr(flags), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error CryptReleaseContext(Handle provhandle, uint flags)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procCryptReleaseContext.Addr(), 2L, uintptr(provhandle), uintptr(flags), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error CryptGenRandom(Handle provhandle, uint buflen, ptr<byte> _addr_buf)
        {
            error err = default!;
            ref byte buf = ref _addr_buf.val;

            var (r1, _, e1) = syscall.Syscall(procCryptGenRandom.Addr(), 3L, uintptr(provhandle), uintptr(buflen), uintptr(@unsafe.Pointer(buf)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (ptr<ushort>, error) GetEnvironmentStrings()
        {
            ptr<ushort> envs = default!;
            error err = default!;

            var (r0, _, e1) = syscall.Syscall(procGetEnvironmentStringsW.Addr(), 0L, 0L, 0L, 0L);
            envs = (uint16.val)(@unsafe.Pointer(r0));
            if (envs == null)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error FreeEnvironmentStrings(ptr<ushort> _addr_envs)
        {
            error err = default!;
            ref ushort envs = ref _addr_envs.val;

            var (r1, _, e1) = syscall.Syscall(procFreeEnvironmentStringsW.Addr(), 1L, uintptr(@unsafe.Pointer(envs)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (uint, error) GetEnvironmentVariable(ptr<ushort> _addr_name, ptr<ushort> _addr_buffer, uint size)
        {
            uint n = default;
            error err = default!;
            ref ushort name = ref _addr_name.val;
            ref ushort buffer = ref _addr_buffer.val;

            var (r0, _, e1) = syscall.Syscall(procGetEnvironmentVariableW.Addr(), 3L, uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(buffer)), uintptr(size));
            n = uint32(r0);
            if (n == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error SetEnvironmentVariable(ptr<ushort> _addr_name, ptr<ushort> _addr_value)
        {
            error err = default!;
            ref ushort name = ref _addr_name.val;
            ref ushort value = ref _addr_value.val;

            var (r1, _, e1) = syscall.Syscall(procSetEnvironmentVariableW.Addr(), 2L, uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(value)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error CreateEnvironmentBlock(ptr<ptr<ushort>> _addr_block, Token token, bool inheritExisting)
        {
            error err = default!;
            ref ptr<ushort> block = ref _addr_block.val;

            uint _p0 = default;
            if (inheritExisting)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            var (r1, _, e1) = syscall.Syscall(procCreateEnvironmentBlock.Addr(), 3L, uintptr(@unsafe.Pointer(block)), uintptr(token), uintptr(_p0));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error DestroyEnvironmentBlock(ptr<ushort> _addr_block)
        {
            error err = default!;
            ref ushort block = ref _addr_block.val;

            var (r1, _, e1) = syscall.Syscall(procDestroyEnvironmentBlock.Addr(), 1L, uintptr(@unsafe.Pointer(block)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static ulong getTickCount64()
        {
            ulong ms = default;

            var (r0, _, _) = syscall.Syscall(procGetTickCount64.Addr(), 0L, 0L, 0L, 0L);
            ms = uint64(r0);
            return ;
        }

        public static error SetFileTime(Handle handle, ptr<Filetime> _addr_ctime, ptr<Filetime> _addr_atime, ptr<Filetime> _addr_wtime)
        {
            error err = default!;
            ref Filetime ctime = ref _addr_ctime.val;
            ref Filetime atime = ref _addr_atime.val;
            ref Filetime wtime = ref _addr_wtime.val;

            var (r1, _, e1) = syscall.Syscall6(procSetFileTime.Addr(), 4L, uintptr(handle), uintptr(@unsafe.Pointer(ctime)), uintptr(@unsafe.Pointer(atime)), uintptr(@unsafe.Pointer(wtime)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (uint, error) GetFileAttributes(ptr<ushort> _addr_name)
        {
            uint attrs = default;
            error err = default!;
            ref ushort name = ref _addr_name.val;

            var (r0, _, e1) = syscall.Syscall(procGetFileAttributesW.Addr(), 1L, uintptr(@unsafe.Pointer(name)), 0L, 0L);
            attrs = uint32(r0);
            if (attrs == INVALID_FILE_ATTRIBUTES)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error SetFileAttributes(ptr<ushort> _addr_name, uint attrs)
        {
            error err = default!;
            ref ushort name = ref _addr_name.val;

            var (r1, _, e1) = syscall.Syscall(procSetFileAttributesW.Addr(), 2L, uintptr(@unsafe.Pointer(name)), uintptr(attrs), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error GetFileAttributesEx(ptr<ushort> _addr_name, uint level, ptr<byte> _addr_info)
        {
            error err = default!;
            ref ushort name = ref _addr_name.val;
            ref byte info = ref _addr_info.val;

            var (r1, _, e1) = syscall.Syscall(procGetFileAttributesExW.Addr(), 3L, uintptr(@unsafe.Pointer(name)), uintptr(level), uintptr(@unsafe.Pointer(info)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static ptr<ushort> GetCommandLine()
        {
            ptr<ushort> cmd = default!;

            var (r0, _, _) = syscall.Syscall(procGetCommandLineW.Addr(), 0L, 0L, 0L, 0L);
            cmd = (uint16.val)(@unsafe.Pointer(r0));
            return ;
        }

        public static (ptr<array<ptr<array<ushort>>>>, error) CommandLineToArgv(ptr<ushort> _addr_cmd, ptr<int> _addr_argc)
        {
            ptr<array<ptr<array<ushort>>>> argv = default!;
            error err = default!;
            ref ushort cmd = ref _addr_cmd.val;
            ref int argc = ref _addr_argc.val;

            var (r0, _, e1) = syscall.Syscall(procCommandLineToArgvW.Addr(), 2L, uintptr(@unsafe.Pointer(cmd)), uintptr(@unsafe.Pointer(argc)), 0L);
            argv = new ptr<ptr<array<ptr<array<ushort>>>>>(@unsafe.Pointer(r0));
            if (argv == null)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (Handle, error) LocalFree(Handle hmem)
        {
            Handle handle = default;
            error err = default!;

            var (r0, _, e1) = syscall.Syscall(procLocalFree.Addr(), 1L, uintptr(hmem), 0L, 0L);
            handle = Handle(r0);
            if (handle != 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error SetHandleInformation(Handle handle, uint mask, uint flags)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procSetHandleInformation.Addr(), 3L, uintptr(handle), uintptr(mask), uintptr(flags));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error FlushFileBuffers(Handle handle)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procFlushFileBuffers.Addr(), 1L, uintptr(handle), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (uint, error) GetFullPathName(ptr<ushort> _addr_path, uint buflen, ptr<ushort> _addr_buf, ptr<ptr<ushort>> _addr_fname)
        {
            uint n = default;
            error err = default!;
            ref ushort path = ref _addr_path.val;
            ref ushort buf = ref _addr_buf.val;
            ref ptr<ushort> fname = ref _addr_fname.val;

            var (r0, _, e1) = syscall.Syscall6(procGetFullPathNameW.Addr(), 4L, uintptr(@unsafe.Pointer(path)), uintptr(buflen), uintptr(@unsafe.Pointer(buf)), uintptr(@unsafe.Pointer(fname)), 0L, 0L);
            n = uint32(r0);
            if (n == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (uint, error) GetLongPathName(ptr<ushort> _addr_path, ptr<ushort> _addr_buf, uint buflen)
        {
            uint n = default;
            error err = default!;
            ref ushort path = ref _addr_path.val;
            ref ushort buf = ref _addr_buf.val;

            var (r0, _, e1) = syscall.Syscall(procGetLongPathNameW.Addr(), 3L, uintptr(@unsafe.Pointer(path)), uintptr(@unsafe.Pointer(buf)), uintptr(buflen));
            n = uint32(r0);
            if (n == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (uint, error) GetShortPathName(ptr<ushort> _addr_longpath, ptr<ushort> _addr_shortpath, uint buflen)
        {
            uint n = default;
            error err = default!;
            ref ushort longpath = ref _addr_longpath.val;
            ref ushort shortpath = ref _addr_shortpath.val;

            var (r0, _, e1) = syscall.Syscall(procGetShortPathNameW.Addr(), 3L, uintptr(@unsafe.Pointer(longpath)), uintptr(@unsafe.Pointer(shortpath)), uintptr(buflen));
            n = uint32(r0);
            if (n == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (Handle, error) CreateFileMapping(Handle fhandle, ptr<SecurityAttributes> _addr_sa, uint prot, uint maxSizeHigh, uint maxSizeLow, ptr<ushort> _addr_name)
        {
            Handle handle = default;
            error err = default!;
            ref SecurityAttributes sa = ref _addr_sa.val;
            ref ushort name = ref _addr_name.val;

            var (r0, _, e1) = syscall.Syscall6(procCreateFileMappingW.Addr(), 6L, uintptr(fhandle), uintptr(@unsafe.Pointer(sa)), uintptr(prot), uintptr(maxSizeHigh), uintptr(maxSizeLow), uintptr(@unsafe.Pointer(name)));
            handle = Handle(r0);
            if (handle == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (System.UIntPtr, error) MapViewOfFile(Handle handle, uint access, uint offsetHigh, uint offsetLow, System.UIntPtr length)
        {
            System.UIntPtr addr = default;
            error err = default!;

            var (r0, _, e1) = syscall.Syscall6(procMapViewOfFile.Addr(), 5L, uintptr(handle), uintptr(access), uintptr(offsetHigh), uintptr(offsetLow), uintptr(length), 0L);
            addr = uintptr(r0);
            if (addr == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error UnmapViewOfFile(System.UIntPtr addr)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procUnmapViewOfFile.Addr(), 1L, uintptr(addr), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error FlushViewOfFile(System.UIntPtr addr, System.UIntPtr length)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procFlushViewOfFile.Addr(), 2L, uintptr(addr), uintptr(length), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error VirtualLock(System.UIntPtr addr, System.UIntPtr length)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procVirtualLock.Addr(), 2L, uintptr(addr), uintptr(length), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error VirtualUnlock(System.UIntPtr addr, System.UIntPtr length)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procVirtualUnlock.Addr(), 2L, uintptr(addr), uintptr(length), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (System.UIntPtr, error) VirtualAlloc(System.UIntPtr address, System.UIntPtr size, uint alloctype, uint protect)
        {
            System.UIntPtr value = default;
            error err = default!;

            var (r0, _, e1) = syscall.Syscall6(procVirtualAlloc.Addr(), 4L, uintptr(address), uintptr(size), uintptr(alloctype), uintptr(protect), 0L, 0L);
            value = uintptr(r0);
            if (value == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error VirtualFree(System.UIntPtr address, System.UIntPtr size, uint freetype)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procVirtualFree.Addr(), 3L, uintptr(address), uintptr(size), uintptr(freetype));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error VirtualProtect(System.UIntPtr address, System.UIntPtr size, uint newprotect, ptr<uint> _addr_oldprotect)
        {
            error err = default!;
            ref uint oldprotect = ref _addr_oldprotect.val;

            var (r1, _, e1) = syscall.Syscall6(procVirtualProtect.Addr(), 4L, uintptr(address), uintptr(size), uintptr(newprotect), uintptr(@unsafe.Pointer(oldprotect)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error TransmitFile(Handle s, Handle handle, uint bytesToWrite, uint bytsPerSend, ptr<Overlapped> _addr_overlapped, ptr<TransmitFileBuffers> _addr_transmitFileBuf, uint flags)
        {
            error err = default!;
            ref Overlapped overlapped = ref _addr_overlapped.val;
            ref TransmitFileBuffers transmitFileBuf = ref _addr_transmitFileBuf.val;

            var (r1, _, e1) = syscall.Syscall9(procTransmitFile.Addr(), 7L, uintptr(s), uintptr(handle), uintptr(bytesToWrite), uintptr(bytsPerSend), uintptr(@unsafe.Pointer(overlapped)), uintptr(@unsafe.Pointer(transmitFileBuf)), uintptr(flags), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error ReadDirectoryChanges(Handle handle, ptr<byte> _addr_buf, uint buflen, bool watchSubTree, uint mask, ptr<uint> _addr_retlen, ptr<Overlapped> _addr_overlapped, System.UIntPtr completionRoutine)
        {
            error err = default!;
            ref byte buf = ref _addr_buf.val;
            ref uint retlen = ref _addr_retlen.val;
            ref Overlapped overlapped = ref _addr_overlapped.val;

            uint _p0 = default;
            if (watchSubTree)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            var (r1, _, e1) = syscall.Syscall9(procReadDirectoryChangesW.Addr(), 8L, uintptr(handle), uintptr(@unsafe.Pointer(buf)), uintptr(buflen), uintptr(_p0), uintptr(mask), uintptr(@unsafe.Pointer(retlen)), uintptr(@unsafe.Pointer(overlapped)), uintptr(completionRoutine), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (Handle, error) CertOpenSystemStore(Handle hprov, ptr<ushort> _addr_name)
        {
            Handle store = default;
            error err = default!;
            ref ushort name = ref _addr_name.val;

            var (r0, _, e1) = syscall.Syscall(procCertOpenSystemStoreW.Addr(), 2L, uintptr(hprov), uintptr(@unsafe.Pointer(name)), 0L);
            store = Handle(r0);
            if (store == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (Handle, error) CertOpenStore(System.UIntPtr storeProvider, uint msgAndCertEncodingType, System.UIntPtr cryptProv, uint flags, System.UIntPtr para)
        {
            Handle handle = default;
            error err = default!;

            var (r0, _, e1) = syscall.Syscall6(procCertOpenStore.Addr(), 5L, uintptr(storeProvider), uintptr(msgAndCertEncodingType), uintptr(cryptProv), uintptr(flags), uintptr(para), 0L);
            handle = Handle(r0);
            if (handle == InvalidHandle)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (ptr<CertContext>, error) CertEnumCertificatesInStore(Handle store, ptr<CertContext> _addr_prevContext)
        {
            ptr<CertContext> context = default!;
            error err = default!;
            ref CertContext prevContext = ref _addr_prevContext.val;

            var (r0, _, e1) = syscall.Syscall(procCertEnumCertificatesInStore.Addr(), 2L, uintptr(store), uintptr(@unsafe.Pointer(prevContext)), 0L);
            context = (CertContext.val)(@unsafe.Pointer(r0));
            if (context == null)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error CertAddCertificateContextToStore(Handle store, ptr<CertContext> _addr_certContext, uint addDisposition, ptr<ptr<CertContext>> _addr_storeContext)
        {
            error err = default!;
            ref CertContext certContext = ref _addr_certContext.val;
            ref ptr<CertContext> storeContext = ref _addr_storeContext.val;

            var (r1, _, e1) = syscall.Syscall6(procCertAddCertificateContextToStore.Addr(), 4L, uintptr(store), uintptr(@unsafe.Pointer(certContext)), uintptr(addDisposition), uintptr(@unsafe.Pointer(storeContext)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error CertCloseStore(Handle store, uint flags)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procCertCloseStore.Addr(), 2L, uintptr(store), uintptr(flags), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error CertGetCertificateChain(Handle engine, ptr<CertContext> _addr_leaf, ptr<Filetime> _addr_time, Handle additionalStore, ptr<CertChainPara> _addr_para, uint flags, System.UIntPtr reserved, ptr<ptr<CertChainContext>> _addr_chainCtx)
        {
            error err = default!;
            ref CertContext leaf = ref _addr_leaf.val;
            ref Filetime time = ref _addr_time.val;
            ref CertChainPara para = ref _addr_para.val;
            ref ptr<CertChainContext> chainCtx = ref _addr_chainCtx.val;

            var (r1, _, e1) = syscall.Syscall9(procCertGetCertificateChain.Addr(), 8L, uintptr(engine), uintptr(@unsafe.Pointer(leaf)), uintptr(@unsafe.Pointer(time)), uintptr(additionalStore), uintptr(@unsafe.Pointer(para)), uintptr(flags), uintptr(reserved), uintptr(@unsafe.Pointer(chainCtx)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static void CertFreeCertificateChain(ptr<CertChainContext> _addr_ctx)
        {
            ref CertChainContext ctx = ref _addr_ctx.val;

            syscall.Syscall(procCertFreeCertificateChain.Addr(), 1L, uintptr(@unsafe.Pointer(ctx)), 0L, 0L);
            return ;
        }

        public static (ptr<CertContext>, error) CertCreateCertificateContext(uint certEncodingType, ptr<byte> _addr_certEncoded, uint encodedLen)
        {
            ptr<CertContext> context = default!;
            error err = default!;
            ref byte certEncoded = ref _addr_certEncoded.val;

            var (r0, _, e1) = syscall.Syscall(procCertCreateCertificateContext.Addr(), 3L, uintptr(certEncodingType), uintptr(@unsafe.Pointer(certEncoded)), uintptr(encodedLen));
            context = (CertContext.val)(@unsafe.Pointer(r0));
            if (context == null)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error CertFreeCertificateContext(ptr<CertContext> _addr_ctx)
        {
            error err = default!;
            ref CertContext ctx = ref _addr_ctx.val;

            var (r1, _, e1) = syscall.Syscall(procCertFreeCertificateContext.Addr(), 1L, uintptr(@unsafe.Pointer(ctx)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error CertVerifyCertificateChainPolicy(System.UIntPtr policyOID, ptr<CertChainContext> _addr_chain, ptr<CertChainPolicyPara> _addr_para, ptr<CertChainPolicyStatus> _addr_status)
        {
            error err = default!;
            ref CertChainContext chain = ref _addr_chain.val;
            ref CertChainPolicyPara para = ref _addr_para.val;
            ref CertChainPolicyStatus status = ref _addr_status.val;

            var (r1, _, e1) = syscall.Syscall6(procCertVerifyCertificateChainPolicy.Addr(), 4L, uintptr(policyOID), uintptr(@unsafe.Pointer(chain)), uintptr(@unsafe.Pointer(para)), uintptr(@unsafe.Pointer(status)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error RegOpenKeyEx(Handle key, ptr<ushort> _addr_subkey, uint options, uint desiredAccess, ptr<Handle> _addr_result)
        {
            error regerrno = default!;
            ref ushort subkey = ref _addr_subkey.val;
            ref Handle result = ref _addr_result.val;

            var (r0, _, _) = syscall.Syscall6(procRegOpenKeyExW.Addr(), 5L, uintptr(key), uintptr(@unsafe.Pointer(subkey)), uintptr(options), uintptr(desiredAccess), uintptr(@unsafe.Pointer(result)), 0L);
            if (r0 != 0L)
            {
                regerrno = syscall.Errno(r0);
            }

            return ;

        }

        public static error RegCloseKey(Handle key)
        {
            error regerrno = default!;

            var (r0, _, _) = syscall.Syscall(procRegCloseKey.Addr(), 1L, uintptr(key), 0L, 0L);
            if (r0 != 0L)
            {
                regerrno = syscall.Errno(r0);
            }

            return ;

        }

        public static error RegQueryInfoKey(Handle key, ptr<ushort> _addr_@class, ptr<uint> _addr_classLen, ptr<uint> _addr_reserved, ptr<uint> _addr_subkeysLen, ptr<uint> _addr_maxSubkeyLen, ptr<uint> _addr_maxClassLen, ptr<uint> _addr_valuesLen, ptr<uint> _addr_maxValueNameLen, ptr<uint> _addr_maxValueLen, ptr<uint> _addr_saLen, ptr<Filetime> _addr_lastWriteTime)
        {
            error regerrno = default!;
            ref ushort @class = ref _addr_@class.val;
            ref uint classLen = ref _addr_classLen.val;
            ref uint reserved = ref _addr_reserved.val;
            ref uint subkeysLen = ref _addr_subkeysLen.val;
            ref uint maxSubkeyLen = ref _addr_maxSubkeyLen.val;
            ref uint maxClassLen = ref _addr_maxClassLen.val;
            ref uint valuesLen = ref _addr_valuesLen.val;
            ref uint maxValueNameLen = ref _addr_maxValueNameLen.val;
            ref uint maxValueLen = ref _addr_maxValueLen.val;
            ref uint saLen = ref _addr_saLen.val;
            ref Filetime lastWriteTime = ref _addr_lastWriteTime.val;

            var (r0, _, _) = syscall.Syscall12(procRegQueryInfoKeyW.Addr(), 12L, uintptr(key), uintptr(@unsafe.Pointer(class)), uintptr(@unsafe.Pointer(classLen)), uintptr(@unsafe.Pointer(reserved)), uintptr(@unsafe.Pointer(subkeysLen)), uintptr(@unsafe.Pointer(maxSubkeyLen)), uintptr(@unsafe.Pointer(maxClassLen)), uintptr(@unsafe.Pointer(valuesLen)), uintptr(@unsafe.Pointer(maxValueNameLen)), uintptr(@unsafe.Pointer(maxValueLen)), uintptr(@unsafe.Pointer(saLen)), uintptr(@unsafe.Pointer(lastWriteTime)));
            if (r0 != 0L)
            {
                regerrno = syscall.Errno(r0);
            }

            return ;

        }

        public static error RegEnumKeyEx(Handle key, uint index, ptr<ushort> _addr_name, ptr<uint> _addr_nameLen, ptr<uint> _addr_reserved, ptr<ushort> _addr_@class, ptr<uint> _addr_classLen, ptr<Filetime> _addr_lastWriteTime)
        {
            error regerrno = default!;
            ref ushort name = ref _addr_name.val;
            ref uint nameLen = ref _addr_nameLen.val;
            ref uint reserved = ref _addr_reserved.val;
            ref ushort @class = ref _addr_@class.val;
            ref uint classLen = ref _addr_classLen.val;
            ref Filetime lastWriteTime = ref _addr_lastWriteTime.val;

            var (r0, _, _) = syscall.Syscall9(procRegEnumKeyExW.Addr(), 8L, uintptr(key), uintptr(index), uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(nameLen)), uintptr(@unsafe.Pointer(reserved)), uintptr(@unsafe.Pointer(class)), uintptr(@unsafe.Pointer(classLen)), uintptr(@unsafe.Pointer(lastWriteTime)), 0L);
            if (r0 != 0L)
            {
                regerrno = syscall.Errno(r0);
            }

            return ;

        }

        public static error RegQueryValueEx(Handle key, ptr<ushort> _addr_name, ptr<uint> _addr_reserved, ptr<uint> _addr_valtype, ptr<byte> _addr_buf, ptr<uint> _addr_buflen)
        {
            error regerrno = default!;
            ref ushort name = ref _addr_name.val;
            ref uint reserved = ref _addr_reserved.val;
            ref uint valtype = ref _addr_valtype.val;
            ref byte buf = ref _addr_buf.val;
            ref uint buflen = ref _addr_buflen.val;

            var (r0, _, _) = syscall.Syscall6(procRegQueryValueExW.Addr(), 6L, uintptr(key), uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(reserved)), uintptr(@unsafe.Pointer(valtype)), uintptr(@unsafe.Pointer(buf)), uintptr(@unsafe.Pointer(buflen)));
            if (r0 != 0L)
            {
                regerrno = syscall.Errno(r0);
            }

            return ;

        }

        public static uint GetCurrentProcessId()
        {
            uint pid = default;

            var (r0, _, _) = syscall.Syscall(procGetCurrentProcessId.Addr(), 0L, 0L, 0L, 0L);
            pid = uint32(r0);
            return ;
        }

        public static error GetConsoleMode(Handle console, ptr<uint> _addr_mode)
        {
            error err = default!;
            ref uint mode = ref _addr_mode.val;

            var (r1, _, e1) = syscall.Syscall(procGetConsoleMode.Addr(), 2L, uintptr(console), uintptr(@unsafe.Pointer(mode)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error SetConsoleMode(Handle console, uint mode)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procSetConsoleMode.Addr(), 2L, uintptr(console), uintptr(mode), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error GetConsoleScreenBufferInfo(Handle console, ptr<ConsoleScreenBufferInfo> _addr_info)
        {
            error err = default!;
            ref ConsoleScreenBufferInfo info = ref _addr_info.val;

            var (r1, _, e1) = syscall.Syscall(procGetConsoleScreenBufferInfo.Addr(), 2L, uintptr(console), uintptr(@unsafe.Pointer(info)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error WriteConsole(Handle console, ptr<ushort> _addr_buf, uint towrite, ptr<uint> _addr_written, ptr<byte> _addr_reserved)
        {
            error err = default!;
            ref ushort buf = ref _addr_buf.val;
            ref uint written = ref _addr_written.val;
            ref byte reserved = ref _addr_reserved.val;

            var (r1, _, e1) = syscall.Syscall6(procWriteConsoleW.Addr(), 5L, uintptr(console), uintptr(@unsafe.Pointer(buf)), uintptr(towrite), uintptr(@unsafe.Pointer(written)), uintptr(@unsafe.Pointer(reserved)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error ReadConsole(Handle console, ptr<ushort> _addr_buf, uint toread, ptr<uint> _addr_read, ptr<byte> _addr_inputControl)
        {
            error err = default!;
            ref ushort buf = ref _addr_buf.val;
            ref uint read = ref _addr_read.val;
            ref byte inputControl = ref _addr_inputControl.val;

            var (r1, _, e1) = syscall.Syscall6(procReadConsoleW.Addr(), 5L, uintptr(console), uintptr(@unsafe.Pointer(buf)), uintptr(toread), uintptr(@unsafe.Pointer(read)), uintptr(@unsafe.Pointer(inputControl)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (Handle, error) CreateToolhelp32Snapshot(uint flags, uint processId)
        {
            Handle handle = default;
            error err = default!;

            var (r0, _, e1) = syscall.Syscall(procCreateToolhelp32Snapshot.Addr(), 2L, uintptr(flags), uintptr(processId), 0L);
            handle = Handle(r0);
            if (handle == InvalidHandle)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error Process32First(Handle snapshot, ptr<ProcessEntry32> _addr_procEntry)
        {
            error err = default!;
            ref ProcessEntry32 procEntry = ref _addr_procEntry.val;

            var (r1, _, e1) = syscall.Syscall(procProcess32FirstW.Addr(), 2L, uintptr(snapshot), uintptr(@unsafe.Pointer(procEntry)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error Process32Next(Handle snapshot, ptr<ProcessEntry32> _addr_procEntry)
        {
            error err = default!;
            ref ProcessEntry32 procEntry = ref _addr_procEntry.val;

            var (r1, _, e1) = syscall.Syscall(procProcess32NextW.Addr(), 2L, uintptr(snapshot), uintptr(@unsafe.Pointer(procEntry)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error Thread32First(Handle snapshot, ptr<ThreadEntry32> _addr_threadEntry)
        {
            error err = default!;
            ref ThreadEntry32 threadEntry = ref _addr_threadEntry.val;

            var (r1, _, e1) = syscall.Syscall(procThread32First.Addr(), 2L, uintptr(snapshot), uintptr(@unsafe.Pointer(threadEntry)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error Thread32Next(Handle snapshot, ptr<ThreadEntry32> _addr_threadEntry)
        {
            error err = default!;
            ref ThreadEntry32 threadEntry = ref _addr_threadEntry.val;

            var (r1, _, e1) = syscall.Syscall(procThread32Next.Addr(), 2L, uintptr(snapshot), uintptr(@unsafe.Pointer(threadEntry)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error DeviceIoControl(Handle handle, uint ioControlCode, ptr<byte> _addr_inBuffer, uint inBufferSize, ptr<byte> _addr_outBuffer, uint outBufferSize, ptr<uint> _addr_bytesReturned, ptr<Overlapped> _addr_overlapped)
        {
            error err = default!;
            ref byte inBuffer = ref _addr_inBuffer.val;
            ref byte outBuffer = ref _addr_outBuffer.val;
            ref uint bytesReturned = ref _addr_bytesReturned.val;
            ref Overlapped overlapped = ref _addr_overlapped.val;

            var (r1, _, e1) = syscall.Syscall9(procDeviceIoControl.Addr(), 8L, uintptr(handle), uintptr(ioControlCode), uintptr(@unsafe.Pointer(inBuffer)), uintptr(inBufferSize), uintptr(@unsafe.Pointer(outBuffer)), uintptr(outBufferSize), uintptr(@unsafe.Pointer(bytesReturned)), uintptr(@unsafe.Pointer(overlapped)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error CreateSymbolicLink(ptr<ushort> _addr_symlinkfilename, ptr<ushort> _addr_targetfilename, uint flags)
        {
            error err = default!;
            ref ushort symlinkfilename = ref _addr_symlinkfilename.val;
            ref ushort targetfilename = ref _addr_targetfilename.val;

            var (r1, _, e1) = syscall.Syscall(procCreateSymbolicLinkW.Addr(), 3L, uintptr(@unsafe.Pointer(symlinkfilename)), uintptr(@unsafe.Pointer(targetfilename)), uintptr(flags));
            if (r1 & 0xffUL == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error CreateHardLink(ptr<ushort> _addr_filename, ptr<ushort> _addr_existingfilename, System.UIntPtr reserved)
        {
            error err = default!;
            ref ushort filename = ref _addr_filename.val;
            ref ushort existingfilename = ref _addr_existingfilename.val;

            var (r1, _, e1) = syscall.Syscall(procCreateHardLinkW.Addr(), 3L, uintptr(@unsafe.Pointer(filename)), uintptr(@unsafe.Pointer(existingfilename)), uintptr(reserved));
            if (r1 & 0xffUL == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static uint GetCurrentThreadId()
        {
            uint id = default;

            var (r0, _, _) = syscall.Syscall(procGetCurrentThreadId.Addr(), 0L, 0L, 0L, 0L);
            id = uint32(r0);
            return ;
        }

        public static (Handle, error) CreateEvent(ptr<SecurityAttributes> _addr_eventAttrs, uint manualReset, uint initialState, ptr<ushort> _addr_name)
        {
            Handle handle = default;
            error err = default!;
            ref SecurityAttributes eventAttrs = ref _addr_eventAttrs.val;
            ref ushort name = ref _addr_name.val;

            var (r0, _, e1) = syscall.Syscall6(procCreateEventW.Addr(), 4L, uintptr(@unsafe.Pointer(eventAttrs)), uintptr(manualReset), uintptr(initialState), uintptr(@unsafe.Pointer(name)), 0L, 0L);
            handle = Handle(r0);
            if (handle == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (Handle, error) CreateEventEx(ptr<SecurityAttributes> _addr_eventAttrs, ptr<ushort> _addr_name, uint flags, uint desiredAccess)
        {
            Handle handle = default;
            error err = default!;
            ref SecurityAttributes eventAttrs = ref _addr_eventAttrs.val;
            ref ushort name = ref _addr_name.val;

            var (r0, _, e1) = syscall.Syscall6(procCreateEventExW.Addr(), 4L, uintptr(@unsafe.Pointer(eventAttrs)), uintptr(@unsafe.Pointer(name)), uintptr(flags), uintptr(desiredAccess), 0L, 0L);
            handle = Handle(r0);
            if (handle == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (Handle, error) OpenEvent(uint desiredAccess, bool inheritHandle, ptr<ushort> _addr_name)
        {
            Handle handle = default;
            error err = default!;
            ref ushort name = ref _addr_name.val;

            uint _p0 = default;
            if (inheritHandle)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            var (r0, _, e1) = syscall.Syscall(procOpenEventW.Addr(), 3L, uintptr(desiredAccess), uintptr(_p0), uintptr(@unsafe.Pointer(name)));
            handle = Handle(r0);
            if (handle == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error SetEvent(Handle @event)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procSetEvent.Addr(), 1L, uintptr(event), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error ResetEvent(Handle @event)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procResetEvent.Addr(), 1L, uintptr(event), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error PulseEvent(Handle @event)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procPulseEvent.Addr(), 1L, uintptr(event), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (Handle, error) CreateMutex(ptr<SecurityAttributes> _addr_mutexAttrs, bool initialOwner, ptr<ushort> _addr_name)
        {
            Handle handle = default;
            error err = default!;
            ref SecurityAttributes mutexAttrs = ref _addr_mutexAttrs.val;
            ref ushort name = ref _addr_name.val;

            uint _p0 = default;
            if (initialOwner)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            var (r0, _, e1) = syscall.Syscall(procCreateMutexW.Addr(), 3L, uintptr(@unsafe.Pointer(mutexAttrs)), uintptr(_p0), uintptr(@unsafe.Pointer(name)));
            handle = Handle(r0);
            if (handle == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (Handle, error) CreateMutexEx(ptr<SecurityAttributes> _addr_mutexAttrs, ptr<ushort> _addr_name, uint flags, uint desiredAccess)
        {
            Handle handle = default;
            error err = default!;
            ref SecurityAttributes mutexAttrs = ref _addr_mutexAttrs.val;
            ref ushort name = ref _addr_name.val;

            var (r0, _, e1) = syscall.Syscall6(procCreateMutexExW.Addr(), 4L, uintptr(@unsafe.Pointer(mutexAttrs)), uintptr(@unsafe.Pointer(name)), uintptr(flags), uintptr(desiredAccess), 0L, 0L);
            handle = Handle(r0);
            if (handle == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (Handle, error) OpenMutex(uint desiredAccess, bool inheritHandle, ptr<ushort> _addr_name)
        {
            Handle handle = default;
            error err = default!;
            ref ushort name = ref _addr_name.val;

            uint _p0 = default;
            if (inheritHandle)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            var (r0, _, e1) = syscall.Syscall(procOpenMutexW.Addr(), 3L, uintptr(desiredAccess), uintptr(_p0), uintptr(@unsafe.Pointer(name)));
            handle = Handle(r0);
            if (handle == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error ReleaseMutex(Handle mutex)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procReleaseMutex.Addr(), 1L, uintptr(mutex), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static uint SleepEx(uint milliseconds, bool alertable)
        {
            uint ret = default;

            uint _p0 = default;
            if (alertable)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            var (r0, _, _) = syscall.Syscall(procSleepEx.Addr(), 2L, uintptr(milliseconds), uintptr(_p0), 0L);
            ret = uint32(r0);
            return ;

        }

        public static (Handle, error) CreateJobObject(ptr<SecurityAttributes> _addr_jobAttr, ptr<ushort> _addr_name)
        {
            Handle handle = default;
            error err = default!;
            ref SecurityAttributes jobAttr = ref _addr_jobAttr.val;
            ref ushort name = ref _addr_name.val;

            var (r0, _, e1) = syscall.Syscall(procCreateJobObjectW.Addr(), 2L, uintptr(@unsafe.Pointer(jobAttr)), uintptr(@unsafe.Pointer(name)), 0L);
            handle = Handle(r0);
            if (handle == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error AssignProcessToJobObject(Handle job, Handle process)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procAssignProcessToJobObject.Addr(), 2L, uintptr(job), uintptr(process), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error TerminateJobObject(Handle job, uint exitCode)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procTerminateJobObject.Addr(), 2L, uintptr(job), uintptr(exitCode), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static uint SetErrorMode(uint mode)
        {
            uint ret = default;

            var (r0, _, _) = syscall.Syscall(procSetErrorMode.Addr(), 1L, uintptr(mode), 0L, 0L);
            ret = uint32(r0);
            return ;
        }

        public static (uint, error) ResumeThread(Handle thread)
        {
            uint ret = default;
            error err = default!;

            var (r0, _, e1) = syscall.Syscall(procResumeThread.Addr(), 1L, uintptr(thread), 0L, 0L);
            ret = uint32(r0);
            if (ret == 0xffffffffUL)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error SetPriorityClass(Handle process, uint priorityClass)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procSetPriorityClass.Addr(), 2L, uintptr(process), uintptr(priorityClass), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (uint, error) GetPriorityClass(Handle process)
        {
            uint ret = default;
            error err = default!;

            var (r0, _, e1) = syscall.Syscall(procGetPriorityClass.Addr(), 1L, uintptr(process), 0L, 0L);
            ret = uint32(r0);
            if (ret == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (long, error) SetInformationJobObject(Handle job, uint JobObjectInformationClass, System.UIntPtr JobObjectInformation, uint JobObjectInformationLength)
        {
            long ret = default;
            error err = default!;

            var (r0, _, e1) = syscall.Syscall6(procSetInformationJobObject.Addr(), 4L, uintptr(job), uintptr(JobObjectInformationClass), uintptr(JobObjectInformation), uintptr(JobObjectInformationLength), 0L, 0L);
            ret = int(r0);
            if (ret == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error GenerateConsoleCtrlEvent(uint ctrlEvent, uint processGroupID)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procGenerateConsoleCtrlEvent.Addr(), 2L, uintptr(ctrlEvent), uintptr(processGroupID), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (uint, error) GetProcessId(Handle process)
        {
            uint id = default;
            error err = default!;

            var (r0, _, e1) = syscall.Syscall(procGetProcessId.Addr(), 1L, uintptr(process), 0L, 0L);
            id = uint32(r0);
            if (id == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (Handle, error) OpenThread(uint desiredAccess, bool inheritHandle, uint threadId)
        {
            Handle handle = default;
            error err = default!;

            uint _p0 = default;
            if (inheritHandle)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            var (r0, _, e1) = syscall.Syscall(procOpenThread.Addr(), 3L, uintptr(desiredAccess), uintptr(_p0), uintptr(threadId));
            handle = Handle(r0);
            if (handle == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error SetProcessPriorityBoost(Handle process, bool disable)
        {
            error err = default!;

            uint _p0 = default;
            if (disable)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            var (r1, _, e1) = syscall.Syscall(procSetProcessPriorityBoost.Addr(), 2L, uintptr(process), uintptr(_p0), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error DefineDosDevice(uint flags, ptr<ushort> _addr_deviceName, ptr<ushort> _addr_targetPath)
        {
            error err = default!;
            ref ushort deviceName = ref _addr_deviceName.val;
            ref ushort targetPath = ref _addr_targetPath.val;

            var (r1, _, e1) = syscall.Syscall(procDefineDosDeviceW.Addr(), 3L, uintptr(flags), uintptr(@unsafe.Pointer(deviceName)), uintptr(@unsafe.Pointer(targetPath)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error DeleteVolumeMountPoint(ptr<ushort> _addr_volumeMountPoint)
        {
            error err = default!;
            ref ushort volumeMountPoint = ref _addr_volumeMountPoint.val;

            var (r1, _, e1) = syscall.Syscall(procDeleteVolumeMountPointW.Addr(), 1L, uintptr(@unsafe.Pointer(volumeMountPoint)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (Handle, error) FindFirstVolume(ptr<ushort> _addr_volumeName, uint bufferLength)
        {
            Handle handle = default;
            error err = default!;
            ref ushort volumeName = ref _addr_volumeName.val;

            var (r0, _, e1) = syscall.Syscall(procFindFirstVolumeW.Addr(), 2L, uintptr(@unsafe.Pointer(volumeName)), uintptr(bufferLength), 0L);
            handle = Handle(r0);
            if (handle == InvalidHandle)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (Handle, error) FindFirstVolumeMountPoint(ptr<ushort> _addr_rootPathName, ptr<ushort> _addr_volumeMountPoint, uint bufferLength)
        {
            Handle handle = default;
            error err = default!;
            ref ushort rootPathName = ref _addr_rootPathName.val;
            ref ushort volumeMountPoint = ref _addr_volumeMountPoint.val;

            var (r0, _, e1) = syscall.Syscall(procFindFirstVolumeMountPointW.Addr(), 3L, uintptr(@unsafe.Pointer(rootPathName)), uintptr(@unsafe.Pointer(volumeMountPoint)), uintptr(bufferLength));
            handle = Handle(r0);
            if (handle == InvalidHandle)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error FindNextVolume(Handle findVolume, ptr<ushort> _addr_volumeName, uint bufferLength)
        {
            error err = default!;
            ref ushort volumeName = ref _addr_volumeName.val;

            var (r1, _, e1) = syscall.Syscall(procFindNextVolumeW.Addr(), 3L, uintptr(findVolume), uintptr(@unsafe.Pointer(volumeName)), uintptr(bufferLength));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error FindNextVolumeMountPoint(Handle findVolumeMountPoint, ptr<ushort> _addr_volumeMountPoint, uint bufferLength)
        {
            error err = default!;
            ref ushort volumeMountPoint = ref _addr_volumeMountPoint.val;

            var (r1, _, e1) = syscall.Syscall(procFindNextVolumeMountPointW.Addr(), 3L, uintptr(findVolumeMountPoint), uintptr(@unsafe.Pointer(volumeMountPoint)), uintptr(bufferLength));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error FindVolumeClose(Handle findVolume)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procFindVolumeClose.Addr(), 1L, uintptr(findVolume), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error FindVolumeMountPointClose(Handle findVolumeMountPoint)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procFindVolumeMountPointClose.Addr(), 1L, uintptr(findVolumeMountPoint), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error GetDiskFreeSpaceEx(ptr<ushort> _addr_directoryName, ptr<ulong> _addr_freeBytesAvailableToCaller, ptr<ulong> _addr_totalNumberOfBytes, ptr<ulong> _addr_totalNumberOfFreeBytes)
        {
            error err = default!;
            ref ushort directoryName = ref _addr_directoryName.val;
            ref ulong freeBytesAvailableToCaller = ref _addr_freeBytesAvailableToCaller.val;
            ref ulong totalNumberOfBytes = ref _addr_totalNumberOfBytes.val;
            ref ulong totalNumberOfFreeBytes = ref _addr_totalNumberOfFreeBytes.val;

            var (r1, _, e1) = syscall.Syscall6(procGetDiskFreeSpaceExW.Addr(), 4L, uintptr(@unsafe.Pointer(directoryName)), uintptr(@unsafe.Pointer(freeBytesAvailableToCaller)), uintptr(@unsafe.Pointer(totalNumberOfBytes)), uintptr(@unsafe.Pointer(totalNumberOfFreeBytes)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static uint GetDriveType(ptr<ushort> _addr_rootPathName)
        {
            uint driveType = default;
            ref ushort rootPathName = ref _addr_rootPathName.val;

            var (r0, _, _) = syscall.Syscall(procGetDriveTypeW.Addr(), 1L, uintptr(@unsafe.Pointer(rootPathName)), 0L, 0L);
            driveType = uint32(r0);
            return ;
        }

        public static (uint, error) GetLogicalDrives()
        {
            uint drivesBitMask = default;
            error err = default!;

            var (r0, _, e1) = syscall.Syscall(procGetLogicalDrives.Addr(), 0L, 0L, 0L, 0L);
            drivesBitMask = uint32(r0);
            if (drivesBitMask == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (uint, error) GetLogicalDriveStrings(uint bufferLength, ptr<ushort> _addr_buffer)
        {
            uint n = default;
            error err = default!;
            ref ushort buffer = ref _addr_buffer.val;

            var (r0, _, e1) = syscall.Syscall(procGetLogicalDriveStringsW.Addr(), 2L, uintptr(bufferLength), uintptr(@unsafe.Pointer(buffer)), 0L);
            n = uint32(r0);
            if (n == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error GetVolumeInformation(ptr<ushort> _addr_rootPathName, ptr<ushort> _addr_volumeNameBuffer, uint volumeNameSize, ptr<uint> _addr_volumeNameSerialNumber, ptr<uint> _addr_maximumComponentLength, ptr<uint> _addr_fileSystemFlags, ptr<ushort> _addr_fileSystemNameBuffer, uint fileSystemNameSize)
        {
            error err = default!;
            ref ushort rootPathName = ref _addr_rootPathName.val;
            ref ushort volumeNameBuffer = ref _addr_volumeNameBuffer.val;
            ref uint volumeNameSerialNumber = ref _addr_volumeNameSerialNumber.val;
            ref uint maximumComponentLength = ref _addr_maximumComponentLength.val;
            ref uint fileSystemFlags = ref _addr_fileSystemFlags.val;
            ref ushort fileSystemNameBuffer = ref _addr_fileSystemNameBuffer.val;

            var (r1, _, e1) = syscall.Syscall9(procGetVolumeInformationW.Addr(), 8L, uintptr(@unsafe.Pointer(rootPathName)), uintptr(@unsafe.Pointer(volumeNameBuffer)), uintptr(volumeNameSize), uintptr(@unsafe.Pointer(volumeNameSerialNumber)), uintptr(@unsafe.Pointer(maximumComponentLength)), uintptr(@unsafe.Pointer(fileSystemFlags)), uintptr(@unsafe.Pointer(fileSystemNameBuffer)), uintptr(fileSystemNameSize), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error GetVolumeInformationByHandle(Handle file, ptr<ushort> _addr_volumeNameBuffer, uint volumeNameSize, ptr<uint> _addr_volumeNameSerialNumber, ptr<uint> _addr_maximumComponentLength, ptr<uint> _addr_fileSystemFlags, ptr<ushort> _addr_fileSystemNameBuffer, uint fileSystemNameSize)
        {
            error err = default!;
            ref ushort volumeNameBuffer = ref _addr_volumeNameBuffer.val;
            ref uint volumeNameSerialNumber = ref _addr_volumeNameSerialNumber.val;
            ref uint maximumComponentLength = ref _addr_maximumComponentLength.val;
            ref uint fileSystemFlags = ref _addr_fileSystemFlags.val;
            ref ushort fileSystemNameBuffer = ref _addr_fileSystemNameBuffer.val;

            var (r1, _, e1) = syscall.Syscall9(procGetVolumeInformationByHandleW.Addr(), 8L, uintptr(file), uintptr(@unsafe.Pointer(volumeNameBuffer)), uintptr(volumeNameSize), uintptr(@unsafe.Pointer(volumeNameSerialNumber)), uintptr(@unsafe.Pointer(maximumComponentLength)), uintptr(@unsafe.Pointer(fileSystemFlags)), uintptr(@unsafe.Pointer(fileSystemNameBuffer)), uintptr(fileSystemNameSize), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error GetVolumeNameForVolumeMountPoint(ptr<ushort> _addr_volumeMountPoint, ptr<ushort> _addr_volumeName, uint bufferlength)
        {
            error err = default!;
            ref ushort volumeMountPoint = ref _addr_volumeMountPoint.val;
            ref ushort volumeName = ref _addr_volumeName.val;

            var (r1, _, e1) = syscall.Syscall(procGetVolumeNameForVolumeMountPointW.Addr(), 3L, uintptr(@unsafe.Pointer(volumeMountPoint)), uintptr(@unsafe.Pointer(volumeName)), uintptr(bufferlength));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error GetVolumePathName(ptr<ushort> _addr_fileName, ptr<ushort> _addr_volumePathName, uint bufferLength)
        {
            error err = default!;
            ref ushort fileName = ref _addr_fileName.val;
            ref ushort volumePathName = ref _addr_volumePathName.val;

            var (r1, _, e1) = syscall.Syscall(procGetVolumePathNameW.Addr(), 3L, uintptr(@unsafe.Pointer(fileName)), uintptr(@unsafe.Pointer(volumePathName)), uintptr(bufferLength));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error GetVolumePathNamesForVolumeName(ptr<ushort> _addr_volumeName, ptr<ushort> _addr_volumePathNames, uint bufferLength, ptr<uint> _addr_returnLength)
        {
            error err = default!;
            ref ushort volumeName = ref _addr_volumeName.val;
            ref ushort volumePathNames = ref _addr_volumePathNames.val;
            ref uint returnLength = ref _addr_returnLength.val;

            var (r1, _, e1) = syscall.Syscall6(procGetVolumePathNamesForVolumeNameW.Addr(), 4L, uintptr(@unsafe.Pointer(volumeName)), uintptr(@unsafe.Pointer(volumePathNames)), uintptr(bufferLength), uintptr(@unsafe.Pointer(returnLength)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (uint, error) QueryDosDevice(ptr<ushort> _addr_deviceName, ptr<ushort> _addr_targetPath, uint max)
        {
            uint n = default;
            error err = default!;
            ref ushort deviceName = ref _addr_deviceName.val;
            ref ushort targetPath = ref _addr_targetPath.val;

            var (r0, _, e1) = syscall.Syscall(procQueryDosDeviceW.Addr(), 3L, uintptr(@unsafe.Pointer(deviceName)), uintptr(@unsafe.Pointer(targetPath)), uintptr(max));
            n = uint32(r0);
            if (n == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error SetVolumeLabel(ptr<ushort> _addr_rootPathName, ptr<ushort> _addr_volumeName)
        {
            error err = default!;
            ref ushort rootPathName = ref _addr_rootPathName.val;
            ref ushort volumeName = ref _addr_volumeName.val;

            var (r1, _, e1) = syscall.Syscall(procSetVolumeLabelW.Addr(), 2L, uintptr(@unsafe.Pointer(rootPathName)), uintptr(@unsafe.Pointer(volumeName)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error SetVolumeMountPoint(ptr<ushort> _addr_volumeMountPoint, ptr<ushort> _addr_volumeName)
        {
            error err = default!;
            ref ushort volumeMountPoint = ref _addr_volumeMountPoint.val;
            ref ushort volumeName = ref _addr_volumeName.val;

            var (r1, _, e1) = syscall.Syscall(procSetVolumeMountPointW.Addr(), 2L, uintptr(@unsafe.Pointer(volumeMountPoint)), uintptr(@unsafe.Pointer(volumeName)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (int, error) MessageBox(Handle hwnd, ptr<ushort> _addr_text, ptr<ushort> _addr_caption, uint boxtype)
        {
            int ret = default;
            error err = default!;
            ref ushort text = ref _addr_text.val;
            ref ushort caption = ref _addr_caption.val;

            var (r0, _, e1) = syscall.Syscall6(procMessageBoxW.Addr(), 4L, uintptr(hwnd), uintptr(@unsafe.Pointer(text)), uintptr(@unsafe.Pointer(caption)), uintptr(boxtype), 0L, 0L);
            ret = int32(r0);
            if (ret == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error ExitWindowsEx(uint flags, uint reason)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procExitWindowsEx.Addr(), 2L, uintptr(flags), uintptr(reason), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error InitiateSystemShutdownEx(ptr<ushort> _addr_machineName, ptr<ushort> _addr_message, uint timeout, bool forceAppsClosed, bool rebootAfterShutdown, uint reason)
        {
            error err = default!;
            ref ushort machineName = ref _addr_machineName.val;
            ref ushort message = ref _addr_message.val;

            uint _p0 = default;
            if (forceAppsClosed)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            uint _p1 = default;
            if (rebootAfterShutdown)
            {
                _p1 = 1L;
            }
            else
            {
                _p1 = 0L;
            }

            var (r1, _, e1) = syscall.Syscall6(procInitiateSystemShutdownExW.Addr(), 6L, uintptr(@unsafe.Pointer(machineName)), uintptr(@unsafe.Pointer(message)), uintptr(timeout), uintptr(_p0), uintptr(_p1), uintptr(reason));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error SetProcessShutdownParameters(uint level, uint flags)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procSetProcessShutdownParameters.Addr(), 2L, uintptr(level), uintptr(flags), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error GetProcessShutdownParameters(ptr<uint> _addr_level, ptr<uint> _addr_flags)
        {
            error err = default!;
            ref uint level = ref _addr_level.val;
            ref uint flags = ref _addr_flags.val;

            var (r1, _, e1) = syscall.Syscall(procGetProcessShutdownParameters.Addr(), 2L, uintptr(@unsafe.Pointer(level)), uintptr(@unsafe.Pointer(flags)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error clsidFromString(ptr<ushort> _addr_lpsz, ptr<GUID> _addr_pclsid)
        {
            error ret = default!;
            ref ushort lpsz = ref _addr_lpsz.val;
            ref GUID pclsid = ref _addr_pclsid.val;

            var (r0, _, _) = syscall.Syscall(procCLSIDFromString.Addr(), 2L, uintptr(@unsafe.Pointer(lpsz)), uintptr(@unsafe.Pointer(pclsid)), 0L);
            if (r0 != 0L)
            {
                ret = syscall.Errno(r0);
            }

            return ;

        }

        private static int stringFromGUID2(ptr<GUID> _addr_rguid, ptr<ushort> _addr_lpsz, int cchMax)
        {
            int chars = default;
            ref GUID rguid = ref _addr_rguid.val;
            ref ushort lpsz = ref _addr_lpsz.val;

            var (r0, _, _) = syscall.Syscall(procStringFromGUID2.Addr(), 3L, uintptr(@unsafe.Pointer(rguid)), uintptr(@unsafe.Pointer(lpsz)), uintptr(cchMax));
            chars = int32(r0);
            return ;
        }

        private static error coCreateGuid(ptr<GUID> _addr_pguid)
        {
            error ret = default!;
            ref GUID pguid = ref _addr_pguid.val;

            var (r0, _, _) = syscall.Syscall(procCoCreateGuid.Addr(), 1L, uintptr(@unsafe.Pointer(pguid)), 0L, 0L);
            if (r0 != 0L)
            {
                ret = syscall.Errno(r0);
            }

            return ;

        }

        public static void CoTaskMemFree(unsafe.Pointer address)
        {
            syscall.Syscall(procCoTaskMemFree.Addr(), 1L, uintptr(address), 0L, 0L);
            return ;
        }

        private static error rtlGetVersion(ptr<OsVersionInfoEx> _addr_info)
        {
            error ret = default!;
            ref OsVersionInfoEx info = ref _addr_info.val;

            var (r0, _, _) = syscall.Syscall(procRtlGetVersion.Addr(), 1L, uintptr(@unsafe.Pointer(info)), 0L, 0L);
            if (r0 != 0L)
            {
                ret = syscall.Errno(r0);
            }

            return ;

        }

        private static void rtlGetNtVersionNumbers(ptr<uint> _addr_majorVersion, ptr<uint> _addr_minorVersion, ptr<uint> _addr_buildNumber)
        {
            ref uint majorVersion = ref _addr_majorVersion.val;
            ref uint minorVersion = ref _addr_minorVersion.val;
            ref uint buildNumber = ref _addr_buildNumber.val;

            syscall.Syscall(procRtlGetNtVersionNumbers.Addr(), 3L, uintptr(@unsafe.Pointer(majorVersion)), uintptr(@unsafe.Pointer(minorVersion)), uintptr(@unsafe.Pointer(buildNumber)));
            return ;
        }

        private static error getProcessPreferredUILanguages(uint flags, ptr<uint> _addr_numLanguages, ptr<ushort> _addr_buf, ptr<uint> _addr_bufSize)
        {
            error err = default!;
            ref uint numLanguages = ref _addr_numLanguages.val;
            ref ushort buf = ref _addr_buf.val;
            ref uint bufSize = ref _addr_bufSize.val;

            var (r1, _, e1) = syscall.Syscall6(procGetProcessPreferredUILanguages.Addr(), 4L, uintptr(flags), uintptr(@unsafe.Pointer(numLanguages)), uintptr(@unsafe.Pointer(buf)), uintptr(@unsafe.Pointer(bufSize)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error getThreadPreferredUILanguages(uint flags, ptr<uint> _addr_numLanguages, ptr<ushort> _addr_buf, ptr<uint> _addr_bufSize)
        {
            error err = default!;
            ref uint numLanguages = ref _addr_numLanguages.val;
            ref ushort buf = ref _addr_buf.val;
            ref uint bufSize = ref _addr_bufSize.val;

            var (r1, _, e1) = syscall.Syscall6(procGetThreadPreferredUILanguages.Addr(), 4L, uintptr(flags), uintptr(@unsafe.Pointer(numLanguages)), uintptr(@unsafe.Pointer(buf)), uintptr(@unsafe.Pointer(bufSize)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error getUserPreferredUILanguages(uint flags, ptr<uint> _addr_numLanguages, ptr<ushort> _addr_buf, ptr<uint> _addr_bufSize)
        {
            error err = default!;
            ref uint numLanguages = ref _addr_numLanguages.val;
            ref ushort buf = ref _addr_buf.val;
            ref uint bufSize = ref _addr_bufSize.val;

            var (r1, _, e1) = syscall.Syscall6(procGetUserPreferredUILanguages.Addr(), 4L, uintptr(flags), uintptr(@unsafe.Pointer(numLanguages)), uintptr(@unsafe.Pointer(buf)), uintptr(@unsafe.Pointer(bufSize)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error getSystemPreferredUILanguages(uint flags, ptr<uint> _addr_numLanguages, ptr<ushort> _addr_buf, ptr<uint> _addr_bufSize)
        {
            error err = default!;
            ref uint numLanguages = ref _addr_numLanguages.val;
            ref ushort buf = ref _addr_buf.val;
            ref uint bufSize = ref _addr_bufSize.val;

            var (r1, _, e1) = syscall.Syscall6(procGetSystemPreferredUILanguages.Addr(), 4L, uintptr(flags), uintptr(@unsafe.Pointer(numLanguages)), uintptr(@unsafe.Pointer(buf)), uintptr(@unsafe.Pointer(bufSize)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error EnumProcesses(slice<uint> processIds, ptr<uint> _addr_bytesReturned)
        {
            error err = default!;
            ref uint bytesReturned = ref _addr_bytesReturned.val;

            ptr<uint> _p0;
            if (len(processIds) > 0L)
            {
                _p0 = _addr_processIds[0L];
            }

            var (r1, _, e1) = syscall.Syscall(procEnumProcesses.Addr(), 3L, uintptr(@unsafe.Pointer(_p0)), uintptr(len(processIds)), uintptr(@unsafe.Pointer(bytesReturned)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error WSAStartup(uint verreq, ptr<WSAData> _addr_data)
        {
            error sockerr = default!;
            ref WSAData data = ref _addr_data.val;

            var (r0, _, _) = syscall.Syscall(procWSAStartup.Addr(), 2L, uintptr(verreq), uintptr(@unsafe.Pointer(data)), 0L);
            if (r0 != 0L)
            {
                sockerr = syscall.Errno(r0);
            }

            return ;

        }

        public static error WSACleanup()
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procWSACleanup.Addr(), 0L, 0L, 0L, 0L);
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error WSAIoctl(Handle s, uint iocc, ptr<byte> _addr_inbuf, uint cbif, ptr<byte> _addr_outbuf, uint cbob, ptr<uint> _addr_cbbr, ptr<Overlapped> _addr_overlapped, System.UIntPtr completionRoutine)
        {
            error err = default!;
            ref byte inbuf = ref _addr_inbuf.val;
            ref byte outbuf = ref _addr_outbuf.val;
            ref uint cbbr = ref _addr_cbbr.val;
            ref Overlapped overlapped = ref _addr_overlapped.val;

            var (r1, _, e1) = syscall.Syscall9(procWSAIoctl.Addr(), 9L, uintptr(s), uintptr(iocc), uintptr(@unsafe.Pointer(inbuf)), uintptr(cbif), uintptr(@unsafe.Pointer(outbuf)), uintptr(cbob), uintptr(@unsafe.Pointer(cbbr)), uintptr(@unsafe.Pointer(overlapped)), uintptr(completionRoutine));
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static (Handle, error) socket(int af, int typ, int protocol)
        {
            Handle handle = default;
            error err = default!;

            var (r0, _, e1) = syscall.Syscall(procsocket.Addr(), 3L, uintptr(af), uintptr(typ), uintptr(protocol));
            handle = Handle(r0);
            if (handle == InvalidHandle)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error sendto(Handle s, slice<byte> buf, int flags, unsafe.Pointer to, int tolen)
        {
            error err = default!;

            ptr<byte> _p0;
            if (len(buf) > 0L)
            {
                _p0 = _addr_buf[0L];
            }

            var (r1, _, e1) = syscall.Syscall6(procsendto.Addr(), 6L, uintptr(s), uintptr(@unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(flags), uintptr(to), uintptr(tolen));
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static (int, error) recvfrom(Handle s, slice<byte> buf, int flags, ptr<RawSockaddrAny> _addr_from, ptr<int> _addr_fromlen)
        {
            int n = default;
            error err = default!;
            ref RawSockaddrAny from = ref _addr_from.val;
            ref int fromlen = ref _addr_fromlen.val;

            ptr<byte> _p0;
            if (len(buf) > 0L)
            {
                _p0 = _addr_buf[0L];
            }

            var (r0, _, e1) = syscall.Syscall6(procrecvfrom.Addr(), 6L, uintptr(s), uintptr(@unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(flags), uintptr(@unsafe.Pointer(from)), uintptr(@unsafe.Pointer(fromlen)));
            n = int32(r0);
            if (n == -1L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error Setsockopt(Handle s, int level, int optname, ptr<byte> _addr_optval, int optlen)
        {
            error err = default!;
            ref byte optval = ref _addr_optval.val;

            var (r1, _, e1) = syscall.Syscall6(procsetsockopt.Addr(), 5L, uintptr(s), uintptr(level), uintptr(optname), uintptr(@unsafe.Pointer(optval)), uintptr(optlen), 0L);
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error Getsockopt(Handle s, int level, int optname, ptr<byte> _addr_optval, ptr<int> _addr_optlen)
        {
            error err = default!;
            ref byte optval = ref _addr_optval.val;
            ref int optlen = ref _addr_optlen.val;

            var (r1, _, e1) = syscall.Syscall6(procgetsockopt.Addr(), 5L, uintptr(s), uintptr(level), uintptr(optname), uintptr(@unsafe.Pointer(optval)), uintptr(@unsafe.Pointer(optlen)), 0L);
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error bind(Handle s, unsafe.Pointer name, int namelen)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procbind.Addr(), 3L, uintptr(s), uintptr(name), uintptr(namelen));
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error connect(Handle s, unsafe.Pointer name, int namelen)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procconnect.Addr(), 3L, uintptr(s), uintptr(name), uintptr(namelen));
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error getsockname(Handle s, ptr<RawSockaddrAny> _addr_rsa, ptr<int> _addr_addrlen)
        {
            error err = default!;
            ref RawSockaddrAny rsa = ref _addr_rsa.val;
            ref int addrlen = ref _addr_addrlen.val;

            var (r1, _, e1) = syscall.Syscall(procgetsockname.Addr(), 3L, uintptr(s), uintptr(@unsafe.Pointer(rsa)), uintptr(@unsafe.Pointer(addrlen)));
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error getpeername(Handle s, ptr<RawSockaddrAny> _addr_rsa, ptr<int> _addr_addrlen)
        {
            error err = default!;
            ref RawSockaddrAny rsa = ref _addr_rsa.val;
            ref int addrlen = ref _addr_addrlen.val;

            var (r1, _, e1) = syscall.Syscall(procgetpeername.Addr(), 3L, uintptr(s), uintptr(@unsafe.Pointer(rsa)), uintptr(@unsafe.Pointer(addrlen)));
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error listen(Handle s, int backlog)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(proclisten.Addr(), 2L, uintptr(s), uintptr(backlog), 0L);
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error shutdown(Handle s, int how)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procshutdown.Addr(), 2L, uintptr(s), uintptr(how), 0L);
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error Closesocket(Handle s)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procclosesocket.Addr(), 1L, uintptr(s), 0L, 0L);
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error AcceptEx(Handle ls, Handle @as, ptr<byte> _addr_buf, uint rxdatalen, uint laddrlen, uint raddrlen, ptr<uint> _addr_recvd, ptr<Overlapped> _addr_overlapped)
        {
            error err = default!;
            ref byte buf = ref _addr_buf.val;
            ref uint recvd = ref _addr_recvd.val;
            ref Overlapped overlapped = ref _addr_overlapped.val;

            var (r1, _, e1) = syscall.Syscall9(procAcceptEx.Addr(), 8L, uintptr(ls), uintptr(as), uintptr(@unsafe.Pointer(buf)), uintptr(rxdatalen), uintptr(laddrlen), uintptr(raddrlen), uintptr(@unsafe.Pointer(recvd)), uintptr(@unsafe.Pointer(overlapped)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static void GetAcceptExSockaddrs(ptr<byte> _addr_buf, uint rxdatalen, uint laddrlen, uint raddrlen, ptr<ptr<RawSockaddrAny>> _addr_lrsa, ptr<int> _addr_lrsalen, ptr<ptr<RawSockaddrAny>> _addr_rrsa, ptr<int> _addr_rrsalen)
        {
            ref byte buf = ref _addr_buf.val;
            ref ptr<RawSockaddrAny> lrsa = ref _addr_lrsa.val;
            ref int lrsalen = ref _addr_lrsalen.val;
            ref ptr<RawSockaddrAny> rrsa = ref _addr_rrsa.val;
            ref int rrsalen = ref _addr_rrsalen.val;

            syscall.Syscall9(procGetAcceptExSockaddrs.Addr(), 8L, uintptr(@unsafe.Pointer(buf)), uintptr(rxdatalen), uintptr(laddrlen), uintptr(raddrlen), uintptr(@unsafe.Pointer(lrsa)), uintptr(@unsafe.Pointer(lrsalen)), uintptr(@unsafe.Pointer(rrsa)), uintptr(@unsafe.Pointer(rrsalen)), 0L);
            return ;
        }

        public static error WSARecv(Handle s, ptr<WSABuf> _addr_bufs, uint bufcnt, ptr<uint> _addr_recvd, ptr<uint> _addr_flags, ptr<Overlapped> _addr_overlapped, ptr<byte> _addr_croutine)
        {
            error err = default!;
            ref WSABuf bufs = ref _addr_bufs.val;
            ref uint recvd = ref _addr_recvd.val;
            ref uint flags = ref _addr_flags.val;
            ref Overlapped overlapped = ref _addr_overlapped.val;
            ref byte croutine = ref _addr_croutine.val;

            var (r1, _, e1) = syscall.Syscall9(procWSARecv.Addr(), 7L, uintptr(s), uintptr(@unsafe.Pointer(bufs)), uintptr(bufcnt), uintptr(@unsafe.Pointer(recvd)), uintptr(@unsafe.Pointer(flags)), uintptr(@unsafe.Pointer(overlapped)), uintptr(@unsafe.Pointer(croutine)), 0L, 0L);
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error WSASend(Handle s, ptr<WSABuf> _addr_bufs, uint bufcnt, ptr<uint> _addr_sent, uint flags, ptr<Overlapped> _addr_overlapped, ptr<byte> _addr_croutine)
        {
            error err = default!;
            ref WSABuf bufs = ref _addr_bufs.val;
            ref uint sent = ref _addr_sent.val;
            ref Overlapped overlapped = ref _addr_overlapped.val;
            ref byte croutine = ref _addr_croutine.val;

            var (r1, _, e1) = syscall.Syscall9(procWSASend.Addr(), 7L, uintptr(s), uintptr(@unsafe.Pointer(bufs)), uintptr(bufcnt), uintptr(@unsafe.Pointer(sent)), uintptr(flags), uintptr(@unsafe.Pointer(overlapped)), uintptr(@unsafe.Pointer(croutine)), 0L, 0L);
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error WSARecvFrom(Handle s, ptr<WSABuf> _addr_bufs, uint bufcnt, ptr<uint> _addr_recvd, ptr<uint> _addr_flags, ptr<RawSockaddrAny> _addr_from, ptr<int> _addr_fromlen, ptr<Overlapped> _addr_overlapped, ptr<byte> _addr_croutine)
        {
            error err = default!;
            ref WSABuf bufs = ref _addr_bufs.val;
            ref uint recvd = ref _addr_recvd.val;
            ref uint flags = ref _addr_flags.val;
            ref RawSockaddrAny from = ref _addr_from.val;
            ref int fromlen = ref _addr_fromlen.val;
            ref Overlapped overlapped = ref _addr_overlapped.val;
            ref byte croutine = ref _addr_croutine.val;

            var (r1, _, e1) = syscall.Syscall9(procWSARecvFrom.Addr(), 9L, uintptr(s), uintptr(@unsafe.Pointer(bufs)), uintptr(bufcnt), uintptr(@unsafe.Pointer(recvd)), uintptr(@unsafe.Pointer(flags)), uintptr(@unsafe.Pointer(from)), uintptr(@unsafe.Pointer(fromlen)), uintptr(@unsafe.Pointer(overlapped)), uintptr(@unsafe.Pointer(croutine)));
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error WSASendTo(Handle s, ptr<WSABuf> _addr_bufs, uint bufcnt, ptr<uint> _addr_sent, uint flags, ptr<RawSockaddrAny> _addr_to, int tolen, ptr<Overlapped> _addr_overlapped, ptr<byte> _addr_croutine)
        {
            error err = default!;
            ref WSABuf bufs = ref _addr_bufs.val;
            ref uint sent = ref _addr_sent.val;
            ref RawSockaddrAny to = ref _addr_to.val;
            ref Overlapped overlapped = ref _addr_overlapped.val;
            ref byte croutine = ref _addr_croutine.val;

            var (r1, _, e1) = syscall.Syscall9(procWSASendTo.Addr(), 9L, uintptr(s), uintptr(@unsafe.Pointer(bufs)), uintptr(bufcnt), uintptr(@unsafe.Pointer(sent)), uintptr(flags), uintptr(@unsafe.Pointer(to)), uintptr(tolen), uintptr(@unsafe.Pointer(overlapped)), uintptr(@unsafe.Pointer(croutine)));
            if (r1 == socket_error)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (ptr<Hostent>, error) GetHostByName(@string name)
        {
            ptr<Hostent> h = default!;
            error err = default!;

            ptr<byte> _p0;
            _p0, err = syscall.BytePtrFromString(name);
            if (err != null)
            {
                return ;
            }

            return _addr__GetHostByName(_p0)!;

        }

        private static (ptr<Hostent>, error) _GetHostByName(ptr<byte> _addr_name)
        {
            ptr<Hostent> h = default!;
            error err = default!;
            ref byte name = ref _addr_name.val;

            var (r0, _, e1) = syscall.Syscall(procgethostbyname.Addr(), 1L, uintptr(@unsafe.Pointer(name)), 0L, 0L);
            h = (Hostent.val)(@unsafe.Pointer(r0));
            if (h == null)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (ptr<Servent>, error) GetServByName(@string name, @string proto)
        {
            ptr<Servent> s = default!;
            error err = default!;

            ptr<byte> _p0;
            _p0, err = syscall.BytePtrFromString(name);
            if (err != null)
            {
                return ;
            }

            ptr<byte> _p1;
            _p1, err = syscall.BytePtrFromString(proto);
            if (err != null)
            {
                return ;
            }

            return _addr__GetServByName(_p0, _p1)!;

        }

        private static (ptr<Servent>, error) _GetServByName(ptr<byte> _addr_name, ptr<byte> _addr_proto)
        {
            ptr<Servent> s = default!;
            error err = default!;
            ref byte name = ref _addr_name.val;
            ref byte proto = ref _addr_proto.val;

            var (r0, _, e1) = syscall.Syscall(procgetservbyname.Addr(), 2L, uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(proto)), 0L);
            s = (Servent.val)(@unsafe.Pointer(r0));
            if (s == null)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static ushort Ntohs(ushort netshort)
        {
            ushort u = default;

            var (r0, _, _) = syscall.Syscall(procntohs.Addr(), 1L, uintptr(netshort), 0L, 0L);
            u = uint16(r0);
            return ;
        }

        public static (ptr<Protoent>, error) GetProtoByName(@string name)
        {
            ptr<Protoent> p = default!;
            error err = default!;

            ptr<byte> _p0;
            _p0, err = syscall.BytePtrFromString(name);
            if (err != null)
            {
                return ;
            }

            return _addr__GetProtoByName(_p0)!;

        }

        private static (ptr<Protoent>, error) _GetProtoByName(ptr<byte> _addr_name)
        {
            ptr<Protoent> p = default!;
            error err = default!;
            ref byte name = ref _addr_name.val;

            var (r0, _, e1) = syscall.Syscall(procgetprotobyname.Addr(), 1L, uintptr(@unsafe.Pointer(name)), 0L, 0L);
            p = (Protoent.val)(@unsafe.Pointer(r0));
            if (p == null)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error DnsQuery(@string name, ushort qtype, uint options, ptr<byte> _addr_extra, ptr<ptr<DNSRecord>> _addr_qrs, ptr<byte> _addr_pr)
        {
            error status = default!;
            ref byte extra = ref _addr_extra.val;
            ref ptr<DNSRecord> qrs = ref _addr_qrs.val;
            ref byte pr = ref _addr_pr.val;

            ptr<ushort> _p0;
            _p0, status = syscall.UTF16PtrFromString(name);
            if (status != null)
            {
                return ;
            }

            return error.As(_DnsQuery(_p0, qtype, options, _addr_extra, _addr_qrs, _addr_pr))!;

        }

        private static error _DnsQuery(ptr<ushort> _addr_name, ushort qtype, uint options, ptr<byte> _addr_extra, ptr<ptr<DNSRecord>> _addr_qrs, ptr<byte> _addr_pr)
        {
            error status = default!;
            ref ushort name = ref _addr_name.val;
            ref byte extra = ref _addr_extra.val;
            ref ptr<DNSRecord> qrs = ref _addr_qrs.val;
            ref byte pr = ref _addr_pr.val;

            var (r0, _, _) = syscall.Syscall6(procDnsQuery_W.Addr(), 6L, uintptr(@unsafe.Pointer(name)), uintptr(qtype), uintptr(options), uintptr(@unsafe.Pointer(extra)), uintptr(@unsafe.Pointer(qrs)), uintptr(@unsafe.Pointer(pr)));
            if (r0 != 0L)
            {
                status = syscall.Errno(r0);
            }

            return ;

        }

        public static void DnsRecordListFree(ptr<DNSRecord> _addr_rl, uint freetype)
        {
            ref DNSRecord rl = ref _addr_rl.val;

            syscall.Syscall(procDnsRecordListFree.Addr(), 2L, uintptr(@unsafe.Pointer(rl)), uintptr(freetype), 0L);
            return ;
        }

        public static bool DnsNameCompare(ptr<ushort> _addr_name1, ptr<ushort> _addr_name2)
        {
            bool same = default;
            ref ushort name1 = ref _addr_name1.val;
            ref ushort name2 = ref _addr_name2.val;

            var (r0, _, _) = syscall.Syscall(procDnsNameCompare_W.Addr(), 2L, uintptr(@unsafe.Pointer(name1)), uintptr(@unsafe.Pointer(name2)), 0L);
            same = r0 != 0L;
            return ;
        }

        public static error GetAddrInfoW(ptr<ushort> _addr_nodename, ptr<ushort> _addr_servicename, ptr<AddrinfoW> _addr_hints, ptr<ptr<AddrinfoW>> _addr_result)
        {
            error sockerr = default!;
            ref ushort nodename = ref _addr_nodename.val;
            ref ushort servicename = ref _addr_servicename.val;
            ref AddrinfoW hints = ref _addr_hints.val;
            ref ptr<AddrinfoW> result = ref _addr_result.val;

            var (r0, _, _) = syscall.Syscall6(procGetAddrInfoW.Addr(), 4L, uintptr(@unsafe.Pointer(nodename)), uintptr(@unsafe.Pointer(servicename)), uintptr(@unsafe.Pointer(hints)), uintptr(@unsafe.Pointer(result)), 0L, 0L);
            if (r0 != 0L)
            {
                sockerr = syscall.Errno(r0);
            }

            return ;

        }

        public static void FreeAddrInfoW(ptr<AddrinfoW> _addr_addrinfo)
        {
            ref AddrinfoW addrinfo = ref _addr_addrinfo.val;

            syscall.Syscall(procFreeAddrInfoW.Addr(), 1L, uintptr(@unsafe.Pointer(addrinfo)), 0L, 0L);
            return ;
        }

        public static error GetIfEntry(ptr<MibIfRow> _addr_pIfRow)
        {
            error errcode = default!;
            ref MibIfRow pIfRow = ref _addr_pIfRow.val;

            var (r0, _, _) = syscall.Syscall(procGetIfEntry.Addr(), 1L, uintptr(@unsafe.Pointer(pIfRow)), 0L, 0L);
            if (r0 != 0L)
            {
                errcode = syscall.Errno(r0);
            }

            return ;

        }

        public static error GetAdaptersInfo(ptr<IpAdapterInfo> _addr_ai, ptr<uint> _addr_ol)
        {
            error errcode = default!;
            ref IpAdapterInfo ai = ref _addr_ai.val;
            ref uint ol = ref _addr_ol.val;

            var (r0, _, _) = syscall.Syscall(procGetAdaptersInfo.Addr(), 2L, uintptr(@unsafe.Pointer(ai)), uintptr(@unsafe.Pointer(ol)), 0L);
            if (r0 != 0L)
            {
                errcode = syscall.Errno(r0);
            }

            return ;

        }

        public static error SetFileCompletionNotificationModes(Handle handle, byte flags)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procSetFileCompletionNotificationModes.Addr(), 2L, uintptr(handle), uintptr(flags), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static (int, error) WSAEnumProtocols(ptr<int> _addr_protocols, ptr<WSAProtocolInfo> _addr_protocolBuffer, ptr<uint> _addr_bufferLength)
        {
            int n = default;
            error err = default!;
            ref int protocols = ref _addr_protocols.val;
            ref WSAProtocolInfo protocolBuffer = ref _addr_protocolBuffer.val;
            ref uint bufferLength = ref _addr_bufferLength.val;

            var (r0, _, e1) = syscall.Syscall(procWSAEnumProtocolsW.Addr(), 3L, uintptr(@unsafe.Pointer(protocols)), uintptr(@unsafe.Pointer(protocolBuffer)), uintptr(@unsafe.Pointer(bufferLength)));
            n = int32(r0);
            if (n == -1L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error GetAdaptersAddresses(uint family, uint flags, System.UIntPtr reserved, ptr<IpAdapterAddresses> _addr_adapterAddresses, ptr<uint> _addr_sizePointer)
        {
            error errcode = default!;
            ref IpAdapterAddresses adapterAddresses = ref _addr_adapterAddresses.val;
            ref uint sizePointer = ref _addr_sizePointer.val;

            var (r0, _, _) = syscall.Syscall6(procGetAdaptersAddresses.Addr(), 5L, uintptr(family), uintptr(flags), uintptr(reserved), uintptr(@unsafe.Pointer(adapterAddresses)), uintptr(@unsafe.Pointer(sizePointer)), 0L);
            if (r0 != 0L)
            {
                errcode = syscall.Errno(r0);
            }

            return ;

        }

        public static uint GetACP()
        {
            uint acp = default;

            var (r0, _, _) = syscall.Syscall(procGetACP.Addr(), 0L, 0L, 0L, 0L);
            acp = uint32(r0);
            return ;
        }

        public static (int, error) MultiByteToWideChar(uint codePage, uint dwFlags, ptr<byte> _addr_str, int nstr, ptr<ushort> _addr_wchar, int nwchar)
        {
            int nwrite = default;
            error err = default!;
            ref byte str = ref _addr_str.val;
            ref ushort wchar = ref _addr_wchar.val;

            var (r0, _, e1) = syscall.Syscall6(procMultiByteToWideChar.Addr(), 6L, uintptr(codePage), uintptr(dwFlags), uintptr(@unsafe.Pointer(str)), uintptr(nstr), uintptr(@unsafe.Pointer(wchar)), uintptr(nwchar));
            nwrite = int32(r0);
            if (nwrite == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error TranslateName(ptr<ushort> _addr_accName, uint accNameFormat, uint desiredNameFormat, ptr<ushort> _addr_translatedName, ptr<uint> _addr_nSize)
        {
            error err = default!;
            ref ushort accName = ref _addr_accName.val;
            ref ushort translatedName = ref _addr_translatedName.val;
            ref uint nSize = ref _addr_nSize.val;

            var (r1, _, e1) = syscall.Syscall6(procTranslateNameW.Addr(), 5L, uintptr(@unsafe.Pointer(accName)), uintptr(accNameFormat), uintptr(desiredNameFormat), uintptr(@unsafe.Pointer(translatedName)), uintptr(@unsafe.Pointer(nSize)), 0L);
            if (r1 & 0xffUL == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error GetUserNameEx(uint nameFormat, ptr<ushort> _addr_nameBuffre, ptr<uint> _addr_nSize)
        {
            error err = default!;
            ref ushort nameBuffre = ref _addr_nameBuffre.val;
            ref uint nSize = ref _addr_nSize.val;

            var (r1, _, e1) = syscall.Syscall(procGetUserNameExW.Addr(), 3L, uintptr(nameFormat), uintptr(@unsafe.Pointer(nameBuffre)), uintptr(@unsafe.Pointer(nSize)));
            if (r1 & 0xffUL == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error NetUserGetInfo(ptr<ushort> _addr_serverName, ptr<ushort> _addr_userName, uint level, ptr<ptr<byte>> _addr_buf)
        {
            error neterr = default!;
            ref ushort serverName = ref _addr_serverName.val;
            ref ushort userName = ref _addr_userName.val;
            ref ptr<byte> buf = ref _addr_buf.val;

            var (r0, _, _) = syscall.Syscall6(procNetUserGetInfo.Addr(), 4L, uintptr(@unsafe.Pointer(serverName)), uintptr(@unsafe.Pointer(userName)), uintptr(level), uintptr(@unsafe.Pointer(buf)), 0L, 0L);
            if (r0 != 0L)
            {
                neterr = syscall.Errno(r0);
            }

            return ;

        }

        public static error NetGetJoinInformation(ptr<ushort> _addr_server, ptr<ptr<ushort>> _addr_name, ptr<uint> _addr_bufType)
        {
            error neterr = default!;
            ref ushort server = ref _addr_server.val;
            ref ptr<ushort> name = ref _addr_name.val;
            ref uint bufType = ref _addr_bufType.val;

            var (r0, _, _) = syscall.Syscall(procNetGetJoinInformation.Addr(), 3L, uintptr(@unsafe.Pointer(server)), uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(bufType)));
            if (r0 != 0L)
            {
                neterr = syscall.Errno(r0);
            }

            return ;

        }

        public static error NetApiBufferFree(ptr<byte> _addr_buf)
        {
            error neterr = default!;
            ref byte buf = ref _addr_buf.val;

            var (r0, _, _) = syscall.Syscall(procNetApiBufferFree.Addr(), 1L, uintptr(@unsafe.Pointer(buf)), 0L, 0L);
            if (r0 != 0L)
            {
                neterr = syscall.Errno(r0);
            }

            return ;

        }

        public static error LookupAccountSid(ptr<ushort> _addr_systemName, ptr<SID> _addr_sid, ptr<ushort> _addr_name, ptr<uint> _addr_nameLen, ptr<ushort> _addr_refdDomainName, ptr<uint> _addr_refdDomainNameLen, ptr<uint> _addr_use)
        {
            error err = default!;
            ref ushort systemName = ref _addr_systemName.val;
            ref SID sid = ref _addr_sid.val;
            ref ushort name = ref _addr_name.val;
            ref uint nameLen = ref _addr_nameLen.val;
            ref ushort refdDomainName = ref _addr_refdDomainName.val;
            ref uint refdDomainNameLen = ref _addr_refdDomainNameLen.val;
            ref uint use = ref _addr_use.val;

            var (r1, _, e1) = syscall.Syscall9(procLookupAccountSidW.Addr(), 7L, uintptr(@unsafe.Pointer(systemName)), uintptr(@unsafe.Pointer(sid)), uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(nameLen)), uintptr(@unsafe.Pointer(refdDomainName)), uintptr(@unsafe.Pointer(refdDomainNameLen)), uintptr(@unsafe.Pointer(use)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error LookupAccountName(ptr<ushort> _addr_systemName, ptr<ushort> _addr_accountName, ptr<SID> _addr_sid, ptr<uint> _addr_sidLen, ptr<ushort> _addr_refdDomainName, ptr<uint> _addr_refdDomainNameLen, ptr<uint> _addr_use)
        {
            error err = default!;
            ref ushort systemName = ref _addr_systemName.val;
            ref ushort accountName = ref _addr_accountName.val;
            ref SID sid = ref _addr_sid.val;
            ref uint sidLen = ref _addr_sidLen.val;
            ref ushort refdDomainName = ref _addr_refdDomainName.val;
            ref uint refdDomainNameLen = ref _addr_refdDomainNameLen.val;
            ref uint use = ref _addr_use.val;

            var (r1, _, e1) = syscall.Syscall9(procLookupAccountNameW.Addr(), 7L, uintptr(@unsafe.Pointer(systemName)), uintptr(@unsafe.Pointer(accountName)), uintptr(@unsafe.Pointer(sid)), uintptr(@unsafe.Pointer(sidLen)), uintptr(@unsafe.Pointer(refdDomainName)), uintptr(@unsafe.Pointer(refdDomainNameLen)), uintptr(@unsafe.Pointer(use)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error ConvertSidToStringSid(ptr<SID> _addr_sid, ptr<ptr<ushort>> _addr_stringSid)
        {
            error err = default!;
            ref SID sid = ref _addr_sid.val;
            ref ptr<ushort> stringSid = ref _addr_stringSid.val;

            var (r1, _, e1) = syscall.Syscall(procConvertSidToStringSidW.Addr(), 2L, uintptr(@unsafe.Pointer(sid)), uintptr(@unsafe.Pointer(stringSid)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error ConvertStringSidToSid(ptr<ushort> _addr_stringSid, ptr<ptr<SID>> _addr_sid)
        {
            error err = default!;
            ref ushort stringSid = ref _addr_stringSid.val;
            ref ptr<SID> sid = ref _addr_sid.val;

            var (r1, _, e1) = syscall.Syscall(procConvertStringSidToSidW.Addr(), 2L, uintptr(@unsafe.Pointer(stringSid)), uintptr(@unsafe.Pointer(sid)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static uint GetLengthSid(ptr<SID> _addr_sid)
        {
            uint len = default;
            ref SID sid = ref _addr_sid.val;

            var (r0, _, _) = syscall.Syscall(procGetLengthSid.Addr(), 1L, uintptr(@unsafe.Pointer(sid)), 0L, 0L);
            len = uint32(r0);
            return ;
        }

        public static error CopySid(uint destSidLen, ptr<SID> _addr_destSid, ptr<SID> _addr_srcSid)
        {
            error err = default!;
            ref SID destSid = ref _addr_destSid.val;
            ref SID srcSid = ref _addr_srcSid.val;

            var (r1, _, e1) = syscall.Syscall(procCopySid.Addr(), 3L, uintptr(destSidLen), uintptr(@unsafe.Pointer(destSid)), uintptr(@unsafe.Pointer(srcSid)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error AllocateAndInitializeSid(ptr<SidIdentifierAuthority> _addr_identAuth, byte subAuth, uint subAuth0, uint subAuth1, uint subAuth2, uint subAuth3, uint subAuth4, uint subAuth5, uint subAuth6, uint subAuth7, ptr<ptr<SID>> _addr_sid)
        {
            error err = default!;
            ref SidIdentifierAuthority identAuth = ref _addr_identAuth.val;
            ref ptr<SID> sid = ref _addr_sid.val;

            var (r1, _, e1) = syscall.Syscall12(procAllocateAndInitializeSid.Addr(), 11L, uintptr(@unsafe.Pointer(identAuth)), uintptr(subAuth), uintptr(subAuth0), uintptr(subAuth1), uintptr(subAuth2), uintptr(subAuth3), uintptr(subAuth4), uintptr(subAuth5), uintptr(subAuth6), uintptr(subAuth7), uintptr(@unsafe.Pointer(sid)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error createWellKnownSid(WELL_KNOWN_SID_TYPE sidType, ptr<SID> _addr_domainSid, ptr<SID> _addr_sid, ptr<uint> _addr_sizeSid)
        {
            error err = default!;
            ref SID domainSid = ref _addr_domainSid.val;
            ref SID sid = ref _addr_sid.val;
            ref uint sizeSid = ref _addr_sizeSid.val;

            var (r1, _, e1) = syscall.Syscall6(procCreateWellKnownSid.Addr(), 4L, uintptr(sidType), uintptr(@unsafe.Pointer(domainSid)), uintptr(@unsafe.Pointer(sid)), uintptr(@unsafe.Pointer(sizeSid)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static bool isWellKnownSid(ptr<SID> _addr_sid, WELL_KNOWN_SID_TYPE sidType)
        {
            bool isWellKnown = default;
            ref SID sid = ref _addr_sid.val;

            var (r0, _, _) = syscall.Syscall(procIsWellKnownSid.Addr(), 2L, uintptr(@unsafe.Pointer(sid)), uintptr(sidType), 0L);
            isWellKnown = r0 != 0L;
            return ;
        }

        public static error FreeSid(ptr<SID> _addr_sid)
        {
            error err = default!;
            ref SID sid = ref _addr_sid.val;

            var (r1, _, e1) = syscall.Syscall(procFreeSid.Addr(), 1L, uintptr(@unsafe.Pointer(sid)), 0L, 0L);
            if (r1 != 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static bool EqualSid(ptr<SID> _addr_sid1, ptr<SID> _addr_sid2)
        {
            bool isEqual = default;
            ref SID sid1 = ref _addr_sid1.val;
            ref SID sid2 = ref _addr_sid2.val;

            var (r0, _, _) = syscall.Syscall(procEqualSid.Addr(), 2L, uintptr(@unsafe.Pointer(sid1)), uintptr(@unsafe.Pointer(sid2)), 0L);
            isEqual = r0 != 0L;
            return ;
        }

        private static ptr<SidIdentifierAuthority> getSidIdentifierAuthority(ptr<SID> _addr_sid)
        {
            ptr<SidIdentifierAuthority> authority = default!;
            ref SID sid = ref _addr_sid.val;

            var (r0, _, _) = syscall.Syscall(procGetSidIdentifierAuthority.Addr(), 1L, uintptr(@unsafe.Pointer(sid)), 0L, 0L);
            authority = (SidIdentifierAuthority.val)(@unsafe.Pointer(r0));
            return ;
        }

        private static ptr<byte> getSidSubAuthorityCount(ptr<SID> _addr_sid)
        {
            ptr<byte> count = default!;
            ref SID sid = ref _addr_sid.val;

            var (r0, _, _) = syscall.Syscall(procGetSidSubAuthorityCount.Addr(), 1L, uintptr(@unsafe.Pointer(sid)), 0L, 0L);
            count = (uint8.val)(@unsafe.Pointer(r0));
            return ;
        }

        private static ptr<uint> getSidSubAuthority(ptr<SID> _addr_sid, uint index)
        {
            ptr<uint> subAuthority = default!;
            ref SID sid = ref _addr_sid.val;

            var (r0, _, _) = syscall.Syscall(procGetSidSubAuthority.Addr(), 2L, uintptr(@unsafe.Pointer(sid)), uintptr(index), 0L);
            subAuthority = (uint32.val)(@unsafe.Pointer(r0));
            return ;
        }

        private static bool isValidSid(ptr<SID> _addr_sid)
        {
            bool isValid = default;
            ref SID sid = ref _addr_sid.val;

            var (r0, _, _) = syscall.Syscall(procIsValidSid.Addr(), 1L, uintptr(@unsafe.Pointer(sid)), 0L, 0L);
            isValid = r0 != 0L;
            return ;
        }

        private static error checkTokenMembership(Token tokenHandle, ptr<SID> _addr_sidToCheck, ptr<int> _addr_isMember)
        {
            error err = default!;
            ref SID sidToCheck = ref _addr_sidToCheck.val;
            ref int isMember = ref _addr_isMember.val;

            var (r1, _, e1) = syscall.Syscall(procCheckTokenMembership.Addr(), 3L, uintptr(tokenHandle), uintptr(@unsafe.Pointer(sidToCheck)), uintptr(@unsafe.Pointer(isMember)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error OpenProcessToken(Handle process, uint access, ptr<Token> _addr_token)
        {
            error err = default!;
            ref Token token = ref _addr_token.val;

            var (r1, _, e1) = syscall.Syscall(procOpenProcessToken.Addr(), 3L, uintptr(process), uintptr(access), uintptr(@unsafe.Pointer(token)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error OpenThreadToken(Handle thread, uint access, bool openAsSelf, ptr<Token> _addr_token)
        {
            error err = default!;
            ref Token token = ref _addr_token.val;

            uint _p0 = default;
            if (openAsSelf)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            var (r1, _, e1) = syscall.Syscall6(procOpenThreadToken.Addr(), 4L, uintptr(thread), uintptr(access), uintptr(_p0), uintptr(@unsafe.Pointer(token)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error ImpersonateSelf(uint impersonationlevel)
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procImpersonateSelf.Addr(), 1L, uintptr(impersonationlevel), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error RevertToSelf()
        {
            error err = default!;

            var (r1, _, e1) = syscall.Syscall(procRevertToSelf.Addr(), 0L, 0L, 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error SetThreadToken(ptr<Handle> _addr_thread, Token token)
        {
            error err = default!;
            ref Handle thread = ref _addr_thread.val;

            var (r1, _, e1) = syscall.Syscall(procSetThreadToken.Addr(), 2L, uintptr(@unsafe.Pointer(thread)), uintptr(token), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error LookupPrivilegeValue(ptr<ushort> _addr_systemname, ptr<ushort> _addr_name, ptr<LUID> _addr_luid)
        {
            error err = default!;
            ref ushort systemname = ref _addr_systemname.val;
            ref ushort name = ref _addr_name.val;
            ref LUID luid = ref _addr_luid.val;

            var (r1, _, e1) = syscall.Syscall(procLookupPrivilegeValueW.Addr(), 3L, uintptr(@unsafe.Pointer(systemname)), uintptr(@unsafe.Pointer(name)), uintptr(@unsafe.Pointer(luid)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error AdjustTokenPrivileges(Token token, bool disableAllPrivileges, ptr<Tokenprivileges> _addr_newstate, uint buflen, ptr<Tokenprivileges> _addr_prevstate, ptr<uint> _addr_returnlen)
        {
            error err = default!;
            ref Tokenprivileges newstate = ref _addr_newstate.val;
            ref Tokenprivileges prevstate = ref _addr_prevstate.val;
            ref uint returnlen = ref _addr_returnlen.val;

            uint _p0 = default;
            if (disableAllPrivileges)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            var (r1, _, e1) = syscall.Syscall6(procAdjustTokenPrivileges.Addr(), 6L, uintptr(token), uintptr(_p0), uintptr(@unsafe.Pointer(newstate)), uintptr(buflen), uintptr(@unsafe.Pointer(prevstate)), uintptr(@unsafe.Pointer(returnlen)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error AdjustTokenGroups(Token token, bool resetToDefault, ptr<Tokengroups> _addr_newstate, uint buflen, ptr<Tokengroups> _addr_prevstate, ptr<uint> _addr_returnlen)
        {
            error err = default!;
            ref Tokengroups newstate = ref _addr_newstate.val;
            ref Tokengroups prevstate = ref _addr_prevstate.val;
            ref uint returnlen = ref _addr_returnlen.val;

            uint _p0 = default;
            if (resetToDefault)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            var (r1, _, e1) = syscall.Syscall6(procAdjustTokenGroups.Addr(), 6L, uintptr(token), uintptr(_p0), uintptr(@unsafe.Pointer(newstate)), uintptr(buflen), uintptr(@unsafe.Pointer(prevstate)), uintptr(@unsafe.Pointer(returnlen)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error GetTokenInformation(Token token, uint infoClass, ptr<byte> _addr_info, uint infoLen, ptr<uint> _addr_returnedLen)
        {
            error err = default!;
            ref byte info = ref _addr_info.val;
            ref uint returnedLen = ref _addr_returnedLen.val;

            var (r1, _, e1) = syscall.Syscall6(procGetTokenInformation.Addr(), 5L, uintptr(token), uintptr(infoClass), uintptr(@unsafe.Pointer(info)), uintptr(infoLen), uintptr(@unsafe.Pointer(returnedLen)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error SetTokenInformation(Token token, uint infoClass, ptr<byte> _addr_info, uint infoLen)
        {
            error err = default!;
            ref byte info = ref _addr_info.val;

            var (r1, _, e1) = syscall.Syscall6(procSetTokenInformation.Addr(), 4L, uintptr(token), uintptr(infoClass), uintptr(@unsafe.Pointer(info)), uintptr(infoLen), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error DuplicateTokenEx(Token existingToken, uint desiredAccess, ptr<SecurityAttributes> _addr_tokenAttributes, uint impersonationLevel, uint tokenType, ptr<Token> _addr_newToken)
        {
            error err = default!;
            ref SecurityAttributes tokenAttributes = ref _addr_tokenAttributes.val;
            ref Token newToken = ref _addr_newToken.val;

            var (r1, _, e1) = syscall.Syscall6(procDuplicateTokenEx.Addr(), 6L, uintptr(existingToken), uintptr(desiredAccess), uintptr(@unsafe.Pointer(tokenAttributes)), uintptr(impersonationLevel), uintptr(tokenType), uintptr(@unsafe.Pointer(newToken)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error GetUserProfileDirectory(Token t, ptr<ushort> _addr_dir, ptr<uint> _addr_dirLen)
        {
            error err = default!;
            ref ushort dir = ref _addr_dir.val;
            ref uint dirLen = ref _addr_dirLen.val;

            var (r1, _, e1) = syscall.Syscall(procGetUserProfileDirectoryW.Addr(), 3L, uintptr(t), uintptr(@unsafe.Pointer(dir)), uintptr(@unsafe.Pointer(dirLen)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static (uint, error) getSystemDirectory(ptr<ushort> _addr_dir, uint dirLen)
        {
            uint len = default;
            error err = default!;
            ref ushort dir = ref _addr_dir.val;

            var (r0, _, e1) = syscall.Syscall(procGetSystemDirectoryW.Addr(), 2L, uintptr(@unsafe.Pointer(dir)), uintptr(dirLen), 0L);
            len = uint32(r0);
            if (len == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static (uint, error) getWindowsDirectory(ptr<ushort> _addr_dir, uint dirLen)
        {
            uint len = default;
            error err = default!;
            ref ushort dir = ref _addr_dir.val;

            var (r0, _, e1) = syscall.Syscall(procGetWindowsDirectoryW.Addr(), 2L, uintptr(@unsafe.Pointer(dir)), uintptr(dirLen), 0L);
            len = uint32(r0);
            if (len == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static (uint, error) getSystemWindowsDirectory(ptr<ushort> _addr_dir, uint dirLen)
        {
            uint len = default;
            error err = default!;
            ref ushort dir = ref _addr_dir.val;

            var (r0, _, e1) = syscall.Syscall(procGetSystemWindowsDirectoryW.Addr(), 2L, uintptr(@unsafe.Pointer(dir)), uintptr(dirLen), 0L);
            len = uint32(r0);
            if (len == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error WTSQueryUserToken(uint session, ptr<Token> _addr_token)
        {
            error err = default!;
            ref Token token = ref _addr_token.val;

            var (r1, _, e1) = syscall.Syscall(procWTSQueryUserToken.Addr(), 2L, uintptr(session), uintptr(@unsafe.Pointer(token)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static error WTSEnumerateSessions(Handle handle, uint reserved, uint version, ptr<ptr<WTS_SESSION_INFO>> _addr_sessions, ptr<uint> _addr_count)
        {
            error err = default!;
            ref ptr<WTS_SESSION_INFO> sessions = ref _addr_sessions.val;
            ref uint count = ref _addr_count.val;

            var (r1, _, e1) = syscall.Syscall6(procWTSEnumerateSessionsW.Addr(), 5L, uintptr(handle), uintptr(reserved), uintptr(version), uintptr(@unsafe.Pointer(sessions)), uintptr(@unsafe.Pointer(count)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        public static void WTSFreeMemory(System.UIntPtr ptr)
        {
            syscall.Syscall(procWTSFreeMemory.Addr(), 1L, uintptr(ptr), 0L, 0L);
            return ;
        }

        private static error getSecurityInfo(Handle handle, SE_OBJECT_TYPE objectType, SECURITY_INFORMATION securityInformation, ptr<ptr<SID>> _addr_owner, ptr<ptr<SID>> _addr_group, ptr<ptr<ACL>> _addr_dacl, ptr<ptr<ACL>> _addr_sacl, ptr<ptr<SECURITY_DESCRIPTOR>> _addr_sd)
        {
            error ret = default!;
            ref ptr<SID> owner = ref _addr_owner.val;
            ref ptr<SID> group = ref _addr_group.val;
            ref ptr<ACL> dacl = ref _addr_dacl.val;
            ref ptr<ACL> sacl = ref _addr_sacl.val;
            ref ptr<SECURITY_DESCRIPTOR> sd = ref _addr_sd.val;

            var (r0, _, _) = syscall.Syscall9(procGetSecurityInfo.Addr(), 8L, uintptr(handle), uintptr(objectType), uintptr(securityInformation), uintptr(@unsafe.Pointer(owner)), uintptr(@unsafe.Pointer(group)), uintptr(@unsafe.Pointer(dacl)), uintptr(@unsafe.Pointer(sacl)), uintptr(@unsafe.Pointer(sd)), 0L);
            if (r0 != 0L)
            {
                ret = syscall.Errno(r0);
            }

            return ;

        }

        public static void SetSecurityInfo(Handle handle, SE_OBJECT_TYPE objectType, SECURITY_INFORMATION securityInformation, ptr<SID> _addr_owner, ptr<SID> _addr_group, ptr<ACL> _addr_dacl, ptr<ACL> _addr_sacl)
        {
            ref SID owner = ref _addr_owner.val;
            ref SID group = ref _addr_group.val;
            ref ACL dacl = ref _addr_dacl.val;
            ref ACL sacl = ref _addr_sacl.val;

            syscall.Syscall9(procSetSecurityInfo.Addr(), 7L, uintptr(handle), uintptr(objectType), uintptr(securityInformation), uintptr(@unsafe.Pointer(owner)), uintptr(@unsafe.Pointer(group)), uintptr(@unsafe.Pointer(dacl)), uintptr(@unsafe.Pointer(sacl)), 0L, 0L);
            return ;
        }

        private static error getNamedSecurityInfo(@string objectName, SE_OBJECT_TYPE objectType, SECURITY_INFORMATION securityInformation, ptr<ptr<SID>> _addr_owner, ptr<ptr<SID>> _addr_group, ptr<ptr<ACL>> _addr_dacl, ptr<ptr<ACL>> _addr_sacl, ptr<ptr<SECURITY_DESCRIPTOR>> _addr_sd)
        {
            error ret = default!;
            ref ptr<SID> owner = ref _addr_owner.val;
            ref ptr<SID> group = ref _addr_group.val;
            ref ptr<ACL> dacl = ref _addr_dacl.val;
            ref ptr<ACL> sacl = ref _addr_sacl.val;
            ref ptr<SECURITY_DESCRIPTOR> sd = ref _addr_sd.val;

            ptr<ushort> _p0;
            _p0, ret = syscall.UTF16PtrFromString(objectName);
            if (ret != null)
            {
                return ;
            }

            return error.As(_getNamedSecurityInfo(_p0, objectType, securityInformation, _addr_owner, _addr_group, _addr_dacl, _addr_sacl, _addr_sd))!;

        }

        private static error _getNamedSecurityInfo(ptr<ushort> _addr_objectName, SE_OBJECT_TYPE objectType, SECURITY_INFORMATION securityInformation, ptr<ptr<SID>> _addr_owner, ptr<ptr<SID>> _addr_group, ptr<ptr<ACL>> _addr_dacl, ptr<ptr<ACL>> _addr_sacl, ptr<ptr<SECURITY_DESCRIPTOR>> _addr_sd)
        {
            error ret = default!;
            ref ushort objectName = ref _addr_objectName.val;
            ref ptr<SID> owner = ref _addr_owner.val;
            ref ptr<SID> group = ref _addr_group.val;
            ref ptr<ACL> dacl = ref _addr_dacl.val;
            ref ptr<ACL> sacl = ref _addr_sacl.val;
            ref ptr<SECURITY_DESCRIPTOR> sd = ref _addr_sd.val;

            var (r0, _, _) = syscall.Syscall9(procGetNamedSecurityInfoW.Addr(), 8L, uintptr(@unsafe.Pointer(objectName)), uintptr(objectType), uintptr(securityInformation), uintptr(@unsafe.Pointer(owner)), uintptr(@unsafe.Pointer(group)), uintptr(@unsafe.Pointer(dacl)), uintptr(@unsafe.Pointer(sacl)), uintptr(@unsafe.Pointer(sd)), 0L);
            if (r0 != 0L)
            {
                ret = syscall.Errno(r0);
            }

            return ;

        }

        public static error SetNamedSecurityInfo(@string objectName, SE_OBJECT_TYPE objectType, SECURITY_INFORMATION securityInformation, ptr<SID> _addr_owner, ptr<SID> _addr_group, ptr<ACL> _addr_dacl, ptr<ACL> _addr_sacl)
        {
            error ret = default!;
            ref SID owner = ref _addr_owner.val;
            ref SID group = ref _addr_group.val;
            ref ACL dacl = ref _addr_dacl.val;
            ref ACL sacl = ref _addr_sacl.val;

            ptr<ushort> _p0;
            _p0, ret = syscall.UTF16PtrFromString(objectName);
            if (ret != null)
            {
                return ;
            }

            return error.As(_SetNamedSecurityInfo(_p0, objectType, securityInformation, _addr_owner, _addr_group, _addr_dacl, _addr_sacl))!;

        }

        private static error _SetNamedSecurityInfo(ptr<ushort> _addr_objectName, SE_OBJECT_TYPE objectType, SECURITY_INFORMATION securityInformation, ptr<SID> _addr_owner, ptr<SID> _addr_group, ptr<ACL> _addr_dacl, ptr<ACL> _addr_sacl)
        {
            error ret = default!;
            ref ushort objectName = ref _addr_objectName.val;
            ref SID owner = ref _addr_owner.val;
            ref SID group = ref _addr_group.val;
            ref ACL dacl = ref _addr_dacl.val;
            ref ACL sacl = ref _addr_sacl.val;

            var (r0, _, _) = syscall.Syscall9(procSetNamedSecurityInfoW.Addr(), 7L, uintptr(@unsafe.Pointer(objectName)), uintptr(objectType), uintptr(securityInformation), uintptr(@unsafe.Pointer(owner)), uintptr(@unsafe.Pointer(group)), uintptr(@unsafe.Pointer(dacl)), uintptr(@unsafe.Pointer(sacl)), 0L, 0L);
            if (r0 != 0L)
            {
                ret = syscall.Errno(r0);
            }

            return ;

        }

        private static error buildSecurityDescriptor(ptr<TRUSTEE> _addr_owner, ptr<TRUSTEE> _addr_group, uint countAccessEntries, ptr<EXPLICIT_ACCESS> _addr_accessEntries, uint countAuditEntries, ptr<EXPLICIT_ACCESS> _addr_auditEntries, ptr<SECURITY_DESCRIPTOR> _addr_oldSecurityDescriptor, ptr<uint> _addr_sizeNewSecurityDescriptor, ptr<ptr<SECURITY_DESCRIPTOR>> _addr_newSecurityDescriptor)
        {
            error ret = default!;
            ref TRUSTEE owner = ref _addr_owner.val;
            ref TRUSTEE group = ref _addr_group.val;
            ref EXPLICIT_ACCESS accessEntries = ref _addr_accessEntries.val;
            ref EXPLICIT_ACCESS auditEntries = ref _addr_auditEntries.val;
            ref SECURITY_DESCRIPTOR oldSecurityDescriptor = ref _addr_oldSecurityDescriptor.val;
            ref uint sizeNewSecurityDescriptor = ref _addr_sizeNewSecurityDescriptor.val;
            ref ptr<SECURITY_DESCRIPTOR> newSecurityDescriptor = ref _addr_newSecurityDescriptor.val;

            var (r0, _, _) = syscall.Syscall9(procBuildSecurityDescriptorW.Addr(), 9L, uintptr(@unsafe.Pointer(owner)), uintptr(@unsafe.Pointer(group)), uintptr(countAccessEntries), uintptr(@unsafe.Pointer(accessEntries)), uintptr(countAuditEntries), uintptr(@unsafe.Pointer(auditEntries)), uintptr(@unsafe.Pointer(oldSecurityDescriptor)), uintptr(@unsafe.Pointer(sizeNewSecurityDescriptor)), uintptr(@unsafe.Pointer(newSecurityDescriptor)));
            if (r0 != 0L)
            {
                ret = syscall.Errno(r0);
            }

            return ;

        }

        private static error initializeSecurityDescriptor(ptr<SECURITY_DESCRIPTOR> _addr_absoluteSD, uint revision)
        {
            error err = default!;
            ref SECURITY_DESCRIPTOR absoluteSD = ref _addr_absoluteSD.val;

            var (r1, _, e1) = syscall.Syscall(procInitializeSecurityDescriptor.Addr(), 2L, uintptr(@unsafe.Pointer(absoluteSD)), uintptr(revision), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error getSecurityDescriptorControl(ptr<SECURITY_DESCRIPTOR> _addr_sd, ptr<SECURITY_DESCRIPTOR_CONTROL> _addr_control, ptr<uint> _addr_revision)
        {
            error err = default!;
            ref SECURITY_DESCRIPTOR sd = ref _addr_sd.val;
            ref SECURITY_DESCRIPTOR_CONTROL control = ref _addr_control.val;
            ref uint revision = ref _addr_revision.val;

            var (r1, _, e1) = syscall.Syscall(procGetSecurityDescriptorControl.Addr(), 3L, uintptr(@unsafe.Pointer(sd)), uintptr(@unsafe.Pointer(control)), uintptr(@unsafe.Pointer(revision)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error getSecurityDescriptorDacl(ptr<SECURITY_DESCRIPTOR> _addr_sd, ptr<bool> _addr_daclPresent, ptr<ptr<ACL>> _addr_dacl, ptr<bool> _addr_daclDefaulted)
        {
            error err = default!;
            ref SECURITY_DESCRIPTOR sd = ref _addr_sd.val;
            ref bool daclPresent = ref _addr_daclPresent.val;
            ref ptr<ACL> dacl = ref _addr_dacl.val;
            ref bool daclDefaulted = ref _addr_daclDefaulted.val;

            ref uint _p0 = ref heap(out ptr<uint> _addr__p0);
            if (daclPresent)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            ref uint _p1 = ref heap(out ptr<uint> _addr__p1);
            if (daclDefaulted)
            {
                _p1 = 1L;
            }
            else
            {
                _p1 = 0L;
            }

            var (r1, _, e1) = syscall.Syscall6(procGetSecurityDescriptorDacl.Addr(), 4L, uintptr(@unsafe.Pointer(sd)), uintptr(@unsafe.Pointer(_addr__p0)), uintptr(@unsafe.Pointer(dacl)), uintptr(@unsafe.Pointer(_addr__p1)), 0L, 0L);
            daclPresent = _p0 != 0L;
            daclDefaulted = _p1 != 0L;
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error getSecurityDescriptorSacl(ptr<SECURITY_DESCRIPTOR> _addr_sd, ptr<bool> _addr_saclPresent, ptr<ptr<ACL>> _addr_sacl, ptr<bool> _addr_saclDefaulted)
        {
            error err = default!;
            ref SECURITY_DESCRIPTOR sd = ref _addr_sd.val;
            ref bool saclPresent = ref _addr_saclPresent.val;
            ref ptr<ACL> sacl = ref _addr_sacl.val;
            ref bool saclDefaulted = ref _addr_saclDefaulted.val;

            ref uint _p0 = ref heap(out ptr<uint> _addr__p0);
            if (saclPresent)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            ref uint _p1 = ref heap(out ptr<uint> _addr__p1);
            if (saclDefaulted)
            {
                _p1 = 1L;
            }
            else
            {
                _p1 = 0L;
            }

            var (r1, _, e1) = syscall.Syscall6(procGetSecurityDescriptorSacl.Addr(), 4L, uintptr(@unsafe.Pointer(sd)), uintptr(@unsafe.Pointer(_addr__p0)), uintptr(@unsafe.Pointer(sacl)), uintptr(@unsafe.Pointer(_addr__p1)), 0L, 0L);
            saclPresent = _p0 != 0L;
            saclDefaulted = _p1 != 0L;
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error getSecurityDescriptorOwner(ptr<SECURITY_DESCRIPTOR> _addr_sd, ptr<ptr<SID>> _addr_owner, ptr<bool> _addr_ownerDefaulted)
        {
            error err = default!;
            ref SECURITY_DESCRIPTOR sd = ref _addr_sd.val;
            ref ptr<SID> owner = ref _addr_owner.val;
            ref bool ownerDefaulted = ref _addr_ownerDefaulted.val;

            ref uint _p0 = ref heap(out ptr<uint> _addr__p0);
            if (ownerDefaulted)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            var (r1, _, e1) = syscall.Syscall(procGetSecurityDescriptorOwner.Addr(), 3L, uintptr(@unsafe.Pointer(sd)), uintptr(@unsafe.Pointer(owner)), uintptr(@unsafe.Pointer(_addr__p0)));
            ownerDefaulted = _p0 != 0L;
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error getSecurityDescriptorGroup(ptr<SECURITY_DESCRIPTOR> _addr_sd, ptr<ptr<SID>> _addr_group, ptr<bool> _addr_groupDefaulted)
        {
            error err = default!;
            ref SECURITY_DESCRIPTOR sd = ref _addr_sd.val;
            ref ptr<SID> group = ref _addr_group.val;
            ref bool groupDefaulted = ref _addr_groupDefaulted.val;

            ref uint _p0 = ref heap(out ptr<uint> _addr__p0);
            if (groupDefaulted)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            var (r1, _, e1) = syscall.Syscall(procGetSecurityDescriptorGroup.Addr(), 3L, uintptr(@unsafe.Pointer(sd)), uintptr(@unsafe.Pointer(group)), uintptr(@unsafe.Pointer(_addr__p0)));
            groupDefaulted = _p0 != 0L;
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static uint getSecurityDescriptorLength(ptr<SECURITY_DESCRIPTOR> _addr_sd)
        {
            uint len = default;
            ref SECURITY_DESCRIPTOR sd = ref _addr_sd.val;

            var (r0, _, _) = syscall.Syscall(procGetSecurityDescriptorLength.Addr(), 1L, uintptr(@unsafe.Pointer(sd)), 0L, 0L);
            len = uint32(r0);
            return ;
        }

        private static error getSecurityDescriptorRMControl(ptr<SECURITY_DESCRIPTOR> _addr_sd, ptr<byte> _addr_rmControl)
        {
            error ret = default!;
            ref SECURITY_DESCRIPTOR sd = ref _addr_sd.val;
            ref byte rmControl = ref _addr_rmControl.val;

            var (r0, _, _) = syscall.Syscall(procGetSecurityDescriptorRMControl.Addr(), 2L, uintptr(@unsafe.Pointer(sd)), uintptr(@unsafe.Pointer(rmControl)), 0L);
            if (r0 != 0L)
            {
                ret = syscall.Errno(r0);
            }

            return ;

        }

        private static bool isValidSecurityDescriptor(ptr<SECURITY_DESCRIPTOR> _addr_sd)
        {
            bool isValid = default;
            ref SECURITY_DESCRIPTOR sd = ref _addr_sd.val;

            var (r0, _, _) = syscall.Syscall(procIsValidSecurityDescriptor.Addr(), 1L, uintptr(@unsafe.Pointer(sd)), 0L, 0L);
            isValid = r0 != 0L;
            return ;
        }

        private static error setSecurityDescriptorControl(ptr<SECURITY_DESCRIPTOR> _addr_sd, SECURITY_DESCRIPTOR_CONTROL controlBitsOfInterest, SECURITY_DESCRIPTOR_CONTROL controlBitsToSet)
        {
            error err = default!;
            ref SECURITY_DESCRIPTOR sd = ref _addr_sd.val;

            var (r1, _, e1) = syscall.Syscall(procSetSecurityDescriptorControl.Addr(), 3L, uintptr(@unsafe.Pointer(sd)), uintptr(controlBitsOfInterest), uintptr(controlBitsToSet));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error setSecurityDescriptorDacl(ptr<SECURITY_DESCRIPTOR> _addr_sd, bool daclPresent, ptr<ACL> _addr_dacl, bool daclDefaulted)
        {
            error err = default!;
            ref SECURITY_DESCRIPTOR sd = ref _addr_sd.val;
            ref ACL dacl = ref _addr_dacl.val;

            uint _p0 = default;
            if (daclPresent)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            uint _p1 = default;
            if (daclDefaulted)
            {
                _p1 = 1L;
            }
            else
            {
                _p1 = 0L;
            }

            var (r1, _, e1) = syscall.Syscall6(procSetSecurityDescriptorDacl.Addr(), 4L, uintptr(@unsafe.Pointer(sd)), uintptr(_p0), uintptr(@unsafe.Pointer(dacl)), uintptr(_p1), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error setSecurityDescriptorSacl(ptr<SECURITY_DESCRIPTOR> _addr_sd, bool saclPresent, ptr<ACL> _addr_sacl, bool saclDefaulted)
        {
            error err = default!;
            ref SECURITY_DESCRIPTOR sd = ref _addr_sd.val;
            ref ACL sacl = ref _addr_sacl.val;

            uint _p0 = default;
            if (saclPresent)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            uint _p1 = default;
            if (saclDefaulted)
            {
                _p1 = 1L;
            }
            else
            {
                _p1 = 0L;
            }

            var (r1, _, e1) = syscall.Syscall6(procSetSecurityDescriptorSacl.Addr(), 4L, uintptr(@unsafe.Pointer(sd)), uintptr(_p0), uintptr(@unsafe.Pointer(sacl)), uintptr(_p1), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error setSecurityDescriptorOwner(ptr<SECURITY_DESCRIPTOR> _addr_sd, ptr<SID> _addr_owner, bool ownerDefaulted)
        {
            error err = default!;
            ref SECURITY_DESCRIPTOR sd = ref _addr_sd.val;
            ref SID owner = ref _addr_owner.val;

            uint _p0 = default;
            if (ownerDefaulted)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            var (r1, _, e1) = syscall.Syscall(procSetSecurityDescriptorOwner.Addr(), 3L, uintptr(@unsafe.Pointer(sd)), uintptr(@unsafe.Pointer(owner)), uintptr(_p0));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error setSecurityDescriptorGroup(ptr<SECURITY_DESCRIPTOR> _addr_sd, ptr<SID> _addr_group, bool groupDefaulted)
        {
            error err = default!;
            ref SECURITY_DESCRIPTOR sd = ref _addr_sd.val;
            ref SID group = ref _addr_group.val;

            uint _p0 = default;
            if (groupDefaulted)
            {
                _p0 = 1L;
            }
            else
            {
                _p0 = 0L;
            }

            var (r1, _, e1) = syscall.Syscall(procSetSecurityDescriptorGroup.Addr(), 3L, uintptr(@unsafe.Pointer(sd)), uintptr(@unsafe.Pointer(group)), uintptr(_p0));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static void setSecurityDescriptorRMControl(ptr<SECURITY_DESCRIPTOR> _addr_sd, ptr<byte> _addr_rmControl)
        {
            ref SECURITY_DESCRIPTOR sd = ref _addr_sd.val;
            ref byte rmControl = ref _addr_rmControl.val;

            syscall.Syscall(procSetSecurityDescriptorRMControl.Addr(), 2L, uintptr(@unsafe.Pointer(sd)), uintptr(@unsafe.Pointer(rmControl)), 0L);
            return ;
        }

        private static error convertStringSecurityDescriptorToSecurityDescriptor(@string str, uint revision, ptr<ptr<SECURITY_DESCRIPTOR>> _addr_sd, ptr<uint> _addr_size)
        {
            error err = default!;
            ref ptr<SECURITY_DESCRIPTOR> sd = ref _addr_sd.val;
            ref uint size = ref _addr_size.val;

            ptr<ushort> _p0;
            _p0, err = syscall.UTF16PtrFromString(str);
            if (err != null)
            {
                return ;
            }

            return error.As(_convertStringSecurityDescriptorToSecurityDescriptor(_p0, revision, _addr_sd, _addr_size))!;

        }

        private static error _convertStringSecurityDescriptorToSecurityDescriptor(ptr<ushort> _addr_str, uint revision, ptr<ptr<SECURITY_DESCRIPTOR>> _addr_sd, ptr<uint> _addr_size)
        {
            error err = default!;
            ref ushort str = ref _addr_str.val;
            ref ptr<SECURITY_DESCRIPTOR> sd = ref _addr_sd.val;
            ref uint size = ref _addr_size.val;

            var (r1, _, e1) = syscall.Syscall6(procConvertStringSecurityDescriptorToSecurityDescriptorW.Addr(), 4L, uintptr(@unsafe.Pointer(str)), uintptr(revision), uintptr(@unsafe.Pointer(sd)), uintptr(@unsafe.Pointer(size)), 0L, 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error convertSecurityDescriptorToStringSecurityDescriptor(ptr<SECURITY_DESCRIPTOR> _addr_sd, uint revision, SECURITY_INFORMATION securityInformation, ptr<ptr<ushort>> _addr_str, ptr<uint> _addr_strLen)
        {
            error err = default!;
            ref SECURITY_DESCRIPTOR sd = ref _addr_sd.val;
            ref ptr<ushort> str = ref _addr_str.val;
            ref uint strLen = ref _addr_strLen.val;

            var (r1, _, e1) = syscall.Syscall6(procConvertSecurityDescriptorToStringSecurityDescriptorW.Addr(), 5L, uintptr(@unsafe.Pointer(sd)), uintptr(revision), uintptr(securityInformation), uintptr(@unsafe.Pointer(str)), uintptr(@unsafe.Pointer(strLen)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error makeAbsoluteSD(ptr<SECURITY_DESCRIPTOR> _addr_selfRelativeSD, ptr<SECURITY_DESCRIPTOR> _addr_absoluteSD, ptr<uint> _addr_absoluteSDSize, ptr<ACL> _addr_dacl, ptr<uint> _addr_daclSize, ptr<ACL> _addr_sacl, ptr<uint> _addr_saclSize, ptr<SID> _addr_owner, ptr<uint> _addr_ownerSize, ptr<SID> _addr_group, ptr<uint> _addr_groupSize)
        {
            error err = default!;
            ref SECURITY_DESCRIPTOR selfRelativeSD = ref _addr_selfRelativeSD.val;
            ref SECURITY_DESCRIPTOR absoluteSD = ref _addr_absoluteSD.val;
            ref uint absoluteSDSize = ref _addr_absoluteSDSize.val;
            ref ACL dacl = ref _addr_dacl.val;
            ref uint daclSize = ref _addr_daclSize.val;
            ref ACL sacl = ref _addr_sacl.val;
            ref uint saclSize = ref _addr_saclSize.val;
            ref SID owner = ref _addr_owner.val;
            ref uint ownerSize = ref _addr_ownerSize.val;
            ref SID group = ref _addr_group.val;
            ref uint groupSize = ref _addr_groupSize.val;

            var (r1, _, e1) = syscall.Syscall12(procMakeAbsoluteSD.Addr(), 11L, uintptr(@unsafe.Pointer(selfRelativeSD)), uintptr(@unsafe.Pointer(absoluteSD)), uintptr(@unsafe.Pointer(absoluteSDSize)), uintptr(@unsafe.Pointer(dacl)), uintptr(@unsafe.Pointer(daclSize)), uintptr(@unsafe.Pointer(sacl)), uintptr(@unsafe.Pointer(saclSize)), uintptr(@unsafe.Pointer(owner)), uintptr(@unsafe.Pointer(ownerSize)), uintptr(@unsafe.Pointer(group)), uintptr(@unsafe.Pointer(groupSize)), 0L);
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error makeSelfRelativeSD(ptr<SECURITY_DESCRIPTOR> _addr_absoluteSD, ptr<SECURITY_DESCRIPTOR> _addr_selfRelativeSD, ptr<uint> _addr_selfRelativeSDSize)
        {
            error err = default!;
            ref SECURITY_DESCRIPTOR absoluteSD = ref _addr_absoluteSD.val;
            ref SECURITY_DESCRIPTOR selfRelativeSD = ref _addr_selfRelativeSD.val;
            ref uint selfRelativeSDSize = ref _addr_selfRelativeSDSize.val;

            var (r1, _, e1) = syscall.Syscall(procMakeSelfRelativeSD.Addr(), 3L, uintptr(@unsafe.Pointer(absoluteSD)), uintptr(@unsafe.Pointer(selfRelativeSD)), uintptr(@unsafe.Pointer(selfRelativeSDSize)));
            if (r1 == 0L)
            {
                if (e1 != 0L)
                {
                    err = errnoErr(e1);
                }
                else
                {
                    err = syscall.EINVAL;
                }

            }

            return ;

        }

        private static error setEntriesInAcl(uint countExplicitEntries, ptr<EXPLICIT_ACCESS> _addr_explicitEntries, ptr<ACL> _addr_oldACL, ptr<ptr<ACL>> _addr_newACL)
        {
            error ret = default!;
            ref EXPLICIT_ACCESS explicitEntries = ref _addr_explicitEntries.val;
            ref ACL oldACL = ref _addr_oldACL.val;
            ref ptr<ACL> newACL = ref _addr_newACL.val;

            var (r0, _, _) = syscall.Syscall6(procSetEntriesInAclW.Addr(), 4L, uintptr(countExplicitEntries), uintptr(@unsafe.Pointer(explicitEntries)), uintptr(@unsafe.Pointer(oldACL)), uintptr(@unsafe.Pointer(newACL)), 0L, 0L);
            if (r0 != 0L)
            {
                ret = syscall.Errno(r0);
            }

            return ;

        }
    }
}}}}}}
