//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 06:00:58 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using net = go.net_package;
using syscall = go.syscall_package;
using @unsafe = go.@unsafe_package;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace vendor {
namespace golang.org {
namespace x {
namespace sys
{
    public static partial class windows_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct StartupInfo
        {
            // Constructors
            public StartupInfo(NilType _)
            {
                this.Cb = default;
                this._ = default;
                this.Desktop = default;
                this.Title = default;
                this.X = default;
                this.Y = default;
                this.XSize = default;
                this.YSize = default;
                this.XCountChars = default;
                this.YCountChars = default;
                this.FillAttribute = default;
                this.Flags = default;
                this.ShowWindow = default;
                this._ = default;
                this._ = default;
                this.StdInput = default;
                this.StdOutput = default;
                this.StdErr = default;
            }

            public StartupInfo(uint Cb = default, ref ptr<ushort> _ = default, ref ptr<ushort> Desktop = default, ref ptr<ushort> Title = default, uint X = default, uint Y = default, uint XSize = default, uint YSize = default, uint XCountChars = default, uint YCountChars = default, uint FillAttribute = default, uint Flags = default, ushort ShowWindow = default, ushort _ = default, ref ptr<byte> _ = default, Handle StdInput = default, Handle StdOutput = default, Handle StdErr = default)
            {
                this.Cb = Cb;
                this._ = _;
                this.Desktop = Desktop;
                this.Title = Title;
                this.X = X;
                this.Y = Y;
                this.XSize = XSize;
                this.YSize = YSize;
                this.XCountChars = XCountChars;
                this.YCountChars = YCountChars;
                this.FillAttribute = FillAttribute;
                this.Flags = Flags;
                this.ShowWindow = ShowWindow;
                this._ = _;
                this._ = _;
                this.StdInput = StdInput;
                this.StdOutput = StdOutput;
                this.StdErr = StdErr;
            }

            // Enable comparisons between nil and StartupInfo struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(StartupInfo value, NilType nil) => value.Equals(default(StartupInfo));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(StartupInfo value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, StartupInfo value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, StartupInfo value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator StartupInfo(NilType nil) => default(StartupInfo);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static StartupInfo StartupInfo_cast(dynamic value)
        {
            return new StartupInfo(value.Cb, ref value._, ref value.Desktop, ref value.Title, value.X, value.Y, value.XSize, value.YSize, value.XCountChars, value.YCountChars, value.FillAttribute, value.Flags, value.ShowWindow, value._, ref value._, value.StdInput, value.StdOutput, value.StdErr);
        }
    }
}}}}}}