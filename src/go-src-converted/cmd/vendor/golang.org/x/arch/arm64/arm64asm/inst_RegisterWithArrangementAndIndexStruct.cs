//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 04:44:34 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using fmt = go.fmt_package;
using strings = go.strings_package;
using go;

namespace go {
namespace cmd {
namespace vendor {
namespace golang.org {
namespace x {
namespace arch {
namespace arm64
{
    public static partial class arm64asm_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct RegisterWithArrangementAndIndex
        {
            // Constructors
            public RegisterWithArrangementAndIndex(NilType _)
            {
                this.r = default;
                this.a = default;
                this.index = default;
                this.cnt = default;
            }

            public RegisterWithArrangementAndIndex(Reg r = default, Arrangement a = default, byte index = default, byte cnt = default)
            {
                this.r = r;
                this.a = a;
                this.index = index;
                this.cnt = cnt;
            }

            // Enable comparisons between nil and RegisterWithArrangementAndIndex struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(RegisterWithArrangementAndIndex value, NilType nil) => value.Equals(default(RegisterWithArrangementAndIndex));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(RegisterWithArrangementAndIndex value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, RegisterWithArrangementAndIndex value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, RegisterWithArrangementAndIndex value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator RegisterWithArrangementAndIndex(NilType nil) => default(RegisterWithArrangementAndIndex);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static RegisterWithArrangementAndIndex RegisterWithArrangementAndIndex_cast(dynamic value)
        {
            return new RegisterWithArrangementAndIndex(value.r, value.a, value.index, value.cnt);
        }
    }
}}}}}}}