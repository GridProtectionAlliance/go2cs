// Generated by ARM internal tool
// DO NOT EDIT

// Copyright 2017 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// package arm64asm -- go2cs converted at 2020 October 08 04:44:16 UTC
// import "cmd/vendor/golang.org/x/arch/arm64/arm64asm" ==> using arm64asm = go.cmd.vendor.golang.org.x.arch.arm64.arm64asm_package
// Original source: C:\Go\src\cmd\vendor\golang.org\x\arch\arm64\arm64asm\arg.go

using static go.builtin;

namespace go {
namespace cmd {
namespace vendor {
namespace golang.org {
namespace x {
namespace arch {
namespace arm64
{
    public static partial class arm64asm_package
    {
        // Naming for Go decoder arguments:
        //
        // - arg_Wd: a W register encoded in the Rd[4:0] field (31 is wzr)
        //
        // - arg_Xd: a X register encoded in the Rd[4:0] field (31 is xzr)
        //
        // - arg_Wds: a W register encoded in the Rd[4:0] field (31 is wsp)
        //
        // - arg_Xds: a X register encoded in the Rd[4:0] field (31 is sp)
        //
        // - arg_Wn: encoded in Rn[9:5]
        //
        // - arg_Wm: encoded in Rm[20:16]
        //
        // - arg_Wm_extend__UXTB_0__UXTH_1__LSL_UXTW_2__UXTX_3__SXTB_4__SXTH_5__SXTW_6__SXTX_7__0_4:
        //     a W register encoded in Rm with an extend encoded in option[15:13] and an amount
        //     encoded in imm3[12:10] in the range [0,4].
        //
        // - arg_Rm_extend__UXTB_0__UXTH_1__UXTW_2__LSL_UXTX_3__SXTB_4__SXTH_5__SXTW_6__SXTX_7__0_4:
        //     a W or X register encoded in Rm with an extend encoded in option[15:13] and an
        //     amount encoded in imm3[12:10] in the range [0,4]. If the extend is UXTX or SXTX,
        //     it's an X register else, it's a W register.
        //
        // - arg_Wm_shift__LSL_0__LSR_1__ASR_2__0_31:
        //     a W register encoded in Rm with a shift encoded in shift[23:22] and an amount
        //     encoded in imm6[15:10] in the range [0,31].
        //
        // - arg_IAddSub:
        //     An immediate for a add/sub instruction encoded in imm12[21:10] with an optional
        //     left shift of 12 encoded in shift[23:22].
        //
        // - arg_Rt_31_1__W_0__X_1:
        //     a W or X register encoded in Rt[4:0]. The width specifier is encoded in the field
        //     [31:31] (offset 31, bit count 1) and the register is W for 0 and X for 1.
        //
        // - arg_[s|u]label_FIELDS_POWER:
        //     a program label encoded as "FIELDS" times 2^POWER in the range [MIN, MAX] (determined
        //     by signd/unsigned, FIELDS and POWER), e.g.
        //       arg_slabel_imm14_2
        //       arg_slabel_imm19_2
        //       arg_slabel_imm26_2
        //       arg_slabel_immhi_immlo_0
        //       arg_slabel_immhi_immlo_12
        //
        // - arg_Xns_mem_post_imm7_8_signed:
        //     addressing mode of post-index with a base register: Xns and a signed offset encoded
        //     in the "imm7" field times 8
        //
        // - arg_Xns_mem_extend_m__UXTW_2__LSL_3__SXTW_6__SXTX_7__0_0__3_1:
        //     addressing mode of extended register with a base register: Xns, an offset register
        //     (<Wm>|<Xm>) with an extend encoded in option[15:13] and a shift amount encoded in
        //     S[12:12] in the range [0,3] (S=0:0, S=1:3).
        //
        // - arg_Xns_mem_optional_imm12_4_unsigned:
        //     addressing mode of unsigned offset with a base register: Xns and an optional unsigned
        //     offset encoded in the "imm12" field times 4
        //
        // - arg_Xns_mem_wb_imm7_4_signed:
        //     addressing mode of pre-index with a base register: Xns and the signed offset encoded
        //     in the "imm7" field times 4
        //
        // - arg_Xns_mem_post_size_1_8_unsigned__4_0__8_1__16_2__32_3:
        //     a post-index immediate offset, encoded in the "size" field. It can have the following values:
        //       #4 when size = 00
        //       #8 when size = 01
        //       #16 when size = 10
        //       #32 when size = 11
        //
        // - arg_immediate_0_127_CRm_op2:
        //     an immediate encoded in "CRm:op2" in the range 0 to 127
        //
        // - arg_immediate_bitmask_64_N_imms_immr:
        //     a bitmask immediate for 64-bit variant and encoded in "N:imms:immr"
        //
        // - arg_immediate_SBFX_SBFM_64M_bitfield_width_64_imms:
        //     an immediate for the <width> bitfield of SBFX 64-bit variant
        //
        // - arg_immediate_shift_32_implicit_inverse_imm16_hw:
        //     a 32-bit immediate of the bitwise inverse of which can be encoded in "imm16:hw"
        //
        // - arg_cond_[Not]AllowALNV_[Invert|Normal]:
        //     a standard condition, encoded in the "cond" field, excluding (NotAllow) AL and NV with
        //     its least significant bit [Yes|No] inverted, e.g.
        //       arg_cond_AllowALNV_Normal
        //       arg_cond_NotAllowALNV_Invert
        //
        // - arg_immediate_OptLSL_amount_16_0_48:
        //     An immediate for MOV[KNZ] instruction encoded in imm16[20:5] with an optional
        //     left shift of 16 in the range [0, 48] encoded in hw[22, 21]
        //
        // - arg_immediate_0_width_m1_immh_immb__UIntimmhimmb8_1__UIntimmhimmb16_2__UIntimmhimmb32_4__UIntimmhimmb64_8:
        //     the left shift amount, in the range 0 to the operand width in bits minus 1,
        //     encoded in the "immh:immb" field. It can have the following values:
        //       (UInt(immh:immb)-8) when immh = 0001
        //       (UInt(immh:immb)-16) when immh = 001x
        //       (UInt(immh:immb)-32) when immh = 01xx
        //       (UInt(immh:immb)-64) when immh = 1xxx
        //
        // - arg_immediate_1_width_immh_immb__16UIntimmhimmb_1__32UIntimmhimmb_2__64UIntimmhimmb_4:
        //     the right shift amount, in the range 1 to the destination operand width in
        //     bits, encoded in the "immh:immb" field. It can have the following values:
        //       (16-UInt(immh:immb)) when immh = 0001
        //       (32-UInt(immh:immb)) when immh = 001x
        //       (64-UInt(immh:immb)) when immh = 01xx
        //
        // - arg_immediate_8x8_a_b_c_d_e_f_g_h:
        //     a 64-bit immediate 'aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffffgggggggghhhhhhhh',
        //     encoded in "a:b:c:d:e:f:g:h".
        //
        // - arg_immediate_fbits_min_1_max_32_sub_64_scale:
        //     the number of bits after the binary point in the fixed-point destination,
        //     in the range 1 to 32, encoded as 64 minus "scale".
        //
        // - arg_immediate_floatzero: #0.0
        //
        // - arg_immediate_exp_3_pre_4_a_b_c_d_e_f_g_h:
        //     a signed floating-point constant with 3-bit exponent and normalized 4 bits of precision,
        //     encoded in "a:b:c:d:e:f:g:h"
        //
        // - arg_immediate_fbits_min_1_max_0_sub_0_immh_immb__64UIntimmhimmb_4__128UIntimmhimmb_8:
        //     the number of fractional bits, in the range 1 to the operand width, encoded
        //     in the "immh:immb" field. It can have the following values:
        //       (64-UInt(immh:immb)) when immh = 01xx
        //       (128-UInt(immh:immb)) when immh = 1xxx
        //
        // - arg_immediate_index_Q_imm4__imm4lt20gt_00__imm4_10:
        //     the lowest numbered byte element to be extracted, encoded in the "Q:imm4" field.
        //     It can have the following values:
        //       imm4<2:0> when Q = 0, imm4<3> = 0
        //       imm4 when Q = 1, imm4<3> = x
        //
        // - arg_sysop_AT_SYS_CR_system:
        //     system operation for system instruction: AT encoded in the "op1:CRm<0>:op2" field
        //
        // - arg_prfop_Rt:
        //     prefectch operation encoded in the "Rt"
        //
        // - arg_sysreg_o0_op1_CRn_CRm_op2:
        //     system register name encoded in the "o0:op1:CRn:CRm:op2"
        //
        // - arg_pstatefield_op1_op2__SPSel_05__DAIFSet_36__DAIFClr_37:
        //     PSTATE field name encoded in the "op1:op2" field
        //
        // - arg_Vd_arrangement_size_Q___8B_00__16B_01__4H_10__8H_11__2S_20__4S_21__2D_31:
        //     one register with arrangement specifier encoded in the "size:Q" field which can have the following values:
        //       8B when size = 00, Q = 0
        //       16B when size = 00, Q = 1
        //       4H when size = 01, Q = 0
        //       8H when size = 01, Q = 1
        //       2S when size = 10, Q = 0
        //       4S when size = 10, Q = 1
        //       2D when size = 11, Q = 1
        //       The encoding size = 11, Q = 0 is reserved.
        //
        // - arg_Vt_3_arrangement_size_Q___8B_00__16B_01__4H_10__8H_11__2S_20__4S_21__1D_30__2D_31:
        //     three registers with arrangement specifier encoded in the "size:Q" field which can have the following values:
        //       8B when size = 00, Q = 0
        //       16B when size = 00, Q = 1
        //       4H when size = 01, Q = 0
        //       8H when size = 01, Q = 1
        //       2S when size = 10, Q = 0
        //       4S when size = 10, Q = 1
        //       2D when size = 11, Q = 1
        //       The encoding size = 11, Q = 0 is reserved.
        //
        // - arg_Vt_1_arrangement_H_index__Q_S_size_1:
        //     one register with arrangement:H and element index encoded in "Q:S:size<1>".
        private partial struct instArg // : ushort
        {
        }

        private static readonly instArg _ = (instArg)iota;
        private static readonly var arg_Bt = (var)0;
        private static readonly var arg_Cm = (var)1;
        private static readonly var arg_Cn = (var)2;
        private static readonly var arg_cond_AllowALNV_Normal = (var)3;
        private static readonly var arg_conditional = (var)4;
        private static readonly var arg_cond_NotAllowALNV_Invert = (var)5;
        private static readonly var arg_Da = (var)6;
        private static readonly var arg_Dd = (var)7;
        private static readonly var arg_Dm = (var)8;
        private static readonly var arg_Dn = (var)9;
        private static readonly var arg_Dt = (var)10;
        private static readonly var arg_Dt2 = (var)11;
        private static readonly var arg_Hd = (var)12;
        private static readonly var arg_Hn = (var)13;
        private static readonly var arg_Ht = (var)14;
        private static readonly var arg_IAddSub = (var)15;
        private static readonly var arg_immediate_0_127_CRm_op2 = (var)16;
        private static readonly var arg_immediate_0_15_CRm = (var)17;
        private static readonly var arg_immediate_0_15_nzcv = (var)18;
        private static readonly var arg_immediate_0_31_imm5 = (var)19;
        private static readonly var arg_immediate_0_31_immr = (var)20;
        private static readonly var arg_immediate_0_31_imms = (var)21;
        private static readonly var arg_immediate_0_63_b5_b40 = (var)22;
        private static readonly var arg_immediate_0_63_immh_immb__UIntimmhimmb64_8 = (var)23;
        private static readonly var arg_immediate_0_63_immr = (var)24;
        private static readonly var arg_immediate_0_63_imms = (var)25;
        private static readonly var arg_immediate_0_65535_imm16 = (var)26;
        private static readonly var arg_immediate_0_7_op1 = (var)27;
        private static readonly var arg_immediate_0_7_op2 = (var)28;
        private static readonly var arg_immediate_0_width_immh_immb__SEEAdvancedSIMDmodifiedimmediate_0__UIntimmhimmb8_1__UIntimmhimmb16_2__UIntimmhimmb32_4 = (var)29;
        private static readonly var arg_immediate_0_width_immh_immb__SEEAdvancedSIMDmodifiedimmediate_0__UIntimmhimmb8_1__UIntimmhimmb16_2__UIntimmhimmb32_4__UIntimmhimmb64_8 = (var)30;
        private static readonly var arg_immediate_0_width_m1_immh_immb__UIntimmhimmb8_1__UIntimmhimmb16_2__UIntimmhimmb32_4__UIntimmhimmb64_8 = (var)31;
        private static readonly var arg_immediate_0_width_size__8_0__16_1__32_2 = (var)32;
        private static readonly var arg_immediate_1_64_immh_immb__128UIntimmhimmb_8 = (var)33;
        private static readonly var arg_immediate_1_width_immh_immb__16UIntimmhimmb_1__32UIntimmhimmb_2__64UIntimmhimmb_4 = (var)34;
        private static readonly var arg_immediate_1_width_immh_immb__SEEAdvancedSIMDmodifiedimmediate_0__16UIntimmhimmb_1__32UIntimmhimmb_2__64UIntimmhimmb_4 = (var)35;
        private static readonly var arg_immediate_1_width_immh_immb__SEEAdvancedSIMDmodifiedimmediate_0__16UIntimmhimmb_1__32UIntimmhimmb_2__64UIntimmhimmb_4__128UIntimmhimmb_8 = (var)36;
        private static readonly var arg_immediate_8x8_a_b_c_d_e_f_g_h = (var)37;
        private static readonly var arg_immediate_ASR_SBFM_32M_bitfield_0_31_immr = (var)38;
        private static readonly var arg_immediate_ASR_SBFM_64M_bitfield_0_63_immr = (var)39;
        private static readonly var arg_immediate_BFI_BFM_32M_bitfield_lsb_32_immr = (var)40;
        private static readonly var arg_immediate_BFI_BFM_32M_bitfield_width_32_imms = (var)41;
        private static readonly var arg_immediate_BFI_BFM_64M_bitfield_lsb_64_immr = (var)42;
        private static readonly var arg_immediate_BFI_BFM_64M_bitfield_width_64_imms = (var)43;
        private static readonly var arg_immediate_BFXIL_BFM_32M_bitfield_lsb_32_immr = (var)44;
        private static readonly var arg_immediate_BFXIL_BFM_32M_bitfield_width_32_imms = (var)45;
        private static readonly var arg_immediate_BFXIL_BFM_64M_bitfield_lsb_64_immr = (var)46;
        private static readonly var arg_immediate_BFXIL_BFM_64M_bitfield_width_64_imms = (var)47;
        private static readonly var arg_immediate_bitmask_32_imms_immr = (var)48;
        private static readonly var arg_immediate_bitmask_64_N_imms_immr = (var)49;
        private static readonly var arg_immediate_exp_3_pre_4_a_b_c_d_e_f_g_h = (var)50;
        private static readonly var arg_immediate_exp_3_pre_4_imm8 = (var)51;
        private static readonly var arg_immediate_fbits_min_1_max_0_sub_0_immh_immb__64UIntimmhimmb_4__128UIntimmhimmb_8 = (var)52;
        private static readonly var arg_immediate_fbits_min_1_max_0_sub_0_immh_immb__SEEAdvancedSIMDmodifiedimmediate_0__64UIntimmhimmb_4__128UIntimmhimmb_8 = (var)53;
        private static readonly var arg_immediate_fbits_min_1_max_32_sub_64_scale = (var)54;
        private static readonly var arg_immediate_fbits_min_1_max_64_sub_64_scale = (var)55;
        private static readonly var arg_immediate_floatzero = (var)56;
        private static readonly var arg_immediate_index_Q_imm4__imm4lt20gt_00__imm4_10 = (var)57;
        private static readonly var arg_immediate_LSL_UBFM_32M_bitfield_0_31_immr = (var)58;
        private static readonly var arg_immediate_LSL_UBFM_64M_bitfield_0_63_immr = (var)59;
        private static readonly var arg_immediate_LSR_UBFM_32M_bitfield_0_31_immr = (var)60;
        private static readonly var arg_immediate_LSR_UBFM_64M_bitfield_0_63_immr = (var)61;
        private static readonly var arg_immediate_MSL__a_b_c_d_e_f_g_h_cmode__8_0__16_1 = (var)62;
        private static readonly var arg_immediate_optional_0_15_CRm = (var)63;
        private static readonly var arg_immediate_optional_0_65535_imm16 = (var)64;
        private static readonly var arg_immediate_OptLSL__a_b_c_d_e_f_g_h_cmode__0_0__8_1 = (var)65;
        private static readonly var arg_immediate_OptLSL__a_b_c_d_e_f_g_h_cmode__0_0__8_1__16_2__24_3 = (var)66;
        private static readonly var arg_immediate_OptLSL_amount_16_0_16 = (var)67;
        private static readonly var arg_immediate_OptLSL_amount_16_0_48 = (var)68;
        private static readonly var arg_immediate_OptLSLZero__a_b_c_d_e_f_g_h = (var)69;
        private static readonly var arg_immediate_SBFIZ_SBFM_32M_bitfield_lsb_32_immr = (var)70;
        private static readonly var arg_immediate_SBFIZ_SBFM_32M_bitfield_width_32_imms = (var)71;
        private static readonly var arg_immediate_SBFIZ_SBFM_64M_bitfield_lsb_64_immr = (var)72;
        private static readonly var arg_immediate_SBFIZ_SBFM_64M_bitfield_width_64_imms = (var)73;
        private static readonly var arg_immediate_SBFX_SBFM_32M_bitfield_lsb_32_immr = (var)74;
        private static readonly var arg_immediate_SBFX_SBFM_32M_bitfield_width_32_imms = (var)75;
        private static readonly var arg_immediate_SBFX_SBFM_64M_bitfield_lsb_64_immr = (var)76;
        private static readonly var arg_immediate_SBFX_SBFM_64M_bitfield_width_64_imms = (var)77;
        private static readonly var arg_immediate_shift_32_implicit_imm16_hw = (var)78;
        private static readonly var arg_immediate_shift_32_implicit_inverse_imm16_hw = (var)79;
        private static readonly var arg_immediate_shift_64_implicit_imm16_hw = (var)80;
        private static readonly var arg_immediate_shift_64_implicit_inverse_imm16_hw = (var)81;
        private static readonly var arg_immediate_UBFIZ_UBFM_32M_bitfield_lsb_32_immr = (var)82;
        private static readonly var arg_immediate_UBFIZ_UBFM_32M_bitfield_width_32_imms = (var)83;
        private static readonly var arg_immediate_UBFIZ_UBFM_64M_bitfield_lsb_64_immr = (var)84;
        private static readonly var arg_immediate_UBFIZ_UBFM_64M_bitfield_width_64_imms = (var)85;
        private static readonly var arg_immediate_UBFX_UBFM_32M_bitfield_lsb_32_immr = (var)86;
        private static readonly var arg_immediate_UBFX_UBFM_32M_bitfield_width_32_imms = (var)87;
        private static readonly var arg_immediate_UBFX_UBFM_64M_bitfield_lsb_64_immr = (var)88;
        private static readonly var arg_immediate_UBFX_UBFM_64M_bitfield_width_64_imms = (var)89;
        private static readonly var arg_immediate_zero = (var)90;
        private static readonly var arg_option_DMB_BO_system_CRm = (var)91;
        private static readonly var arg_option_DSB_BO_system_CRm = (var)92;
        private static readonly var arg_option_ISB_BI_system_CRm = (var)93;
        private static readonly var arg_prfop_Rt = (var)94;
        private static readonly var arg_pstatefield_op1_op2__SPSel_05__DAIFSet_36__DAIFClr_37 = (var)95;
        private static readonly var arg_Qd = (var)96;
        private static readonly var arg_Qn = (var)97;
        private static readonly var arg_Qt = (var)98;
        private static readonly var arg_Qt2 = (var)99;
        private static readonly var arg_Rm_extend__UXTB_0__UXTH_1__UXTW_2__LSL_UXTX_3__SXTB_4__SXTH_5__SXTW_6__SXTX_7__0_4 = (var)100;
        private static readonly var arg_Rn_16_5__W_1__W_2__W_4__X_8 = (var)101;
        private static readonly var arg_Rt_31_1__W_0__X_1 = (var)102;
        private static readonly var arg_Sa = (var)103;
        private static readonly var arg_Sd = (var)104;
        private static readonly var arg_slabel_imm14_2 = (var)105;
        private static readonly var arg_slabel_imm19_2 = (var)106;
        private static readonly var arg_slabel_imm26_2 = (var)107;
        private static readonly var arg_slabel_immhi_immlo_0 = (var)108;
        private static readonly var arg_slabel_immhi_immlo_12 = (var)109;
        private static readonly var arg_Sm = (var)110;
        private static readonly var arg_Sn = (var)111;
        private static readonly var arg_St = (var)112;
        private static readonly var arg_St2 = (var)113;
        private static readonly var arg_sysop_AT_SYS_CR_system = (var)114;
        private static readonly var arg_sysop_DC_SYS_CR_system = (var)115;
        private static readonly var arg_sysop_IC_SYS_CR_system = (var)116;
        private static readonly var arg_sysop_SYS_CR_system = (var)117;
        private static readonly var arg_sysop_TLBI_SYS_CR_system = (var)118;
        private static readonly var arg_sysreg_o0_op1_CRn_CRm_op2 = (var)119;
        private static readonly var arg_Vd_16_5__B_1__H_2__S_4__D_8 = (var)120;
        private static readonly var arg_Vd_19_4__B_1__H_2__S_4 = (var)121;
        private static readonly var arg_Vd_19_4__B_1__H_2__S_4__D_8 = (var)122;
        private static readonly var arg_Vd_19_4__D_8 = (var)123;
        private static readonly var arg_Vd_19_4__S_4__D_8 = (var)124;
        private static readonly var arg_Vd_22_1__S_0 = (var)125;
        private static readonly var arg_Vd_22_1__S_0__D_1 = (var)126;
        private static readonly var arg_Vd_22_1__S_1 = (var)127;
        private static readonly var arg_Vd_22_2__B_0__H_1__S_2 = (var)128;
        private static readonly var arg_Vd_22_2__B_0__H_1__S_2__D_3 = (var)129;
        private static readonly var arg_Vd_22_2__D_3 = (var)130;
        private static readonly var arg_Vd_22_2__H_0__S_1__D_2 = (var)131;
        private static readonly var arg_Vd_22_2__H_1__S_2 = (var)132;
        private static readonly var arg_Vd_22_2__S_1__D_2 = (var)133;
        private static readonly var arg_Vd_arrangement_16B = (var)134;
        private static readonly var arg_Vd_arrangement_2D = (var)135;
        private static readonly var arg_Vd_arrangement_4S = (var)136;
        private static readonly var arg_Vd_arrangement_D_index__1 = (var)137;
        private static readonly var arg_Vd_arrangement_imm5___B_1__H_2__S_4__D_8_index__imm5__imm5lt41gt_1__imm5lt42gt_2__imm5lt43gt_4__imm5lt4gt_8_1 = (var)138;
        private static readonly var arg_Vd_arrangement_imm5_Q___8B_10__16B_11__4H_20__8H_21__2S_40__4S_41__2D_81 = (var)139;
        private static readonly var arg_Vd_arrangement_immh_Q___SEEAdvancedSIMDmodifiedimmediate_00__2S_40__4S_41__2D_81 = (var)140;
        private static readonly var arg_Vd_arrangement_immh_Q___SEEAdvancedSIMDmodifiedimmediate_00__8B_10__16B_11__4H_20__8H_21__2S_40__4S_41 = (var)141;
        private static readonly var arg_Vd_arrangement_immh_Q___SEEAdvancedSIMDmodifiedimmediate_00__8B_10__16B_11__4H_20__8H_21__2S_40__4S_41__2D_81 = (var)142;
        private static readonly var arg_Vd_arrangement_immh___SEEAdvancedSIMDmodifiedimmediate_0__8H_1__4S_2__2D_4 = (var)143;
        private static readonly var arg_Vd_arrangement_Q___2S_0__4S_1 = (var)144;
        private static readonly var arg_Vd_arrangement_Q___4H_0__8H_1 = (var)145;
        private static readonly var arg_Vd_arrangement_Q___8B_0__16B_1 = (var)146;
        private static readonly var arg_Vd_arrangement_Q_sz___2S_00__4S_10__2D_11 = (var)147;
        private static readonly var arg_Vd_arrangement_size___4S_1__2D_2 = (var)148;
        private static readonly var arg_Vd_arrangement_size___8H_0__1Q_3 = (var)149;
        private static readonly var arg_Vd_arrangement_size___8H_0__4S_1__2D_2 = (var)150;
        private static readonly var arg_Vd_arrangement_size_Q___4H_00__8H_01__2S_10__4S_11__1D_20__2D_21 = (var)151;
        private static readonly var arg_Vd_arrangement_size_Q___4H_10__8H_11__2S_20__4S_21 = (var)152;
        private static readonly var arg_Vd_arrangement_size_Q___8B_00__16B_01 = (var)153;
        private static readonly var arg_Vd_arrangement_size_Q___8B_00__16B_01__4H_10__8H_11 = (var)154;
        private static readonly var arg_Vd_arrangement_size_Q___8B_00__16B_01__4H_10__8H_11__2S_20__4S_21 = (var)155;
        private static readonly var arg_Vd_arrangement_size_Q___8B_00__16B_01__4H_10__8H_11__2S_20__4S_21__2D_31 = (var)156;
        private static readonly var arg_Vd_arrangement_sz___4S_0__2D_1 = (var)157;
        private static readonly var arg_Vd_arrangement_sz_Q___2S_00__4S_01 = (var)158;
        private static readonly var arg_Vd_arrangement_sz_Q___2S_00__4S_01__2D_11 = (var)159;
        private static readonly var arg_Vd_arrangement_sz_Q___2S_10__4S_11 = (var)160;
        private static readonly var arg_Vd_arrangement_sz_Q___4H_00__8H_01__2S_10__4S_11 = (var)161;
        private static readonly var arg_Vm_22_1__S_0__D_1 = (var)162;
        private static readonly var arg_Vm_22_2__B_0__H_1__S_2__D_3 = (var)163;
        private static readonly var arg_Vm_22_2__D_3 = (var)164;
        private static readonly var arg_Vm_22_2__H_1__S_2 = (var)165;
        private static readonly var arg_Vm_arrangement_4S = (var)166;
        private static readonly var arg_Vm_arrangement_Q___8B_0__16B_1 = (var)167;
        private static readonly var arg_Vm_arrangement_size___8H_0__4S_1__2D_2 = (var)168;
        private static readonly var arg_Vm_arrangement_size___H_1__S_2_index__size_L_H_M__HLM_1__HL_2_1 = (var)169;
        private static readonly var arg_Vm_arrangement_size_Q___4H_10__8H_11__2S_20__4S_21 = (var)170;
        private static readonly var arg_Vm_arrangement_size_Q___8B_00__16B_01 = (var)171;
        private static readonly var arg_Vm_arrangement_size_Q___8B_00__16B_01__1D_30__2D_31 = (var)172;
        private static readonly var arg_Vm_arrangement_size_Q___8B_00__16B_01__4H_10__8H_11__2S_20__4S_21 = (var)173;
        private static readonly var arg_Vm_arrangement_size_Q___8B_00__16B_01__4H_10__8H_11__2S_20__4S_21__2D_31 = (var)174;
        private static readonly var arg_Vm_arrangement_sz_Q___2S_00__4S_01__2D_11 = (var)175;
        private static readonly var arg_Vm_arrangement_sz___S_0__D_1_index__sz_L_H__HL_00__H_10_1 = (var)176;
        private static readonly var arg_Vn_19_4__B_1__H_2__S_4__D_8 = (var)177;
        private static readonly var arg_Vn_19_4__D_8 = (var)178;
        private static readonly var arg_Vn_19_4__H_1__S_2__D_4 = (var)179;
        private static readonly var arg_Vn_19_4__S_4__D_8 = (var)180;
        private static readonly var arg_Vn_1_arrangement_16B = (var)181;
        private static readonly var arg_Vn_22_1__D_1 = (var)182;
        private static readonly var arg_Vn_22_1__S_0__D_1 = (var)183;
        private static readonly var arg_Vn_22_2__B_0__H_1__S_2__D_3 = (var)184;
        private static readonly var arg_Vn_22_2__D_3 = (var)185;
        private static readonly var arg_Vn_22_2__H_0__S_1__D_2 = (var)186;
        private static readonly var arg_Vn_22_2__H_1__S_2 = (var)187;
        private static readonly var arg_Vn_2_arrangement_16B = (var)188;
        private static readonly var arg_Vn_3_arrangement_16B = (var)189;
        private static readonly var arg_Vn_4_arrangement_16B = (var)190;
        private static readonly var arg_Vn_arrangement_16B = (var)191;
        private static readonly var arg_Vn_arrangement_4S = (var)192;
        private static readonly var arg_Vn_arrangement_D_index__1 = (var)193;
        private static readonly var arg_Vn_arrangement_D_index__imm5_1 = (var)194;
        private static readonly var arg_Vn_arrangement_imm5___B_1__H_2_index__imm5__imm5lt41gt_1__imm5lt42gt_2_1 = (var)195;
        private static readonly var arg_Vn_arrangement_imm5___B_1__H_2__S_4__D_8_index__imm5_imm4__imm4lt30gt_1__imm4lt31gt_2__imm4lt32gt_4__imm4lt3gt_8_1 = (var)196;
        private static readonly var arg_Vn_arrangement_imm5___B_1__H_2__S_4__D_8_index__imm5__imm5lt41gt_1__imm5lt42gt_2__imm5lt43gt_4__imm5lt4gt_8_1 = (var)197;
        private static readonly var arg_Vn_arrangement_imm5___B_1__H_2__S_4_index__imm5__imm5lt41gt_1__imm5lt42gt_2__imm5lt43gt_4_1 = (var)198;
        private static readonly var arg_Vn_arrangement_imm5___D_8_index__imm5_1 = (var)199;
        private static readonly var arg_Vn_arrangement_immh_Q___SEEAdvancedSIMDmodifiedimmediate_00__2S_40__4S_41__2D_81 = (var)200;
        private static readonly var arg_Vn_arrangement_immh_Q___SEEAdvancedSIMDmodifiedimmediate_00__8B_10__16B_11__4H_20__8H_21__2S_40__4S_41 = (var)201;
        private static readonly var arg_Vn_arrangement_immh_Q___SEEAdvancedSIMDmodifiedimmediate_00__8B_10__16B_11__4H_20__8H_21__2S_40__4S_41__2D_81 = (var)202;
        private static readonly var arg_Vn_arrangement_immh___SEEAdvancedSIMDmodifiedimmediate_0__8H_1__4S_2__2D_4 = (var)203;
        private static readonly var arg_Vn_arrangement_Q___8B_0__16B_1 = (var)204;
        private static readonly var arg_Vn_arrangement_Q_sz___2S_00__4S_10__2D_11 = (var)205;
        private static readonly var arg_Vn_arrangement_Q_sz___4S_10 = (var)206;
        private static readonly var arg_Vn_arrangement_S_index__imm5__imm5lt41gt_1__imm5lt42gt_2__imm5lt43gt_4_1 = (var)207;
        private static readonly var arg_Vn_arrangement_size___2D_3 = (var)208;
        private static readonly var arg_Vn_arrangement_size___8H_0__4S_1__2D_2 = (var)209;
        private static readonly var arg_Vn_arrangement_size_Q___4H_10__8H_11__2S_20__4S_21 = (var)210;
        private static readonly var arg_Vn_arrangement_size_Q___8B_00__16B_01 = (var)211;
        private static readonly var arg_Vn_arrangement_size_Q___8B_00__16B_01__1D_30__2D_31 = (var)212;
        private static readonly var arg_Vn_arrangement_size_Q___8B_00__16B_01__4H_10__8H_11 = (var)213;
        private static readonly var arg_Vn_arrangement_size_Q___8B_00__16B_01__4H_10__8H_11__2S_20__4S_21 = (var)214;
        private static readonly var arg_Vn_arrangement_size_Q___8B_00__16B_01__4H_10__8H_11__2S_20__4S_21__2D_31 = (var)215;
        private static readonly var arg_Vn_arrangement_size_Q___8B_00__16B_01__4H_10__8H_11__4S_21 = (var)216;
        private static readonly var arg_Vn_arrangement_sz___2D_1 = (var)217;
        private static readonly var arg_Vn_arrangement_sz___2S_0__2D_1 = (var)218;
        private static readonly var arg_Vn_arrangement_sz___4S_0__2D_1 = (var)219;
        private static readonly var arg_Vn_arrangement_sz_Q___2S_00__4S_01 = (var)220;
        private static readonly var arg_Vn_arrangement_sz_Q___2S_00__4S_01__2D_11 = (var)221;
        private static readonly var arg_Vn_arrangement_sz_Q___4H_00__8H_01__2S_10__4S_11 = (var)222;
        private static readonly var arg_Vt_1_arrangement_B_index__Q_S_size_1 = (var)223;
        private static readonly var arg_Vt_1_arrangement_D_index__Q_1 = (var)224;
        private static readonly var arg_Vt_1_arrangement_H_index__Q_S_size_1 = (var)225;
        private static readonly var arg_Vt_1_arrangement_S_index__Q_S_1 = (var)226;
        private static readonly var arg_Vt_1_arrangement_size_Q___8B_00__16B_01__4H_10__8H_11__2S_20__4S_21__1D_30__2D_31 = (var)227;
        private static readonly var arg_Vt_2_arrangement_B_index__Q_S_size_1 = (var)228;
        private static readonly var arg_Vt_2_arrangement_D_index__Q_1 = (var)229;
        private static readonly var arg_Vt_2_arrangement_H_index__Q_S_size_1 = (var)230;
        private static readonly var arg_Vt_2_arrangement_S_index__Q_S_1 = (var)231;
        private static readonly var arg_Vt_2_arrangement_size_Q___8B_00__16B_01__4H_10__8H_11__2S_20__4S_21__1D_30__2D_31 = (var)232;
        private static readonly var arg_Vt_2_arrangement_size_Q___8B_00__16B_01__4H_10__8H_11__2S_20__4S_21__2D_31 = (var)233;
        private static readonly var arg_Vt_3_arrangement_B_index__Q_S_size_1 = (var)234;
        private static readonly var arg_Vt_3_arrangement_D_index__Q_1 = (var)235;
        private static readonly var arg_Vt_3_arrangement_H_index__Q_S_size_1 = (var)236;
        private static readonly var arg_Vt_3_arrangement_S_index__Q_S_1 = (var)237;
        private static readonly var arg_Vt_3_arrangement_size_Q___8B_00__16B_01__4H_10__8H_11__2S_20__4S_21__1D_30__2D_31 = (var)238;
        private static readonly var arg_Vt_3_arrangement_size_Q___8B_00__16B_01__4H_10__8H_11__2S_20__4S_21__2D_31 = (var)239;
        private static readonly var arg_Vt_4_arrangement_B_index__Q_S_size_1 = (var)240;
        private static readonly var arg_Vt_4_arrangement_D_index__Q_1 = (var)241;
        private static readonly var arg_Vt_4_arrangement_H_index__Q_S_size_1 = (var)242;
        private static readonly var arg_Vt_4_arrangement_S_index__Q_S_1 = (var)243;
        private static readonly var arg_Vt_4_arrangement_size_Q___8B_00__16B_01__4H_10__8H_11__2S_20__4S_21__1D_30__2D_31 = (var)244;
        private static readonly var arg_Vt_4_arrangement_size_Q___8B_00__16B_01__4H_10__8H_11__2S_20__4S_21__2D_31 = (var)245;
        private static readonly var arg_Wa = (var)246;
        private static readonly var arg_Wd = (var)247;
        private static readonly var arg_Wds = (var)248;
        private static readonly var arg_Wm = (var)249;
        private static readonly var arg_Wm_extend__UXTB_0__UXTH_1__LSL_UXTW_2__UXTX_3__SXTB_4__SXTH_5__SXTW_6__SXTX_7__0_4 = (var)250;
        private static readonly var arg_Wm_shift__LSL_0__LSR_1__ASR_2__0_31 = (var)251;
        private static readonly var arg_Wm_shift__LSL_0__LSR_1__ASR_2__ROR_3__0_31 = (var)252;
        private static readonly var arg_Wn = (var)253;
        private static readonly var arg_Wns = (var)254;
        private static readonly var arg_Ws = (var)255;
        private static readonly var arg_Wt = (var)256;
        private static readonly var arg_Wt2 = (var)257;
        private static readonly var arg_Xa = (var)258;
        private static readonly var arg_Xd = (var)259;
        private static readonly var arg_Xds = (var)260;
        private static readonly var arg_Xm = (var)261;
        private static readonly var arg_Xm_shift__LSL_0__LSR_1__ASR_2__0_63 = (var)262;
        private static readonly var arg_Xm_shift__LSL_0__LSR_1__ASR_2__ROR_3__0_63 = (var)263;
        private static readonly var arg_Xn = (var)264;
        private static readonly var arg_Xns = (var)265;
        private static readonly var arg_Xns_mem = (var)266;
        private static readonly var arg_Xns_mem_extend_m__UXTW_2__LSL_3__SXTW_6__SXTX_7__0_0__1_1 = (var)267;
        private static readonly var arg_Xns_mem_extend_m__UXTW_2__LSL_3__SXTW_6__SXTX_7__0_0__2_1 = (var)268;
        private static readonly var arg_Xns_mem_extend_m__UXTW_2__LSL_3__SXTW_6__SXTX_7__0_0__3_1 = (var)269;
        private static readonly var arg_Xns_mem_extend_m__UXTW_2__LSL_3__SXTW_6__SXTX_7__0_0__4_1 = (var)270;
        private static readonly var arg_Xns_mem_extend_m__UXTW_2__LSL_3__SXTW_6__SXTX_7__absent_0__0_1 = (var)271;
        private static readonly var arg_Xns_mem_offset = (var)272;
        private static readonly var arg_Xns_mem_optional_imm12_16_unsigned = (var)273;
        private static readonly var arg_Xns_mem_optional_imm12_1_unsigned = (var)274;
        private static readonly var arg_Xns_mem_optional_imm12_2_unsigned = (var)275;
        private static readonly var arg_Xns_mem_optional_imm12_4_unsigned = (var)276;
        private static readonly var arg_Xns_mem_optional_imm12_8_unsigned = (var)277;
        private static readonly var arg_Xns_mem_optional_imm7_16_signed = (var)278;
        private static readonly var arg_Xns_mem_optional_imm7_4_signed = (var)279;
        private static readonly var arg_Xns_mem_optional_imm7_8_signed = (var)280;
        private static readonly var arg_Xns_mem_optional_imm9_1_signed = (var)281;
        private static readonly var arg_Xns_mem_post_fixedimm_1 = (var)282;
        private static readonly var arg_Xns_mem_post_fixedimm_12 = (var)283;
        private static readonly var arg_Xns_mem_post_fixedimm_16 = (var)284;
        private static readonly var arg_Xns_mem_post_fixedimm_2 = (var)285;
        private static readonly var arg_Xns_mem_post_fixedimm_24 = (var)286;
        private static readonly var arg_Xns_mem_post_fixedimm_3 = (var)287;
        private static readonly var arg_Xns_mem_post_fixedimm_32 = (var)288;
        private static readonly var arg_Xns_mem_post_fixedimm_4 = (var)289;
        private static readonly var arg_Xns_mem_post_fixedimm_6 = (var)290;
        private static readonly var arg_Xns_mem_post_fixedimm_8 = (var)291;
        private static readonly var arg_Xns_mem_post_imm7_16_signed = (var)292;
        private static readonly var arg_Xns_mem_post_imm7_4_signed = (var)293;
        private static readonly var arg_Xns_mem_post_imm7_8_signed = (var)294;
        private static readonly var arg_Xns_mem_post_imm9_1_signed = (var)295;
        private static readonly var arg_Xns_mem_post_Q__16_0__32_1 = (var)296;
        private static readonly var arg_Xns_mem_post_Q__24_0__48_1 = (var)297;
        private static readonly var arg_Xns_mem_post_Q__32_0__64_1 = (var)298;
        private static readonly var arg_Xns_mem_post_Q__8_0__16_1 = (var)299;
        private static readonly var arg_Xns_mem_post_size__1_0__2_1__4_2__8_3 = (var)300;
        private static readonly var arg_Xns_mem_post_size__2_0__4_1__8_2__16_3 = (var)301;
        private static readonly var arg_Xns_mem_post_size__3_0__6_1__12_2__24_3 = (var)302;
        private static readonly var arg_Xns_mem_post_size__4_0__8_1__16_2__32_3 = (var)303;
        private static readonly var arg_Xns_mem_post_Xm = (var)304;
        private static readonly var arg_Xns_mem_wb_imm7_16_signed = (var)305;
        private static readonly var arg_Xns_mem_wb_imm7_4_signed = (var)306;
        private static readonly var arg_Xns_mem_wb_imm7_8_signed = (var)307;
        private static readonly var arg_Xns_mem_wb_imm9_1_signed = (var)308;
        private static readonly var arg_Xs = (var)309;
        private static readonly var arg_Xt = (var)310;
        private static readonly var arg_Xt2 = (var)311;

    }
}}}}}}}
