//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:24:34 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using bytes = go.bytes_package;
using fmt = go.fmt_package;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace vendor {
namespace golang.org {
namespace x {
namespace arch {
namespace arm
{
    public static partial class armasm_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct RegX
        {
            // Constructors
            public RegX(NilType _)
            {
                this.Reg = default;
                this.Index = default;
            }

            public RegX(Reg Reg = default, nint Index = default)
            {
                this.Reg = Reg;
                this.Index = Index;
            }

            // Enable comparisons between nil and RegX struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(RegX value, NilType nil) => value.Equals(default(RegX));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(RegX value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, RegX value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, RegX value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator RegX(NilType nil) => default(RegX);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static RegX RegX_cast(dynamic value)
        {
            return new RegX(value.Reg, value.Index);
        }
    }
}}}}}}}