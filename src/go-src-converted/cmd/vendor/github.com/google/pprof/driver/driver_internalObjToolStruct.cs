//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 05:53:18 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using io = go.io_package;
using http = go.net.http_package;
using regexp = go.regexp_package;
using time = go.time_package;
using internaldriver = go.github.com.google.pprof.@internal.driver_package;
using plugin = go.github.com.google.pprof.@internal.plugin_package;
using profile = go.github.com.google.pprof.profile_package;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace vendor {
namespace github.com {
namespace google {
namespace pprof
{
    public static partial class driver_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct internalObjTool
        {
            // ObjTool.Open function promotion
            private delegate (slice<Inst>, error) OpenByVal(T value, @string file, ulong start, ulong limit, ulong offset);
            private delegate (slice<Inst>, error) OpenByRef(ref T value, @string file, ulong start, ulong limit, ulong offset);

            private static readonly OpenByVal s_OpenByVal;
            private static readonly OpenByRef s_OpenByRef;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (slice<Inst>, error) Open(@string file, ulong start, ulong limit, ulong offset) => s_OpenByRef?.Invoke(ref this, file, start, limit, offset) ?? s_OpenByVal?.Invoke(this, file, start, limit, offset) ?? ObjTool?.Open(file, start, limit, offset) ?? throw new PanicException(RuntimeErrorPanic.NilPointerDereference);

            // ObjTool.Disasm function promotion
            private delegate (slice<Inst>, error) DisasmByVal(T value, @string file, ulong start, ulong end);
            private delegate (slice<Inst>, error) DisasmByRef(ref T value, @string file, ulong start, ulong end);

            private static readonly DisasmByVal s_DisasmByVal;
            private static readonly DisasmByRef s_DisasmByRef;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (slice<Inst>, error) Disasm(@string file, ulong start, ulong end) => s_DisasmByRef?.Invoke(ref this, file, start, end) ?? s_DisasmByVal?.Invoke(this, file, start, end) ?? ObjTool?.Disasm(file, start, end) ?? throw new PanicException(RuntimeErrorPanic.NilPointerDereference);
            
            [DebuggerStepperBoundary]
            static internalObjTool()
            {
                Type targetType = typeof(internalObjTool);
                MethodInfo extensionMethod;
                
                extensionMethod = targetType.GetExtensionMethodSearchingPromotions("Open");

                if ((object)extensionMethod != null)
                {
                    s_OpenByRef = extensionMethod.CreateStaticDelegate(typeof(OpenByRef)) as OpenByRef;

                    if ((object)s_OpenByRef == null)
                        s_OpenByVal = extensionMethod.CreateStaticDelegate(typeof(OpenByVal)) as OpenByVal;
                }
                
                extensionMethod = targetType.GetExtensionMethodSearchingPromotions("Disasm");

                if ((object)extensionMethod != null)
                {
                    s_DisasmByRef = extensionMethod.CreateStaticDelegate(typeof(DisasmByRef)) as DisasmByRef;

                    if ((object)s_DisasmByRef == null)
                        s_DisasmByVal = extensionMethod.CreateStaticDelegate(typeof(DisasmByVal)) as DisasmByVal;
                }
            }

            // Constructors
            public internalObjTool(NilType _)
            {
                this.ObjTool = default;
            }

            public internalObjTool(ObjTool ObjTool = default)
            {
                this.ObjTool = ObjTool;
            }

            // Enable comparisons between nil and internalObjTool struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(internalObjTool value, NilType nil) => value.Equals(default(internalObjTool));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(internalObjTool value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, internalObjTool value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, internalObjTool value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator internalObjTool(NilType nil) => default(internalObjTool);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static internalObjTool internalObjTool_cast(dynamic value)
        {
            return new internalObjTool(value.ObjTool);
        }
    }
}}}}}}