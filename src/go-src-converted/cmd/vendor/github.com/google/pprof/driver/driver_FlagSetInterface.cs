//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 05:53:18 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using io = go.io_package;
using http = go.net.http_package;
using regexp = go.regexp_package;
using time = go.time_package;
using internaldriver = go.github.com.google.pprof.@internal.driver_package;
using plugin = go.github.com.google.pprof.@internal.plugin_package;
using profile = go.github.com.google.pprof.profile_package;
using go;

#nullable enable
#pragma warning disable CS0660, CS0661

namespace go {
namespace cmd {
namespace vendor {
namespace github.com {
namespace google {
namespace pprof
{
    public static partial class driver_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface FlagSet
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static FlagSet As<T>(in T target) => (FlagSet<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static FlagSet As<T>(ptr<T> target_ptr) => (FlagSet<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static FlagSet? As(object target) =>
                typeof(FlagSet<>).CreateInterfaceHandler<FlagSet>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class FlagSet<T> : FlagSet
        {
            private T m_target = default!;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public FlagSet(in T target) => m_target = target;

            public FlagSet(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate slice<@string> BoolByPtr(ptr<T> value, @string name, bool def, @string usage);
            private delegate slice<@string> BoolByVal(T value, @string name, bool def, @string usage);

            private static readonly BoolByPtr? s_BoolByPtr;
            private static readonly BoolByVal? s_BoolByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public slice<@string> Bool(@string name, bool def, @string usage)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_BoolByPtr is null || !m_target_is_ptr)
                    return s_BoolByVal!(target, name, def, usage);

                return s_BoolByPtr(m_target_ptr, name, def, usage);
            }

            private delegate slice<@string> IntByPtr(ptr<T> value, @string name, long def, @string usage);
            private delegate slice<@string> IntByVal(T value, @string name, long def, @string usage);

            private static readonly IntByPtr? s_IntByPtr;
            private static readonly IntByVal? s_IntByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public slice<@string> Int(@string name, long def, @string usage)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_IntByPtr is null || !m_target_is_ptr)
                    return s_IntByVal!(target, name, def, usage);

                return s_IntByPtr(m_target_ptr, name, def, usage);
            }

            private delegate slice<@string> Float64ByPtr(ptr<T> value, @string name, double def, @string usage);
            private delegate slice<@string> Float64ByVal(T value, @string name, double def, @string usage);

            private static readonly Float64ByPtr? s_Float64ByPtr;
            private static readonly Float64ByVal? s_Float64ByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public slice<@string> Float64(@string name, double def, @string usage)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_Float64ByPtr is null || !m_target_is_ptr)
                    return s_Float64ByVal!(target, name, def, usage);

                return s_Float64ByPtr(m_target_ptr, name, def, usage);
            }

            private delegate slice<@string> StringByPtr(ptr<T> value, @string name, @string def, @string usage);
            private delegate slice<@string> StringByVal(T value, @string name, @string def, @string usage);

            private static readonly StringByPtr? s_StringByPtr;
            private static readonly StringByVal? s_StringByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public slice<@string> String(@string name, @string def, @string usage)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_StringByPtr is null || !m_target_is_ptr)
                    return s_StringByVal!(target, name, def, usage);

                return s_StringByPtr(m_target_ptr, name, def, usage);
            }

            private delegate slice<@string> StringListByPtr(ptr<T> value, @string name, @string def, @string usage);
            private delegate slice<@string> StringListByVal(T value, @string name, @string def, @string usage);

            private static readonly StringListByPtr? s_StringListByPtr;
            private static readonly StringListByVal? s_StringListByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public slice<@string> StringList(@string name, @string def, @string usage)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_StringListByPtr is null || !m_target_is_ptr)
                    return s_StringListByVal!(target, name, def, usage);

                return s_StringListByPtr(m_target_ptr, name, def, usage);
            }

            private delegate slice<@string> ExtraUsageByPtr(ptr<T> value);
            private delegate slice<@string> ExtraUsageByVal(T value);

            private static readonly ExtraUsageByPtr? s_ExtraUsageByPtr;
            private static readonly ExtraUsageByVal? s_ExtraUsageByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public slice<@string> ExtraUsage()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_ExtraUsageByPtr is null || !m_target_is_ptr)
                    return s_ExtraUsageByVal!(target);

                return s_ExtraUsageByPtr(m_target_ptr);
            }

            private delegate slice<@string> AddExtraUsageByPtr(ptr<T> value, @string eu);
            private delegate slice<@string> AddExtraUsageByVal(T value, @string eu);

            private static readonly AddExtraUsageByPtr? s_AddExtraUsageByPtr;
            private static readonly AddExtraUsageByVal? s_AddExtraUsageByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public slice<@string> AddExtraUsage(@string eu)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_AddExtraUsageByPtr is null || !m_target_is_ptr)
                    return s_AddExtraUsageByVal!(target, eu);

                return s_AddExtraUsageByPtr(m_target_ptr, eu);
            }

            private delegate slice<@string> ParseByPtr(ptr<T> value, Action usage);
            private delegate slice<@string> ParseByVal(T value, Action usage);

            private static readonly ParseByPtr? s_ParseByPtr;
            private static readonly ParseByVal? s_ParseByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public slice<@string> Parse(Action usage)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_ParseByPtr is null || !m_target_is_ptr)
                    return s_ParseByVal!(target, usage);

                return s_ParseByPtr(m_target_ptr, usage);
            }
            
            public string ToString(string? format, IFormatProvider? formatProvider) => format;

            [DebuggerStepperBoundary]
            static FlagSet()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Bool");

                if (!(extensionMethod is null))
                    s_BoolByPtr = extensionMethod.CreateStaticDelegate(typeof(BoolByPtr)) as BoolByPtr;

                extensionMethod = targetType.GetExtensionMethod("Bool");

                if (!(extensionMethod is null))
                    s_BoolByVal = extensionMethod.CreateStaticDelegate(typeof(BoolByVal)) as BoolByVal;

                if (s_BoolByPtr is null && s_BoolByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement FlagSet.Bool method", new Exception("Bool"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Int");

                if (!(extensionMethod is null))
                    s_IntByPtr = extensionMethod.CreateStaticDelegate(typeof(IntByPtr)) as IntByPtr;

                extensionMethod = targetType.GetExtensionMethod("Int");

                if (!(extensionMethod is null))
                    s_IntByVal = extensionMethod.CreateStaticDelegate(typeof(IntByVal)) as IntByVal;

                if (s_IntByPtr is null && s_IntByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement FlagSet.Int method", new Exception("Int"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Float64");

                if (!(extensionMethod is null))
                    s_Float64ByPtr = extensionMethod.CreateStaticDelegate(typeof(Float64ByPtr)) as Float64ByPtr;

                extensionMethod = targetType.GetExtensionMethod("Float64");

                if (!(extensionMethod is null))
                    s_Float64ByVal = extensionMethod.CreateStaticDelegate(typeof(Float64ByVal)) as Float64ByVal;

                if (s_Float64ByPtr is null && s_Float64ByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement FlagSet.Float64 method", new Exception("Float64"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("String");

                if (!(extensionMethod is null))
                    s_StringByPtr = extensionMethod.CreateStaticDelegate(typeof(StringByPtr)) as StringByPtr;

                extensionMethod = targetType.GetExtensionMethod("String");

                if (!(extensionMethod is null))
                    s_StringByVal = extensionMethod.CreateStaticDelegate(typeof(StringByVal)) as StringByVal;

                if (s_StringByPtr is null && s_StringByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement FlagSet.String method", new Exception("String"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("StringList");

                if (!(extensionMethod is null))
                    s_StringListByPtr = extensionMethod.CreateStaticDelegate(typeof(StringListByPtr)) as StringListByPtr;

                extensionMethod = targetType.GetExtensionMethod("StringList");

                if (!(extensionMethod is null))
                    s_StringListByVal = extensionMethod.CreateStaticDelegate(typeof(StringListByVal)) as StringListByVal;

                if (s_StringListByPtr is null && s_StringListByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement FlagSet.StringList method", new Exception("StringList"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("ExtraUsage");

                if (!(extensionMethod is null))
                    s_ExtraUsageByPtr = extensionMethod.CreateStaticDelegate(typeof(ExtraUsageByPtr)) as ExtraUsageByPtr;

                extensionMethod = targetType.GetExtensionMethod("ExtraUsage");

                if (!(extensionMethod is null))
                    s_ExtraUsageByVal = extensionMethod.CreateStaticDelegate(typeof(ExtraUsageByVal)) as ExtraUsageByVal;

                if (s_ExtraUsageByPtr is null && s_ExtraUsageByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement FlagSet.ExtraUsage method", new Exception("ExtraUsage"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("AddExtraUsage");

                if (!(extensionMethod is null))
                    s_AddExtraUsageByPtr = extensionMethod.CreateStaticDelegate(typeof(AddExtraUsageByPtr)) as AddExtraUsageByPtr;

                extensionMethod = targetType.GetExtensionMethod("AddExtraUsage");

                if (!(extensionMethod is null))
                    s_AddExtraUsageByVal = extensionMethod.CreateStaticDelegate(typeof(AddExtraUsageByVal)) as AddExtraUsageByVal;

                if (s_AddExtraUsageByPtr is null && s_AddExtraUsageByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement FlagSet.AddExtraUsage method", new Exception("AddExtraUsage"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Parse");

                if (!(extensionMethod is null))
                    s_ParseByPtr = extensionMethod.CreateStaticDelegate(typeof(ParseByPtr)) as ParseByPtr;

                extensionMethod = targetType.GetExtensionMethod("Parse");

                if (!(extensionMethod is null))
                    s_ParseByVal = extensionMethod.CreateStaticDelegate(typeof(ParseByVal)) as ParseByVal;

                if (s_ParseByPtr is null && s_ParseByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement FlagSet.Parse method", new Exception("Parse"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator FlagSet<T>(in ptr<T> target_ptr) => new FlagSet<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator FlagSet<T>(in T target) => new FlagSet<T>(target);

            // Enable comparisons between nil and FlagSet<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(FlagSet<T> value, NilType nil) => Activator.CreateInstance<FlagSet<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(FlagSet<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, FlagSet<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, FlagSet<T> value) => value != nil;
        }
    }
}}}}}}

namespace go
{
    public static class driver_FlagSetExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.cmd.vendor.github.com.google.pprof.driver_package.FlagSet target)
        {
            try
            {
                return ((go.cmd.vendor.github.com.google.pprof.driver_package.FlagSet<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.cmd.vendor.github.com.google.pprof.driver_package.FlagSet target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.cmd.vendor.github.com.google.pprof.driver_package.FlagSet target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.cmd.vendor.github.com.google.pprof.driver_package.FlagSet<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.cmd.vendor.github.com.google.pprof.driver_package.FlagSet target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}