//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:23:39 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Runtime.CompilerServices;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace vendor {
namespace github.com {
namespace google {
namespace pprof {
namespace @internal
{
    public static partial class graph_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct EdgeMap : IMap
        {
            // Value of the EdgeMap struct
            private readonly map<ptr<Node>, ptr<Edge>> m_value;
            
            public nint Length => ((IMap)m_value).Length;

            object? IMap.this[object key]
            {
                get => ((IMap)m_value)[key];
                set => ((IMap)m_value)[key] = value;
            }

            public ptr<Edge> this[ptr<Node> key]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => m_value[key];
            
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                set => m_value[key] = value;
            }

            public (ptr<Edge>, bool) this[ptr<Node> key, bool _]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => m_value.TryGetValue(key, out ptr<Edge> value) ? (value!, true) : (default!, false);
            }

            public EdgeMap(map<ptr<Node>, ptr<Edge>> value) => m_value = value;

            // Enable implicit conversions between map<ptr<Node>, ptr<Edge>> and EdgeMap struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator EdgeMap(map<ptr<Node>, ptr<Edge>> value) => new EdgeMap(value);
            
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator map<ptr<Node>, ptr<Edge>>(EdgeMap value) => value.m_value;
            
            // Enable comparisons between nil and EdgeMap struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(EdgeMap value, NilType nil) => value.Equals(default(EdgeMap));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(EdgeMap value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, EdgeMap value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, EdgeMap value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator EdgeMap(NilType nil) => default(EdgeMap);
        }
    }
}}}}}}}
