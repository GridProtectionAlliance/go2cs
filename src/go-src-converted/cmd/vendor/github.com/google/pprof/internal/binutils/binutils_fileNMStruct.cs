//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 06:36:23 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using elf = go.debug.elf_package;
using macho = go.debug.macho_package;
using pe = go.debug.pe_package;
using binary = go.encoding.binary_package;
using errors = go.errors_package;
using fmt = go.fmt_package;
using io = go.io_package;
using os = go.os_package;
using exec = go.os.exec_package;
using filepath = go.path.filepath_package;
using regexp = go.regexp_package;
using runtime = go.runtime_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using sync = go.sync_package;
using elfexec = go.github.com.google.pprof.@internal.elfexec_package;
using plugin = go.github.com.google.pprof.@internal.plugin_package;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace vendor {
namespace github.com {
namespace google {
namespace pprof {
namespace @internal
{
    public static partial class binutils_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        [PromotedStruct(typeof(file))]
        private partial struct fileNM
        {
            // file structure promotion - sourced from value copy
            private readonly ptr<file> m_fileRef;

            private ref file file_val => ref m_fileRef.Value;

            public ref ptr<binrep> b => ref m_fileRef.Value.b;

            public ref @string name => ref m_fileRef.Value.name;

            public ref @string buildID => ref m_fileRef.Value.buildID;

            public ref sync.Once baseOnce => ref m_fileRef.Value.baseOnce;

            public ref ulong @base => ref m_fileRef.Value.@base;

            public ref error baseErr => ref m_fileRef.Value.baseErr;

            public ref bool isData => ref m_fileRef.Value.isData;

            public ref ptr<elfMapping> m => ref m_fileRef.Value.m;

            // Constructors
            public fileNM(NilType _)
            {
                this.m_fileRef = new ptr<file>(new file(nil));
                this.addr2linernm = default;
            }

            public fileNM(file file = default, ref ptr<addr2LinerNM> addr2linernm = default)
            {
                this.m_fileRef = new ptr<file>(file);
                this.addr2linernm = addr2linernm;
            }

            // Enable comparisons between nil and fileNM struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(fileNM value, NilType nil) => value.Equals(default(fileNM));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(fileNM value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, fileNM value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, fileNM value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator fileNM(NilType nil) => default(fileNM);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private static fileNM fileNM_cast(dynamic value)
        {
            return new fileNM(value.file, ref value.addr2linernm);
        }
    }
}}}}}}}