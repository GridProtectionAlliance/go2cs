//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:23:40 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using io = go.io_package;
using http = go.net.http_package;
using regexp = go.regexp_package;
using time = go.time_package;
using profile = go.github.com.google.pprof.profile_package;
using go;

#nullable enable
#pragma warning disable CS0660, CS0661

namespace go {
namespace cmd {
namespace vendor {
namespace github.com {
namespace google {
namespace pprof {
namespace @internal
{
    public static partial class plugin_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface ObjFile
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static ObjFile As<T>(in T target) => (ObjFile<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static ObjFile As<T>(ptr<T> target_ptr) => (ObjFile<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static ObjFile? As(object target) =>
                typeof(ObjFile<>).CreateInterfaceHandler<ObjFile>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class ObjFile<T> : ObjFile
        {
            private T m_target = default!;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && m_target_ptr is not null)
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public ObjFile(in T target) => m_target = target;

            public ObjFile(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate error NameByPtr(ptr<T> value);
            private delegate error NameByVal(T value);

            private static readonly NameByPtr? s_NameByPtr;
            private static readonly NameByVal? s_NameByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error Name()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_NameByPtr is null || !m_target_is_ptr)
                    return s_NameByVal!(target);

                return s_NameByPtr(m_target_ptr!);
            }

            private delegate error ObjAddrByPtr(ptr<T> value, ulong addr);
            private delegate error ObjAddrByVal(T value, ulong addr);

            private static readonly ObjAddrByPtr? s_ObjAddrByPtr;
            private static readonly ObjAddrByVal? s_ObjAddrByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error ObjAddr(ulong addr)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_ObjAddrByPtr is null || !m_target_is_ptr)
                    return s_ObjAddrByVal!(target, addr);

                return s_ObjAddrByPtr(m_target_ptr!, addr);
            }

            private delegate error BuildIDByPtr(ptr<T> value);
            private delegate error BuildIDByVal(T value);

            private static readonly BuildIDByPtr? s_BuildIDByPtr;
            private static readonly BuildIDByVal? s_BuildIDByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error BuildID()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_BuildIDByPtr is null || !m_target_is_ptr)
                    return s_BuildIDByVal!(target);

                return s_BuildIDByPtr(m_target_ptr!);
            }

            private delegate error SourceLineByPtr(ptr<T> value, ulong addr);
            private delegate error SourceLineByVal(T value, ulong addr);

            private static readonly SourceLineByPtr? s_SourceLineByPtr;
            private static readonly SourceLineByVal? s_SourceLineByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error SourceLine(ulong addr)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_SourceLineByPtr is null || !m_target_is_ptr)
                    return s_SourceLineByVal!(target, addr);

                return s_SourceLineByPtr(m_target_ptr!, addr);
            }

            private delegate error SymbolsByPtr(ptr<T> value, ptr<regexp.Regexp> r, ulong addr);
            private delegate error SymbolsByVal(T value, ptr<regexp.Regexp> r, ulong addr);

            private static readonly SymbolsByPtr? s_SymbolsByPtr;
            private static readonly SymbolsByVal? s_SymbolsByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error Symbols(ptr<regexp.Regexp> r, ulong addr)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_SymbolsByPtr is null || !m_target_is_ptr)
                    return s_SymbolsByVal!(target, r, addr);

                return s_SymbolsByPtr(m_target_ptr!, r, addr);
            }

            private delegate error CloseByPtr(ptr<T> value);
            private delegate error CloseByVal(T value);

            private static readonly CloseByPtr? s_CloseByPtr;
            private static readonly CloseByVal? s_CloseByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error Close()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_CloseByPtr is null || !m_target_is_ptr)
                    return s_CloseByVal!(target);

                return s_CloseByPtr(m_target_ptr!);
            }
            
            public string ToString(string? format, IFormatProvider? formatProvider) => format ?? GetGoTypeName(typeof(T));

            [DebuggerStepperBoundary]
            static ObjFile()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Name");

                if (extensionMethod is not null)
                    s_NameByPtr = extensionMethod.CreateStaticDelegate(typeof(NameByPtr)) as NameByPtr;

                extensionMethod = targetType.GetExtensionMethod("Name");

                if (extensionMethod is not null)
                    s_NameByVal = extensionMethod.CreateStaticDelegate(typeof(NameByVal)) as NameByVal;

                if (s_NameByPtr is null && s_NameByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ObjFile.Name method", new Exception("Name"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("ObjAddr");

                if (extensionMethod is not null)
                    s_ObjAddrByPtr = extensionMethod.CreateStaticDelegate(typeof(ObjAddrByPtr)) as ObjAddrByPtr;

                extensionMethod = targetType.GetExtensionMethod("ObjAddr");

                if (extensionMethod is not null)
                    s_ObjAddrByVal = extensionMethod.CreateStaticDelegate(typeof(ObjAddrByVal)) as ObjAddrByVal;

                if (s_ObjAddrByPtr is null && s_ObjAddrByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ObjFile.ObjAddr method", new Exception("ObjAddr"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("BuildID");

                if (extensionMethod is not null)
                    s_BuildIDByPtr = extensionMethod.CreateStaticDelegate(typeof(BuildIDByPtr)) as BuildIDByPtr;

                extensionMethod = targetType.GetExtensionMethod("BuildID");

                if (extensionMethod is not null)
                    s_BuildIDByVal = extensionMethod.CreateStaticDelegate(typeof(BuildIDByVal)) as BuildIDByVal;

                if (s_BuildIDByPtr is null && s_BuildIDByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ObjFile.BuildID method", new Exception("BuildID"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("SourceLine");

                if (extensionMethod is not null)
                    s_SourceLineByPtr = extensionMethod.CreateStaticDelegate(typeof(SourceLineByPtr)) as SourceLineByPtr;

                extensionMethod = targetType.GetExtensionMethod("SourceLine");

                if (extensionMethod is not null)
                    s_SourceLineByVal = extensionMethod.CreateStaticDelegate(typeof(SourceLineByVal)) as SourceLineByVal;

                if (s_SourceLineByPtr is null && s_SourceLineByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ObjFile.SourceLine method", new Exception("SourceLine"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Symbols");

                if (extensionMethod is not null)
                    s_SymbolsByPtr = extensionMethod.CreateStaticDelegate(typeof(SymbolsByPtr)) as SymbolsByPtr;

                extensionMethod = targetType.GetExtensionMethod("Symbols");

                if (extensionMethod is not null)
                    s_SymbolsByVal = extensionMethod.CreateStaticDelegate(typeof(SymbolsByVal)) as SymbolsByVal;

                if (s_SymbolsByPtr is null && s_SymbolsByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ObjFile.Symbols method", new Exception("Symbols"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Close");

                if (extensionMethod is not null)
                    s_CloseByPtr = extensionMethod.CreateStaticDelegate(typeof(CloseByPtr)) as CloseByPtr;

                extensionMethod = targetType.GetExtensionMethod("Close");

                if (extensionMethod is not null)
                    s_CloseByVal = extensionMethod.CreateStaticDelegate(typeof(CloseByVal)) as CloseByVal;

                if (s_CloseByPtr is null && s_CloseByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ObjFile.Close method", new Exception("Close"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator ObjFile<T>(in ptr<T> target_ptr) => new ObjFile<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator ObjFile<T>(in T target) => new ObjFile<T>(target);

            // Enable comparisons between nil and ObjFile<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(ObjFile<T> value, NilType nil) => Activator.CreateInstance<ObjFile<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(ObjFile<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, ObjFile<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, ObjFile<T> value) => value != nil;
        }
    }
}}}}}}}

namespace go
{
    public static class plugin_ObjFileExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.cmd.vendor.github.com.google.pprof.@internal.plugin_package.ObjFile target)
        {
            try
            {
                return ((go.cmd.vendor.github.com.google.pprof.@internal.plugin_package.ObjFile<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.cmd.vendor.github.com.google.pprof.@internal.plugin_package.ObjFile target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.cmd.vendor.github.com.google.pprof.@internal.plugin_package.ObjFile target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.cmd.vendor.github.com.google.pprof.@internal.plugin_package.ObjFile<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.cmd.vendor.github.com.google.pprof.@internal.plugin_package.ObjFile target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}