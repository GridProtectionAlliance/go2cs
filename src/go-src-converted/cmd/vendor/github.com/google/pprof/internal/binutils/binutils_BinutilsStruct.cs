//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:23:18 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using elf = go.debug.elf_package;
using macho = go.debug.macho_package;
using pe = go.debug.pe_package;
using binary = go.encoding.binary_package;
using errors = go.errors_package;
using fmt = go.fmt_package;
using io = go.io_package;
using os = go.os_package;
using exec = go.os.exec_package;
using filepath = go.path.filepath_package;
using regexp = go.regexp_package;
using runtime = go.runtime_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using sync = go.sync_package;
using elfexec = go.github.com.google.pprof.@internal.elfexec_package;
using plugin = go.github.com.google.pprof.@internal.plugin_package;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace vendor {
namespace github.com {
namespace google {
namespace pprof {
namespace @internal
{
    public static partial class binutils_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Binutils
        {
            // Constructors
            public Binutils(NilType _)
            {
                this.mu = default;
                this.rep = default;
            }

            public Binutils(sync.Mutex mu = default, ref ptr<binrep> rep = default)
            {
                this.mu = mu;
                this.rep = rep;
            }

            // Enable comparisons between nil and Binutils struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Binutils value, NilType nil) => value.Equals(default(Binutils));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Binutils value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Binutils value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Binutils value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Binutils(NilType nil) => default(Binutils);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Binutils Binutils_cast(dynamic value)
        {
            return new Binutils(value.mu, ref value.rep);
        }
    }
}}}}}}}