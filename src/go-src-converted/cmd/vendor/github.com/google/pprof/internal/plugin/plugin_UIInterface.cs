//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:23:40 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using io = go.io_package;
using http = go.net.http_package;
using regexp = go.regexp_package;
using time = go.time_package;
using profile = go.github.com.google.pprof.profile_package;
using go;

#nullable enable
#pragma warning disable CS0660, CS0661

namespace go {
namespace cmd {
namespace vendor {
namespace github.com {
namespace google {
namespace pprof {
namespace @internal
{
    public static partial class plugin_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface UI
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static UI As<T>(in T target) => (UI<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static UI As<T>(ptr<T> target_ptr) => (UI<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static UI? As(object target) =>
                typeof(UI<>).CreateInterfaceHandler<UI>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class UI<T> : UI
        {
            private T m_target = default!;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && m_target_ptr is not null)
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public UI(in T target) => m_target = target;

            public UI(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate @string ReadLineByPtr(ptr<T> value, @string prompt);
            private delegate @string ReadLineByVal(T value, @string prompt);

            private static readonly ReadLineByPtr? s_ReadLineByPtr;
            private static readonly ReadLineByVal? s_ReadLineByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public @string ReadLine(@string prompt)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_ReadLineByPtr is null || !m_target_is_ptr)
                    return s_ReadLineByVal!(target, prompt);

                return s_ReadLineByPtr(m_target_ptr!, prompt);
            }

            private delegate @string PrintByPtr(ptr<T> value, params object _p0);
            private delegate @string PrintByVal(T value, params object _p0);

            private static readonly PrintByPtr? s_PrintByPtr;
            private static readonly PrintByVal? s_PrintByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public @string Print(params object _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_PrintByPtr is null || !m_target_is_ptr)
                    return s_PrintByVal!(target, _p0);

                return s_PrintByPtr(m_target_ptr!, _p0);
            }

            private delegate @string PrintErrByPtr(ptr<T> value, params object _p0);
            private delegate @string PrintErrByVal(T value, params object _p0);

            private static readonly PrintErrByPtr? s_PrintErrByPtr;
            private static readonly PrintErrByVal? s_PrintErrByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public @string PrintErr(params object _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_PrintErrByPtr is null || !m_target_is_ptr)
                    return s_PrintErrByVal!(target, _p0);

                return s_PrintErrByPtr(m_target_ptr!, _p0);
            }

            private delegate @string IsTerminalByPtr(ptr<T> value);
            private delegate @string IsTerminalByVal(T value);

            private static readonly IsTerminalByPtr? s_IsTerminalByPtr;
            private static readonly IsTerminalByVal? s_IsTerminalByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public @string IsTerminal()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_IsTerminalByPtr is null || !m_target_is_ptr)
                    return s_IsTerminalByVal!(target);

                return s_IsTerminalByPtr(m_target_ptr!);
            }

            private delegate @string WantBrowserByPtr(ptr<T> value);
            private delegate @string WantBrowserByVal(T value);

            private static readonly WantBrowserByPtr? s_WantBrowserByPtr;
            private static readonly WantBrowserByVal? s_WantBrowserByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public @string WantBrowser()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_WantBrowserByPtr is null || !m_target_is_ptr)
                    return s_WantBrowserByVal!(target);

                return s_WantBrowserByPtr(m_target_ptr!);
            }

            private delegate @string SetAutoCompleteByPtr(ptr<T> value, Func<@string, @string> complete);
            private delegate @string SetAutoCompleteByVal(T value, Func<@string, @string> complete);

            private static readonly SetAutoCompleteByPtr? s_SetAutoCompleteByPtr;
            private static readonly SetAutoCompleteByVal? s_SetAutoCompleteByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public @string SetAutoComplete(Func<@string, @string> complete)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_SetAutoCompleteByPtr is null || !m_target_is_ptr)
                    return s_SetAutoCompleteByVal!(target, complete);

                return s_SetAutoCompleteByPtr(m_target_ptr!, complete);
            }
            
            public string ToString(string? format, IFormatProvider? formatProvider) => format ?? GetGoTypeName(typeof(T));

            [DebuggerStepperBoundary]
            static UI()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("ReadLine");

                if (extensionMethod is not null)
                    s_ReadLineByPtr = extensionMethod.CreateStaticDelegate(typeof(ReadLineByPtr)) as ReadLineByPtr;

                extensionMethod = targetType.GetExtensionMethod("ReadLine");

                if (extensionMethod is not null)
                    s_ReadLineByVal = extensionMethod.CreateStaticDelegate(typeof(ReadLineByVal)) as ReadLineByVal;

                if (s_ReadLineByPtr is null && s_ReadLineByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement UI.ReadLine method", new Exception("ReadLine"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Print");

                if (extensionMethod is not null)
                    s_PrintByPtr = extensionMethod.CreateStaticDelegate(typeof(PrintByPtr)) as PrintByPtr;

                extensionMethod = targetType.GetExtensionMethod("Print");

                if (extensionMethod is not null)
                    s_PrintByVal = extensionMethod.CreateStaticDelegate(typeof(PrintByVal)) as PrintByVal;

                if (s_PrintByPtr is null && s_PrintByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement UI.Print method", new Exception("Print"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("PrintErr");

                if (extensionMethod is not null)
                    s_PrintErrByPtr = extensionMethod.CreateStaticDelegate(typeof(PrintErrByPtr)) as PrintErrByPtr;

                extensionMethod = targetType.GetExtensionMethod("PrintErr");

                if (extensionMethod is not null)
                    s_PrintErrByVal = extensionMethod.CreateStaticDelegate(typeof(PrintErrByVal)) as PrintErrByVal;

                if (s_PrintErrByPtr is null && s_PrintErrByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement UI.PrintErr method", new Exception("PrintErr"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("IsTerminal");

                if (extensionMethod is not null)
                    s_IsTerminalByPtr = extensionMethod.CreateStaticDelegate(typeof(IsTerminalByPtr)) as IsTerminalByPtr;

                extensionMethod = targetType.GetExtensionMethod("IsTerminal");

                if (extensionMethod is not null)
                    s_IsTerminalByVal = extensionMethod.CreateStaticDelegate(typeof(IsTerminalByVal)) as IsTerminalByVal;

                if (s_IsTerminalByPtr is null && s_IsTerminalByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement UI.IsTerminal method", new Exception("IsTerminal"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("WantBrowser");

                if (extensionMethod is not null)
                    s_WantBrowserByPtr = extensionMethod.CreateStaticDelegate(typeof(WantBrowserByPtr)) as WantBrowserByPtr;

                extensionMethod = targetType.GetExtensionMethod("WantBrowser");

                if (extensionMethod is not null)
                    s_WantBrowserByVal = extensionMethod.CreateStaticDelegate(typeof(WantBrowserByVal)) as WantBrowserByVal;

                if (s_WantBrowserByPtr is null && s_WantBrowserByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement UI.WantBrowser method", new Exception("WantBrowser"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("SetAutoComplete");

                if (extensionMethod is not null)
                    s_SetAutoCompleteByPtr = extensionMethod.CreateStaticDelegate(typeof(SetAutoCompleteByPtr)) as SetAutoCompleteByPtr;

                extensionMethod = targetType.GetExtensionMethod("SetAutoComplete");

                if (extensionMethod is not null)
                    s_SetAutoCompleteByVal = extensionMethod.CreateStaticDelegate(typeof(SetAutoCompleteByVal)) as SetAutoCompleteByVal;

                if (s_SetAutoCompleteByPtr is null && s_SetAutoCompleteByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement UI.SetAutoComplete method", new Exception("SetAutoComplete"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator UI<T>(in ptr<T> target_ptr) => new UI<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator UI<T>(in T target) => new UI<T>(target);

            // Enable comparisons between nil and UI<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(UI<T> value, NilType nil) => Activator.CreateInstance<UI<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(UI<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, UI<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, UI<T> value) => value != nil;
        }
    }
}}}}}}}

namespace go
{
    public static class plugin_UIExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.cmd.vendor.github.com.google.pprof.@internal.plugin_package.UI target)
        {
            try
            {
                return ((go.cmd.vendor.github.com.google.pprof.@internal.plugin_package.UI<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.cmd.vendor.github.com.google.pprof.@internal.plugin_package.UI target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.cmd.vendor.github.com.google.pprof.@internal.plugin_package.UI target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.cmd.vendor.github.com.google.pprof.@internal.plugin_package.UI<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.cmd.vendor.github.com.google.pprof.@internal.plugin_package.UI target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}