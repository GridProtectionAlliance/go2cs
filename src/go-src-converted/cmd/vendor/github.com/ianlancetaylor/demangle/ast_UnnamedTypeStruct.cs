//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 06:37:26 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using fmt = go.fmt_package;
using strings = go.strings_package;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace vendor {
namespace github.com {
namespace ianlancetaylor
{
    public static partial class demangle_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        public partial struct UnnamedType
        {
            // Constructors
            public UnnamedType(NilType _)
            {
                this.Num = default;
            }

            public UnnamedType(nint Num = default)
            {
                this.Num = Num;
            }

            // Enable comparisons between nil and UnnamedType struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(UnnamedType value, NilType nil) => value.Equals(default(UnnamedType));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(UnnamedType value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, UnnamedType value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, UnnamedType value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator UnnamedType(NilType nil) => default(UnnamedType);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        public static UnnamedType UnnamedType_cast(dynamic value)
        {
            return new UnnamedType(value.Num);
        }
    }
}}}}}