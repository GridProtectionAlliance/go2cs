// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// package main -- go2cs converted at 2022 March 13 06:28:48 UTC
// Original source: C:\Program Files\Go\src\cmd\dist\buildruntime.go
namespace go;

using bytes = bytes_package;
using fmt = fmt_package;
using os = os_package;
using strings = strings_package;


/*
 * Helpers for building runtime.
 */

// mkzversion writes zversion.go:
//
//    package sys
//
//    const StackGuardMultiplier = <multiplier value>
//

public static partial class main_package {

private static void mkzversion(@string dir, @string file) {
    ref bytes.Buffer buf = ref heap(out ptr<bytes.Buffer> _addr_buf);
    fmt.Fprintf(_addr_buf, "// Code generated by go tool dist; DO NOT EDIT.\n");
    fmt.Fprintln(_addr_buf);
    fmt.Fprintf(_addr_buf, "package sys\n");
    fmt.Fprintln(_addr_buf);
    fmt.Fprintf(_addr_buf, "const StackGuardMultiplierDefault = %d\n", stackGuardMultiplierDefault());

    writefile(buf.String(), file, writeSkipSame);
}

// mkbuildcfg writes internal/buildcfg/zbootstrap.go:
//
//    package buildcfg
//
//    const defaultGOROOT = <goroot>
//    const defaultGO386 = <go386>
//    ...
//    const defaultGOOS = runtime.GOOS
//    const defaultGOARCH = runtime.GOARCH
//
// The use of runtime.GOOS and runtime.GOARCH makes sure that
// a cross-compiled compiler expects to compile for its own target
// system. That is, if on a Mac you do:
//
//    GOOS=linux GOARCH=ppc64 go build cmd/compile
//
// the resulting compiler will default to generating linux/ppc64 object files.
// This is more useful than having it default to generating objects for the
// original target (in this example, a Mac).
private static void mkbuildcfg(@string file) {
    ref bytes.Buffer buf = ref heap(out ptr<bytes.Buffer> _addr_buf);
    fmt.Fprintf(_addr_buf, "// Code generated by go tool dist; DO NOT EDIT.\n");
    fmt.Fprintln(_addr_buf);
    fmt.Fprintf(_addr_buf, "package buildcfg\n");
    fmt.Fprintln(_addr_buf);
    fmt.Fprintf(_addr_buf, "import \"runtime\"\n");
    fmt.Fprintln(_addr_buf);
    fmt.Fprintf(_addr_buf, "const defaultGO386 = `%s`\n", go386);
    fmt.Fprintf(_addr_buf, "const defaultGOARM = `%s`\n", goarm);
    fmt.Fprintf(_addr_buf, "const defaultGOMIPS = `%s`\n", gomips);
    fmt.Fprintf(_addr_buf, "const defaultGOMIPS64 = `%s`\n", gomips64);
    fmt.Fprintf(_addr_buf, "const defaultGOPPC64 = `%s`\n", goppc64);
    fmt.Fprintf(_addr_buf, "const defaultGOEXPERIMENT = `%s`\n", goexperiment);
    fmt.Fprintf(_addr_buf, "const defaultGO_EXTLINK_ENABLED = `%s`\n", goextlinkenabled);
    fmt.Fprintf(_addr_buf, "const defaultGO_LDSO = `%s`\n", defaultldso);
    fmt.Fprintf(_addr_buf, "const version = `%s`\n", findgoversion());
    fmt.Fprintf(_addr_buf, "const defaultGOOS = runtime.GOOS\n");
    fmt.Fprintf(_addr_buf, "const defaultGOARCH = runtime.GOARCH\n");

    writefile(buf.String(), file, writeSkipSame);
}

// mkobjabi writes cmd/internal/objabi/zbootstrap.go:
//
//    package objabi
//
//    const stackGuardMultiplierDefault = <multiplier value>
//
private static void mkobjabi(@string file) {
    ref bytes.Buffer buf = ref heap(out ptr<bytes.Buffer> _addr_buf);
    fmt.Fprintf(_addr_buf, "// Code generated by go tool dist; DO NOT EDIT.\n");
    fmt.Fprintln(_addr_buf);
    fmt.Fprintf(_addr_buf, "package objabi\n");
    fmt.Fprintln(_addr_buf);
    fmt.Fprintf(_addr_buf, "const stackGuardMultiplierDefault = %d\n", stackGuardMultiplierDefault());

    writefile(buf.String(), file, writeSkipSame);
}

// stackGuardMultiplierDefault returns a multiplier to apply to the default
// stack guard size. Larger multipliers are used for non-optimized
// builds that have larger stack frames.
private static nint stackGuardMultiplierDefault() {
    foreach (var (_, s) in strings.Split(os.Getenv("GO_GCFLAGS"), " ")) {
        if (s == "-N") {
            return 2;
        }
    }    return 1;
}

} // end main_package
