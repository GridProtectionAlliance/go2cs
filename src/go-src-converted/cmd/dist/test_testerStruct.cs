//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 06:29:02 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using bytes = go.bytes_package;
using flag = go.flag_package;
using fmt = go.fmt_package;
using ioutil = go.io.ioutil_package;
using log = go.log_package;
using os = go.os_package;
using exec = go.os.exec_package;
using path = go.path_package;
using filepath = go.path.filepath_package;
using reflect = go.reflect_package;
using regexp = go.regexp_package;
using runtime = go.runtime_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using sync = go.sync_package;
using time = go.time_package;

#nullable enable

namespace go
{
    public static partial class main_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial struct tester
        {
            // Constructors
            public tester(NilType _)
            {
                this.race = default;
                this.listMode = default;
                this.rebuild = default;
                this.failed = default;
                this.keepGoing = default;
                this.compileOnly = default;
                this.runRxStr = default;
                this.runRx = default;
                this.runRxWant = default;
                this.runNames = default;
                this.banner = default;
                this.lastHeading = default;
                this.cgoEnabled = default;
                this.partial = default;
                this.haveTime = default;
                this.tests = default;
                this.timeoutScale = default;
                this.worklist = default;
            }

            public tester(bool race = default, bool listMode = default, bool rebuild = default, bool failed = default, bool keepGoing = default, bool compileOnly = default, @string runRxStr = default, ref ptr<regexp.Regexp> runRx = default, bool runRxWant = default, slice<@string> runNames = default, @string banner = default, @string lastHeading = default, bool cgoEnabled = default, bool partial = default, bool haveTime = default, slice<distTest> tests = default, nint timeoutScale = default, slice<ptr<work>> worklist = default)
            {
                this.race = race;
                this.listMode = listMode;
                this.rebuild = rebuild;
                this.failed = failed;
                this.keepGoing = keepGoing;
                this.compileOnly = compileOnly;
                this.runRxStr = runRxStr;
                this.runRx = runRx;
                this.runRxWant = runRxWant;
                this.runNames = runNames;
                this.banner = banner;
                this.lastHeading = lastHeading;
                this.cgoEnabled = cgoEnabled;
                this.partial = partial;
                this.haveTime = haveTime;
                this.tests = tests;
                this.timeoutScale = timeoutScale;
                this.worklist = worklist;
            }

            // Enable comparisons between nil and tester struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(tester value, NilType nil) => value.Equals(default(tester));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(tester value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, tester value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, tester value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator tester(NilType nil) => default(tester);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private static tester tester_cast(dynamic value)
        {
            return new tester(value.race, value.listMode, value.rebuild, value.failed, value.keepGoing, value.compileOnly, value.runRxStr, ref value.runRx, value.runRxWant, value.runNames, value.banner, value.lastHeading, value.cgoEnabled, value.partial, value.haveTime, value.tests, value.timeoutScale, value.worklist);
        }
    }
}