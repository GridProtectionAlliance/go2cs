//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 04:36:18 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bytes = go.bytes_package;
using errors = go.errors_package;
using fmt = go.fmt_package;
using path = go.path_package;
using strings = go.strings_package;
using sync = go.sync_package;
using atomic = go.sync.atomic_package;
using module = go.golang.org.x.mod.module_package;
using note = go.golang.org.x.mod.sumdb.note_package;
using tlog = go.golang.org.x.mod.sumdb.tlog_package;
using go;

#pragma warning disable CS0660, CS0661

namespace go {
namespace golang.org {
namespace x {
namespace mod
{
    public static partial class sumdb_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface ClientOps
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static ClientOps As<T>(in T target) => (ClientOps<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static ClientOps As<T>(ptr<T> target_ptr) => (ClientOps<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static ClientOps? As(object target) =>
                typeof(ClientOps<>).CreateInterfaceHandler<ClientOps>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class ClientOps<T> : ClientOps
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public ClientOps(in T target) => m_target = target;

            public ClientOps(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate (slice<byte>, error) ReadRemoteByPtr(ptr<T> value, @string path);
            private delegate (slice<byte>, error) ReadRemoteByVal(T value, @string path);

            private static readonly ReadRemoteByPtr s_ReadRemoteByPtr;
            private static readonly ReadRemoteByVal s_ReadRemoteByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (slice<byte>, error) ReadRemote(@string path)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_ReadRemoteByPtr is null || !m_target_is_ptr)
                    return s_ReadRemoteByVal!(target, path);

                return s_ReadRemoteByPtr(m_target_ptr, path);
            }

            private delegate (slice<byte>, error) ReadConfigByPtr(ptr<T> value, @string file);
            private delegate (slice<byte>, error) ReadConfigByVal(T value, @string file);

            private static readonly ReadConfigByPtr s_ReadConfigByPtr;
            private static readonly ReadConfigByVal s_ReadConfigByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (slice<byte>, error) ReadConfig(@string file)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_ReadConfigByPtr is null || !m_target_is_ptr)
                    return s_ReadConfigByVal!(target, file);

                return s_ReadConfigByPtr(m_target_ptr, file);
            }

            private delegate (slice<byte>, error) WriteConfigByPtr(ptr<T> value, @string file, slice<byte> old, slice<byte> @new);
            private delegate (slice<byte>, error) WriteConfigByVal(T value, @string file, slice<byte> old, slice<byte> @new);

            private static readonly WriteConfigByPtr s_WriteConfigByPtr;
            private static readonly WriteConfigByVal s_WriteConfigByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (slice<byte>, error) WriteConfig(@string file, slice<byte> old, slice<byte> @new)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_WriteConfigByPtr is null || !m_target_is_ptr)
                    return s_WriteConfigByVal!(target, file, old, @new);

                return s_WriteConfigByPtr(m_target_ptr, file, old, @new);
            }

            private delegate (slice<byte>, error) ReadCacheByPtr(ptr<T> value, @string file);
            private delegate (slice<byte>, error) ReadCacheByVal(T value, @string file);

            private static readonly ReadCacheByPtr s_ReadCacheByPtr;
            private static readonly ReadCacheByVal s_ReadCacheByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (slice<byte>, error) ReadCache(@string file)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_ReadCacheByPtr is null || !m_target_is_ptr)
                    return s_ReadCacheByVal!(target, file);

                return s_ReadCacheByPtr(m_target_ptr, file);
            }

            private delegate (slice<byte>, error) WriteCacheByPtr(ptr<T> value, @string file, slice<byte> data);
            private delegate (slice<byte>, error) WriteCacheByVal(T value, @string file, slice<byte> data);

            private static readonly WriteCacheByPtr s_WriteCacheByPtr;
            private static readonly WriteCacheByVal s_WriteCacheByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (slice<byte>, error) WriteCache(@string file, slice<byte> data)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_WriteCacheByPtr is null || !m_target_is_ptr)
                    return s_WriteCacheByVal!(target, file, data);

                return s_WriteCacheByPtr(m_target_ptr, file, data);
            }

            private delegate (slice<byte>, error) LogByPtr(ptr<T> value, @string msg);
            private delegate (slice<byte>, error) LogByVal(T value, @string msg);

            private static readonly LogByPtr s_LogByPtr;
            private static readonly LogByVal s_LogByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (slice<byte>, error) Log(@string msg)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_LogByPtr is null || !m_target_is_ptr)
                    return s_LogByVal!(target, msg);

                return s_LogByPtr(m_target_ptr, msg);
            }

            private delegate (slice<byte>, error) SecurityErrorByPtr(ptr<T> value, @string msg);
            private delegate (slice<byte>, error) SecurityErrorByVal(T value, @string msg);

            private static readonly SecurityErrorByPtr s_SecurityErrorByPtr;
            private static readonly SecurityErrorByVal s_SecurityErrorByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (slice<byte>, error) SecurityError(@string msg)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_SecurityErrorByPtr is null || !m_target_is_ptr)
                    return s_SecurityErrorByVal!(target, msg);

                return s_SecurityErrorByPtr(m_target_ptr, msg);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static ClientOps()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("ReadRemote");

                if (!(extensionMethod is null))
                    s_ReadRemoteByPtr = extensionMethod.CreateStaticDelegate(typeof(ReadRemoteByPtr)) as ReadRemoteByPtr;

                extensionMethod = targetType.GetExtensionMethod("ReadRemote");

                if (!(extensionMethod is null))
                    s_ReadRemoteByVal = extensionMethod.CreateStaticDelegate(typeof(ReadRemoteByVal)) as ReadRemoteByVal;

                if (s_ReadRemoteByPtr is null && s_ReadRemoteByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ClientOps.ReadRemote method", new Exception("ReadRemote"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("ReadConfig");

                if (!(extensionMethod is null))
                    s_ReadConfigByPtr = extensionMethod.CreateStaticDelegate(typeof(ReadConfigByPtr)) as ReadConfigByPtr;

                extensionMethod = targetType.GetExtensionMethod("ReadConfig");

                if (!(extensionMethod is null))
                    s_ReadConfigByVal = extensionMethod.CreateStaticDelegate(typeof(ReadConfigByVal)) as ReadConfigByVal;

                if (s_ReadConfigByPtr is null && s_ReadConfigByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ClientOps.ReadConfig method", new Exception("ReadConfig"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("WriteConfig");

                if (!(extensionMethod is null))
                    s_WriteConfigByPtr = extensionMethod.CreateStaticDelegate(typeof(WriteConfigByPtr)) as WriteConfigByPtr;

                extensionMethod = targetType.GetExtensionMethod("WriteConfig");

                if (!(extensionMethod is null))
                    s_WriteConfigByVal = extensionMethod.CreateStaticDelegate(typeof(WriteConfigByVal)) as WriteConfigByVal;

                if (s_WriteConfigByPtr is null && s_WriteConfigByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ClientOps.WriteConfig method", new Exception("WriteConfig"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("ReadCache");

                if (!(extensionMethod is null))
                    s_ReadCacheByPtr = extensionMethod.CreateStaticDelegate(typeof(ReadCacheByPtr)) as ReadCacheByPtr;

                extensionMethod = targetType.GetExtensionMethod("ReadCache");

                if (!(extensionMethod is null))
                    s_ReadCacheByVal = extensionMethod.CreateStaticDelegate(typeof(ReadCacheByVal)) as ReadCacheByVal;

                if (s_ReadCacheByPtr is null && s_ReadCacheByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ClientOps.ReadCache method", new Exception("ReadCache"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("WriteCache");

                if (!(extensionMethod is null))
                    s_WriteCacheByPtr = extensionMethod.CreateStaticDelegate(typeof(WriteCacheByPtr)) as WriteCacheByPtr;

                extensionMethod = targetType.GetExtensionMethod("WriteCache");

                if (!(extensionMethod is null))
                    s_WriteCacheByVal = extensionMethod.CreateStaticDelegate(typeof(WriteCacheByVal)) as WriteCacheByVal;

                if (s_WriteCacheByPtr is null && s_WriteCacheByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ClientOps.WriteCache method", new Exception("WriteCache"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Log");

                if (!(extensionMethod is null))
                    s_LogByPtr = extensionMethod.CreateStaticDelegate(typeof(LogByPtr)) as LogByPtr;

                extensionMethod = targetType.GetExtensionMethod("Log");

                if (!(extensionMethod is null))
                    s_LogByVal = extensionMethod.CreateStaticDelegate(typeof(LogByVal)) as LogByVal;

                if (s_LogByPtr is null && s_LogByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ClientOps.Log method", new Exception("Log"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("SecurityError");

                if (!(extensionMethod is null))
                    s_SecurityErrorByPtr = extensionMethod.CreateStaticDelegate(typeof(SecurityErrorByPtr)) as SecurityErrorByPtr;

                extensionMethod = targetType.GetExtensionMethod("SecurityError");

                if (!(extensionMethod is null))
                    s_SecurityErrorByVal = extensionMethod.CreateStaticDelegate(typeof(SecurityErrorByVal)) as SecurityErrorByVal;

                if (s_SecurityErrorByPtr is null && s_SecurityErrorByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ClientOps.SecurityError method", new Exception("SecurityError"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator ClientOps<T>(in ptr<T> target_ptr) => new ClientOps<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator ClientOps<T>(in T target) => new ClientOps<T>(target);

            // Enable comparisons between nil and ClientOps<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(ClientOps<T> value, NilType nil) => Activator.CreateInstance<ClientOps<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(ClientOps<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, ClientOps<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, ClientOps<T> value) => value != nil;
        }
    }
}}}}

namespace go
{
    public static class sumdb_ClientOpsExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.golang.org.x.mod.sumdb_package.ClientOps target)
        {
            try
            {
                return ((go.golang.org.x.mod.sumdb_package.ClientOps<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.golang.org.x.mod.sumdb_package.ClientOps target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.golang.org.x.mod.sumdb_package.ClientOps target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.golang.org.x.mod.sumdb_package.ClientOps<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.golang.org.x.mod.sumdb_package.ClientOps target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}