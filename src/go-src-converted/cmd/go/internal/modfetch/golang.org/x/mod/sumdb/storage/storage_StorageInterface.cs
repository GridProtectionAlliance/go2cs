//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 05:47:34 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using context = go.context_package;
using go;

#nullable enable
#pragma warning disable CS0660, CS0661

namespace go {
namespace golang.org {
namespace x {
namespace mod {
namespace sumdb
{
    public static partial class storage_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface Storage
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Storage As<T>(in T target) => (Storage<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Storage As<T>(ptr<T> target_ptr) => (Storage<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Storage? As(object target) =>
                typeof(Storage<>).CreateInterfaceHandler<Storage>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class Storage<T> : Storage
        {
            private T m_target = default!;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public Storage(in T target) => m_target = target;

            public Storage(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate error ReadOnlyByPtr(ptr<T> value, context.Context ctx, Func<context.Context, Transaction, error> f);
            private delegate error ReadOnlyByVal(T value, context.Context ctx, Func<context.Context, Transaction, error> f);

            private static readonly ReadOnlyByPtr? s_ReadOnlyByPtr;
            private static readonly ReadOnlyByVal? s_ReadOnlyByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error ReadOnly(context.Context ctx, Func<context.Context, Transaction, error> f)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_ReadOnlyByPtr is null || !m_target_is_ptr)
                    return s_ReadOnlyByVal!(target, ctx, f);

                return s_ReadOnlyByPtr(m_target_ptr, ctx, f);
            }

            private delegate error ReadWriteByPtr(ptr<T> value, context.Context ctx, Func<context.Context, Transaction, error> f);
            private delegate error ReadWriteByVal(T value, context.Context ctx, Func<context.Context, Transaction, error> f);

            private static readonly ReadWriteByPtr? s_ReadWriteByPtr;
            private static readonly ReadWriteByVal? s_ReadWriteByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error ReadWrite(context.Context ctx, Func<context.Context, Transaction, error> f)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_ReadWriteByPtr is null || !m_target_is_ptr)
                    return s_ReadWriteByVal!(target, ctx, f);

                return s_ReadWriteByPtr(m_target_ptr, ctx, f);
            }
            
            public string ToString(string? format, IFormatProvider? formatProvider) => format;

            [DebuggerStepperBoundary]
            static Storage()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("ReadOnly");

                if (!(extensionMethod is null))
                    s_ReadOnlyByPtr = extensionMethod.CreateStaticDelegate(typeof(ReadOnlyByPtr)) as ReadOnlyByPtr;

                extensionMethod = targetType.GetExtensionMethod("ReadOnly");

                if (!(extensionMethod is null))
                    s_ReadOnlyByVal = extensionMethod.CreateStaticDelegate(typeof(ReadOnlyByVal)) as ReadOnlyByVal;

                if (s_ReadOnlyByPtr is null && s_ReadOnlyByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Storage.ReadOnly method", new Exception("ReadOnly"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("ReadWrite");

                if (!(extensionMethod is null))
                    s_ReadWriteByPtr = extensionMethod.CreateStaticDelegate(typeof(ReadWriteByPtr)) as ReadWriteByPtr;

                extensionMethod = targetType.GetExtensionMethod("ReadWrite");

                if (!(extensionMethod is null))
                    s_ReadWriteByVal = extensionMethod.CreateStaticDelegate(typeof(ReadWriteByVal)) as ReadWriteByVal;

                if (s_ReadWriteByPtr is null && s_ReadWriteByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Storage.ReadWrite method", new Exception("ReadWrite"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Storage<T>(in ptr<T> target_ptr) => new Storage<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Storage<T>(in T target) => new Storage<T>(target);

            // Enable comparisons between nil and Storage<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Storage<T> value, NilType nil) => Activator.CreateInstance<Storage<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Storage<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Storage<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Storage<T> value) => value != nil;
        }
    }
}}}}}

namespace go
{
    public static class storage_StorageExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.golang.org.x.mod.sumdb.storage_package.Storage target)
        {
            try
            {
                return ((go.golang.org.x.mod.sumdb.storage_package.Storage<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.golang.org.x.mod.sumdb.storage_package.Storage target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.golang.org.x.mod.sumdb.storage_package.Storage target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.golang.org.x.mod.sumdb.storage_package.Storage<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.golang.org.x.mod.sumdb.storage_package.Storage target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}