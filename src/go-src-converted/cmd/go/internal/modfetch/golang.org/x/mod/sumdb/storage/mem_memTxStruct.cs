//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:19:10 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using context = go.context_package;
using errors = go.errors_package;
using rand = go.math.rand_package;
using sync = go.sync_package;
using go;

#nullable enable

namespace go {
namespace golang.org {
namespace x {
namespace mod {
namespace sumdb
{
    public static partial class storage_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct memTx
        {
            // Constructors
            public memTx(NilType _)
            {
                this.m = default;
                this.writes = default;
            }

            public memTx(ref ptr<Mem> m = default, slice<Write> writes = default)
            {
                this.m = m;
                this.writes = writes;
            }

            // Enable comparisons between nil and memTx struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(memTx value, NilType nil) => value.Equals(default(memTx));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(memTx value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, memTx value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, memTx value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator memTx(NilType nil) => default(memTx);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static memTx memTx_cast(dynamic value)
        {
            return new memTx(ref value.m, value.writes);
        }
    }
}}}}}