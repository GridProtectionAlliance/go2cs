//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:18:45 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using errors = go.errors_package;
using fmt = go.fmt_package;
using lazyregexp = go.@internal.lazyregexp_package;
using io = go.io_package;
using fs = go.io.fs_package;
using os = go.os_package;
using filepath = go.path.filepath_package;
using sort = go.sort_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using sync = go.sync_package;
using time = go.time_package;
using lockedfile = go.cmd.go.@internal.lockedfile_package;
using par = go.cmd.go.@internal.par_package;
using str = go.cmd.go.@internal.str_package;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace go {
namespace @internal {
namespace modfetch
{
    public static partial class codehost_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct vcsCmd
        {
            // Constructors
            public vcsCmd(NilType _)
            {
                this.vcs = default;
                this.init = default;
                this.tags = default;
                this.tagRE = default;
                this.branches = default;
                this.branchRE = default;
                this.badLocalRevRE = default;
                this.statLocal = default;
                this.parseStat = default;
                this.fetch = default;
                this.latest = default;
                this.readFile = default;
                this.readZip = default;
                this.doReadZip = default;
            }

            public vcsCmd(@string vcs = default, Func<@string, slice<@string>> init = default, Func<@string, slice<@string>> tags = default, ref ptr<lazyregexp.Regexp> tagRE = default, Func<@string, slice<@string>> branches = default, ref ptr<lazyregexp.Regexp> branchRE = default, ref ptr<lazyregexp.Regexp> badLocalRevRE = default, Func<@string, @string, slice<@string>> statLocal = default, Func<@string, @string, (ptr<RevInfo>, error)> parseStat = default, slice<@string> fetch = default, @string latest = default, Func<@string, @string, @string, slice<@string>> readFile = default, Func<@string, @string, @string, @string, slice<@string>> readZip = default, Func<io.Writer, @string, @string, @string, @string, error> doReadZip = default)
            {
                this.vcs = vcs;
                this.init = init;
                this.tags = tags;
                this.tagRE = tagRE;
                this.branches = branches;
                this.branchRE = branchRE;
                this.badLocalRevRE = badLocalRevRE;
                this.statLocal = statLocal;
                this.parseStat = parseStat;
                this.fetch = fetch;
                this.latest = latest;
                this.readFile = readFile;
                this.readZip = readZip;
                this.doReadZip = doReadZip;
            }

            // Enable comparisons between nil and vcsCmd struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(vcsCmd value, NilType nil) => value.Equals(default(vcsCmd));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(vcsCmd value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, vcsCmd value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, vcsCmd value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator vcsCmd(NilType nil) => default(vcsCmd);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static vcsCmd vcsCmd_cast(dynamic value)
        {
            return new vcsCmd(value.vcs, value.init, value.tags, ref value.tagRE, value.branches, ref value.branchRE, ref value.badLocalRevRE, value.statLocal, value.parseStat, value.fetch, value.latest, value.readFile, value.readZip, value.doReadZip);
        }
    }
}}}}}