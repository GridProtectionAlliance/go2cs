//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:18:59 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using fmt = go.fmt_package;
using io = go.io_package;
using fs = go.io.fs_package;
using os = go.os_package;
using strconv = go.strconv_package;
using time = go.time_package;
using cfg = go.cmd.go.@internal.cfg_package;
using codehost = go.cmd.go.@internal.modfetch.codehost_package;
using par = go.cmd.go.@internal.par_package;
using vcs = go.cmd.go.@internal.vcs_package;
using web = go.cmd.go.@internal.web_package;
using module = go.golang.org.x.mod.module_package;
using go;

#nullable enable
#pragma warning disable CS0660, CS0661

namespace go {
namespace cmd {
namespace go {
namespace @internal
{
    public static partial class modfetch_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface Repo
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Repo As<T>(in T target) => (Repo<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Repo As<T>(ptr<T> target_ptr) => (Repo<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Repo? As(object target) =>
                typeof(Repo<>).CreateInterfaceHandler<Repo>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class Repo<T> : Repo
        {
            private T m_target = default!;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && m_target_ptr is not null)
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public Repo(in T target) => m_target = target;

            public Repo(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate error ModulePathByPtr(ptr<T> value);
            private delegate error ModulePathByVal(T value);

            private static readonly ModulePathByPtr? s_ModulePathByPtr;
            private static readonly ModulePathByVal? s_ModulePathByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error ModulePath()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_ModulePathByPtr is null || !m_target_is_ptr)
                    return s_ModulePathByVal!(target);

                return s_ModulePathByPtr(m_target_ptr!);
            }

            private delegate error VersionsByPtr(ptr<T> value, @string prefix);
            private delegate error VersionsByVal(T value, @string prefix);

            private static readonly VersionsByPtr? s_VersionsByPtr;
            private static readonly VersionsByVal? s_VersionsByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error Versions(@string prefix)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_VersionsByPtr is null || !m_target_is_ptr)
                    return s_VersionsByVal!(target, prefix);

                return s_VersionsByPtr(m_target_ptr!, prefix);
            }

            private delegate error StatByPtr(ptr<T> value, @string rev);
            private delegate error StatByVal(T value, @string rev);

            private static readonly StatByPtr? s_StatByPtr;
            private static readonly StatByVal? s_StatByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error Stat(@string rev)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_StatByPtr is null || !m_target_is_ptr)
                    return s_StatByVal!(target, rev);

                return s_StatByPtr(m_target_ptr!, rev);
            }

            private delegate error LatestByPtr(ptr<T> value);
            private delegate error LatestByVal(T value);

            private static readonly LatestByPtr? s_LatestByPtr;
            private static readonly LatestByVal? s_LatestByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error Latest()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_LatestByPtr is null || !m_target_is_ptr)
                    return s_LatestByVal!(target);

                return s_LatestByPtr(m_target_ptr!);
            }

            private delegate error GoModByPtr(ptr<T> value, @string version);
            private delegate error GoModByVal(T value, @string version);

            private static readonly GoModByPtr? s_GoModByPtr;
            private static readonly GoModByVal? s_GoModByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error GoMod(@string version)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_GoModByPtr is null || !m_target_is_ptr)
                    return s_GoModByVal!(target, version);

                return s_GoModByPtr(m_target_ptr!, version);
            }

            private delegate error ZipByPtr(ptr<T> value, io.Writer dst, @string version);
            private delegate error ZipByVal(T value, io.Writer dst, @string version);

            private static readonly ZipByPtr? s_ZipByPtr;
            private static readonly ZipByVal? s_ZipByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error Zip(io.Writer dst, @string version)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_ZipByPtr is null || !m_target_is_ptr)
                    return s_ZipByVal!(target, dst, version);

                return s_ZipByPtr(m_target_ptr!, dst, version);
            }
            
            public string ToString(string? format, IFormatProvider? formatProvider) => format ?? GetGoTypeName(typeof(T));

            [DebuggerStepperBoundary]
            static Repo()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("ModulePath");

                if (extensionMethod is not null)
                    s_ModulePathByPtr = extensionMethod.CreateStaticDelegate(typeof(ModulePathByPtr)) as ModulePathByPtr;

                extensionMethod = targetType.GetExtensionMethod("ModulePath");

                if (extensionMethod is not null)
                    s_ModulePathByVal = extensionMethod.CreateStaticDelegate(typeof(ModulePathByVal)) as ModulePathByVal;

                if (s_ModulePathByPtr is null && s_ModulePathByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Repo.ModulePath method", new Exception("ModulePath"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Versions");

                if (extensionMethod is not null)
                    s_VersionsByPtr = extensionMethod.CreateStaticDelegate(typeof(VersionsByPtr)) as VersionsByPtr;

                extensionMethod = targetType.GetExtensionMethod("Versions");

                if (extensionMethod is not null)
                    s_VersionsByVal = extensionMethod.CreateStaticDelegate(typeof(VersionsByVal)) as VersionsByVal;

                if (s_VersionsByPtr is null && s_VersionsByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Repo.Versions method", new Exception("Versions"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Stat");

                if (extensionMethod is not null)
                    s_StatByPtr = extensionMethod.CreateStaticDelegate(typeof(StatByPtr)) as StatByPtr;

                extensionMethod = targetType.GetExtensionMethod("Stat");

                if (extensionMethod is not null)
                    s_StatByVal = extensionMethod.CreateStaticDelegate(typeof(StatByVal)) as StatByVal;

                if (s_StatByPtr is null && s_StatByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Repo.Stat method", new Exception("Stat"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Latest");

                if (extensionMethod is not null)
                    s_LatestByPtr = extensionMethod.CreateStaticDelegate(typeof(LatestByPtr)) as LatestByPtr;

                extensionMethod = targetType.GetExtensionMethod("Latest");

                if (extensionMethod is not null)
                    s_LatestByVal = extensionMethod.CreateStaticDelegate(typeof(LatestByVal)) as LatestByVal;

                if (s_LatestByPtr is null && s_LatestByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Repo.Latest method", new Exception("Latest"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("GoMod");

                if (extensionMethod is not null)
                    s_GoModByPtr = extensionMethod.CreateStaticDelegate(typeof(GoModByPtr)) as GoModByPtr;

                extensionMethod = targetType.GetExtensionMethod("GoMod");

                if (extensionMethod is not null)
                    s_GoModByVal = extensionMethod.CreateStaticDelegate(typeof(GoModByVal)) as GoModByVal;

                if (s_GoModByPtr is null && s_GoModByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Repo.GoMod method", new Exception("GoMod"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Zip");

                if (extensionMethod is not null)
                    s_ZipByPtr = extensionMethod.CreateStaticDelegate(typeof(ZipByPtr)) as ZipByPtr;

                extensionMethod = targetType.GetExtensionMethod("Zip");

                if (extensionMethod is not null)
                    s_ZipByVal = extensionMethod.CreateStaticDelegate(typeof(ZipByVal)) as ZipByVal;

                if (s_ZipByPtr is null && s_ZipByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Repo.Zip method", new Exception("Zip"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Repo<T>(in ptr<T> target_ptr) => new Repo<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Repo<T>(in T target) => new Repo<T>(target);

            // Enable comparisons between nil and Repo<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Repo<T> value, NilType nil) => Activator.CreateInstance<Repo<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Repo<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Repo<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Repo<T> value) => value != nil;
        }
    }
}}}}

namespace go
{
    public static class modfetch_RepoExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.cmd.go.@internal.modfetch_package.Repo target)
        {
            try
            {
                return ((go.cmd.go.@internal.modfetch_package.Repo<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.cmd.go.@internal.modfetch_package.Repo target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.cmd.go.@internal.modfetch_package.Repo target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.cmd.go.@internal.modfetch_package.Repo<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.cmd.go.@internal.modfetch_package.Repo target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}