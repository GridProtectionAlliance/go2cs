//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:16:53 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using rand = go.math.rand_package;
using sync = go.sync_package;
using atomic = go.sync.atomic_package;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace go {
namespace @internal
{
    public static partial class par_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Work
        {
            // Constructors
            public Work(NilType _)
            {
                this.f = default;
                this.running = default;
                this.mu = default;
                this.todo = default;
                this.wait = default;
                this.waiting = default;
            }

            public Work(Action<object> f = default, nint running = default, sync.Mutex mu = default, slice<object> todo = default, sync.Cond wait = default, nint waiting = default)
            {
                this.f = f;
                this.running = running;
                this.mu = mu;
                this.todo = todo;
                this.wait = wait;
                this.waiting = waiting;
            }

            // Enable comparisons between nil and Work struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Work value, NilType nil) => value.Equals(default(Work));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Work value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Work value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Work value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Work(NilType nil) => default(Work);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Work Work_cast(dynamic value)
        {
            return new Work(value.f, value.running, value.mu, value.todo, value.wait, value.waiting);
        }
    }
}}}}