//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:19:42 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using flag = go.flag_package;
using cfg = go.cmd.go.@internal.cfg_package;
using fsys = go.cmd.go.@internal.fsys_package;
using str = go.cmd.go.@internal.str_package;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace go {
namespace @internal
{
    public static partial class @base_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct explicitStringFlag
        {
            // Constructors
            public explicitStringFlag(NilType _)
            {
                this.value = default;
                this.@explicit = default;
            }

            public explicitStringFlag(ref ptr<@string> value = default, ref ptr<bool> @explicit = default)
            {
                this.value = value;
                this.@explicit = @explicit;
            }

            // Enable comparisons between nil and explicitStringFlag struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(explicitStringFlag value, NilType nil) => value.Equals(default(explicitStringFlag));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(explicitStringFlag value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, explicitStringFlag value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, explicitStringFlag value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator explicitStringFlag(NilType nil) => default(explicitStringFlag);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static explicitStringFlag explicitStringFlag_cast(dynamic value)
        {
            return new explicitStringFlag(ref value.value, ref value.@explicit);
        }
    }
}}}}