//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:16:17 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using context = go.context_package;
using errors = go.errors_package;
using fmt = go.fmt_package;
using os = go.os_package;
using filepath = go.path.filepath_package;
using runtime = go.runtime_package;
using sort = go.sort_package;
using strings = go.strings_package;
using sync = go.sync_package;
using @base = go.cmd.go.@internal.@base_package;
using imports = go.cmd.go.@internal.imports_package;
using load = go.cmd.go.@internal.load_package;
using modfetch = go.cmd.go.@internal.modfetch_package;
using modload = go.cmd.go.@internal.modload_package;
using par = go.cmd.go.@internal.par_package;
using search = go.cmd.go.@internal.search_package;
using work = go.cmd.go.@internal.work_package;
using modfile = go.golang.org.x.mod.modfile_package;
using module = go.golang.org.x.mod.module_package;
using semver = go.golang.org.x.mod.semver_package;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace go {
namespace @internal
{
    public static partial class modget_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct resolver
        {
            // Constructors
            public resolver(NilType _)
            {
                this.localQueries = default;
                this.pathQueries = default;
                this.wildcardQueries = default;
                this.patternAllQueries = default;
                this.nonesByPath = default;
                this.wildcardNones = default;
                this.resolvedVersion = default;
                this.buildList = default;
                this.buildListVersion = default;
                this.initialVersion = default;
                this.missing = default;
                this.work = default;
                this.matchInModuleCache = default;
            }

            public resolver(slice<ptr<query>> localQueries = default, slice<ptr<query>> pathQueries = default, slice<ptr<query>> wildcardQueries = default, slice<ptr<query>> patternAllQueries = default, map<@string, ptr<query>> nonesByPath = default, slice<ptr<query>> wildcardNones = default, map<@string, versionReason> resolvedVersion = default, slice<module.Version> buildList = default, map<@string, @string> buildListVersion = default, map<@string, @string> initialVersion = default, slice<pathSet> missing = default, ref ptr<par.Queue> work = default, par.Cache matchInModuleCache = default)
            {
                this.localQueries = localQueries;
                this.pathQueries = pathQueries;
                this.wildcardQueries = wildcardQueries;
                this.patternAllQueries = patternAllQueries;
                this.nonesByPath = nonesByPath;
                this.wildcardNones = wildcardNones;
                this.resolvedVersion = resolvedVersion;
                this.buildList = buildList;
                this.buildListVersion = buildListVersion;
                this.initialVersion = initialVersion;
                this.missing = missing;
                this.work = work;
                this.matchInModuleCache = matchInModuleCache;
            }

            // Enable comparisons between nil and resolver struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(resolver value, NilType nil) => value.Equals(default(resolver));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(resolver value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, resolver value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, resolver value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator resolver(NilType nil) => default(resolver);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static resolver resolver_cast(dynamic value)
        {
            return new resolver(value.localQueries, value.pathQueries, value.wildcardQueries, value.patternAllQueries, value.nonesByPath, value.wildcardNones, value.resolvedVersion, value.buildList, value.buildListVersion, value.initialVersion, value.missing, ref value.work, value.matchInModuleCache);
        }
    }
}}}}