//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 06:31:56 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using fmt = go.fmt_package;
using filepath = go.path.filepath_package;
using regexp = go.regexp_package;
using strings = go.strings_package;
using sync = go.sync_package;
using @base = go.cmd.go.@internal.@base_package;
using modload = go.cmd.go.@internal.modload_package;
using search = go.cmd.go.@internal.search_package;
using str = go.cmd.go.@internal.str_package;
using module = go.golang.org.x.mod.module_package;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace go {
namespace @internal
{
    public static partial class modget_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial struct query
        {
            // Constructors
            public query(NilType _)
            {
                this.raw = default;
                this.rawVersion = default;
                this.pattern = default;
                this.patternIsLocal = default;
                this.version = default;
                this.matchWildcard = default;
                this.canMatchWildcardInModule = default;
                this.conflict = default;
                this.candidates = default;
                this.candidatesMu = default;
                this.pathSeen = default;
                this.resolved = default;
                this.matchesPackages = default;
            }

            public query(@string raw = default, @string rawVersion = default, @string pattern = default, bool patternIsLocal = default, @string version = default, Func<@string, bool> matchWildcard = default, Func<@string, bool> canMatchWildcardInModule = default, ref ptr<query> conflict = default, slice<pathSet> candidates = default, sync.Mutex candidatesMu = default, sync.Map pathSeen = default, slice<module.Version> resolved = default, bool matchesPackages = default)
            {
                this.raw = raw;
                this.rawVersion = rawVersion;
                this.pattern = pattern;
                this.patternIsLocal = patternIsLocal;
                this.version = version;
                this.matchWildcard = matchWildcard;
                this.canMatchWildcardInModule = canMatchWildcardInModule;
                this.conflict = conflict;
                this.candidates = candidates;
                this.candidatesMu = candidatesMu;
                this.pathSeen = pathSeen;
                this.resolved = resolved;
                this.matchesPackages = matchesPackages;
            }

            // Enable comparisons between nil and query struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(query value, NilType nil) => value.Equals(default(query));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(query value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, query value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, query value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator query(NilType nil) => default(query);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private static query query_cast(dynamic value)
        {
            return new query(value.raw, value.rawVersion, value.pattern, value.patternIsLocal, value.version, value.matchWildcard, value.canMatchWildcardInModule, ref value.conflict, value.candidates, value.candidatesMu, value.pathSeen, value.resolved, value.matchesPackages);
        }
    }
}}}}