//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 06:29:59 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using bufio = go.bufio_package;
using bytes = go.bytes_package;
using heap = go.container.heap_package;
using context = go.context_package;
using elf = go.debug.elf_package;
using json = go.encoding.json_package;
using fmt = go.fmt_package;
using os = go.os_package;
using filepath = go.path.filepath_package;
using runtime = go.runtime_package;
using strings = go.strings_package;
using sync = go.sync_package;
using time = go.time_package;
using @base = go.cmd.go.@internal.@base_package;
using cache = go.cmd.go.@internal.cache_package;
using cfg = go.cmd.go.@internal.cfg_package;
using load = go.cmd.go.@internal.load_package;
using trace = go.cmd.go.@internal.trace_package;
using buildid = go.cmd.@internal.buildid_package;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace go {
namespace @internal
{
    public static partial class work_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        public partial struct Action
        {
            // Constructors
            public Action(NilType _)
            {
                this.Mode = default;
                this.Package = default;
                this.Deps = default;
                this.Func = default;
                this.IgnoreFail = default;
                this.TestOutput = default;
                this.Args = default;
                this.triggers = default;
                this.buggyInstall = default;
                this.TryCache = default;
                this.Objdir = default;
                this.Target = default;
                this.built = default;
                this.actionID = default;
                this.buildID = default;
                this.VetxOnly = default;
                this.needVet = default;
                this.needBuild = default;
                this.vetCfg = default;
                this.output = default;
                this.pending = default;
                this.priority = default;
                this.Failed = default;
                this.json = default;
                this.nonGoOverlay = default;
                this.traceSpan = default;
            }

            public Action(@string Mode = default, ref ptr<load.Package> Package = default, slice<ptr<Action>> Deps = default, Func<ptr<Builder>, context.Context, ptr<Action>, error> Func = default, bool IgnoreFail = default, ref ptr<bytes.Buffer> TestOutput = default, slice<@string> Args = default, slice<ptr<Action>> triggers = default, bool buggyInstall = default, Func<ptr<Builder>, ptr<Action>, bool> TryCache = default, @string Objdir = default, @string Target = default, @string built = default, cache.ActionID actionID = default, @string buildID = default, bool VetxOnly = default, bool needVet = default, bool needBuild = default, ref ptr<vetConfig> vetCfg = default, slice<byte> output = default, nint pending = default, nint priority = default, bool Failed = default, ref ptr<actionJSON> json = default, map<@string, @string> nonGoOverlay = default, ref ptr<trace.Span> traceSpan = default)
            {
                this.Mode = Mode;
                this.Package = Package;
                this.Deps = Deps;
                this.Func = Func;
                this.IgnoreFail = IgnoreFail;
                this.TestOutput = TestOutput;
                this.Args = Args;
                this.triggers = triggers;
                this.buggyInstall = buggyInstall;
                this.TryCache = TryCache;
                this.Objdir = Objdir;
                this.Target = Target;
                this.built = built;
                this.actionID = actionID;
                this.buildID = buildID;
                this.VetxOnly = VetxOnly;
                this.needVet = needVet;
                this.needBuild = needBuild;
                this.vetCfg = vetCfg;
                this.output = output;
                this.pending = pending;
                this.priority = priority;
                this.Failed = Failed;
                this.json = json;
                this.nonGoOverlay = nonGoOverlay;
                this.traceSpan = traceSpan;
            }

            // Enable comparisons between nil and Action struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Action value, NilType nil) => value.Equals(default(Action));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Action value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Action value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Action value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Action(NilType nil) => default(Action);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        public static Action Action_cast(dynamic value)
        {
            return new Action(value.Mode, ref value.Package, value.Deps, value.Func, value.IgnoreFail, ref value.TestOutput, value.Args, value.triggers, value.buggyInstall, value.TryCache, value.Objdir, value.Target, value.built, value.actionID, value.buildID, value.VetxOnly, value.needVet, value.needBuild, ref value.vetCfg, value.output, value.pending, value.priority, value.Failed, ref value.json, value.nonGoOverlay, ref value.traceSpan);
        }
    }
}}}}