//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 05:43:22 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using types = go.cmd.compile.@internal.types_package;
using src = go.cmd.@internal.src_package;
using sort = go.sort_package;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace compile {
namespace @internal
{
    public static partial class gc_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct typeSwitch
        {
            // Constructors
            public typeSwitch(NilType _)
            {
                this.facename = default;
                this.hashname = default;
                this.okname = default;
                this.done = default;
                this.clauses = default;
            }

            public typeSwitch(ref ptr<Node> facename = default, ref ptr<Node> hashname = default, ref ptr<Node> okname = default, Nodes done = default, slice<typeClause> clauses = default)
            {
                this.facename = facename;
                this.hashname = hashname;
                this.okname = okname;
                this.done = done;
                this.clauses = clauses;
            }

            // Enable comparisons between nil and typeSwitch struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(typeSwitch value, NilType nil) => value.Equals(default(typeSwitch));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(typeSwitch value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, typeSwitch value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, typeSwitch value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator typeSwitch(NilType nil) => default(typeSwitch);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static typeSwitch typeSwitch_cast(dynamic value)
        {
            return new typeSwitch(ref value.facename, ref value.hashname, ref value.okname, value.done, value.clauses);
        }
    }
}}}}