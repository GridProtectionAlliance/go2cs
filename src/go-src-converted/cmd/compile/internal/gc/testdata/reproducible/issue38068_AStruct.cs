//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 05:43:59 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;

using go;

#nullable enable

namespace go {
namespace cmd {
namespace compile {
namespace @internal {
namespace gc
{
    public static partial class issue38068_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct A
        {
            // Constructors
            public A(NilType _)
            {
                this.s = default;
                this.next = default;
                this.prev = default;
            }

            public A(@string s = default, ref ptr<A> next = default, ref ptr<A> prev = default)
            {
                this.s = s;
                this.next = next;
                this.prev = prev;
            }

            // Enable comparisons between nil and A struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(A value, NilType nil) => value.Equals(default(A));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(A value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, A value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, A value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator A(NilType nil) => default(A);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static A A_cast(dynamic value)
        {
            return new A(value.s, ref value.next, ref value.prev);
        }
    }
}}}}}