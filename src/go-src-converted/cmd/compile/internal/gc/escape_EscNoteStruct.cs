//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 04:28:49 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using logopt = go.cmd.compile.@internal.logopt_package;
using types = go.cmd.compile.@internal.types_package;
using src = go.cmd.@internal.src_package;
using fmt = go.fmt_package;
using math = go.math_package;
using strings = go.strings_package;
using go;

namespace go {
namespace cmd {
namespace compile {
namespace @internal
{
    public static partial class gc_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct EscNote
        {
            // Constructors
            public EscNote(NilType _)
            {
                this.next = default;
                this.where = default;
                this.why = default;
            }

            public EscNote(ref ptr<EscNote> next = default, ref ptr<Node> where = default, @string why = default)
            {
                this.next = next;
                this.where = where;
                this.why = why;
            }

            // Enable comparisons between nil and EscNote struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(EscNote value, NilType nil) => value.Equals(default(EscNote));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(EscNote value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, EscNote value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, EscNote value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator EscNote(NilType nil) => default(EscNote);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static EscNote EscNote_cast(dynamic value)
        {
            return new EscNote(ref value.next, ref value.where, value.why);
        }
    }
}}}}