//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 06:23:00 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using ir = go.cmd.compile.@internal.ir_package;
using objw = go.cmd.compile.@internal.objw_package;
using ssa = go.cmd.compile.@internal.ssa_package;
using types = go.cmd.compile.@internal.types_package;
using obj = go.cmd.@internal.obj_package;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace compile {
namespace @internal
{
    public static partial class ssagen_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        public partial struct ArchInfo
        {
            // Constructors
            public ArchInfo(NilType _)
            {
                this.LinkArch = default;
                this.REGSP = default;
                this.MAXWIDTH = default;
                this.SoftFloat = default;
                this.PadFrame = default;
                this.ZeroRange = default;
                this.Ginsnop = default;
                this.Ginsnopdefer = default;
                this.SSAMarkMoves = default;
                this.SSAGenValue = default;
                this.SSAGenBlock = default;
                this.LoadRegResults = default;
                this.SpillArgReg = default;
            }

            public ArchInfo(ref ptr<obj.LinkArch> LinkArch = default, nint REGSP = default, long MAXWIDTH = default, bool SoftFloat = default, Func<long, long> PadFrame = default, Func<ptr<objw.Progs>, ptr<obj.Prog>, long, long, ptr<uint>, ptr<obj.Prog>> ZeroRange = default, Func<ptr<objw.Progs>, ptr<obj.Prog>> Ginsnop = default, Func<ptr<objw.Progs>, ptr<obj.Prog>> Ginsnopdefer = default, Action<ptr<State>, ptr<ssa.Block>> SSAMarkMoves = default, Action<ptr<State>, ptr<ssa.Value>> SSAGenValue = default, Action<ptr<State>, ptr<ssa.Block>, ptr<ssa.Block>> SSAGenBlock = default, Action<ptr<State>, ptr<ssa.Func>> LoadRegResults = default, Func<ptr<objw.Progs>, ptr<obj.Prog>, ptr<ssa.Func>, ptr<types.Type>, short, ptr<ir.Name>, long, ptr<obj.Prog>> SpillArgReg = default)
            {
                this.LinkArch = LinkArch;
                this.REGSP = REGSP;
                this.MAXWIDTH = MAXWIDTH;
                this.SoftFloat = SoftFloat;
                this.PadFrame = PadFrame;
                this.ZeroRange = ZeroRange;
                this.Ginsnop = Ginsnop;
                this.Ginsnopdefer = Ginsnopdefer;
                this.SSAMarkMoves = SSAMarkMoves;
                this.SSAGenValue = SSAGenValue;
                this.SSAGenBlock = SSAGenBlock;
                this.LoadRegResults = LoadRegResults;
                this.SpillArgReg = SpillArgReg;
            }

            // Enable comparisons between nil and ArchInfo struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(ArchInfo value, NilType nil) => value.Equals(default(ArchInfo));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(ArchInfo value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, ArchInfo value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, ArchInfo value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator ArchInfo(NilType nil) => default(ArchInfo);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        public static ArchInfo ArchInfo_cast(dynamic value)
        {
            return new ArchInfo(ref value.LinkArch, value.REGSP, value.MAXWIDTH, value.SoftFloat, value.PadFrame, value.ZeroRange, value.Ginsnop, value.Ginsnopdefer, value.SSAMarkMoves, value.SSAGenValue, value.SSAGenBlock, value.LoadRegResults, value.SpillArgReg);
        }
    }
}}}}