//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 06:26:13 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using syntax = go.cmd.compile.@internal.syntax_package;
using fmt = go.fmt_package;
using constant = go.go.constant_package;
using sort = go.sort_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using unicode = go.unicode_package;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace compile {
namespace @internal
{
    public static partial class types2_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial struct declInfo
        {
            // Constructors
            public declInfo(NilType _)
            {
                this.file = default;
                this.lhs = default;
                this.vtyp = default;
                this.init = default;
                this.inherited = default;
                this.tdecl = default;
                this.fdecl = default;
                this.deps = default;
            }

            public declInfo(ref ptr<Scope> file = default, slice<ptr<Var>> lhs = default, syntax.Expr vtyp = default, syntax.Expr init = default, bool inherited = default, ref ptr<syntax.TypeDecl> tdecl = default, ref ptr<syntax.FuncDecl> fdecl = default, map<Object, bool> deps = default)
            {
                this.file = file;
                this.lhs = lhs;
                this.vtyp = vtyp;
                this.init = init;
                this.inherited = inherited;
                this.tdecl = tdecl;
                this.fdecl = fdecl;
                this.deps = deps;
            }

            // Enable comparisons between nil and declInfo struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(declInfo value, NilType nil) => value.Equals(default(declInfo));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(declInfo value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, declInfo value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, declInfo value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator declInfo(NilType nil) => default(declInfo);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private static declInfo declInfo_cast(dynamic value)
        {
            return new declInfo(ref value.file, value.lhs, value.vtyp, value.init, value.inherited, ref value.tdecl, ref value.fdecl, value.deps);
        }
    }
}}}}