//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 06:25:40 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using fmt = go.fmt_package;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace compile {
namespace @internal
{
    public static partial class syntax_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial struct targets
        {
            // Constructors
            public targets(NilType _)
            {
                this.breaks = default;
                this.continues = default;
            }

            public targets(Stmt breaks = default, ref ptr<ForStmt> continues = default)
            {
                this.breaks = breaks;
                this.continues = continues;
            }

            // Enable comparisons between nil and targets struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(targets value, NilType nil) => value.Equals(default(targets));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(targets value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, targets value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, targets value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator targets(NilType nil) => default(targets);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private static targets targets_cast(dynamic value)
        {
            return new targets(value.breaks, ref value.continues);
        }
    }
}}}}