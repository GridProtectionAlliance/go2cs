//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 22:49:57 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using abi = go.cmd.compile.@internal.abi_package;
using @base = go.cmd.compile.@internal.@base_package;
using ir = go.cmd.compile.@internal.ir_package;
using types = go.cmd.compile.@internal.types_package;
using src = go.cmd.@internal.src_package;
using fmt = go.fmt_package;
using sort = go.sort_package;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace compile {
namespace @internal
{
    public static partial class ssa_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct expandState
        {
            // Constructors
            public expandState(NilType _)
            {
                this.f = default;
                this.abi1 = default;
                this.debug = default;
                this.canSSAType = default;
                this.regSize = default;
                this.sp = default;
                this.typs = default;
                this.ptrSize = default;
                this.hiOffset = default;
                this.lowOffset = default;
                this.hiRo = default;
                this.loRo = default;
                this.namedSelects = default;
                this.sdom = default;
                this.commonSelectors = default;
                this.commonArgs = default;
                this.memForCall = default;
                this.transformedSelects = default;
                this.indentLevel = default;
            }

            public expandState(ref ptr<Func> f = default, ref ptr<abi.ABIConfig> abi1 = default, bool debug = default, Func<ptr<types.Type>, bool> canSSAType = default, long regSize = default, ref ptr<Value> sp = default, ref ptr<Types> typs = default, long ptrSize = default, long hiOffset = default, long lowOffset = default, Abi1RO hiRo = default, Abi1RO loRo = default, map<ptr<Value>, slice<namedVal>> namedSelects = default, SparseTree sdom = default, map<selKey, ptr<Value>> commonSelectors = default, map<selKey, ptr<Value>> commonArgs = default, map<ID, ptr<Value>> memForCall = default, map<ID, bool> transformedSelects = default, nint indentLevel = default)
            {
                this.f = f;
                this.abi1 = abi1;
                this.debug = debug;
                this.canSSAType = canSSAType;
                this.regSize = regSize;
                this.sp = sp;
                this.typs = typs;
                this.ptrSize = ptrSize;
                this.hiOffset = hiOffset;
                this.lowOffset = lowOffset;
                this.hiRo = hiRo;
                this.loRo = loRo;
                this.namedSelects = namedSelects;
                this.sdom = sdom;
                this.commonSelectors = commonSelectors;
                this.commonArgs = commonArgs;
                this.memForCall = memForCall;
                this.transformedSelects = transformedSelects;
                this.indentLevel = indentLevel;
            }

            // Enable comparisons between nil and expandState struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(expandState value, NilType nil) => value.Equals(default(expandState));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(expandState value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, expandState value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, expandState value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator expandState(NilType nil) => default(expandState);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static expandState expandState_cast(dynamic value)
        {
            return new expandState(ref value.f, ref value.abi1, value.debug, value.canSSAType, value.regSize, ref value.sp, ref value.typs, value.ptrSize, value.hiOffset, value.lowOffset, value.hiRo, value.loRo, value.namedSelects, value.sdom, value.commonSelectors, value.commonArgs, value.memForCall, value.transformedSelects, value.indentLevel);
        }
    }
}}}}