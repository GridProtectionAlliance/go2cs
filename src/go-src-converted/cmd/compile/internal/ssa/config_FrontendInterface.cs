//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 04:10:07 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using types = go.cmd.compile.@internal.types_package;
using obj = go.cmd.@internal.obj_package;
using objabi = go.cmd.@internal.objabi_package;
using src = go.cmd.@internal.src_package;
using go;

#pragma warning disable CS0660, CS0661

namespace go {
namespace cmd {
namespace compile {
namespace @internal
{
    public static partial class ssa_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface Frontend
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Frontend As<T>(in T target) => (Frontend<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Frontend As<T>(ptr<T> target_ptr) => (Frontend<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Frontend? As(object target) =>
                typeof(Frontend<>).CreateInterfaceHandler<Frontend>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class Frontend<T> : Frontend
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public Frontend(in T target) => m_target = target;

            public Frontend(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate bool CanSSAByPtr(ptr<T> value, ptr<types.Type> t);
            private delegate bool CanSSAByVal(T value, ptr<types.Type> t);

            private static readonly CanSSAByPtr s_CanSSAByPtr;
            private static readonly CanSSAByVal s_CanSSAByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool CanSSA(ptr<types.Type> t)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_CanSSAByPtr is null || !m_target_is_ptr)
                    return s_CanSSAByVal!(target, t);

                return s_CanSSAByPtr(m_target_ptr, t);
            }

            private delegate bool StringDataByPtr(ptr<T> value, @string _p0);
            private delegate bool StringDataByVal(T value, @string _p0);

            private static readonly StringDataByPtr s_StringDataByPtr;
            private static readonly StringDataByVal s_StringDataByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool StringData(@string _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_StringDataByPtr is null || !m_target_is_ptr)
                    return s_StringDataByVal!(target, _p0);

                return s_StringDataByPtr(m_target_ptr, _p0);
            }

            private delegate bool AutoByPtr(ptr<T> value, src.XPos _p0, ptr<types.Type> _p0);
            private delegate bool AutoByVal(T value, src.XPos _p0, ptr<types.Type> _p0);

            private static readonly AutoByPtr s_AutoByPtr;
            private static readonly AutoByVal s_AutoByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Auto(src.XPos _p0, ptr<types.Type> _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_AutoByPtr is null || !m_target_is_ptr)
                    return s_AutoByVal!(target, _p0, _p0);

                return s_AutoByPtr(m_target_ptr, _p0, _p0);
            }

            private delegate bool SplitStringByPtr(ptr<T> value, LocalSlot _p0);
            private delegate bool SplitStringByVal(T value, LocalSlot _p0);

            private static readonly SplitStringByPtr s_SplitStringByPtr;
            private static readonly SplitStringByVal s_SplitStringByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool SplitString(LocalSlot _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_SplitStringByPtr is null || !m_target_is_ptr)
                    return s_SplitStringByVal!(target, _p0);

                return s_SplitStringByPtr(m_target_ptr, _p0);
            }

            private delegate bool SplitInterfaceByPtr(ptr<T> value, LocalSlot _p0);
            private delegate bool SplitInterfaceByVal(T value, LocalSlot _p0);

            private static readonly SplitInterfaceByPtr s_SplitInterfaceByPtr;
            private static readonly SplitInterfaceByVal s_SplitInterfaceByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool SplitInterface(LocalSlot _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_SplitInterfaceByPtr is null || !m_target_is_ptr)
                    return s_SplitInterfaceByVal!(target, _p0);

                return s_SplitInterfaceByPtr(m_target_ptr, _p0);
            }

            private delegate bool SplitSliceByPtr(ptr<T> value, LocalSlot _p0);
            private delegate bool SplitSliceByVal(T value, LocalSlot _p0);

            private static readonly SplitSliceByPtr s_SplitSliceByPtr;
            private static readonly SplitSliceByVal s_SplitSliceByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool SplitSlice(LocalSlot _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_SplitSliceByPtr is null || !m_target_is_ptr)
                    return s_SplitSliceByVal!(target, _p0);

                return s_SplitSliceByPtr(m_target_ptr, _p0);
            }

            private delegate bool SplitComplexByPtr(ptr<T> value, LocalSlot _p0);
            private delegate bool SplitComplexByVal(T value, LocalSlot _p0);

            private static readonly SplitComplexByPtr s_SplitComplexByPtr;
            private static readonly SplitComplexByVal s_SplitComplexByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool SplitComplex(LocalSlot _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_SplitComplexByPtr is null || !m_target_is_ptr)
                    return s_SplitComplexByVal!(target, _p0);

                return s_SplitComplexByPtr(m_target_ptr, _p0);
            }

            private delegate bool SplitStructByPtr(ptr<T> value, LocalSlot _p0, long _p0);
            private delegate bool SplitStructByVal(T value, LocalSlot _p0, long _p0);

            private static readonly SplitStructByPtr s_SplitStructByPtr;
            private static readonly SplitStructByVal s_SplitStructByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool SplitStruct(LocalSlot _p0, long _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_SplitStructByPtr is null || !m_target_is_ptr)
                    return s_SplitStructByVal!(target, _p0, _p0);

                return s_SplitStructByPtr(m_target_ptr, _p0, _p0);
            }

            private delegate bool SplitArrayByPtr(ptr<T> value, LocalSlot _p0);
            private delegate bool SplitArrayByVal(T value, LocalSlot _p0);

            private static readonly SplitArrayByPtr s_SplitArrayByPtr;
            private static readonly SplitArrayByVal s_SplitArrayByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool SplitArray(LocalSlot _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_SplitArrayByPtr is null || !m_target_is_ptr)
                    return s_SplitArrayByVal!(target, _p0);

                return s_SplitArrayByPtr(m_target_ptr, _p0);
            }

            private delegate bool SplitInt64ByPtr(ptr<T> value, LocalSlot _p0);
            private delegate bool SplitInt64ByVal(T value, LocalSlot _p0);

            private static readonly SplitInt64ByPtr s_SplitInt64ByPtr;
            private static readonly SplitInt64ByVal s_SplitInt64ByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool SplitInt64(LocalSlot _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_SplitInt64ByPtr is null || !m_target_is_ptr)
                    return s_SplitInt64ByVal!(target, _p0);

                return s_SplitInt64ByPtr(m_target_ptr, _p0);
            }

            private delegate bool DerefItabByPtr(ptr<T> value, ptr<obj.LSym> sym, long offset);
            private delegate bool DerefItabByVal(T value, ptr<obj.LSym> sym, long offset);

            private static readonly DerefItabByPtr s_DerefItabByPtr;
            private static readonly DerefItabByVal s_DerefItabByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool DerefItab(ptr<obj.LSym> sym, long offset)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_DerefItabByPtr is null || !m_target_is_ptr)
                    return s_DerefItabByVal!(target, sym, offset);

                return s_DerefItabByPtr(m_target_ptr, sym, offset);
            }

            private delegate bool LineByPtr(ptr<T> value, src.XPos _p0);
            private delegate bool LineByVal(T value, src.XPos _p0);

            private static readonly LineByPtr s_LineByPtr;
            private static readonly LineByVal s_LineByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Line(src.XPos _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_LineByPtr is null || !m_target_is_ptr)
                    return s_LineByVal!(target, _p0);

                return s_LineByPtr(m_target_ptr, _p0);
            }

            private delegate bool AllocFrameByPtr(ptr<T> value, ptr<Func> f);
            private delegate bool AllocFrameByVal(T value, ptr<Func> f);

            private static readonly AllocFrameByPtr s_AllocFrameByPtr;
            private static readonly AllocFrameByVal s_AllocFrameByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool AllocFrame(ptr<Func> f)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_AllocFrameByPtr is null || !m_target_is_ptr)
                    return s_AllocFrameByVal!(target, f);

                return s_AllocFrameByPtr(m_target_ptr, f);
            }

            private delegate bool SyslookByPtr(ptr<T> value, @string _p0);
            private delegate bool SyslookByVal(T value, @string _p0);

            private static readonly SyslookByPtr s_SyslookByPtr;
            private static readonly SyslookByVal s_SyslookByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Syslook(@string _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_SyslookByPtr is null || !m_target_is_ptr)
                    return s_SyslookByVal!(target, _p0);

                return s_SyslookByPtr(m_target_ptr, _p0);
            }

            private delegate bool UseWriteBarrierByPtr(ptr<T> value);
            private delegate bool UseWriteBarrierByVal(T value);

            private static readonly UseWriteBarrierByPtr s_UseWriteBarrierByPtr;
            private static readonly UseWriteBarrierByVal s_UseWriteBarrierByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool UseWriteBarrier()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_UseWriteBarrierByPtr is null || !m_target_is_ptr)
                    return s_UseWriteBarrierByVal!(target);

                return s_UseWriteBarrierByPtr(m_target_ptr);
            }

            private delegate bool SetWBPosByPtr(ptr<T> value, src.XPos pos);
            private delegate bool SetWBPosByVal(T value, src.XPos pos);

            private static readonly SetWBPosByPtr s_SetWBPosByPtr;
            private static readonly SetWBPosByVal s_SetWBPosByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool SetWBPos(src.XPos pos)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_SetWBPosByPtr is null || !m_target_is_ptr)
                    return s_SetWBPosByVal!(target, pos);

                return s_SetWBPosByPtr(m_target_ptr, pos);
            }

            private delegate bool LogfByPtr(ptr<T> value, @string _p0, params object _p0);
            private delegate bool LogfByVal(T value, @string _p0, params object _p0);

            private static readonly LogfByPtr s_LogfByPtr;
            private static readonly LogfByVal s_LogfByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Logf(@string _p0, params object _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_LogfByPtr is null || !m_target_is_ptr)
                    return s_LogfByVal!(target, _p0, _p0);

                return s_LogfByPtr(m_target_ptr, _p0, _p0);
            }

            private delegate bool LogByPtr(ptr<T> value);
            private delegate bool LogByVal(T value);

            private static readonly LogByPtr s_LogByPtr;
            private static readonly LogByVal s_LogByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Log()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_LogByPtr is null || !m_target_is_ptr)
                    return s_LogByVal!(target);

                return s_LogByPtr(m_target_ptr);
            }

            private delegate bool FatalfByPtr(ptr<T> value, src.XPos pos, @string msg, params object[] args);
            private delegate bool FatalfByVal(T value, src.XPos pos, @string msg, params object[] args);

            private static readonly FatalfByPtr s_FatalfByPtr;
            private static readonly FatalfByVal s_FatalfByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Fatalf(src.XPos pos, @string msg, params object[] args)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_FatalfByPtr is null || !m_target_is_ptr)
                    return s_FatalfByVal!(target, pos, msg, args);

                return s_FatalfByPtr(m_target_ptr, pos, msg, args);
            }

            private delegate bool WarnlByPtr(ptr<T> value, src.XPos pos, @string fmt_, params object[] args);
            private delegate bool WarnlByVal(T value, src.XPos pos, @string fmt_, params object[] args);

            private static readonly WarnlByPtr s_WarnlByPtr;
            private static readonly WarnlByVal s_WarnlByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Warnl(src.XPos pos, @string fmt_, params object[] args)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_WarnlByPtr is null || !m_target_is_ptr)
                    return s_WarnlByVal!(target, pos, fmt_, args);

                return s_WarnlByPtr(m_target_ptr, pos, fmt_, args);
            }

            private delegate bool Debug_checknilByPtr(ptr<T> value);
            private delegate bool Debug_checknilByVal(T value);

            private static readonly Debug_checknilByPtr s_Debug_checknilByPtr;
            private static readonly Debug_checknilByVal s_Debug_checknilByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Debug_checknil()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_Debug_checknilByPtr is null || !m_target_is_ptr)
                    return s_Debug_checknilByVal!(target);

                return s_Debug_checknilByPtr(m_target_ptr);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static Frontend()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("CanSSA");

                if (!(extensionMethod is null))
                    s_CanSSAByPtr = extensionMethod.CreateStaticDelegate(typeof(CanSSAByPtr)) as CanSSAByPtr;

                extensionMethod = targetType.GetExtensionMethod("CanSSA");

                if (!(extensionMethod is null))
                    s_CanSSAByVal = extensionMethod.CreateStaticDelegate(typeof(CanSSAByVal)) as CanSSAByVal;

                if (s_CanSSAByPtr is null && s_CanSSAByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Frontend.CanSSA method", new Exception("CanSSA"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("StringData");

                if (!(extensionMethod is null))
                    s_StringDataByPtr = extensionMethod.CreateStaticDelegate(typeof(StringDataByPtr)) as StringDataByPtr;

                extensionMethod = targetType.GetExtensionMethod("StringData");

                if (!(extensionMethod is null))
                    s_StringDataByVal = extensionMethod.CreateStaticDelegate(typeof(StringDataByVal)) as StringDataByVal;

                if (s_StringDataByPtr is null && s_StringDataByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Frontend.StringData method", new Exception("StringData"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Auto");

                if (!(extensionMethod is null))
                    s_AutoByPtr = extensionMethod.CreateStaticDelegate(typeof(AutoByPtr)) as AutoByPtr;

                extensionMethod = targetType.GetExtensionMethod("Auto");

                if (!(extensionMethod is null))
                    s_AutoByVal = extensionMethod.CreateStaticDelegate(typeof(AutoByVal)) as AutoByVal;

                if (s_AutoByPtr is null && s_AutoByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Frontend.Auto method", new Exception("Auto"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("SplitString");

                if (!(extensionMethod is null))
                    s_SplitStringByPtr = extensionMethod.CreateStaticDelegate(typeof(SplitStringByPtr)) as SplitStringByPtr;

                extensionMethod = targetType.GetExtensionMethod("SplitString");

                if (!(extensionMethod is null))
                    s_SplitStringByVal = extensionMethod.CreateStaticDelegate(typeof(SplitStringByVal)) as SplitStringByVal;

                if (s_SplitStringByPtr is null && s_SplitStringByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Frontend.SplitString method", new Exception("SplitString"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("SplitInterface");

                if (!(extensionMethod is null))
                    s_SplitInterfaceByPtr = extensionMethod.CreateStaticDelegate(typeof(SplitInterfaceByPtr)) as SplitInterfaceByPtr;

                extensionMethod = targetType.GetExtensionMethod("SplitInterface");

                if (!(extensionMethod is null))
                    s_SplitInterfaceByVal = extensionMethod.CreateStaticDelegate(typeof(SplitInterfaceByVal)) as SplitInterfaceByVal;

                if (s_SplitInterfaceByPtr is null && s_SplitInterfaceByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Frontend.SplitInterface method", new Exception("SplitInterface"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("SplitSlice");

                if (!(extensionMethod is null))
                    s_SplitSliceByPtr = extensionMethod.CreateStaticDelegate(typeof(SplitSliceByPtr)) as SplitSliceByPtr;

                extensionMethod = targetType.GetExtensionMethod("SplitSlice");

                if (!(extensionMethod is null))
                    s_SplitSliceByVal = extensionMethod.CreateStaticDelegate(typeof(SplitSliceByVal)) as SplitSliceByVal;

                if (s_SplitSliceByPtr is null && s_SplitSliceByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Frontend.SplitSlice method", new Exception("SplitSlice"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("SplitComplex");

                if (!(extensionMethod is null))
                    s_SplitComplexByPtr = extensionMethod.CreateStaticDelegate(typeof(SplitComplexByPtr)) as SplitComplexByPtr;

                extensionMethod = targetType.GetExtensionMethod("SplitComplex");

                if (!(extensionMethod is null))
                    s_SplitComplexByVal = extensionMethod.CreateStaticDelegate(typeof(SplitComplexByVal)) as SplitComplexByVal;

                if (s_SplitComplexByPtr is null && s_SplitComplexByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Frontend.SplitComplex method", new Exception("SplitComplex"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("SplitStruct");

                if (!(extensionMethod is null))
                    s_SplitStructByPtr = extensionMethod.CreateStaticDelegate(typeof(SplitStructByPtr)) as SplitStructByPtr;

                extensionMethod = targetType.GetExtensionMethod("SplitStruct");

                if (!(extensionMethod is null))
                    s_SplitStructByVal = extensionMethod.CreateStaticDelegate(typeof(SplitStructByVal)) as SplitStructByVal;

                if (s_SplitStructByPtr is null && s_SplitStructByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Frontend.SplitStruct method", new Exception("SplitStruct"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("SplitArray");

                if (!(extensionMethod is null))
                    s_SplitArrayByPtr = extensionMethod.CreateStaticDelegate(typeof(SplitArrayByPtr)) as SplitArrayByPtr;

                extensionMethod = targetType.GetExtensionMethod("SplitArray");

                if (!(extensionMethod is null))
                    s_SplitArrayByVal = extensionMethod.CreateStaticDelegate(typeof(SplitArrayByVal)) as SplitArrayByVal;

                if (s_SplitArrayByPtr is null && s_SplitArrayByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Frontend.SplitArray method", new Exception("SplitArray"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("SplitInt64");

                if (!(extensionMethod is null))
                    s_SplitInt64ByPtr = extensionMethod.CreateStaticDelegate(typeof(SplitInt64ByPtr)) as SplitInt64ByPtr;

                extensionMethod = targetType.GetExtensionMethod("SplitInt64");

                if (!(extensionMethod is null))
                    s_SplitInt64ByVal = extensionMethod.CreateStaticDelegate(typeof(SplitInt64ByVal)) as SplitInt64ByVal;

                if (s_SplitInt64ByPtr is null && s_SplitInt64ByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Frontend.SplitInt64 method", new Exception("SplitInt64"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("DerefItab");

                if (!(extensionMethod is null))
                    s_DerefItabByPtr = extensionMethod.CreateStaticDelegate(typeof(DerefItabByPtr)) as DerefItabByPtr;

                extensionMethod = targetType.GetExtensionMethod("DerefItab");

                if (!(extensionMethod is null))
                    s_DerefItabByVal = extensionMethod.CreateStaticDelegate(typeof(DerefItabByVal)) as DerefItabByVal;

                if (s_DerefItabByPtr is null && s_DerefItabByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Frontend.DerefItab method", new Exception("DerefItab"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Line");

                if (!(extensionMethod is null))
                    s_LineByPtr = extensionMethod.CreateStaticDelegate(typeof(LineByPtr)) as LineByPtr;

                extensionMethod = targetType.GetExtensionMethod("Line");

                if (!(extensionMethod is null))
                    s_LineByVal = extensionMethod.CreateStaticDelegate(typeof(LineByVal)) as LineByVal;

                if (s_LineByPtr is null && s_LineByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Frontend.Line method", new Exception("Line"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("AllocFrame");

                if (!(extensionMethod is null))
                    s_AllocFrameByPtr = extensionMethod.CreateStaticDelegate(typeof(AllocFrameByPtr)) as AllocFrameByPtr;

                extensionMethod = targetType.GetExtensionMethod("AllocFrame");

                if (!(extensionMethod is null))
                    s_AllocFrameByVal = extensionMethod.CreateStaticDelegate(typeof(AllocFrameByVal)) as AllocFrameByVal;

                if (s_AllocFrameByPtr is null && s_AllocFrameByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Frontend.AllocFrame method", new Exception("AllocFrame"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Syslook");

                if (!(extensionMethod is null))
                    s_SyslookByPtr = extensionMethod.CreateStaticDelegate(typeof(SyslookByPtr)) as SyslookByPtr;

                extensionMethod = targetType.GetExtensionMethod("Syslook");

                if (!(extensionMethod is null))
                    s_SyslookByVal = extensionMethod.CreateStaticDelegate(typeof(SyslookByVal)) as SyslookByVal;

                if (s_SyslookByPtr is null && s_SyslookByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Frontend.Syslook method", new Exception("Syslook"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("UseWriteBarrier");

                if (!(extensionMethod is null))
                    s_UseWriteBarrierByPtr = extensionMethod.CreateStaticDelegate(typeof(UseWriteBarrierByPtr)) as UseWriteBarrierByPtr;

                extensionMethod = targetType.GetExtensionMethod("UseWriteBarrier");

                if (!(extensionMethod is null))
                    s_UseWriteBarrierByVal = extensionMethod.CreateStaticDelegate(typeof(UseWriteBarrierByVal)) as UseWriteBarrierByVal;

                if (s_UseWriteBarrierByPtr is null && s_UseWriteBarrierByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Frontend.UseWriteBarrier method", new Exception("UseWriteBarrier"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("SetWBPos");

                if (!(extensionMethod is null))
                    s_SetWBPosByPtr = extensionMethod.CreateStaticDelegate(typeof(SetWBPosByPtr)) as SetWBPosByPtr;

                extensionMethod = targetType.GetExtensionMethod("SetWBPos");

                if (!(extensionMethod is null))
                    s_SetWBPosByVal = extensionMethod.CreateStaticDelegate(typeof(SetWBPosByVal)) as SetWBPosByVal;

                if (s_SetWBPosByPtr is null && s_SetWBPosByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Frontend.SetWBPos method", new Exception("SetWBPos"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Logf");

                if (!(extensionMethod is null))
                    s_LogfByPtr = extensionMethod.CreateStaticDelegate(typeof(LogfByPtr)) as LogfByPtr;

                extensionMethod = targetType.GetExtensionMethod("Logf");

                if (!(extensionMethod is null))
                    s_LogfByVal = extensionMethod.CreateStaticDelegate(typeof(LogfByVal)) as LogfByVal;

                if (s_LogfByPtr is null && s_LogfByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Frontend.Logf method", new Exception("Logf"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Log");

                if (!(extensionMethod is null))
                    s_LogByPtr = extensionMethod.CreateStaticDelegate(typeof(LogByPtr)) as LogByPtr;

                extensionMethod = targetType.GetExtensionMethod("Log");

                if (!(extensionMethod is null))
                    s_LogByVal = extensionMethod.CreateStaticDelegate(typeof(LogByVal)) as LogByVal;

                if (s_LogByPtr is null && s_LogByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Frontend.Log method", new Exception("Log"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Fatalf");

                if (!(extensionMethod is null))
                    s_FatalfByPtr = extensionMethod.CreateStaticDelegate(typeof(FatalfByPtr)) as FatalfByPtr;

                extensionMethod = targetType.GetExtensionMethod("Fatalf");

                if (!(extensionMethod is null))
                    s_FatalfByVal = extensionMethod.CreateStaticDelegate(typeof(FatalfByVal)) as FatalfByVal;

                if (s_FatalfByPtr is null && s_FatalfByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Frontend.Fatalf method", new Exception("Fatalf"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Warnl");

                if (!(extensionMethod is null))
                    s_WarnlByPtr = extensionMethod.CreateStaticDelegate(typeof(WarnlByPtr)) as WarnlByPtr;

                extensionMethod = targetType.GetExtensionMethod("Warnl");

                if (!(extensionMethod is null))
                    s_WarnlByVal = extensionMethod.CreateStaticDelegate(typeof(WarnlByVal)) as WarnlByVal;

                if (s_WarnlByPtr is null && s_WarnlByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Frontend.Warnl method", new Exception("Warnl"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Debug_checknil");

                if (!(extensionMethod is null))
                    s_Debug_checknilByPtr = extensionMethod.CreateStaticDelegate(typeof(Debug_checknilByPtr)) as Debug_checknilByPtr;

                extensionMethod = targetType.GetExtensionMethod("Debug_checknil");

                if (!(extensionMethod is null))
                    s_Debug_checknilByVal = extensionMethod.CreateStaticDelegate(typeof(Debug_checknilByVal)) as Debug_checknilByVal;

                if (s_Debug_checknilByPtr is null && s_Debug_checknilByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Frontend.Debug_checknil method", new Exception("Debug_checknil"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Frontend<T>(in ptr<T> target_ptr) => new Frontend<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Frontend<T>(in T target) => new Frontend<T>(target);

            // Enable comparisons between nil and Frontend<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Frontend<T> value, NilType nil) => Activator.CreateInstance<Frontend<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Frontend<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Frontend<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Frontend<T> value) => value != nil;
        }
    }
}}}}

namespace go
{
    public static class ssa_FrontendExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.cmd.compile.@internal.ssa_package.Frontend target)
        {
            try
            {
                return ((go.cmd.compile.@internal.ssa_package.Frontend<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.cmd.compile.@internal.ssa_package.Frontend target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.cmd.compile.@internal.ssa_package.Frontend target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.cmd.compile.@internal.ssa_package.Frontend<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.cmd.compile.@internal.ssa_package.Frontend target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}