//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 05:25:30 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bytes = go.bytes_package;
using sha256 = go.crypto.sha256_package;
using fmt = go.fmt_package;
using io = go.io_package;
using go;

#nullable enable
#pragma warning disable CS0660, CS0661

namespace go {
namespace cmd {
namespace compile {
namespace @internal
{
    public static partial class ssa_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial interface funcPrinter
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static funcPrinter As<T>(in T target) => (funcPrinter<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static funcPrinter As<T>(ptr<T> target_ptr) => (funcPrinter<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static funcPrinter? As(object target) =>
                typeof(funcPrinter<>).CreateInterfaceHandler<funcPrinter>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private class funcPrinter<T> : funcPrinter
        {
            private T m_target = default!;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public funcPrinter(in T target) => m_target = target;

            public funcPrinter(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate void headerByPtr(ptr<T> value, ptr<Func> f);
            private delegate void headerByVal(T value, ptr<Func> f);

            private static readonly headerByPtr? s_headerByPtr;
            private static readonly headerByVal? s_headerByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void header(ptr<Func> f)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_headerByPtr is null || !m_target_is_ptr)
                {
                    s_headerByVal!(target, f);
                    return;
                }

                s_headerByPtr(m_target_ptr, f);
                return;
                
            }

            private delegate void startBlockByPtr(ptr<T> value, ptr<Block> b, bool reachable);
            private delegate void startBlockByVal(T value, ptr<Block> b, bool reachable);

            private static readonly startBlockByPtr? s_startBlockByPtr;
            private static readonly startBlockByVal? s_startBlockByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void startBlock(ptr<Block> b, bool reachable)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_startBlockByPtr is null || !m_target_is_ptr)
                {
                    s_startBlockByVal!(target, b, reachable);
                    return;
                }

                s_startBlockByPtr(m_target_ptr, b, reachable);
                return;
                
            }

            private delegate void endBlockByPtr(ptr<T> value, ptr<Block> b);
            private delegate void endBlockByVal(T value, ptr<Block> b);

            private static readonly endBlockByPtr? s_endBlockByPtr;
            private static readonly endBlockByVal? s_endBlockByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void endBlock(ptr<Block> b)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_endBlockByPtr is null || !m_target_is_ptr)
                {
                    s_endBlockByVal!(target, b);
                    return;
                }

                s_endBlockByPtr(m_target_ptr, b);
                return;
                
            }

            private delegate void valueByPtr(ptr<T> value, ptr<Value> v, bool live);
            private delegate void valueByVal(T value, ptr<Value> v, bool live);

            private static readonly valueByPtr? s_valueByPtr;
            private static readonly valueByVal? s_valueByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void value(ptr<Value> v, bool live)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_valueByPtr is null || !m_target_is_ptr)
                {
                    s_valueByVal!(target, v, live);
                    return;
                }

                s_valueByPtr(m_target_ptr, v, live);
                return;
                
            }

            private delegate void startDepCycleByPtr(ptr<T> value);
            private delegate void startDepCycleByVal(T value);

            private static readonly startDepCycleByPtr? s_startDepCycleByPtr;
            private static readonly startDepCycleByVal? s_startDepCycleByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void startDepCycle()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_startDepCycleByPtr is null || !m_target_is_ptr)
                {
                    s_startDepCycleByVal!(target);
                    return;
                }

                s_startDepCycleByPtr(m_target_ptr);
                return;
                
            }

            private delegate void endDepCycleByPtr(ptr<T> value);
            private delegate void endDepCycleByVal(T value);

            private static readonly endDepCycleByPtr? s_endDepCycleByPtr;
            private static readonly endDepCycleByVal? s_endDepCycleByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void endDepCycle()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_endDepCycleByPtr is null || !m_target_is_ptr)
                {
                    s_endDepCycleByVal!(target);
                    return;
                }

                s_endDepCycleByPtr(m_target_ptr);
                return;
                
            }

            private delegate void namedByPtr(ptr<T> value, LocalSlot n, slice<ptr<Value>> vals);
            private delegate void namedByVal(T value, LocalSlot n, slice<ptr<Value>> vals);

            private static readonly namedByPtr? s_namedByPtr;
            private static readonly namedByVal? s_namedByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void named(LocalSlot n, slice<ptr<Value>> vals)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_namedByPtr is null || !m_target_is_ptr)
                {
                    s_namedByVal!(target, n, vals);
                    return;
                }

                s_namedByPtr(m_target_ptr, n, vals);
                return;
                
            }
            
            public string ToString(string? format, IFormatProvider? formatProvider) => format;

            [DebuggerStepperBoundary]
            static funcPrinter()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("header");

                if (!(extensionMethod is null))
                    s_headerByPtr = extensionMethod.CreateStaticDelegate(typeof(headerByPtr)) as headerByPtr;

                extensionMethod = targetType.GetExtensionMethod("header");

                if (!(extensionMethod is null))
                    s_headerByVal = extensionMethod.CreateStaticDelegate(typeof(headerByVal)) as headerByVal;

                if (s_headerByPtr is null && s_headerByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement funcPrinter.header method", new Exception("header"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("startBlock");

                if (!(extensionMethod is null))
                    s_startBlockByPtr = extensionMethod.CreateStaticDelegate(typeof(startBlockByPtr)) as startBlockByPtr;

                extensionMethod = targetType.GetExtensionMethod("startBlock");

                if (!(extensionMethod is null))
                    s_startBlockByVal = extensionMethod.CreateStaticDelegate(typeof(startBlockByVal)) as startBlockByVal;

                if (s_startBlockByPtr is null && s_startBlockByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement funcPrinter.startBlock method", new Exception("startBlock"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("endBlock");

                if (!(extensionMethod is null))
                    s_endBlockByPtr = extensionMethod.CreateStaticDelegate(typeof(endBlockByPtr)) as endBlockByPtr;

                extensionMethod = targetType.GetExtensionMethod("endBlock");

                if (!(extensionMethod is null))
                    s_endBlockByVal = extensionMethod.CreateStaticDelegate(typeof(endBlockByVal)) as endBlockByVal;

                if (s_endBlockByPtr is null && s_endBlockByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement funcPrinter.endBlock method", new Exception("endBlock"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("value");

                if (!(extensionMethod is null))
                    s_valueByPtr = extensionMethod.CreateStaticDelegate(typeof(valueByPtr)) as valueByPtr;

                extensionMethod = targetType.GetExtensionMethod("value");

                if (!(extensionMethod is null))
                    s_valueByVal = extensionMethod.CreateStaticDelegate(typeof(valueByVal)) as valueByVal;

                if (s_valueByPtr is null && s_valueByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement funcPrinter.value method", new Exception("value"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("startDepCycle");

                if (!(extensionMethod is null))
                    s_startDepCycleByPtr = extensionMethod.CreateStaticDelegate(typeof(startDepCycleByPtr)) as startDepCycleByPtr;

                extensionMethod = targetType.GetExtensionMethod("startDepCycle");

                if (!(extensionMethod is null))
                    s_startDepCycleByVal = extensionMethod.CreateStaticDelegate(typeof(startDepCycleByVal)) as startDepCycleByVal;

                if (s_startDepCycleByPtr is null && s_startDepCycleByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement funcPrinter.startDepCycle method", new Exception("startDepCycle"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("endDepCycle");

                if (!(extensionMethod is null))
                    s_endDepCycleByPtr = extensionMethod.CreateStaticDelegate(typeof(endDepCycleByPtr)) as endDepCycleByPtr;

                extensionMethod = targetType.GetExtensionMethod("endDepCycle");

                if (!(extensionMethod is null))
                    s_endDepCycleByVal = extensionMethod.CreateStaticDelegate(typeof(endDepCycleByVal)) as endDepCycleByVal;

                if (s_endDepCycleByPtr is null && s_endDepCycleByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement funcPrinter.endDepCycle method", new Exception("endDepCycle"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("named");

                if (!(extensionMethod is null))
                    s_namedByPtr = extensionMethod.CreateStaticDelegate(typeof(namedByPtr)) as namedByPtr;

                extensionMethod = targetType.GetExtensionMethod("named");

                if (!(extensionMethod is null))
                    s_namedByVal = extensionMethod.CreateStaticDelegate(typeof(namedByVal)) as namedByVal;

                if (s_namedByPtr is null && s_namedByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement funcPrinter.named method", new Exception("named"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator funcPrinter<T>(in ptr<T> target_ptr) => new funcPrinter<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator funcPrinter<T>(in T target) => new funcPrinter<T>(target);

            // Enable comparisons between nil and funcPrinter<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(funcPrinter<T> value, NilType nil) => Activator.CreateInstance<funcPrinter<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(funcPrinter<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, funcPrinter<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, funcPrinter<T> value) => value != nil;
        }
    }
}}}}

namespace go
{
    public static class ssa_funcPrinterExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.cmd.compile.@internal.ssa_package.funcPrinter target)
        {
            try
            {
                return ((go.cmd.compile.@internal.ssa_package.funcPrinter<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.cmd.compile.@internal.ssa_package.funcPrinter target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.cmd.compile.@internal.ssa_package.funcPrinter target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.cmd.compile.@internal.ssa_package.funcPrinter<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.cmd.compile.@internal.ssa_package.funcPrinter target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}