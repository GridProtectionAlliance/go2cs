//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 22:49:28 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using abi = go.cmd.compile.@internal.abi_package;
using ir = go.cmd.compile.@internal.ir_package;
using types = go.cmd.compile.@internal.types_package;
using obj = go.cmd.@internal.obj_package;
using src = go.cmd.@internal.src_package;
using buildcfg = go.@internal.buildcfg_package;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace compile {
namespace @internal
{
    public static partial class ssa_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Config
        {
            // Constructors
            public Config(NilType _)
            {
                this.arch = default;
                this.PtrSize = default;
                this.RegSize = default;
                this.Types = default;
                this.lowerBlock = default;
                this.lowerValue = default;
                this.splitLoad = default;
                this.registers = default;
                this.gpRegMask = default;
                this.fpRegMask = default;
                this.fp32RegMask = default;
                this.fp64RegMask = default;
                this.specialRegMask = default;
                this.intParamRegs = default;
                this.floatParamRegs = default;
                this.ABI1 = default;
                this.ABI0 = default;
                this.GCRegMap = default;
                this.FPReg = default;
                this.LinkReg = default;
                this.hasGReg = default;
                this.ctxt = default;
                this.optimize = default;
                this.noDuffDevice = default;
                this.useSSE = default;
                this.useAvg = default;
                this.useHmul = default;
                this.SoftFloat = default;
                this.Race = default;
                this.BigEndian = default;
                this.UseFMA = default;
            }

            public Config(@string arch = default, long PtrSize = default, long RegSize = default, Types Types = default, blockRewriter lowerBlock = default, valueRewriter lowerValue = default, valueRewriter splitLoad = default, slice<Register> registers = default, regMask gpRegMask = default, regMask fpRegMask = default, regMask fp32RegMask = default, regMask fp64RegMask = default, regMask specialRegMask = default, slice<sbyte> intParamRegs = default, slice<sbyte> floatParamRegs = default, ref ptr<abi.ABIConfig> ABI1 = default, ref ptr<abi.ABIConfig> ABI0 = default, slice<ptr<Register>> GCRegMap = default, sbyte FPReg = default, sbyte LinkReg = default, bool hasGReg = default, ref ptr<obj.Link> ctxt = default, bool optimize = default, bool noDuffDevice = default, bool useSSE = default, bool useAvg = default, bool useHmul = default, bool SoftFloat = default, bool Race = default, bool BigEndian = default, bool UseFMA = default)
            {
                this.arch = arch;
                this.PtrSize = PtrSize;
                this.RegSize = RegSize;
                this.Types = Types;
                this.lowerBlock = lowerBlock;
                this.lowerValue = lowerValue;
                this.splitLoad = splitLoad;
                this.registers = registers;
                this.gpRegMask = gpRegMask;
                this.fpRegMask = fpRegMask;
                this.fp32RegMask = fp32RegMask;
                this.fp64RegMask = fp64RegMask;
                this.specialRegMask = specialRegMask;
                this.intParamRegs = intParamRegs;
                this.floatParamRegs = floatParamRegs;
                this.ABI1 = ABI1;
                this.ABI0 = ABI0;
                this.GCRegMap = GCRegMap;
                this.FPReg = FPReg;
                this.LinkReg = LinkReg;
                this.hasGReg = hasGReg;
                this.ctxt = ctxt;
                this.optimize = optimize;
                this.noDuffDevice = noDuffDevice;
                this.useSSE = useSSE;
                this.useAvg = useAvg;
                this.useHmul = useHmul;
                this.SoftFloat = SoftFloat;
                this.Race = Race;
                this.BigEndian = BigEndian;
                this.UseFMA = UseFMA;
            }

            // Enable comparisons between nil and Config struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Config value, NilType nil) => value.Equals(default(Config));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Config value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Config value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Config value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Config(NilType nil) => default(Config);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Config Config_cast(dynamic value)
        {
            return new Config(value.arch, value.PtrSize, value.RegSize, value.Types, value.lowerBlock, value.lowerValue, value.splitLoad, value.registers, value.gpRegMask, value.fpRegMask, value.fp32RegMask, value.fp64RegMask, value.specialRegMask, value.intParamRegs, value.floatParamRegs, ref value.ABI1, ref value.ABI0, value.GCRegMap, value.FPReg, value.LinkReg, value.hasGReg, ref value.ctxt, value.optimize, value.noDuffDevice, value.useSSE, value.useAvg, value.useHmul, value.SoftFloat, value.Race, value.BigEndian, value.UseFMA);
        }
    }
}}}}