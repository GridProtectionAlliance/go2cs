//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 22:49:47 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;

using go;

#nullable enable

namespace go {
namespace cmd {
namespace compile {
namespace @internal
{
    public static partial class ssa_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct blockAndIndex
        {
            // Constructors
            public blockAndIndex(NilType _)
            {
                this.b = default;
                this.index = default;
            }

            public blockAndIndex(ref ptr<Block> b = default, nint index = default)
            {
                this.b = b;
                this.index = index;
            }

            // Enable comparisons between nil and blockAndIndex struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(blockAndIndex value, NilType nil) => value.Equals(default(blockAndIndex));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(blockAndIndex value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, blockAndIndex value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, blockAndIndex value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator blockAndIndex(NilType nil) => default(blockAndIndex);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static blockAndIndex blockAndIndex_cast(dynamic value)
        {
            return new blockAndIndex(ref value.b, value.index);
        }
    }
}}}}