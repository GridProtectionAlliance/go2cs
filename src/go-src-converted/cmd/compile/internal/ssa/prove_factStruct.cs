//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 06:02:18 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using src = go.cmd.@internal.src_package;
using fmt = go.fmt_package;
using math = go.math_package;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace compile {
namespace @internal
{
    public static partial class ssa_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial struct fact
        {
            // Constructors
            public fact(NilType _)
            {
                this.p = default;
                this.r = default;
            }

            public fact(pair p = default, relation r = default)
            {
                this.p = p;
                this.r = r;
            }

            // Enable comparisons between nil and fact struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(fact value, NilType nil) => value.Equals(default(fact));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(fact value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, fact value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, fact value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator fact(NilType nil) => default(fact);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private static fact fact_cast(dynamic value)
        {
            return new fact(value.p, value.r);
        }
    }
}}}}