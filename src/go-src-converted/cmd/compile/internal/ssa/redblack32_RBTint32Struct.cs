//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 04:11:36 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using fmt = go.fmt_package;
using go;

namespace go {
namespace cmd {
namespace compile {
namespace @internal
{
    public static partial class ssa_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct RBTint32
        {
            // Constructors
            public RBTint32(NilType _)
            {
                this.root = default;
            }

            public RBTint32(ref ptr<node32> root = default)
            {
                this.root = root;
            }

            // Enable comparisons between nil and RBTint32 struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(RBTint32 value, NilType nil) => value.Equals(default(RBTint32));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(RBTint32 value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, RBTint32 value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, RBTint32 value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator RBTint32(NilType nil) => default(RBTint32);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static RBTint32 RBTint32_cast(dynamic value)
        {
            return new RBTint32(ref value.root);
        }
    }
}}}}