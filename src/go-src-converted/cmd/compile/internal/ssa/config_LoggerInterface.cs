//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 05:24:27 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using types = go.cmd.compile.@internal.types_package;
using obj = go.cmd.@internal.obj_package;
using objabi = go.cmd.@internal.objabi_package;
using src = go.cmd.@internal.src_package;
using go;

#nullable enable
#pragma warning disable CS0660, CS0661

namespace go {
namespace cmd {
namespace compile {
namespace @internal
{
    public static partial class ssa_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface Logger
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Logger As<T>(in T target) => (Logger<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Logger As<T>(ptr<T> target_ptr) => (Logger<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Logger? As(object target) =>
                typeof(Logger<>).CreateInterfaceHandler<Logger>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class Logger<T> : Logger
        {
            private T m_target = default!;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public Logger(in T target) => m_target = target;

            public Logger(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate bool LogfByPtr(ptr<T> value, @string _p0, params object _p0);
            private delegate bool LogfByVal(T value, @string _p0, params object _p0);

            private static readonly LogfByPtr? s_LogfByPtr;
            private static readonly LogfByVal? s_LogfByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Logf(@string _p0, params object _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_LogfByPtr is null || !m_target_is_ptr)
                    return s_LogfByVal!(target, _p0, _p0);

                return s_LogfByPtr(m_target_ptr, _p0, _p0);
            }

            private delegate bool LogByPtr(ptr<T> value);
            private delegate bool LogByVal(T value);

            private static readonly LogByPtr? s_LogByPtr;
            private static readonly LogByVal? s_LogByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Log()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_LogByPtr is null || !m_target_is_ptr)
                    return s_LogByVal!(target);

                return s_LogByPtr(m_target_ptr);
            }

            private delegate bool FatalfByPtr(ptr<T> value, src.XPos pos, @string msg, params object[] args);
            private delegate bool FatalfByVal(T value, src.XPos pos, @string msg, params object[] args);

            private static readonly FatalfByPtr? s_FatalfByPtr;
            private static readonly FatalfByVal? s_FatalfByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Fatalf(src.XPos pos, @string msg, params object[] args)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_FatalfByPtr is null || !m_target_is_ptr)
                    return s_FatalfByVal!(target, pos, msg, args);

                return s_FatalfByPtr(m_target_ptr, pos, msg, args);
            }

            private delegate bool WarnlByPtr(ptr<T> value, src.XPos pos, @string fmt_, params object[] args);
            private delegate bool WarnlByVal(T value, src.XPos pos, @string fmt_, params object[] args);

            private static readonly WarnlByPtr? s_WarnlByPtr;
            private static readonly WarnlByVal? s_WarnlByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Warnl(src.XPos pos, @string fmt_, params object[] args)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_WarnlByPtr is null || !m_target_is_ptr)
                    return s_WarnlByVal!(target, pos, fmt_, args);

                return s_WarnlByPtr(m_target_ptr, pos, fmt_, args);
            }

            private delegate bool Debug_checknilByPtr(ptr<T> value);
            private delegate bool Debug_checknilByVal(T value);

            private static readonly Debug_checknilByPtr? s_Debug_checknilByPtr;
            private static readonly Debug_checknilByVal? s_Debug_checknilByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Debug_checknil()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_Debug_checknilByPtr is null || !m_target_is_ptr)
                    return s_Debug_checknilByVal!(target);

                return s_Debug_checknilByPtr(m_target_ptr);
            }
            
            public string ToString(string? format, IFormatProvider? formatProvider) => format;

            [DebuggerStepperBoundary]
            static Logger()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Logf");

                if (!(extensionMethod is null))
                    s_LogfByPtr = extensionMethod.CreateStaticDelegate(typeof(LogfByPtr)) as LogfByPtr;

                extensionMethod = targetType.GetExtensionMethod("Logf");

                if (!(extensionMethod is null))
                    s_LogfByVal = extensionMethod.CreateStaticDelegate(typeof(LogfByVal)) as LogfByVal;

                if (s_LogfByPtr is null && s_LogfByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Logger.Logf method", new Exception("Logf"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Log");

                if (!(extensionMethod is null))
                    s_LogByPtr = extensionMethod.CreateStaticDelegate(typeof(LogByPtr)) as LogByPtr;

                extensionMethod = targetType.GetExtensionMethod("Log");

                if (!(extensionMethod is null))
                    s_LogByVal = extensionMethod.CreateStaticDelegate(typeof(LogByVal)) as LogByVal;

                if (s_LogByPtr is null && s_LogByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Logger.Log method", new Exception("Log"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Fatalf");

                if (!(extensionMethod is null))
                    s_FatalfByPtr = extensionMethod.CreateStaticDelegate(typeof(FatalfByPtr)) as FatalfByPtr;

                extensionMethod = targetType.GetExtensionMethod("Fatalf");

                if (!(extensionMethod is null))
                    s_FatalfByVal = extensionMethod.CreateStaticDelegate(typeof(FatalfByVal)) as FatalfByVal;

                if (s_FatalfByPtr is null && s_FatalfByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Logger.Fatalf method", new Exception("Fatalf"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Warnl");

                if (!(extensionMethod is null))
                    s_WarnlByPtr = extensionMethod.CreateStaticDelegate(typeof(WarnlByPtr)) as WarnlByPtr;

                extensionMethod = targetType.GetExtensionMethod("Warnl");

                if (!(extensionMethod is null))
                    s_WarnlByVal = extensionMethod.CreateStaticDelegate(typeof(WarnlByVal)) as WarnlByVal;

                if (s_WarnlByPtr is null && s_WarnlByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Logger.Warnl method", new Exception("Warnl"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Debug_checknil");

                if (!(extensionMethod is null))
                    s_Debug_checknilByPtr = extensionMethod.CreateStaticDelegate(typeof(Debug_checknilByPtr)) as Debug_checknilByPtr;

                extensionMethod = targetType.GetExtensionMethod("Debug_checknil");

                if (!(extensionMethod is null))
                    s_Debug_checknilByVal = extensionMethod.CreateStaticDelegate(typeof(Debug_checknilByVal)) as Debug_checknilByVal;

                if (s_Debug_checknilByPtr is null && s_Debug_checknilByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Logger.Debug_checknil method", new Exception("Debug_checknil"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Logger<T>(in ptr<T> target_ptr) => new Logger<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Logger<T>(in T target) => new Logger<T>(target);

            // Enable comparisons between nil and Logger<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Logger<T> value, NilType nil) => Activator.CreateInstance<Logger<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Logger<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Logger<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Logger<T> value) => value != nil;
        }
    }
}}}}

namespace go
{
    public static class ssa_LoggerExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.cmd.compile.@internal.ssa_package.Logger target)
        {
            try
            {
                return ((go.cmd.compile.@internal.ssa_package.Logger<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.cmd.compile.@internal.ssa_package.Logger target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.cmd.compile.@internal.ssa_package.Logger target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.cmd.compile.@internal.ssa_package.Logger<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.cmd.compile.@internal.ssa_package.Logger target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}