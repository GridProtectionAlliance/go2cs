//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:10:45 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using md5 = go.crypto.md5_package;
using sha1 = go.crypto.sha1_package;
using fmt = go.fmt_package;
using os = go.os_package;
using sort = go.sort_package;
using strings = go.strings_package;
using abi = go.cmd.compile.@internal.abi_package;
using @base = go.cmd.compile.@internal.@base_package;
using bitvec = go.cmd.compile.@internal.bitvec_package;
using ir = go.cmd.compile.@internal.ir_package;
using objw = go.cmd.compile.@internal.objw_package;
using reflectdata = go.cmd.compile.@internal.reflectdata_package;
using ssa = go.cmd.compile.@internal.ssa_package;
using typebits = go.cmd.compile.@internal.typebits_package;
using types = go.cmd.compile.@internal.types_package;
using obj = go.cmd.@internal.obj_package;
using objabi = go.cmd.@internal.objabi_package;
using src = go.cmd.@internal.src_package;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace compile {
namespace @internal
{
    public static partial class liveness_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct liveness
        {
            // Constructors
            public liveness(NilType _)
            {
                this.fn = default;
                this.f = default;
                this.vars = default;
                this.idx = default;
                this.stkptrsize = default;
                this.be = default;
                this.allUnsafe = default;
                this.unsafePoints = default;
                this.livevars = default;
                this.livenessMap = default;
                this.stackMapSet = default;
                this.stackMaps = default;
                this.cache = default;
                this.partLiveArgs = default;
                this.doClobber = default;
                this.noClobberArgs = default;
            }

            public liveness(ref ptr<ir.Func> fn = default, ref ptr<ssa.Func> f = default, slice<ptr<ir.Name>> vars = default, map<ptr<ir.Name>, int> idx = default, long stkptrsize = default, slice<blockEffects> be = default, bool allUnsafe = default, bitvec.BitVec unsafePoints = default, slice<bitvec.BitVec> livevars = default, Map livenessMap = default, bvecSet stackMapSet = default, slice<bitvec.BitVec> stackMaps = default, progeffectscache cache = default, map<ptr<ir.Name>, bool> partLiveArgs = default, bool doClobber = default, bool noClobberArgs = default)
            {
                this.fn = fn;
                this.f = f;
                this.vars = vars;
                this.idx = idx;
                this.stkptrsize = stkptrsize;
                this.be = be;
                this.allUnsafe = allUnsafe;
                this.unsafePoints = unsafePoints;
                this.livevars = livevars;
                this.livenessMap = livenessMap;
                this.stackMapSet = stackMapSet;
                this.stackMaps = stackMaps;
                this.cache = cache;
                this.partLiveArgs = partLiveArgs;
                this.doClobber = doClobber;
                this.noClobberArgs = noClobberArgs;
            }

            // Enable comparisons between nil and liveness struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(liveness value, NilType nil) => value.Equals(default(liveness));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(liveness value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, liveness value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, liveness value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator liveness(NilType nil) => default(liveness);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static liveness liveness_cast(dynamic value)
        {
            return new liveness(ref value.fn, ref value.f, value.vars, value.idx, value.stkptrsize, value.be, value.allUnsafe, value.unsafePoints, value.livevars, value.livenessMap, value.stackMapSet, value.stackMaps, value.cache, value.partLiveArgs, value.doClobber, value.noClobberArgs);
        }
    }
}}}}