//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 06:28:27 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using fmt = go.fmt_package;
using strings = go.strings_package;

#nullable enable

namespace go
{
    public static partial class main_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial struct blo
        {
            // Constructors
            public blo(NilType _)
            {
                this.inc = default;
                this.cond = default;
                this.succs = default;
            }

            public blo(long inc = default, bool cond = default, array<long> succs = default)
            {
                this.inc = inc;
                this.cond = cond;
                this.succs = succs;
            }

            // Enable comparisons between nil and blo struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(blo value, NilType nil) => value.Equals(default(blo));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(blo value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, blo value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, blo value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator blo(NilType nil) => default(blo);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private static blo blo_cast(dynamic value)
        {
            return new blo(value.inc, value.cond, value.succs);
        }
    }
}