//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 06:00:31 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using fmt = go.fmt_package;
using constant = go.go.constant_package;
using sort = go.sort_package;
using @base = go.cmd.compile.@internal.@base_package;
using types = go.cmd.compile.@internal.types_package;
using src = go.cmd.@internal.src_package;
using go;

#nullable enable
#pragma warning disable CS0660, CS0661

namespace go {
namespace cmd {
namespace compile {
namespace @internal
{
    public static partial class ir_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        public partial interface Node
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Node As<T>(in T target) => (Node<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Node As<T>(ptr<T> target_ptr) => (Node<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Node? As(object target) =>
                typeof(Node<>).CreateInterfaceHandler<Node>(target);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        public class Node<T> : Node
        {
            private T m_target = default!;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && m_target_ptr is not null)
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public Node(in T target) => m_target = target;

            public Node(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate bool FormatByPtr(ptr<T> value, fmt.State s, int verb);
            private delegate bool FormatByVal(T value, fmt.State s, int verb);

            private static readonly FormatByPtr? s_FormatByPtr;
            private static readonly FormatByVal? s_FormatByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Format(fmt.State s, int verb)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_FormatByPtr is null || !m_target_is_ptr)
                    return s_FormatByVal!(target, s, verb);

                return s_FormatByPtr(m_target_ptr!, s, verb);
            }

            private delegate bool PosByPtr(ptr<T> value);
            private delegate bool PosByVal(T value);

            private static readonly PosByPtr? s_PosByPtr;
            private static readonly PosByVal? s_PosByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Pos()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_PosByPtr is null || !m_target_is_ptr)
                    return s_PosByVal!(target);

                return s_PosByPtr(m_target_ptr!);
            }

            private delegate bool SetPosByPtr(ptr<T> value, src.XPos x);
            private delegate bool SetPosByVal(T value, src.XPos x);

            private static readonly SetPosByPtr? s_SetPosByPtr;
            private static readonly SetPosByVal? s_SetPosByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool SetPos(src.XPos x)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_SetPosByPtr is null || !m_target_is_ptr)
                    return s_SetPosByVal!(target, x);

                return s_SetPosByPtr(m_target_ptr!, x);
            }

            private delegate bool copyByPtr(ptr<T> value);
            private delegate bool copyByVal(T value);

            private static readonly copyByPtr? s_copyByPtr;
            private static readonly copyByVal? s_copyByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool copy()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_copyByPtr is null || !m_target_is_ptr)
                    return s_copyByVal!(target);

                return s_copyByPtr(m_target_ptr!);
            }

            private delegate bool doChildrenByPtr(ptr<T> value, Func<Node, bool> _p0);
            private delegate bool doChildrenByVal(T value, Func<Node, bool> _p0);

            private static readonly doChildrenByPtr? s_doChildrenByPtr;
            private static readonly doChildrenByVal? s_doChildrenByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool doChildren(Func<Node, bool> _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_doChildrenByPtr is null || !m_target_is_ptr)
                    return s_doChildrenByVal!(target, _p0);

                return s_doChildrenByPtr(m_target_ptr!, _p0);
            }

            private delegate bool editChildrenByPtr(ptr<T> value, Func<Node, Node> _p0);
            private delegate bool editChildrenByVal(T value, Func<Node, Node> _p0);

            private static readonly editChildrenByPtr? s_editChildrenByPtr;
            private static readonly editChildrenByVal? s_editChildrenByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool editChildren(Func<Node, Node> _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_editChildrenByPtr is null || !m_target_is_ptr)
                    return s_editChildrenByVal!(target, _p0);

                return s_editChildrenByPtr(m_target_ptr!, _p0);
            }

            private delegate bool OpByPtr(ptr<T> value);
            private delegate bool OpByVal(T value);

            private static readonly OpByPtr? s_OpByPtr;
            private static readonly OpByVal? s_OpByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Op()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_OpByPtr is null || !m_target_is_ptr)
                    return s_OpByVal!(target);

                return s_OpByPtr(m_target_ptr!);
            }

            private delegate bool InitByPtr(ptr<T> value);
            private delegate bool InitByVal(T value);

            private static readonly InitByPtr? s_InitByPtr;
            private static readonly InitByVal? s_InitByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Init()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_InitByPtr is null || !m_target_is_ptr)
                    return s_InitByVal!(target);

                return s_InitByPtr(m_target_ptr!);
            }

            private delegate bool TypeByPtr(ptr<T> value);
            private delegate bool TypeByVal(T value);

            private static readonly TypeByPtr? s_TypeByPtr;
            private static readonly TypeByVal? s_TypeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Type()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_TypeByPtr is null || !m_target_is_ptr)
                    return s_TypeByVal!(target);

                return s_TypeByPtr(m_target_ptr!);
            }

            private delegate bool SetTypeByPtr(ptr<T> value, ptr<types.Type> t);
            private delegate bool SetTypeByVal(T value, ptr<types.Type> t);

            private static readonly SetTypeByPtr? s_SetTypeByPtr;
            private static readonly SetTypeByVal? s_SetTypeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool SetType(ptr<types.Type> t)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_SetTypeByPtr is null || !m_target_is_ptr)
                    return s_SetTypeByVal!(target, t);

                return s_SetTypeByPtr(m_target_ptr!, t);
            }

            private delegate bool NameByPtr(ptr<T> value);
            private delegate bool NameByVal(T value);

            private static readonly NameByPtr? s_NameByPtr;
            private static readonly NameByVal? s_NameByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Name()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_NameByPtr is null || !m_target_is_ptr)
                    return s_NameByVal!(target);

                return s_NameByPtr(m_target_ptr!);
            }

            private delegate bool SymByPtr(ptr<T> value);
            private delegate bool SymByVal(T value);

            private static readonly SymByPtr? s_SymByPtr;
            private static readonly SymByVal? s_SymByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Sym()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_SymByPtr is null || !m_target_is_ptr)
                    return s_SymByVal!(target);

                return s_SymByPtr(m_target_ptr!);
            }

            private delegate bool ValByPtr(ptr<T> value);
            private delegate bool ValByVal(T value);

            private static readonly ValByPtr? s_ValByPtr;
            private static readonly ValByVal? s_ValByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Val()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_ValByPtr is null || !m_target_is_ptr)
                    return s_ValByVal!(target);

                return s_ValByPtr(m_target_ptr!);
            }

            private delegate bool SetValByPtr(ptr<T> value, constant.Value v);
            private delegate bool SetValByVal(T value, constant.Value v);

            private static readonly SetValByPtr? s_SetValByPtr;
            private static readonly SetValByVal? s_SetValByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool SetVal(constant.Value v)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_SetValByPtr is null || !m_target_is_ptr)
                    return s_SetValByVal!(target, v);

                return s_SetValByPtr(m_target_ptr!, v);
            }

            private delegate bool EscByPtr(ptr<T> value);
            private delegate bool EscByVal(T value);

            private static readonly EscByPtr? s_EscByPtr;
            private static readonly EscByVal? s_EscByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Esc()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_EscByPtr is null || !m_target_is_ptr)
                    return s_EscByVal!(target);

                return s_EscByPtr(m_target_ptr!);
            }

            private delegate bool SetEscByPtr(ptr<T> value, ushort x);
            private delegate bool SetEscByVal(T value, ushort x);

            private static readonly SetEscByPtr? s_SetEscByPtr;
            private static readonly SetEscByVal? s_SetEscByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool SetEsc(ushort x)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_SetEscByPtr is null || !m_target_is_ptr)
                    return s_SetEscByVal!(target, x);

                return s_SetEscByPtr(m_target_ptr!, x);
            }

            private delegate bool DiagByPtr(ptr<T> value);
            private delegate bool DiagByVal(T value);

            private static readonly DiagByPtr? s_DiagByPtr;
            private static readonly DiagByVal? s_DiagByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Diag()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_DiagByPtr is null || !m_target_is_ptr)
                    return s_DiagByVal!(target);

                return s_DiagByPtr(m_target_ptr!);
            }

            private delegate bool SetDiagByPtr(ptr<T> value, bool x);
            private delegate bool SetDiagByVal(T value, bool x);

            private static readonly SetDiagByPtr? s_SetDiagByPtr;
            private static readonly SetDiagByVal? s_SetDiagByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool SetDiag(bool x)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_SetDiagByPtr is null || !m_target_is_ptr)
                    return s_SetDiagByVal!(target, x);

                return s_SetDiagByPtr(m_target_ptr!, x);
            }

            private delegate bool TypecheckByPtr(ptr<T> value);
            private delegate bool TypecheckByVal(T value);

            private static readonly TypecheckByPtr? s_TypecheckByPtr;
            private static readonly TypecheckByVal? s_TypecheckByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Typecheck()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_TypecheckByPtr is null || !m_target_is_ptr)
                    return s_TypecheckByVal!(target);

                return s_TypecheckByPtr(m_target_ptr!);
            }

            private delegate bool SetTypecheckByPtr(ptr<T> value, byte x);
            private delegate bool SetTypecheckByVal(T value, byte x);

            private static readonly SetTypecheckByPtr? s_SetTypecheckByPtr;
            private static readonly SetTypecheckByVal? s_SetTypecheckByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool SetTypecheck(byte x)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_SetTypecheckByPtr is null || !m_target_is_ptr)
                    return s_SetTypecheckByVal!(target, x);

                return s_SetTypecheckByPtr(m_target_ptr!, x);
            }

            private delegate bool NonNilByPtr(ptr<T> value);
            private delegate bool NonNilByVal(T value);

            private static readonly NonNilByPtr? s_NonNilByPtr;
            private static readonly NonNilByVal? s_NonNilByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool NonNil()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_NonNilByPtr is null || !m_target_is_ptr)
                    return s_NonNilByVal!(target);

                return s_NonNilByPtr(m_target_ptr!);
            }

            private delegate bool MarkNonNilByPtr(ptr<T> value);
            private delegate bool MarkNonNilByVal(T value);

            private static readonly MarkNonNilByPtr? s_MarkNonNilByPtr;
            private static readonly MarkNonNilByVal? s_MarkNonNilByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool MarkNonNil()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_MarkNonNilByPtr is null || !m_target_is_ptr)
                    return s_MarkNonNilByVal!(target);

                return s_MarkNonNilByPtr(m_target_ptr!);
            }
            
            public string ToString(string? format, IFormatProvider? formatProvider) => format ?? GetGoTypeName(typeof(T));

            [DebuggerStepperBoundary]
            static Node()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Format");

                if (extensionMethod is not null)
                    s_FormatByPtr = extensionMethod.CreateStaticDelegate(typeof(FormatByPtr)) as FormatByPtr;

                extensionMethod = targetType.GetExtensionMethod("Format");

                if (extensionMethod is not null)
                    s_FormatByVal = extensionMethod.CreateStaticDelegate(typeof(FormatByVal)) as FormatByVal;

                if (s_FormatByPtr is null && s_FormatByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.Format method", new Exception("Format"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Pos");

                if (extensionMethod is not null)
                    s_PosByPtr = extensionMethod.CreateStaticDelegate(typeof(PosByPtr)) as PosByPtr;

                extensionMethod = targetType.GetExtensionMethod("Pos");

                if (extensionMethod is not null)
                    s_PosByVal = extensionMethod.CreateStaticDelegate(typeof(PosByVal)) as PosByVal;

                if (s_PosByPtr is null && s_PosByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.Pos method", new Exception("Pos"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("SetPos");

                if (extensionMethod is not null)
                    s_SetPosByPtr = extensionMethod.CreateStaticDelegate(typeof(SetPosByPtr)) as SetPosByPtr;

                extensionMethod = targetType.GetExtensionMethod("SetPos");

                if (extensionMethod is not null)
                    s_SetPosByVal = extensionMethod.CreateStaticDelegate(typeof(SetPosByVal)) as SetPosByVal;

                if (s_SetPosByPtr is null && s_SetPosByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.SetPos method", new Exception("SetPos"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("copy");

                if (extensionMethod is not null)
                    s_copyByPtr = extensionMethod.CreateStaticDelegate(typeof(copyByPtr)) as copyByPtr;

                extensionMethod = targetType.GetExtensionMethod("copy");

                if (extensionMethod is not null)
                    s_copyByVal = extensionMethod.CreateStaticDelegate(typeof(copyByVal)) as copyByVal;

                if (s_copyByPtr is null && s_copyByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.copy method", new Exception("copy"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("doChildren");

                if (extensionMethod is not null)
                    s_doChildrenByPtr = extensionMethod.CreateStaticDelegate(typeof(doChildrenByPtr)) as doChildrenByPtr;

                extensionMethod = targetType.GetExtensionMethod("doChildren");

                if (extensionMethod is not null)
                    s_doChildrenByVal = extensionMethod.CreateStaticDelegate(typeof(doChildrenByVal)) as doChildrenByVal;

                if (s_doChildrenByPtr is null && s_doChildrenByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.doChildren method", new Exception("doChildren"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("editChildren");

                if (extensionMethod is not null)
                    s_editChildrenByPtr = extensionMethod.CreateStaticDelegate(typeof(editChildrenByPtr)) as editChildrenByPtr;

                extensionMethod = targetType.GetExtensionMethod("editChildren");

                if (extensionMethod is not null)
                    s_editChildrenByVal = extensionMethod.CreateStaticDelegate(typeof(editChildrenByVal)) as editChildrenByVal;

                if (s_editChildrenByPtr is null && s_editChildrenByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.editChildren method", new Exception("editChildren"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Op");

                if (extensionMethod is not null)
                    s_OpByPtr = extensionMethod.CreateStaticDelegate(typeof(OpByPtr)) as OpByPtr;

                extensionMethod = targetType.GetExtensionMethod("Op");

                if (extensionMethod is not null)
                    s_OpByVal = extensionMethod.CreateStaticDelegate(typeof(OpByVal)) as OpByVal;

                if (s_OpByPtr is null && s_OpByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.Op method", new Exception("Op"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Init");

                if (extensionMethod is not null)
                    s_InitByPtr = extensionMethod.CreateStaticDelegate(typeof(InitByPtr)) as InitByPtr;

                extensionMethod = targetType.GetExtensionMethod("Init");

                if (extensionMethod is not null)
                    s_InitByVal = extensionMethod.CreateStaticDelegate(typeof(InitByVal)) as InitByVal;

                if (s_InitByPtr is null && s_InitByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.Init method", new Exception("Init"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Type");

                if (extensionMethod is not null)
                    s_TypeByPtr = extensionMethod.CreateStaticDelegate(typeof(TypeByPtr)) as TypeByPtr;

                extensionMethod = targetType.GetExtensionMethod("Type");

                if (extensionMethod is not null)
                    s_TypeByVal = extensionMethod.CreateStaticDelegate(typeof(TypeByVal)) as TypeByVal;

                if (s_TypeByPtr is null && s_TypeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.Type method", new Exception("Type"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("SetType");

                if (extensionMethod is not null)
                    s_SetTypeByPtr = extensionMethod.CreateStaticDelegate(typeof(SetTypeByPtr)) as SetTypeByPtr;

                extensionMethod = targetType.GetExtensionMethod("SetType");

                if (extensionMethod is not null)
                    s_SetTypeByVal = extensionMethod.CreateStaticDelegate(typeof(SetTypeByVal)) as SetTypeByVal;

                if (s_SetTypeByPtr is null && s_SetTypeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.SetType method", new Exception("SetType"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Name");

                if (extensionMethod is not null)
                    s_NameByPtr = extensionMethod.CreateStaticDelegate(typeof(NameByPtr)) as NameByPtr;

                extensionMethod = targetType.GetExtensionMethod("Name");

                if (extensionMethod is not null)
                    s_NameByVal = extensionMethod.CreateStaticDelegate(typeof(NameByVal)) as NameByVal;

                if (s_NameByPtr is null && s_NameByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.Name method", new Exception("Name"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Sym");

                if (extensionMethod is not null)
                    s_SymByPtr = extensionMethod.CreateStaticDelegate(typeof(SymByPtr)) as SymByPtr;

                extensionMethod = targetType.GetExtensionMethod("Sym");

                if (extensionMethod is not null)
                    s_SymByVal = extensionMethod.CreateStaticDelegate(typeof(SymByVal)) as SymByVal;

                if (s_SymByPtr is null && s_SymByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.Sym method", new Exception("Sym"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Val");

                if (extensionMethod is not null)
                    s_ValByPtr = extensionMethod.CreateStaticDelegate(typeof(ValByPtr)) as ValByPtr;

                extensionMethod = targetType.GetExtensionMethod("Val");

                if (extensionMethod is not null)
                    s_ValByVal = extensionMethod.CreateStaticDelegate(typeof(ValByVal)) as ValByVal;

                if (s_ValByPtr is null && s_ValByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.Val method", new Exception("Val"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("SetVal");

                if (extensionMethod is not null)
                    s_SetValByPtr = extensionMethod.CreateStaticDelegate(typeof(SetValByPtr)) as SetValByPtr;

                extensionMethod = targetType.GetExtensionMethod("SetVal");

                if (extensionMethod is not null)
                    s_SetValByVal = extensionMethod.CreateStaticDelegate(typeof(SetValByVal)) as SetValByVal;

                if (s_SetValByPtr is null && s_SetValByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.SetVal method", new Exception("SetVal"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Esc");

                if (extensionMethod is not null)
                    s_EscByPtr = extensionMethod.CreateStaticDelegate(typeof(EscByPtr)) as EscByPtr;

                extensionMethod = targetType.GetExtensionMethod("Esc");

                if (extensionMethod is not null)
                    s_EscByVal = extensionMethod.CreateStaticDelegate(typeof(EscByVal)) as EscByVal;

                if (s_EscByPtr is null && s_EscByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.Esc method", new Exception("Esc"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("SetEsc");

                if (extensionMethod is not null)
                    s_SetEscByPtr = extensionMethod.CreateStaticDelegate(typeof(SetEscByPtr)) as SetEscByPtr;

                extensionMethod = targetType.GetExtensionMethod("SetEsc");

                if (extensionMethod is not null)
                    s_SetEscByVal = extensionMethod.CreateStaticDelegate(typeof(SetEscByVal)) as SetEscByVal;

                if (s_SetEscByPtr is null && s_SetEscByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.SetEsc method", new Exception("SetEsc"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Diag");

                if (extensionMethod is not null)
                    s_DiagByPtr = extensionMethod.CreateStaticDelegate(typeof(DiagByPtr)) as DiagByPtr;

                extensionMethod = targetType.GetExtensionMethod("Diag");

                if (extensionMethod is not null)
                    s_DiagByVal = extensionMethod.CreateStaticDelegate(typeof(DiagByVal)) as DiagByVal;

                if (s_DiagByPtr is null && s_DiagByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.Diag method", new Exception("Diag"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("SetDiag");

                if (extensionMethod is not null)
                    s_SetDiagByPtr = extensionMethod.CreateStaticDelegate(typeof(SetDiagByPtr)) as SetDiagByPtr;

                extensionMethod = targetType.GetExtensionMethod("SetDiag");

                if (extensionMethod is not null)
                    s_SetDiagByVal = extensionMethod.CreateStaticDelegate(typeof(SetDiagByVal)) as SetDiagByVal;

                if (s_SetDiagByPtr is null && s_SetDiagByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.SetDiag method", new Exception("SetDiag"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Typecheck");

                if (extensionMethod is not null)
                    s_TypecheckByPtr = extensionMethod.CreateStaticDelegate(typeof(TypecheckByPtr)) as TypecheckByPtr;

                extensionMethod = targetType.GetExtensionMethod("Typecheck");

                if (extensionMethod is not null)
                    s_TypecheckByVal = extensionMethod.CreateStaticDelegate(typeof(TypecheckByVal)) as TypecheckByVal;

                if (s_TypecheckByPtr is null && s_TypecheckByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.Typecheck method", new Exception("Typecheck"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("SetTypecheck");

                if (extensionMethod is not null)
                    s_SetTypecheckByPtr = extensionMethod.CreateStaticDelegate(typeof(SetTypecheckByPtr)) as SetTypecheckByPtr;

                extensionMethod = targetType.GetExtensionMethod("SetTypecheck");

                if (extensionMethod is not null)
                    s_SetTypecheckByVal = extensionMethod.CreateStaticDelegate(typeof(SetTypecheckByVal)) as SetTypecheckByVal;

                if (s_SetTypecheckByPtr is null && s_SetTypecheckByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.SetTypecheck method", new Exception("SetTypecheck"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("NonNil");

                if (extensionMethod is not null)
                    s_NonNilByPtr = extensionMethod.CreateStaticDelegate(typeof(NonNilByPtr)) as NonNilByPtr;

                extensionMethod = targetType.GetExtensionMethod("NonNil");

                if (extensionMethod is not null)
                    s_NonNilByVal = extensionMethod.CreateStaticDelegate(typeof(NonNilByVal)) as NonNilByVal;

                if (s_NonNilByPtr is null && s_NonNilByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.NonNil method", new Exception("NonNil"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("MarkNonNil");

                if (extensionMethod is not null)
                    s_MarkNonNilByPtr = extensionMethod.CreateStaticDelegate(typeof(MarkNonNilByPtr)) as MarkNonNilByPtr;

                extensionMethod = targetType.GetExtensionMethod("MarkNonNil");

                if (extensionMethod is not null)
                    s_MarkNonNilByVal = extensionMethod.CreateStaticDelegate(typeof(MarkNonNilByVal)) as MarkNonNilByVal;

                if (s_MarkNonNilByPtr is null && s_MarkNonNilByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Node.MarkNonNil method", new Exception("MarkNonNil"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Node<T>(in ptr<T> target_ptr) => new Node<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Node<T>(in T target) => new Node<T>(target);

            // Enable comparisons between nil and Node<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Node<T> value, NilType nil) => Activator.CreateInstance<Node<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Node<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Node<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Node<T> value) => value != nil;
        }
    }
}}}}

namespace go
{
    public static class ir_NodeExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.2.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.cmd.compile.@internal.ir_package.Node target)
        {
            try
            {
                return ((go.cmd.compile.@internal.ir_package.Node<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.2.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.cmd.compile.@internal.ir_package.Node target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.2.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.cmd.compile.@internal.ir_package.Node target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.cmd.compile.@internal.ir_package.Node<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.2.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.cmd.compile.@internal.ir_package.Node target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}