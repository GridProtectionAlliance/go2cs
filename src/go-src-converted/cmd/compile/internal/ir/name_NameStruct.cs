//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 06:00:30 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using @base = go.cmd.compile.@internal.@base_package;
using types = go.cmd.compile.@internal.types_package;
using obj = go.cmd.@internal.obj_package;
using objabi = go.cmd.@internal.objabi_package;
using src = go.cmd.@internal.src_package;
using fmt = go.fmt_package;
using constant = go.go.constant_package;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace compile {
namespace @internal
{
    public static partial class ir_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        public partial struct Name
        {
            // Constructors
            public Name(NilType _)
            {
                this.miniExpr = default;
                this.BuiltinOp = default;
                this.Class = default;
                this.pragma = default;
                this.flags = default;
                this.sym = default;
                this.Func = default;
                this.Offset_ = default;
                this.val = default;
                this.Embed = default;
                this.PkgName = default;
                this.Defn = default;
                this.Curfn = default;
                this.Ntype = default;
                this.Heapaddr = default;
                this.Innermost = default;
                this.Outer = default;
            }

            public Name(miniExpr miniExpr = default, Op BuiltinOp = default, Class Class = default, PragmaFlag pragma = default, bitset16 flags = default, ref ptr<types.Sym> sym = default, ref ptr<Func> Func = default, long Offset_ = default, constant.Value val = default, ref ptr<slice<Embed>> Embed = default, ref ptr<PkgName> PkgName = default, Node Defn = default, ref ptr<Func> Curfn = default, Ntype Ntype = default, ref ptr<Name> Heapaddr = default, ref ptr<Name> Innermost = default, ref ptr<Name> Outer = default)
            {
                this.miniExpr = miniExpr;
                this.BuiltinOp = BuiltinOp;
                this.Class = Class;
                this.pragma = pragma;
                this.flags = flags;
                this.sym = sym;
                this.Func = Func;
                this.Offset_ = Offset_;
                this.val = val;
                this.Embed = Embed;
                this.PkgName = PkgName;
                this.Defn = Defn;
                this.Curfn = Curfn;
                this.Ntype = Ntype;
                this.Heapaddr = Heapaddr;
                this.Innermost = Innermost;
                this.Outer = Outer;
            }

            // Enable comparisons between nil and Name struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Name value, NilType nil) => value.Equals(default(Name));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Name value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Name value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Name value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Name(NilType nil) => default(Name);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        public static Name Name_cast(dynamic value)
        {
            return new Name(value.miniExpr, value.BuiltinOp, value.Class, value.pragma, value.flags, ref value.sym, ref value.Func, value.Offset_, value.val, ref value.Embed, ref value.PkgName, value.Defn, ref value.Curfn, value.Ntype, ref value.Heapaddr, ref value.Innermost, ref value.Outer);
        }
    }
}}}}