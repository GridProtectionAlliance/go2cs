// Code generated by "stringer -type=SymKind symkind.go"; DO NOT EDIT.

// package sym -- go2cs converted at 2020 October 08 04:37:55 UTC
// import "cmd/link/internal/sym" ==> using sym = go.cmd.link.@internal.sym_package
// Original source: C:\Go\src\cmd\link\internal\sym\symkind_string.go
using strconv = go.strconv_package;
using static go.builtin;

namespace go {
namespace cmd {
namespace link {
namespace @internal
{
    public static partial class sym_package
    {
        private static void _()
        { 
            // An "invalid array index" compiler error signifies that the constant values have changed.
            // Re-run the stringer command to generate them again.
            var x = default;
            _ = x[Sxxx - 0L];
            _ = x[STEXT - 1L];
            _ = x[SELFRXSECT - 2L];
            _ = x[STYPE - 3L];
            _ = x[SSTRING - 4L];
            _ = x[SGOSTRING - 5L];
            _ = x[SGOFUNC - 6L];
            _ = x[SGCBITS - 7L];
            _ = x[SRODATA - 8L];
            _ = x[SFUNCTAB - 9L];
            _ = x[SELFROSECT - 10L];
            _ = x[SMACHOPLT - 11L];
            _ = x[STYPERELRO - 12L];
            _ = x[SSTRINGRELRO - 13L];
            _ = x[SGOSTRINGRELRO - 14L];
            _ = x[SGOFUNCRELRO - 15L];
            _ = x[SGCBITSRELRO - 16L];
            _ = x[SRODATARELRO - 17L];
            _ = x[SFUNCTABRELRO - 18L];
            _ = x[STYPELINK - 19L];
            _ = x[SITABLINK - 20L];
            _ = x[SSYMTAB - 21L];
            _ = x[SPCLNTAB - 22L];
            _ = x[SFirstWritable - 23L];
            _ = x[SBUILDINFO - 24L];
            _ = x[SELFSECT - 25L];
            _ = x[SMACHO - 26L];
            _ = x[SMACHOGOT - 27L];
            _ = x[SWINDOWS - 28L];
            _ = x[SELFGOT - 29L];
            _ = x[SNOPTRDATA - 30L];
            _ = x[SINITARR - 31L];
            _ = x[SDATA - 32L];
            _ = x[SXCOFFTOC - 33L];
            _ = x[SBSS - 34L];
            _ = x[SNOPTRBSS - 35L];
            _ = x[SLIBFUZZER_EXTRA_COUNTER - 36L];
            _ = x[STLSBSS - 37L];
            _ = x[SXREF - 38L];
            _ = x[SMACHOSYMSTR - 39L];
            _ = x[SMACHOSYMTAB - 40L];
            _ = x[SMACHOINDIRECTPLT - 41L];
            _ = x[SMACHOINDIRECTGOT - 42L];
            _ = x[SFILEPATH - 43L];
            _ = x[SCONST - 44L];
            _ = x[SDYNIMPORT - 45L];
            _ = x[SHOSTOBJ - 46L];
            _ = x[SUNDEFEXT - 47L];
            _ = x[SDWARFSECT - 48L];
            _ = x[SDWARFINFO - 49L];
            _ = x[SDWARFRANGE - 50L];
            _ = x[SDWARFLOC - 51L];
            _ = x[SDWARFLINES - 52L];
            _ = x[SABIALIAS - 53L];

        }

        private static readonly @string _SymKind_name = (@string)"SxxxSTEXTSELFRXSECTSTYPESSTRINGSGOSTRINGSGOFUNCSGCBITSSRODATASFUNCTABSELFROSECTSMACHOPLTSTYPERELROSSTRINGRELROSGOSTRINGRELROSGOFUNCRELROSGCBITSRELROSRODATARELROSFUNCTABRELROSTYPELINKSITABLINKSSYMTABSPCLNTABSFirstWritableSBUILDINFOSELFSECTSMACHOSMACHOGOTSWINDOWSSELFGOTSNOPTRDATASINITARRSDATASXCOFFTOCSBSSSNOPTRBSSSLIBFUZZER_EXTRA_COUNTERSTLSBSSSXREFSMACHOSYMSTRSMACHOSYMTABSMACHOINDIRECTPLTSMACHOINDIRECTGOTSFILEPATHSCONSTSDYNIMPORTSHOSTOBJSUNDEFEXTSDWARFSECTSDWARFINFOSDWARFRANGESDWARFLOCSDWARFLINESSABIALIAS";



        private static array<ushort> _SymKind_index = new array<ushort>(new ushort[] { 0, 4, 9, 19, 24, 31, 40, 47, 54, 61, 69, 79, 88, 98, 110, 124, 136, 148, 160, 173, 182, 191, 198, 206, 220, 230, 238, 244, 253, 261, 268, 278, 286, 291, 300, 304, 313, 337, 344, 349, 361, 373, 390, 407, 416, 422, 432, 440, 449, 459, 469, 480, 489, 500, 509 });

        public static @string String(this SymKind i)
        {
            if (i >= SymKind(len(_SymKind_index) - 1L))
            {
                return "SymKind(" + strconv.FormatInt(int64(i), 10L) + ")";
            }

            return _SymKind_name[_SymKind_index[i].._SymKind_index[i + 1L]];

        }
    }
}}}}
