//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 06:34:36 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using bytes = go.bytes_package;
using bio = go.cmd.@internal.bio_package;
using goobj = go.cmd.@internal.goobj_package;
using obj = go.cmd.@internal.obj_package;
using objabi = go.cmd.@internal.objabi_package;
using sys = go.cmd.@internal.sys_package;
using loadelf = go.cmd.link.@internal.loadelf_package;
using loader = go.cmd.link.@internal.loader_package;
using loadmacho = go.cmd.link.@internal.loadmacho_package;
using loadpe = go.cmd.link.@internal.loadpe_package;
using loadxcoff = go.cmd.link.@internal.loadxcoff_package;
using sym = go.cmd.link.@internal.sym_package;
using sha1 = go.crypto.sha1_package;
using elf = go.debug.elf_package;
using macho = go.debug.macho_package;
using base64 = go.encoding.base64_package;
using binary = go.encoding.binary_package;
using fmt = go.fmt_package;
using buildcfg = go.@internal.buildcfg_package;
using exec = go.@internal.execabs_package;
using io = go.io_package;
using ioutil = go.io.ioutil_package;
using log = go.log_package;
using os = go.os_package;
using filepath = go.path.filepath_package;
using runtime = go.runtime_package;
using strings = go.strings_package;
using sync = go.sync_package;
using go;

#nullable enable

namespace go {
namespace cmd {
namespace link {
namespace @internal
{
    public static partial class ld_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        public partial struct Arch
        {
            // Constructors
            public Arch(NilType _)
            {
                this.Funcalign = default;
                this.Maxalign = default;
                this.Minalign = default;
                this.Dwarfregsp = default;
                this.Dwarfreglr = default;
                this.TrampLimit = default;
                this.Androiddynld = default;
                this.Linuxdynld = default;
                this.Freebsddynld = default;
                this.Netbsddynld = default;
                this.Openbsddynld = default;
                this.Dragonflydynld = default;
                this.Solarisdynld = default;
                this.CodePad = default;
                this.Plan9Magic = default;
                this.Plan9_64Bit = default;
                this.Adddynrel = default;
                this.Archinit = default;
                this.Archreloc = default;
                this.Archrelocvariant = default;
                this.Trampoline = default;
                this.Asmb = default;
                this.Asmb2 = default;
                this.Extreloc = default;
                this.Elfreloc1 = default;
                this.ElfrelocSize = default;
                this.Elfsetupplt = default;
                this.Gentext = default;
                this.Machoreloc1 = default;
                this.MachorelocSize = default;
                this.PEreloc1 = default;
                this.Xcoffreloc1 = default;
                this.GenSymsLate = default;
                this.TLSIEtoLE = default;
                this.AssignAddress = default;
            }

            public Arch(nint Funcalign = default, nint Maxalign = default, nint Minalign = default, nint Dwarfregsp = default, nint Dwarfreglr = default, ulong TrampLimit = default, @string Androiddynld = default, @string Linuxdynld = default, @string Freebsddynld = default, @string Netbsddynld = default, @string Openbsddynld = default, @string Dragonflydynld = default, @string Solarisdynld = default, slice<byte> CodePad = default, uint Plan9Magic = default, bool Plan9_64Bit = default, Func<ptr<Target>, ptr<loader.Loader>, ptr<ArchSyms>, loader.Sym, loader.Reloc, nint, bool> Adddynrel = default, Action<ptr<Link>> Archinit = default, Func<ptr<Target>, ptr<loader.Loader>, ptr<ArchSyms>, loader.Reloc, loader.Sym, long, (long, nint, bool)> Archreloc = default, Func<ptr<Target>, ptr<loader.Loader>, loader.Reloc, sym.RelocVariant, loader.Sym, long, slice<byte>, long> Archrelocvariant = default, Action<ptr<Link>, ptr<loader.Loader>, nint, loader.Sym, loader.Sym> Trampoline = default, Action<ptr<Link>, ptr<loader.Loader>> Asmb = default, Action<ptr<Link>, ptr<loader.Loader>> Asmb2 = default, Func<ptr<Target>, ptr<loader.Loader>, loader.Reloc, loader.Sym, (loader.ExtReloc, bool)> Extreloc = default, Func<ptr<Link>, ptr<OutBuf>, ptr<loader.Loader>, loader.Sym, loader.ExtReloc, nint, long, bool> Elfreloc1 = default, uint ElfrelocSize = default, Action<ptr<Link>, ptr<loader.SymbolBuilder>, ptr<loader.SymbolBuilder>, loader.Sym> Elfsetupplt = default, Action<ptr<Link>, ptr<loader.Loader>> Gentext = default, Func<ptr<sys.Arch>, ptr<OutBuf>, ptr<loader.Loader>, loader.Sym, loader.ExtReloc, long, bool> Machoreloc1 = default, uint MachorelocSize = default, Func<ptr<sys.Arch>, ptr<OutBuf>, ptr<loader.Loader>, loader.Sym, loader.ExtReloc, long, bool> PEreloc1 = default, Func<ptr<sys.Arch>, ptr<OutBuf>, ptr<loader.Loader>, loader.Sym, loader.ExtReloc, long, bool> Xcoffreloc1 = default, Action<ptr<Link>, ptr<loader.Loader>> GenSymsLate = default, Action<slice<byte>, nint, nint> TLSIEtoLE = default, Func<ptr<loader.Loader>, ptr<sym.Section>, nint, loader.Sym, ulong, bool, (ptr<sym.Section>, nint, ulong)> AssignAddress = default)
            {
                this.Funcalign = Funcalign;
                this.Maxalign = Maxalign;
                this.Minalign = Minalign;
                this.Dwarfregsp = Dwarfregsp;
                this.Dwarfreglr = Dwarfreglr;
                this.TrampLimit = TrampLimit;
                this.Androiddynld = Androiddynld;
                this.Linuxdynld = Linuxdynld;
                this.Freebsddynld = Freebsddynld;
                this.Netbsddynld = Netbsddynld;
                this.Openbsddynld = Openbsddynld;
                this.Dragonflydynld = Dragonflydynld;
                this.Solarisdynld = Solarisdynld;
                this.CodePad = CodePad;
                this.Plan9Magic = Plan9Magic;
                this.Plan9_64Bit = Plan9_64Bit;
                this.Adddynrel = Adddynrel;
                this.Archinit = Archinit;
                this.Archreloc = Archreloc;
                this.Archrelocvariant = Archrelocvariant;
                this.Trampoline = Trampoline;
                this.Asmb = Asmb;
                this.Asmb2 = Asmb2;
                this.Extreloc = Extreloc;
                this.Elfreloc1 = Elfreloc1;
                this.ElfrelocSize = ElfrelocSize;
                this.Elfsetupplt = Elfsetupplt;
                this.Gentext = Gentext;
                this.Machoreloc1 = Machoreloc1;
                this.MachorelocSize = MachorelocSize;
                this.PEreloc1 = PEreloc1;
                this.Xcoffreloc1 = Xcoffreloc1;
                this.GenSymsLate = GenSymsLate;
                this.TLSIEtoLE = TLSIEtoLE;
                this.AssignAddress = AssignAddress;
            }

            // Enable comparisons between nil and Arch struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Arch value, NilType nil) => value.Equals(default(Arch));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Arch value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Arch value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Arch value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Arch(NilType nil) => default(Arch);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        public static Arch Arch_cast(dynamic value)
        {
            return new Arch(value.Funcalign, value.Maxalign, value.Minalign, value.Dwarfregsp, value.Dwarfreglr, value.TrampLimit, value.Androiddynld, value.Linuxdynld, value.Freebsddynld, value.Netbsddynld, value.Openbsddynld, value.Dragonflydynld, value.Solarisdynld, value.CodePad, value.Plan9Magic, value.Plan9_64Bit, value.Adddynrel, value.Archinit, value.Archreloc, value.Archrelocvariant, value.Trampoline, value.Asmb, value.Asmb2, value.Extreloc, value.Elfreloc1, value.ElfrelocSize, value.Elfsetupplt, value.Gentext, value.Machoreloc1, value.MachorelocSize, value.PEreloc1, value.Xcoffreloc1, value.GenSymsLate, value.TLSIEtoLE, value.AssignAddress);
        }
    }
}}}}