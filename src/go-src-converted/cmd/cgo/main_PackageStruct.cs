//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 04:09:12 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using md5 = go.crypto.md5_package;
using flag = go.flag_package;
using fmt = go.fmt_package;
using ast = go.go.ast_package;
using printer = go.go.printer_package;
using token = go.go.token_package;
using io = go.io_package;
using ioutil = go.io.ioutil_package;
using os = go.os_package;
using filepath = go.path.filepath_package;
using reflect = go.reflect_package;
using runtime = go.runtime_package;
using sort = go.sort_package;
using strings = go.strings_package;
using edit = go.cmd.@internal.edit_package;
using objabi = go.cmd.@internal.objabi_package;

namespace go
{
    public static partial class main_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Package
        {
            // Constructors
            public Package(NilType _)
            {
                this.PackageName = default;
                this.PackagePath = default;
                this.PtrSize = default;
                this.IntSize = default;
                this.GccOptions = default;
                this.GccIsClang = default;
                this.CgoFlags = default;
                this.Written = default;
                this.Name = default;
                this.ExpFunc = default;
                this.Decl = default;
                this.GoFiles = default;
                this.GccFiles = default;
                this.Preamble = default;
                this.typedefs = default;
                this.typedefList = default;
            }

            public Package(@string PackageName = default, @string PackagePath = default, long PtrSize = default, long IntSize = default, slice<@string> GccOptions = default, bool GccIsClang = default, map<@string, slice<@string>> CgoFlags = default, map<@string, bool> Written = default, map<@string, ptr<Name>> Name = default, slice<ptr<ExpFunc>> ExpFunc = default, slice<ast.Decl> Decl = default, slice<@string> GoFiles = default, slice<@string> GccFiles = default, @string Preamble = default, map<@string, bool> typedefs = default, slice<typedefInfo> typedefList = default)
            {
                this.PackageName = PackageName;
                this.PackagePath = PackagePath;
                this.PtrSize = PtrSize;
                this.IntSize = IntSize;
                this.GccOptions = GccOptions;
                this.GccIsClang = GccIsClang;
                this.CgoFlags = CgoFlags;
                this.Written = Written;
                this.Name = Name;
                this.ExpFunc = ExpFunc;
                this.Decl = Decl;
                this.GoFiles = GoFiles;
                this.GccFiles = GccFiles;
                this.Preamble = Preamble;
                this.typedefs = typedefs;
                this.typedefList = typedefList;
            }

            // Enable comparisons between nil and Package struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Package value, NilType nil) => value.Equals(default(Package));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Package value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Package value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Package value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Package(NilType nil) => default(Package);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Package Package_cast(dynamic value)
        {
            return new Package(value.PackageName, value.PackagePath, value.PtrSize, value.IntSize, value.GccOptions, value.GccIsClang, value.CgoFlags, value.Written, value.Name, value.ExpFunc, value.Decl, value.GoFiles, value.GccFiles, value.Preamble, value.typedefs, value.typedefList);
        }
    }
}