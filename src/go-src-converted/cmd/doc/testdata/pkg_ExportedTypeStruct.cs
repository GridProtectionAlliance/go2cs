//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:15:42 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using io = go.io_package;
using go;

#nullable enable

namespace go {
namespace cmd
{
    public static partial class pkg_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct ExportedType
        {
            // Reader.Read function promotion
            private delegate (nint, error) ReadByVal(T value, slice<byte> p);
            private delegate (nint, error) ReadByRef(ref T value, slice<byte> p);

            private static readonly ReadByVal s_ReadByVal;
            private static readonly ReadByRef s_ReadByRef;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (nint, error) Read(slice<byte> p) => s_ReadByRef?.Invoke(ref this, p) ?? s_ReadByVal?.Invoke(this, p) ?? Reader?.Read(p) ?? throw new PanicException(RuntimeErrorPanic.NilPointerDereference);

            // error.Error function promotion
            private delegate @string ErrorByVal(T value);
            private delegate @string ErrorByRef(ref T value);

            private static readonly ErrorByVal s_ErrorByVal;
            private static readonly ErrorByRef s_ErrorByRef;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public @string Error() => s_ErrorByRef?.Invoke(ref this) ?? s_ErrorByVal?.Invoke(this) ?? error?.Error() ?? throw new PanicException(RuntimeErrorPanic.NilPointerDereference);
            
            [DebuggerStepperBoundary]
            static ExportedType()
            {
                Type targetType = typeof(ExportedType);
                MethodInfo extensionMethod;
                
                extensionMethod = targetType.GetExtensionMethodSearchingPromotions("Read");

                if (extensionMethod is not null)
                {
                    s_ReadByRef = extensionMethod.CreateStaticDelegate(typeof(ReadByRef)) as ReadByRef;

                    if (s_ReadByRef is null)
                        s_ReadByVal = extensionMethod.CreateStaticDelegate(typeof(ReadByVal)) as ReadByVal;
                }
                
                extensionMethod = targetType.GetExtensionMethodSearchingPromotions("Error");

                if (extensionMethod is not null)
                {
                    s_ErrorByRef = extensionMethod.CreateStaticDelegate(typeof(ErrorByRef)) as ErrorByRef;

                    if (s_ErrorByRef is null)
                        s_ErrorByVal = extensionMethod.CreateStaticDelegate(typeof(ErrorByVal)) as ErrorByVal;
                }
            }

            // Constructors
            public ExportedType(NilType _)
            {
                this.ExportedField = default;
                this.unexportedField = default;
                this.ExportedEmbeddedType = default;
                this.ptr<ExportedEmbeddedType> = default;
                this.ExportedEmbeddedType> = default;
                this.unexportedType = default;
                this.ptr<unexportedType> = default;
                this.Reader = default;
                this.error = default;
            }

            public ExportedType(nint ExportedField = default, nint unexportedField = default, ExportedEmbeddedType ExportedEmbeddedType = default, ref ptr<ExportedEmbeddedType> ptr<ExportedEmbeddedType> = default, ref ptr<qualified.ExportedEmbeddedType> ExportedEmbeddedType> = default, unexportedType unexportedType = default, ref ptr<unexportedType> ptr<unexportedType> = default, io.Reader Reader = default, error error = default)
            {
                this.ExportedField = ExportedField;
                this.unexportedField = unexportedField;
                this.ExportedEmbeddedType = ExportedEmbeddedType;
                this.ptr<ExportedEmbeddedType> = ptr<ExportedEmbeddedType>;
                this.ExportedEmbeddedType> = ExportedEmbeddedType>;
                this.unexportedType = unexportedType;
                this.ptr<unexportedType> = ptr<unexportedType>;
                this.Reader = Reader;
                this.error = error;
            }

            // Enable comparisons between nil and ExportedType struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(ExportedType value, NilType nil) => value.Equals(default(ExportedType));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(ExportedType value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, ExportedType value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, ExportedType value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator ExportedType(NilType nil) => default(ExportedType);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static ExportedType ExportedType_cast(dynamic value)
        {
            return new ExportedType(value.ExportedField, value.unexportedField, value.ExportedEmbeddedType, ref value.ptr<ExportedEmbeddedType>, ref value.ExportedEmbeddedType>, value.unexportedType, ref value.ptr<unexportedType>, value.Reader, value.error);
        }
    }
}}