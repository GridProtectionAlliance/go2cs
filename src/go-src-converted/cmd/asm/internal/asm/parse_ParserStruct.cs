//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 04:08:18 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using fmt = go.fmt_package;
using io = go.io_package;
using log = go.log_package;
using os = go.os_package;
using strconv = go.strconv_package;
using scanner = go.text.scanner_package;
using utf8 = go.unicode.utf8_package;
using arch = go.cmd.asm.@internal.arch_package;
using flags = go.cmd.asm.@internal.flags_package;
using lex = go.cmd.asm.@internal.lex_package;
using obj = go.cmd.@internal.obj_package;
using x86 = go.cmd.@internal.obj.x86_package;
using src = go.cmd.@internal.src_package;
using sys = go.cmd.@internal.sys_package;
using go;

namespace go {
namespace cmd {
namespace asm {
namespace @internal
{
    public static partial class asm_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Parser
        {
            // Constructors
            public Parser(NilType _)
            {
                this.lex = default;
                this.lineNum = default;
                this.errorLine = default;
                this.errorCount = default;
                this.pc = default;
                this.input = default;
                this.inputPos = default;
                this.pendingLabels = default;
                this.labels = default;
                this.toPatch = default;
                this.addr = default;
                this.arch = default;
                this.ctxt = default;
                this.firstProg = default;
                this.lastProg = default;
                this.dataAddr = default;
                this.isJump = default;
                this.errorWriter = default;
            }

            public Parser(lex.TokenReader lex = default, long lineNum = default, long errorLine = default, long errorCount = default, long pc = default, slice<lex.Token> input = default, long inputPos = default, slice<@string> pendingLabels = default, map<@string, ptr<obj.Prog>> labels = default, slice<Patch> toPatch = default, slice<obj.Addr> addr = default, ref ptr<arch.Arch> arch = default, ref ptr<obj.Link> ctxt = default, ref ptr<obj.Prog> firstProg = default, ref ptr<obj.Prog> lastProg = default, map<@string, long> dataAddr = default, bool isJump = default, io.Writer errorWriter = default)
            {
                this.lex = lex;
                this.lineNum = lineNum;
                this.errorLine = errorLine;
                this.errorCount = errorCount;
                this.pc = pc;
                this.input = input;
                this.inputPos = inputPos;
                this.pendingLabels = pendingLabels;
                this.labels = labels;
                this.toPatch = toPatch;
                this.addr = addr;
                this.arch = arch;
                this.ctxt = ctxt;
                this.firstProg = firstProg;
                this.lastProg = lastProg;
                this.dataAddr = dataAddr;
                this.isJump = isJump;
                this.errorWriter = errorWriter;
            }

            // Enable comparisons between nil and Parser struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Parser value, NilType nil) => value.Equals(default(Parser));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Parser value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Parser value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Parser value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Parser(NilType nil) => default(Parser);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Parser Parser_cast(dynamic value)
        {
            return new Parser(value.lex, value.lineNum, value.errorLine, value.errorCount, value.pc, value.input, value.inputPos, value.pendingLabels, value.labels, value.toPatch, value.addr, ref value.arch, ref value.ctxt, ref value.firstProg, ref value.lastProg, value.dataAddr, value.isJump, value.errorWriter);
        }
    }
}}}}