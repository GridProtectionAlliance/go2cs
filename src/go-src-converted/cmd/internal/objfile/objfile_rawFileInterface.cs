//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:43:33 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using archive = go.cmd.@internal.archive_package;
using dwarf = go.debug.dwarf_package;
using gosym = go.debug.gosym_package;
using fmt = go.fmt_package;
using io = go.io_package;
using os = go.os_package;
using sort = go.sort_package;
using go;

#nullable enable
#pragma warning disable CS0660, CS0661

namespace go {
namespace cmd {
namespace @internal
{
    public static partial class objfile_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial interface rawFile
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static rawFile As<T>(in T target) => (rawFile<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static rawFile As<T>(ptr<T> target_ptr) => (rawFile<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static rawFile? As(object target) =>
                typeof(rawFile<>).CreateInterfaceHandler<rawFile>(target);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private class rawFile<T> : rawFile
        {
            private T m_target = default!;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && m_target_ptr is not null)
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public rawFile(in T target) => m_target = target;

            public rawFile(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate (ptr<dwarf.Data>, error) symbolsByPtr(ptr<T> value);
            private delegate (ptr<dwarf.Data>, error) symbolsByVal(T value);

            private static readonly symbolsByPtr? s_symbolsByPtr;
            private static readonly symbolsByVal? s_symbolsByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ptr<dwarf.Data>, error) symbols()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_symbolsByPtr is null || !m_target_is_ptr)
                    return s_symbolsByVal!(target);

                return s_symbolsByPtr(m_target_ptr!);
            }

            private delegate (ptr<dwarf.Data>, error) pclnByPtr(ptr<T> value);
            private delegate (ptr<dwarf.Data>, error) pclnByVal(T value);

            private static readonly pclnByPtr? s_pclnByPtr;
            private static readonly pclnByVal? s_pclnByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ptr<dwarf.Data>, error) pcln()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_pclnByPtr is null || !m_target_is_ptr)
                    return s_pclnByVal!(target);

                return s_pclnByPtr(m_target_ptr!);
            }

            private delegate (ptr<dwarf.Data>, error) textByPtr(ptr<T> value);
            private delegate (ptr<dwarf.Data>, error) textByVal(T value);

            private static readonly textByPtr? s_textByPtr;
            private static readonly textByVal? s_textByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ptr<dwarf.Data>, error) text()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_textByPtr is null || !m_target_is_ptr)
                    return s_textByVal!(target);

                return s_textByPtr(m_target_ptr!);
            }

            private delegate (ptr<dwarf.Data>, error) goarchByPtr(ptr<T> value);
            private delegate (ptr<dwarf.Data>, error) goarchByVal(T value);

            private static readonly goarchByPtr? s_goarchByPtr;
            private static readonly goarchByVal? s_goarchByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ptr<dwarf.Data>, error) goarch()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_goarchByPtr is null || !m_target_is_ptr)
                    return s_goarchByVal!(target);

                return s_goarchByPtr(m_target_ptr!);
            }

            private delegate (ptr<dwarf.Data>, error) loadAddressByPtr(ptr<T> value);
            private delegate (ptr<dwarf.Data>, error) loadAddressByVal(T value);

            private static readonly loadAddressByPtr? s_loadAddressByPtr;
            private static readonly loadAddressByVal? s_loadAddressByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ptr<dwarf.Data>, error) loadAddress()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_loadAddressByPtr is null || !m_target_is_ptr)
                    return s_loadAddressByVal!(target);

                return s_loadAddressByPtr(m_target_ptr!);
            }

            private delegate (ptr<dwarf.Data>, error) dwarfByPtr(ptr<T> value);
            private delegate (ptr<dwarf.Data>, error) dwarfByVal(T value);

            private static readonly dwarfByPtr? s_dwarfByPtr;
            private static readonly dwarfByVal? s_dwarfByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ptr<dwarf.Data>, error) dwarf()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_dwarfByPtr is null || !m_target_is_ptr)
                    return s_dwarfByVal!(target);

                return s_dwarfByPtr(m_target_ptr!);
            }
            
            public string ToString(string? format, IFormatProvider? formatProvider) => format ?? GetGoTypeName(typeof(T));

            [DebuggerStepperBoundary]
            static rawFile()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("symbols");

                if (extensionMethod is not null)
                    s_symbolsByPtr = extensionMethod.CreateStaticDelegate(typeof(symbolsByPtr)) as symbolsByPtr;

                extensionMethod = targetType.GetExtensionMethod("symbols");

                if (extensionMethod is not null)
                    s_symbolsByVal = extensionMethod.CreateStaticDelegate(typeof(symbolsByVal)) as symbolsByVal;

                if (s_symbolsByPtr is null && s_symbolsByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement rawFile.symbols method", new Exception("symbols"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("pcln");

                if (extensionMethod is not null)
                    s_pclnByPtr = extensionMethod.CreateStaticDelegate(typeof(pclnByPtr)) as pclnByPtr;

                extensionMethod = targetType.GetExtensionMethod("pcln");

                if (extensionMethod is not null)
                    s_pclnByVal = extensionMethod.CreateStaticDelegate(typeof(pclnByVal)) as pclnByVal;

                if (s_pclnByPtr is null && s_pclnByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement rawFile.pcln method", new Exception("pcln"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("text");

                if (extensionMethod is not null)
                    s_textByPtr = extensionMethod.CreateStaticDelegate(typeof(textByPtr)) as textByPtr;

                extensionMethod = targetType.GetExtensionMethod("text");

                if (extensionMethod is not null)
                    s_textByVal = extensionMethod.CreateStaticDelegate(typeof(textByVal)) as textByVal;

                if (s_textByPtr is null && s_textByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement rawFile.text method", new Exception("text"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("goarch");

                if (extensionMethod is not null)
                    s_goarchByPtr = extensionMethod.CreateStaticDelegate(typeof(goarchByPtr)) as goarchByPtr;

                extensionMethod = targetType.GetExtensionMethod("goarch");

                if (extensionMethod is not null)
                    s_goarchByVal = extensionMethod.CreateStaticDelegate(typeof(goarchByVal)) as goarchByVal;

                if (s_goarchByPtr is null && s_goarchByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement rawFile.goarch method", new Exception("goarch"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("loadAddress");

                if (extensionMethod is not null)
                    s_loadAddressByPtr = extensionMethod.CreateStaticDelegate(typeof(loadAddressByPtr)) as loadAddressByPtr;

                extensionMethod = targetType.GetExtensionMethod("loadAddress");

                if (extensionMethod is not null)
                    s_loadAddressByVal = extensionMethod.CreateStaticDelegate(typeof(loadAddressByVal)) as loadAddressByVal;

                if (s_loadAddressByPtr is null && s_loadAddressByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement rawFile.loadAddress method", new Exception("loadAddress"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("dwarf");

                if (extensionMethod is not null)
                    s_dwarfByPtr = extensionMethod.CreateStaticDelegate(typeof(dwarfByPtr)) as dwarfByPtr;

                extensionMethod = targetType.GetExtensionMethod("dwarf");

                if (extensionMethod is not null)
                    s_dwarfByVal = extensionMethod.CreateStaticDelegate(typeof(dwarfByVal)) as dwarfByVal;

                if (s_dwarfByPtr is null && s_dwarfByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement rawFile.dwarf method", new Exception("dwarf"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator rawFile<T>(in ptr<T> target_ptr) => new rawFile<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator rawFile<T>(in T target) => new rawFile<T>(target);

            // Enable comparisons between nil and rawFile<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(rawFile<T> value, NilType nil) => Activator.CreateInstance<rawFile<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(rawFile<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, rawFile<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, rawFile<T> value) => value != nil;
        }
    }
}}}

namespace go
{
    public static class objfile_rawFileExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.2.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.cmd.@internal.objfile_package.rawFile target)
        {
            try
            {
                return ((go.cmd.@internal.objfile_package.rawFile<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.2.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.cmd.@internal.objfile_package.rawFile target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.2.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.cmd.@internal.objfile_package.rawFile target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.cmd.@internal.objfile_package.rawFile<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.2.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.cmd.@internal.objfile_package.rawFile target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}