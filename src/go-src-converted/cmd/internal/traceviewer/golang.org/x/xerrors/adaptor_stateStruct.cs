//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:16:45 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using bytes = go.bytes_package;
using fmt = go.fmt_package;
using io = go.io_package;
using reflect = go.reflect_package;
using strconv = go.strconv_package;
using go;

#nullable enable

namespace go {
namespace golang.org {
namespace x
{
    public static partial class xerrors_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct state
        {
            // State.Write function promotion
            private delegate bool WriteByVal(T value, slice<byte> b);
            private delegate bool WriteByRef(ref T value, slice<byte> b);

            private static readonly WriteByVal s_WriteByVal;
            private static readonly WriteByRef s_WriteByRef;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Write(slice<byte> b) => s_WriteByRef?.Invoke(ref this, b) ?? s_WriteByVal?.Invoke(this, b) ?? State?.Write(b) ?? throw new PanicException(RuntimeErrorPanic.NilPointerDereference);

            // State.Width function promotion
            private delegate bool WidthByVal(T value);
            private delegate bool WidthByRef(ref T value);

            private static readonly WidthByVal s_WidthByVal;
            private static readonly WidthByRef s_WidthByRef;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Width() => s_WidthByRef?.Invoke(ref this) ?? s_WidthByVal?.Invoke(this) ?? State?.Width() ?? throw new PanicException(RuntimeErrorPanic.NilPointerDereference);

            // State.Precision function promotion
            private delegate bool PrecisionByVal(T value);
            private delegate bool PrecisionByRef(ref T value);

            private static readonly PrecisionByVal s_PrecisionByVal;
            private static readonly PrecisionByRef s_PrecisionByRef;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Precision() => s_PrecisionByRef?.Invoke(ref this) ?? s_PrecisionByVal?.Invoke(this) ?? State?.Precision() ?? throw new PanicException(RuntimeErrorPanic.NilPointerDereference);

            // State.Flag function promotion
            private delegate bool FlagByVal(T value, nint c);
            private delegate bool FlagByRef(ref T value, nint c);

            private static readonly FlagByVal s_FlagByVal;
            private static readonly FlagByRef s_FlagByRef;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Flag(nint c) => s_FlagByRef?.Invoke(ref this, c) ?? s_FlagByVal?.Invoke(this, c) ?? State?.Flag(c) ?? throw new PanicException(RuntimeErrorPanic.NilPointerDereference);
            
            [DebuggerStepperBoundary]
            static state()
            {
                Type targetType = typeof(state);
                MethodInfo extensionMethod;
                
                extensionMethod = targetType.GetExtensionMethodSearchingPromotions("Write");

                if (extensionMethod is not null)
                {
                    s_WriteByRef = extensionMethod.CreateStaticDelegate(typeof(WriteByRef)) as WriteByRef;

                    if (s_WriteByRef is null)
                        s_WriteByVal = extensionMethod.CreateStaticDelegate(typeof(WriteByVal)) as WriteByVal;
                }
                
                extensionMethod = targetType.GetExtensionMethodSearchingPromotions("Width");

                if (extensionMethod is not null)
                {
                    s_WidthByRef = extensionMethod.CreateStaticDelegate(typeof(WidthByRef)) as WidthByRef;

                    if (s_WidthByRef is null)
                        s_WidthByVal = extensionMethod.CreateStaticDelegate(typeof(WidthByVal)) as WidthByVal;
                }
                
                extensionMethod = targetType.GetExtensionMethodSearchingPromotions("Precision");

                if (extensionMethod is not null)
                {
                    s_PrecisionByRef = extensionMethod.CreateStaticDelegate(typeof(PrecisionByRef)) as PrecisionByRef;

                    if (s_PrecisionByRef is null)
                        s_PrecisionByVal = extensionMethod.CreateStaticDelegate(typeof(PrecisionByVal)) as PrecisionByVal;
                }
                
                extensionMethod = targetType.GetExtensionMethodSearchingPromotions("Flag");

                if (extensionMethod is not null)
                {
                    s_FlagByRef = extensionMethod.CreateStaticDelegate(typeof(FlagByRef)) as FlagByRef;

                    if (s_FlagByRef is null)
                        s_FlagByVal = extensionMethod.CreateStaticDelegate(typeof(FlagByVal)) as FlagByVal;
                }
            }

            // Constructors
            public state(NilType _)
            {
                this.State = default;
                this.buf = default;
                this.printDetail = default;
                this.inDetail = default;
                this.needColon = default;
                this.needNewline = default;
            }

            public state(fmt.State State = default, bytes.Buffer buf = default, bool printDetail = default, bool inDetail = default, bool needColon = default, bool needNewline = default)
            {
                this.State = State;
                this.buf = buf;
                this.printDetail = printDetail;
                this.inDetail = inDetail;
                this.needColon = needColon;
                this.needNewline = needNewline;
            }

            // Enable comparisons between nil and state struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(state value, NilType nil) => value.Equals(default(state));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(state value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, state value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, state value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator state(NilType nil) => default(state);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static state state_cast(dynamic value)
        {
            return new state(value.State, value.buf, value.printDetail, value.inDetail, value.needColon, value.needNewline);
        }
    }
}}}