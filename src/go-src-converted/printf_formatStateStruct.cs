//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 06:04:11 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bytes = go.bytes_package;
using fmt = go.fmt_package;
using ast = go.go.ast_package;
using constant = go.go.constant_package;
using token = go.go.token_package;
using types = go.go.types_package;
using reflect = go.reflect_package;
using regexp = go.regexp_package;
using sort = go.sort_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using utf8 = go.unicode.utf8_package;
using analysis = go.golang.org.x.tools.go.analysis_package;
using inspect = go.golang.org.x.tools.go.analysis.passes.inspect_package;
using analysisutil = go.golang.org.x.tools.go.analysis.passes.@internal.analysisutil_package;
using inspector = go.golang.org.x.tools.go.ast.inspector_package;
using typeutil = go.golang.org.x.tools.go.types.typeutil_package;
using go;

#nullable enable

namespace go {
namespace golang.org {
namespace x {
namespace tools {
namespace go {
namespace analysis {
namespace passes
{
    public static partial class printf_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct formatState
        {
            // Constructors
            public formatState(NilType _)
            {
                this.verb = default;
                this.format = default;
                this.name = default;
                this.flags = default;
                this.argNums = default;
                this.firstArg = default;
                this.pass = default;
                this.call = default;
                this.argNum = default;
                this.hasIndex = default;
                this.indexPending = default;
                this.nbytes = default;
            }

            public formatState(int verb = default, @string format = default, @string name = default, slice<byte> flags = default, slice<long> argNums = default, long firstArg = default, ref ptr<analysis.Pass> pass = default, ref ptr<ast.CallExpr> call = default, long argNum = default, bool hasIndex = default, bool indexPending = default, long nbytes = default)
            {
                this.verb = verb;
                this.format = format;
                this.name = name;
                this.flags = flags;
                this.argNums = argNums;
                this.firstArg = firstArg;
                this.pass = pass;
                this.call = call;
                this.argNum = argNum;
                this.hasIndex = hasIndex;
                this.indexPending = indexPending;
                this.nbytes = nbytes;
            }

            // Enable comparisons between nil and formatState struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(formatState value, NilType nil) => value.Equals(default(formatState));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(formatState value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, formatState value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, formatState value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator formatState(NilType nil) => default(formatState);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static formatState formatState_cast(dynamic value)
        {
            return new formatState(value.verb, value.format, value.name, value.flags, value.argNums, value.firstArg, ref value.pass, ref value.call, value.argNum, value.hasIndex, value.indexPending, value.nbytes);
        }
    }
}}}}}}}