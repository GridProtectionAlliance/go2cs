//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 06:05:16 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;

using go;

#nullable enable

namespace go {
namespace container
{
    public static partial class ring_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Ring
        {
            // Constructors
            public Ring(NilType _)
            {
                this.next = default;
                this.prev = default;
            }

            public Ring(ref ptr<Ring> next = default, ref ptr<Ring> prev = default)
            {
                this.next = next;
                this.prev = prev;
            }

            // Enable comparisons between nil and Ring struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Ring value, NilType nil) => value.Equals(default(Ring));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Ring value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Ring value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Ring value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Ring(NilType nil) => default(Ring);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Ring Ring_cast(dynamic value)
        {
            return new Ring(ref value.next, ref value.prev);
        }
    }
}}