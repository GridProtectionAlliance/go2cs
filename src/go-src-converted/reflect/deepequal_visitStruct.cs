//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 04:45:17 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using @unsafe = go.@unsafe_package;

#nullable enable

namespace go
{
    public static partial class reflect_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct visit
        {
            // Constructors
            public visit(NilType _)
            {
                this.a1 = default;
                this.a2 = default;
                this.typ = default;
            }

            public visit(unsafe.Pointer a1 = default, unsafe.Pointer a2 = default, Type typ = default)
            {
                this.a1 = a1;
                this.a2 = a2;
                this.typ = typ;
            }

            // Enable comparisons between nil and visit struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(visit value, NilType nil) => value.Equals(default(visit));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(visit value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, visit value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, visit value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator visit(NilType nil) => default(visit);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static visit visit_cast(dynamic value)
        {
            return new visit(value.a1, value.a2, value.typ);
        }
    }
}