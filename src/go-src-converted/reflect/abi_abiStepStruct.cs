//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:23:51 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using abi = go.@internal.abi_package;
using goexperiment = go.@internal.goexperiment_package;
using @unsafe = go.@unsafe_package;

#nullable enable

namespace go
{
    public static partial class reflect_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial struct abiStep
        {
            // Constructors
            public abiStep(NilType _)
            {
                this.kind = default;
                this.offset = default;
                this.size = default;
                this.stkOff = default;
                this.ireg = default;
                this.freg = default;
            }

            public abiStep(abiStepKind kind = default, System.UIntPtr offset = default, System.UIntPtr size = default, System.UIntPtr stkOff = default, nint ireg = default, nint freg = default)
            {
                this.kind = kind;
                this.offset = offset;
                this.size = size;
                this.stkOff = stkOff;
                this.ireg = ireg;
                this.freg = freg;
            }

            // Enable comparisons between nil and abiStep struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(abiStep value, NilType nil) => value.Equals(default(abiStep));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(abiStep value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, abiStep value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, abiStep value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator abiStep(NilType nil) => default(abiStep);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private static abiStep abiStep_cast(dynamic value)
        {
            return new abiStep(value.kind, value.offset, value.size, value.stkOff, value.ireg, value.freg);
        }
    }
}