//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 22:30:47 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using unsafeheader = go.@internal.unsafeheader_package;
using strconv = go.strconv_package;
using sync = go.sync_package;
using unicode = go.unicode_package;
using utf8 = go.unicode.utf8_package;
using @unsafe = go.@unsafe_package;

#nullable enable
#pragma warning disable CS0660, CS0661

namespace go
{
    public static partial class reflect_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface Type
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Type As<T>(in T target) => (Type<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Type As<T>(ptr<T> target_ptr) => (Type<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Type? As(object target) =>
                typeof(Type<>).CreateInterfaceHandler<Type>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class Type<T> : Type
        {
            private T m_target = default!;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && m_target_ptr is not null)
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public Type(in T target) => m_target = target;

            public Type(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate ptr<uncommonType> AlignByPtr(ptr<T> value);
            private delegate ptr<uncommonType> AlignByVal(T value);

            private static readonly AlignByPtr? s_AlignByPtr;
            private static readonly AlignByVal? s_AlignByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> Align()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_AlignByPtr is null || !m_target_is_ptr)
                    return s_AlignByVal!(target);

                return s_AlignByPtr(m_target_ptr!);
            }

            private delegate ptr<uncommonType> FieldAlignByPtr(ptr<T> value);
            private delegate ptr<uncommonType> FieldAlignByVal(T value);

            private static readonly FieldAlignByPtr? s_FieldAlignByPtr;
            private static readonly FieldAlignByVal? s_FieldAlignByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> FieldAlign()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_FieldAlignByPtr is null || !m_target_is_ptr)
                    return s_FieldAlignByVal!(target);

                return s_FieldAlignByPtr(m_target_ptr!);
            }

            private delegate ptr<uncommonType> MethodByPtr(ptr<T> value, nint _p0);
            private delegate ptr<uncommonType> MethodByVal(T value, nint _p0);

            private static readonly MethodByPtr? s_MethodByPtr;
            private static readonly MethodByVal? s_MethodByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> Method(nint _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_MethodByPtr is null || !m_target_is_ptr)
                    return s_MethodByVal!(target, _p0);

                return s_MethodByPtr(m_target_ptr!, _p0);
            }

            private delegate ptr<uncommonType> MethodByNameByPtr(ptr<T> value, @string _p0);
            private delegate ptr<uncommonType> MethodByNameByVal(T value, @string _p0);

            private static readonly MethodByNameByPtr? s_MethodByNameByPtr;
            private static readonly MethodByNameByVal? s_MethodByNameByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> MethodByName(@string _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_MethodByNameByPtr is null || !m_target_is_ptr)
                    return s_MethodByNameByVal!(target, _p0);

                return s_MethodByNameByPtr(m_target_ptr!, _p0);
            }

            private delegate ptr<uncommonType> NumMethodByPtr(ptr<T> value);
            private delegate ptr<uncommonType> NumMethodByVal(T value);

            private static readonly NumMethodByPtr? s_NumMethodByPtr;
            private static readonly NumMethodByVal? s_NumMethodByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> NumMethod()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_NumMethodByPtr is null || !m_target_is_ptr)
                    return s_NumMethodByVal!(target);

                return s_NumMethodByPtr(m_target_ptr!);
            }

            private delegate ptr<uncommonType> NameByPtr(ptr<T> value);
            private delegate ptr<uncommonType> NameByVal(T value);

            private static readonly NameByPtr? s_NameByPtr;
            private static readonly NameByVal? s_NameByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> Name()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_NameByPtr is null || !m_target_is_ptr)
                    return s_NameByVal!(target);

                return s_NameByPtr(m_target_ptr!);
            }

            private delegate ptr<uncommonType> PkgPathByPtr(ptr<T> value);
            private delegate ptr<uncommonType> PkgPathByVal(T value);

            private static readonly PkgPathByPtr? s_PkgPathByPtr;
            private static readonly PkgPathByVal? s_PkgPathByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> PkgPath()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_PkgPathByPtr is null || !m_target_is_ptr)
                    return s_PkgPathByVal!(target);

                return s_PkgPathByPtr(m_target_ptr!);
            }

            private delegate ptr<uncommonType> SizeByPtr(ptr<T> value);
            private delegate ptr<uncommonType> SizeByVal(T value);

            private static readonly SizeByPtr? s_SizeByPtr;
            private static readonly SizeByVal? s_SizeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> Size()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_SizeByPtr is null || !m_target_is_ptr)
                    return s_SizeByVal!(target);

                return s_SizeByPtr(m_target_ptr!);
            }

            private delegate ptr<uncommonType> StringByPtr(ptr<T> value);
            private delegate ptr<uncommonType> StringByVal(T value);

            private static readonly StringByPtr? s_StringByPtr;
            private static readonly StringByVal? s_StringByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> String()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_StringByPtr is null || !m_target_is_ptr)
                    return s_StringByVal!(target);

                return s_StringByPtr(m_target_ptr!);
            }

            private delegate ptr<uncommonType> KindByPtr(ptr<T> value);
            private delegate ptr<uncommonType> KindByVal(T value);

            private static readonly KindByPtr? s_KindByPtr;
            private static readonly KindByVal? s_KindByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> Kind()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_KindByPtr is null || !m_target_is_ptr)
                    return s_KindByVal!(target);

                return s_KindByPtr(m_target_ptr!);
            }

            private delegate ptr<uncommonType> ImplementsByPtr(ptr<T> value, Type u);
            private delegate ptr<uncommonType> ImplementsByVal(T value, Type u);

            private static readonly ImplementsByPtr? s_ImplementsByPtr;
            private static readonly ImplementsByVal? s_ImplementsByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> Implements(Type u)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_ImplementsByPtr is null || !m_target_is_ptr)
                    return s_ImplementsByVal!(target, u);

                return s_ImplementsByPtr(m_target_ptr!, u);
            }

            private delegate ptr<uncommonType> AssignableToByPtr(ptr<T> value, Type u);
            private delegate ptr<uncommonType> AssignableToByVal(T value, Type u);

            private static readonly AssignableToByPtr? s_AssignableToByPtr;
            private static readonly AssignableToByVal? s_AssignableToByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> AssignableTo(Type u)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_AssignableToByPtr is null || !m_target_is_ptr)
                    return s_AssignableToByVal!(target, u);

                return s_AssignableToByPtr(m_target_ptr!, u);
            }

            private delegate ptr<uncommonType> ConvertibleToByPtr(ptr<T> value, Type u);
            private delegate ptr<uncommonType> ConvertibleToByVal(T value, Type u);

            private static readonly ConvertibleToByPtr? s_ConvertibleToByPtr;
            private static readonly ConvertibleToByVal? s_ConvertibleToByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> ConvertibleTo(Type u)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_ConvertibleToByPtr is null || !m_target_is_ptr)
                    return s_ConvertibleToByVal!(target, u);

                return s_ConvertibleToByPtr(m_target_ptr!, u);
            }

            private delegate ptr<uncommonType> ComparableByPtr(ptr<T> value);
            private delegate ptr<uncommonType> ComparableByVal(T value);

            private static readonly ComparableByPtr? s_ComparableByPtr;
            private static readonly ComparableByVal? s_ComparableByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> Comparable()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_ComparableByPtr is null || !m_target_is_ptr)
                    return s_ComparableByVal!(target);

                return s_ComparableByPtr(m_target_ptr!);
            }

            private delegate ptr<uncommonType> BitsByPtr(ptr<T> value);
            private delegate ptr<uncommonType> BitsByVal(T value);

            private static readonly BitsByPtr? s_BitsByPtr;
            private static readonly BitsByVal? s_BitsByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> Bits()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_BitsByPtr is null || !m_target_is_ptr)
                    return s_BitsByVal!(target);

                return s_BitsByPtr(m_target_ptr!);
            }

            private delegate ptr<uncommonType> ChanDirByPtr(ptr<T> value);
            private delegate ptr<uncommonType> ChanDirByVal(T value);

            private static readonly ChanDirByPtr? s_ChanDirByPtr;
            private static readonly ChanDirByVal? s_ChanDirByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> ChanDir()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_ChanDirByPtr is null || !m_target_is_ptr)
                    return s_ChanDirByVal!(target);

                return s_ChanDirByPtr(m_target_ptr!);
            }

            private delegate ptr<uncommonType> IsVariadicByPtr(ptr<T> value);
            private delegate ptr<uncommonType> IsVariadicByVal(T value);

            private static readonly IsVariadicByPtr? s_IsVariadicByPtr;
            private static readonly IsVariadicByVal? s_IsVariadicByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> IsVariadic()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_IsVariadicByPtr is null || !m_target_is_ptr)
                    return s_IsVariadicByVal!(target);

                return s_IsVariadicByPtr(m_target_ptr!);
            }

            private delegate ptr<uncommonType> ElemByPtr(ptr<T> value);
            private delegate ptr<uncommonType> ElemByVal(T value);

            private static readonly ElemByPtr? s_ElemByPtr;
            private static readonly ElemByVal? s_ElemByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> Elem()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_ElemByPtr is null || !m_target_is_ptr)
                    return s_ElemByVal!(target);

                return s_ElemByPtr(m_target_ptr!);
            }

            private delegate ptr<uncommonType> FieldByPtr(ptr<T> value, nint i);
            private delegate ptr<uncommonType> FieldByVal(T value, nint i);

            private static readonly FieldByPtr? s_FieldByPtr;
            private static readonly FieldByVal? s_FieldByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> Field(nint i)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_FieldByPtr is null || !m_target_is_ptr)
                    return s_FieldByVal!(target, i);

                return s_FieldByPtr(m_target_ptr!, i);
            }

            private delegate ptr<uncommonType> FieldByIndexByPtr(ptr<T> value, slice<nint> index);
            private delegate ptr<uncommonType> FieldByIndexByVal(T value, slice<nint> index);

            private static readonly FieldByIndexByPtr? s_FieldByIndexByPtr;
            private static readonly FieldByIndexByVal? s_FieldByIndexByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> FieldByIndex(slice<nint> index)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_FieldByIndexByPtr is null || !m_target_is_ptr)
                    return s_FieldByIndexByVal!(target, index);

                return s_FieldByIndexByPtr(m_target_ptr!, index);
            }

            private delegate ptr<uncommonType> FieldByNameByPtr(ptr<T> value, @string name);
            private delegate ptr<uncommonType> FieldByNameByVal(T value, @string name);

            private static readonly FieldByNameByPtr? s_FieldByNameByPtr;
            private static readonly FieldByNameByVal? s_FieldByNameByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> FieldByName(@string name)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_FieldByNameByPtr is null || !m_target_is_ptr)
                    return s_FieldByNameByVal!(target, name);

                return s_FieldByNameByPtr(m_target_ptr!, name);
            }

            private delegate ptr<uncommonType> FieldByNameFuncByPtr(ptr<T> value, Func<@string, bool> match);
            private delegate ptr<uncommonType> FieldByNameFuncByVal(T value, Func<@string, bool> match);

            private static readonly FieldByNameFuncByPtr? s_FieldByNameFuncByPtr;
            private static readonly FieldByNameFuncByVal? s_FieldByNameFuncByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> FieldByNameFunc(Func<@string, bool> match)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_FieldByNameFuncByPtr is null || !m_target_is_ptr)
                    return s_FieldByNameFuncByVal!(target, match);

                return s_FieldByNameFuncByPtr(m_target_ptr!, match);
            }

            private delegate ptr<uncommonType> InByPtr(ptr<T> value, nint i);
            private delegate ptr<uncommonType> InByVal(T value, nint i);

            private static readonly InByPtr? s_InByPtr;
            private static readonly InByVal? s_InByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> In(nint i)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_InByPtr is null || !m_target_is_ptr)
                    return s_InByVal!(target, i);

                return s_InByPtr(m_target_ptr!, i);
            }

            private delegate ptr<uncommonType> KeyByPtr(ptr<T> value);
            private delegate ptr<uncommonType> KeyByVal(T value);

            private static readonly KeyByPtr? s_KeyByPtr;
            private static readonly KeyByVal? s_KeyByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> Key()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_KeyByPtr is null || !m_target_is_ptr)
                    return s_KeyByVal!(target);

                return s_KeyByPtr(m_target_ptr!);
            }

            private delegate ptr<uncommonType> LenByPtr(ptr<T> value);
            private delegate ptr<uncommonType> LenByVal(T value);

            private static readonly LenByPtr? s_LenByPtr;
            private static readonly LenByVal? s_LenByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> Len()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_LenByPtr is null || !m_target_is_ptr)
                    return s_LenByVal!(target);

                return s_LenByPtr(m_target_ptr!);
            }

            private delegate ptr<uncommonType> NumFieldByPtr(ptr<T> value);
            private delegate ptr<uncommonType> NumFieldByVal(T value);

            private static readonly NumFieldByPtr? s_NumFieldByPtr;
            private static readonly NumFieldByVal? s_NumFieldByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> NumField()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_NumFieldByPtr is null || !m_target_is_ptr)
                    return s_NumFieldByVal!(target);

                return s_NumFieldByPtr(m_target_ptr!);
            }

            private delegate ptr<uncommonType> NumInByPtr(ptr<T> value);
            private delegate ptr<uncommonType> NumInByVal(T value);

            private static readonly NumInByPtr? s_NumInByPtr;
            private static readonly NumInByVal? s_NumInByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> NumIn()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_NumInByPtr is null || !m_target_is_ptr)
                    return s_NumInByVal!(target);

                return s_NumInByPtr(m_target_ptr!);
            }

            private delegate ptr<uncommonType> NumOutByPtr(ptr<T> value);
            private delegate ptr<uncommonType> NumOutByVal(T value);

            private static readonly NumOutByPtr? s_NumOutByPtr;
            private static readonly NumOutByVal? s_NumOutByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> NumOut()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_NumOutByPtr is null || !m_target_is_ptr)
                    return s_NumOutByVal!(target);

                return s_NumOutByPtr(m_target_ptr!);
            }

            private delegate ptr<uncommonType> OutByPtr(ptr<T> value, nint i);
            private delegate ptr<uncommonType> OutByVal(T value, nint i);

            private static readonly OutByPtr? s_OutByPtr;
            private static readonly OutByVal? s_OutByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> Out(nint i)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_OutByPtr is null || !m_target_is_ptr)
                    return s_OutByVal!(target, i);

                return s_OutByPtr(m_target_ptr!, i);
            }

            private delegate ptr<uncommonType> commonByPtr(ptr<T> value);
            private delegate ptr<uncommonType> commonByVal(T value);

            private static readonly commonByPtr? s_commonByPtr;
            private static readonly commonByVal? s_commonByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> common()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_commonByPtr is null || !m_target_is_ptr)
                    return s_commonByVal!(target);

                return s_commonByPtr(m_target_ptr!);
            }

            private delegate ptr<uncommonType> uncommonByPtr(ptr<T> value);
            private delegate ptr<uncommonType> uncommonByVal(T value);

            private static readonly uncommonByPtr? s_uncommonByPtr;
            private static readonly uncommonByVal? s_uncommonByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ptr<uncommonType> uncommon()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_uncommonByPtr is null || !m_target_is_ptr)
                    return s_uncommonByVal!(target);

                return s_uncommonByPtr(m_target_ptr!);
            }
            
            public string ToString(string? format, IFormatProvider? formatProvider) => format ?? GetGoTypeName(typeof(T));

            [DebuggerStepperBoundary]
            static Type()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Align");

                if (extensionMethod is not null)
                    s_AlignByPtr = extensionMethod.CreateStaticDelegate(typeof(AlignByPtr)) as AlignByPtr;

                extensionMethod = targetType.GetExtensionMethod("Align");

                if (extensionMethod is not null)
                    s_AlignByVal = extensionMethod.CreateStaticDelegate(typeof(AlignByVal)) as AlignByVal;

                if (s_AlignByPtr is null && s_AlignByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Align method", new Exception("Align"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("FieldAlign");

                if (extensionMethod is not null)
                    s_FieldAlignByPtr = extensionMethod.CreateStaticDelegate(typeof(FieldAlignByPtr)) as FieldAlignByPtr;

                extensionMethod = targetType.GetExtensionMethod("FieldAlign");

                if (extensionMethod is not null)
                    s_FieldAlignByVal = extensionMethod.CreateStaticDelegate(typeof(FieldAlignByVal)) as FieldAlignByVal;

                if (s_FieldAlignByPtr is null && s_FieldAlignByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.FieldAlign method", new Exception("FieldAlign"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Method");

                if (extensionMethod is not null)
                    s_MethodByPtr = extensionMethod.CreateStaticDelegate(typeof(MethodByPtr)) as MethodByPtr;

                extensionMethod = targetType.GetExtensionMethod("Method");

                if (extensionMethod is not null)
                    s_MethodByVal = extensionMethod.CreateStaticDelegate(typeof(MethodByVal)) as MethodByVal;

                if (s_MethodByPtr is null && s_MethodByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Method method", new Exception("Method"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("MethodByName");

                if (extensionMethod is not null)
                    s_MethodByNameByPtr = extensionMethod.CreateStaticDelegate(typeof(MethodByNameByPtr)) as MethodByNameByPtr;

                extensionMethod = targetType.GetExtensionMethod("MethodByName");

                if (extensionMethod is not null)
                    s_MethodByNameByVal = extensionMethod.CreateStaticDelegate(typeof(MethodByNameByVal)) as MethodByNameByVal;

                if (s_MethodByNameByPtr is null && s_MethodByNameByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.MethodByName method", new Exception("MethodByName"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("NumMethod");

                if (extensionMethod is not null)
                    s_NumMethodByPtr = extensionMethod.CreateStaticDelegate(typeof(NumMethodByPtr)) as NumMethodByPtr;

                extensionMethod = targetType.GetExtensionMethod("NumMethod");

                if (extensionMethod is not null)
                    s_NumMethodByVal = extensionMethod.CreateStaticDelegate(typeof(NumMethodByVal)) as NumMethodByVal;

                if (s_NumMethodByPtr is null && s_NumMethodByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.NumMethod method", new Exception("NumMethod"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Name");

                if (extensionMethod is not null)
                    s_NameByPtr = extensionMethod.CreateStaticDelegate(typeof(NameByPtr)) as NameByPtr;

                extensionMethod = targetType.GetExtensionMethod("Name");

                if (extensionMethod is not null)
                    s_NameByVal = extensionMethod.CreateStaticDelegate(typeof(NameByVal)) as NameByVal;

                if (s_NameByPtr is null && s_NameByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Name method", new Exception("Name"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("PkgPath");

                if (extensionMethod is not null)
                    s_PkgPathByPtr = extensionMethod.CreateStaticDelegate(typeof(PkgPathByPtr)) as PkgPathByPtr;

                extensionMethod = targetType.GetExtensionMethod("PkgPath");

                if (extensionMethod is not null)
                    s_PkgPathByVal = extensionMethod.CreateStaticDelegate(typeof(PkgPathByVal)) as PkgPathByVal;

                if (s_PkgPathByPtr is null && s_PkgPathByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.PkgPath method", new Exception("PkgPath"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Size");

                if (extensionMethod is not null)
                    s_SizeByPtr = extensionMethod.CreateStaticDelegate(typeof(SizeByPtr)) as SizeByPtr;

                extensionMethod = targetType.GetExtensionMethod("Size");

                if (extensionMethod is not null)
                    s_SizeByVal = extensionMethod.CreateStaticDelegate(typeof(SizeByVal)) as SizeByVal;

                if (s_SizeByPtr is null && s_SizeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Size method", new Exception("Size"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("String");

                if (extensionMethod is not null)
                    s_StringByPtr = extensionMethod.CreateStaticDelegate(typeof(StringByPtr)) as StringByPtr;

                extensionMethod = targetType.GetExtensionMethod("String");

                if (extensionMethod is not null)
                    s_StringByVal = extensionMethod.CreateStaticDelegate(typeof(StringByVal)) as StringByVal;

                if (s_StringByPtr is null && s_StringByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.String method", new Exception("String"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Kind");

                if (extensionMethod is not null)
                    s_KindByPtr = extensionMethod.CreateStaticDelegate(typeof(KindByPtr)) as KindByPtr;

                extensionMethod = targetType.GetExtensionMethod("Kind");

                if (extensionMethod is not null)
                    s_KindByVal = extensionMethod.CreateStaticDelegate(typeof(KindByVal)) as KindByVal;

                if (s_KindByPtr is null && s_KindByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Kind method", new Exception("Kind"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Implements");

                if (extensionMethod is not null)
                    s_ImplementsByPtr = extensionMethod.CreateStaticDelegate(typeof(ImplementsByPtr)) as ImplementsByPtr;

                extensionMethod = targetType.GetExtensionMethod("Implements");

                if (extensionMethod is not null)
                    s_ImplementsByVal = extensionMethod.CreateStaticDelegate(typeof(ImplementsByVal)) as ImplementsByVal;

                if (s_ImplementsByPtr is null && s_ImplementsByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Implements method", new Exception("Implements"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("AssignableTo");

                if (extensionMethod is not null)
                    s_AssignableToByPtr = extensionMethod.CreateStaticDelegate(typeof(AssignableToByPtr)) as AssignableToByPtr;

                extensionMethod = targetType.GetExtensionMethod("AssignableTo");

                if (extensionMethod is not null)
                    s_AssignableToByVal = extensionMethod.CreateStaticDelegate(typeof(AssignableToByVal)) as AssignableToByVal;

                if (s_AssignableToByPtr is null && s_AssignableToByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.AssignableTo method", new Exception("AssignableTo"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("ConvertibleTo");

                if (extensionMethod is not null)
                    s_ConvertibleToByPtr = extensionMethod.CreateStaticDelegate(typeof(ConvertibleToByPtr)) as ConvertibleToByPtr;

                extensionMethod = targetType.GetExtensionMethod("ConvertibleTo");

                if (extensionMethod is not null)
                    s_ConvertibleToByVal = extensionMethod.CreateStaticDelegate(typeof(ConvertibleToByVal)) as ConvertibleToByVal;

                if (s_ConvertibleToByPtr is null && s_ConvertibleToByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.ConvertibleTo method", new Exception("ConvertibleTo"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Comparable");

                if (extensionMethod is not null)
                    s_ComparableByPtr = extensionMethod.CreateStaticDelegate(typeof(ComparableByPtr)) as ComparableByPtr;

                extensionMethod = targetType.GetExtensionMethod("Comparable");

                if (extensionMethod is not null)
                    s_ComparableByVal = extensionMethod.CreateStaticDelegate(typeof(ComparableByVal)) as ComparableByVal;

                if (s_ComparableByPtr is null && s_ComparableByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Comparable method", new Exception("Comparable"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Bits");

                if (extensionMethod is not null)
                    s_BitsByPtr = extensionMethod.CreateStaticDelegate(typeof(BitsByPtr)) as BitsByPtr;

                extensionMethod = targetType.GetExtensionMethod("Bits");

                if (extensionMethod is not null)
                    s_BitsByVal = extensionMethod.CreateStaticDelegate(typeof(BitsByVal)) as BitsByVal;

                if (s_BitsByPtr is null && s_BitsByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Bits method", new Exception("Bits"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("ChanDir");

                if (extensionMethod is not null)
                    s_ChanDirByPtr = extensionMethod.CreateStaticDelegate(typeof(ChanDirByPtr)) as ChanDirByPtr;

                extensionMethod = targetType.GetExtensionMethod("ChanDir");

                if (extensionMethod is not null)
                    s_ChanDirByVal = extensionMethod.CreateStaticDelegate(typeof(ChanDirByVal)) as ChanDirByVal;

                if (s_ChanDirByPtr is null && s_ChanDirByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.ChanDir method", new Exception("ChanDir"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("IsVariadic");

                if (extensionMethod is not null)
                    s_IsVariadicByPtr = extensionMethod.CreateStaticDelegate(typeof(IsVariadicByPtr)) as IsVariadicByPtr;

                extensionMethod = targetType.GetExtensionMethod("IsVariadic");

                if (extensionMethod is not null)
                    s_IsVariadicByVal = extensionMethod.CreateStaticDelegate(typeof(IsVariadicByVal)) as IsVariadicByVal;

                if (s_IsVariadicByPtr is null && s_IsVariadicByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.IsVariadic method", new Exception("IsVariadic"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Elem");

                if (extensionMethod is not null)
                    s_ElemByPtr = extensionMethod.CreateStaticDelegate(typeof(ElemByPtr)) as ElemByPtr;

                extensionMethod = targetType.GetExtensionMethod("Elem");

                if (extensionMethod is not null)
                    s_ElemByVal = extensionMethod.CreateStaticDelegate(typeof(ElemByVal)) as ElemByVal;

                if (s_ElemByPtr is null && s_ElemByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Elem method", new Exception("Elem"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Field");

                if (extensionMethod is not null)
                    s_FieldByPtr = extensionMethod.CreateStaticDelegate(typeof(FieldByPtr)) as FieldByPtr;

                extensionMethod = targetType.GetExtensionMethod("Field");

                if (extensionMethod is not null)
                    s_FieldByVal = extensionMethod.CreateStaticDelegate(typeof(FieldByVal)) as FieldByVal;

                if (s_FieldByPtr is null && s_FieldByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Field method", new Exception("Field"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("FieldByIndex");

                if (extensionMethod is not null)
                    s_FieldByIndexByPtr = extensionMethod.CreateStaticDelegate(typeof(FieldByIndexByPtr)) as FieldByIndexByPtr;

                extensionMethod = targetType.GetExtensionMethod("FieldByIndex");

                if (extensionMethod is not null)
                    s_FieldByIndexByVal = extensionMethod.CreateStaticDelegate(typeof(FieldByIndexByVal)) as FieldByIndexByVal;

                if (s_FieldByIndexByPtr is null && s_FieldByIndexByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.FieldByIndex method", new Exception("FieldByIndex"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("FieldByName");

                if (extensionMethod is not null)
                    s_FieldByNameByPtr = extensionMethod.CreateStaticDelegate(typeof(FieldByNameByPtr)) as FieldByNameByPtr;

                extensionMethod = targetType.GetExtensionMethod("FieldByName");

                if (extensionMethod is not null)
                    s_FieldByNameByVal = extensionMethod.CreateStaticDelegate(typeof(FieldByNameByVal)) as FieldByNameByVal;

                if (s_FieldByNameByPtr is null && s_FieldByNameByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.FieldByName method", new Exception("FieldByName"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("FieldByNameFunc");

                if (extensionMethod is not null)
                    s_FieldByNameFuncByPtr = extensionMethod.CreateStaticDelegate(typeof(FieldByNameFuncByPtr)) as FieldByNameFuncByPtr;

                extensionMethod = targetType.GetExtensionMethod("FieldByNameFunc");

                if (extensionMethod is not null)
                    s_FieldByNameFuncByVal = extensionMethod.CreateStaticDelegate(typeof(FieldByNameFuncByVal)) as FieldByNameFuncByVal;

                if (s_FieldByNameFuncByPtr is null && s_FieldByNameFuncByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.FieldByNameFunc method", new Exception("FieldByNameFunc"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("In");

                if (extensionMethod is not null)
                    s_InByPtr = extensionMethod.CreateStaticDelegate(typeof(InByPtr)) as InByPtr;

                extensionMethod = targetType.GetExtensionMethod("In");

                if (extensionMethod is not null)
                    s_InByVal = extensionMethod.CreateStaticDelegate(typeof(InByVal)) as InByVal;

                if (s_InByPtr is null && s_InByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.In method", new Exception("In"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Key");

                if (extensionMethod is not null)
                    s_KeyByPtr = extensionMethod.CreateStaticDelegate(typeof(KeyByPtr)) as KeyByPtr;

                extensionMethod = targetType.GetExtensionMethod("Key");

                if (extensionMethod is not null)
                    s_KeyByVal = extensionMethod.CreateStaticDelegate(typeof(KeyByVal)) as KeyByVal;

                if (s_KeyByPtr is null && s_KeyByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Key method", new Exception("Key"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Len");

                if (extensionMethod is not null)
                    s_LenByPtr = extensionMethod.CreateStaticDelegate(typeof(LenByPtr)) as LenByPtr;

                extensionMethod = targetType.GetExtensionMethod("Len");

                if (extensionMethod is not null)
                    s_LenByVal = extensionMethod.CreateStaticDelegate(typeof(LenByVal)) as LenByVal;

                if (s_LenByPtr is null && s_LenByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Len method", new Exception("Len"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("NumField");

                if (extensionMethod is not null)
                    s_NumFieldByPtr = extensionMethod.CreateStaticDelegate(typeof(NumFieldByPtr)) as NumFieldByPtr;

                extensionMethod = targetType.GetExtensionMethod("NumField");

                if (extensionMethod is not null)
                    s_NumFieldByVal = extensionMethod.CreateStaticDelegate(typeof(NumFieldByVal)) as NumFieldByVal;

                if (s_NumFieldByPtr is null && s_NumFieldByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.NumField method", new Exception("NumField"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("NumIn");

                if (extensionMethod is not null)
                    s_NumInByPtr = extensionMethod.CreateStaticDelegate(typeof(NumInByPtr)) as NumInByPtr;

                extensionMethod = targetType.GetExtensionMethod("NumIn");

                if (extensionMethod is not null)
                    s_NumInByVal = extensionMethod.CreateStaticDelegate(typeof(NumInByVal)) as NumInByVal;

                if (s_NumInByPtr is null && s_NumInByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.NumIn method", new Exception("NumIn"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("NumOut");

                if (extensionMethod is not null)
                    s_NumOutByPtr = extensionMethod.CreateStaticDelegate(typeof(NumOutByPtr)) as NumOutByPtr;

                extensionMethod = targetType.GetExtensionMethod("NumOut");

                if (extensionMethod is not null)
                    s_NumOutByVal = extensionMethod.CreateStaticDelegate(typeof(NumOutByVal)) as NumOutByVal;

                if (s_NumOutByPtr is null && s_NumOutByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.NumOut method", new Exception("NumOut"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Out");

                if (extensionMethod is not null)
                    s_OutByPtr = extensionMethod.CreateStaticDelegate(typeof(OutByPtr)) as OutByPtr;

                extensionMethod = targetType.GetExtensionMethod("Out");

                if (extensionMethod is not null)
                    s_OutByVal = extensionMethod.CreateStaticDelegate(typeof(OutByVal)) as OutByVal;

                if (s_OutByPtr is null && s_OutByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.Out method", new Exception("Out"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("common");

                if (extensionMethod is not null)
                    s_commonByPtr = extensionMethod.CreateStaticDelegate(typeof(commonByPtr)) as commonByPtr;

                extensionMethod = targetType.GetExtensionMethod("common");

                if (extensionMethod is not null)
                    s_commonByVal = extensionMethod.CreateStaticDelegate(typeof(commonByVal)) as commonByVal;

                if (s_commonByPtr is null && s_commonByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.common method", new Exception("common"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("uncommon");

                if (extensionMethod is not null)
                    s_uncommonByPtr = extensionMethod.CreateStaticDelegate(typeof(uncommonByPtr)) as uncommonByPtr;

                extensionMethod = targetType.GetExtensionMethod("uncommon");

                if (extensionMethod is not null)
                    s_uncommonByVal = extensionMethod.CreateStaticDelegate(typeof(uncommonByVal)) as uncommonByVal;

                if (s_uncommonByPtr is null && s_uncommonByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Type.uncommon method", new Exception("uncommon"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Type<T>(in ptr<T> target_ptr) => new Type<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Type<T>(in T target) => new Type<T>(target);

            // Enable comparisons between nil and Type<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Type<T> value, NilType nil) => Activator.CreateInstance<Type<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Type<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Type<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Type<T> value) => value != nil;
        }
    }
}

namespace go
{
    public static class reflect_TypeExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.reflect_package.Type target)
        {
            try
            {
                return ((go.reflect_package.Type<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.reflect_package.Type target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.reflect_package.Type target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.reflect_package.Type<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.reflect_package.Type target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}