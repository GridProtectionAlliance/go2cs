//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:41:53 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;

using go;

#nullable enable

namespace go {
namespace reflect {
namespace @internal
{
    public static partial class example2_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        public partial struct MyStruct
        {
            // Constructors
            public MyStruct(NilType _)
            {
                this.MyStructs = default;
                this.MyStruct = default;
            }

            public MyStruct(slice<MyStruct> MyStructs = default, ref ptr<MyStruct> MyStruct = default)
            {
                this.MyStructs = MyStructs;
                this.MyStruct = MyStruct;
            }

            // Enable comparisons between nil and MyStruct struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(MyStruct value, NilType nil) => value.Equals(default(MyStruct));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(MyStruct value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, MyStruct value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, MyStruct value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator MyStruct(NilType nil) => default(MyStruct);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        public static MyStruct MyStruct_cast(dynamic value)
        {
            return new MyStruct(value.MyStructs, ref value.MyStruct);
        }
    }
}}}