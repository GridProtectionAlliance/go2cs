//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 04:45:18 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using utf8 = go.unicode.utf8_package;
using @unsafe = go.@unsafe_package;

#nullable enable

namespace go
{
    public static partial class strings_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Builder
        {
            // Constructors
            public Builder(NilType _)
            {
                this.addr = default;
                this.buf = default;
            }

            public Builder(ref ptr<Builder> addr = default, slice<byte> buf = default)
            {
                this.addr = addr;
                this.buf = buf;
            }

            // Enable comparisons between nil and Builder struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Builder value, NilType nil) => value.Equals(default(Builder));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Builder value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Builder value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Builder value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Builder(NilType nil) => default(Builder);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Builder Builder_cast(dynamic value)
        {
            return new Builder(ref value.addr, value.buf);
        }
    }
}