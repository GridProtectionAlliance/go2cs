//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 04:50:06 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using io = go.io_package;

#nullable enable
#pragma warning disable CS0660, CS0661

namespace go
{
    public static partial class hash_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface Hash32
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Hash32 As<T>(in T target) => (Hash32<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Hash32 As<T>(ptr<T> target_ptr) => (Hash32<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Hash32? As(object target) =>
                typeof(Hash32<>).CreateInterfaceHandler<Hash32>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class Hash32<T> : Hash32
        {
            private T m_target = default!;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public Hash32(in T target) => m_target = target;

            public Hash32(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate uint Sum32ByPtr(ptr<T> value);
            private delegate uint Sum32ByVal(T value);

            private static readonly Sum32ByPtr? s_Sum32ByPtr;
            private static readonly Sum32ByVal? s_Sum32ByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public uint Sum32()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_Sum32ByPtr is null || !m_target_is_ptr)
                    return s_Sum32ByVal!(target);

                return s_Sum32ByPtr(m_target_ptr);
            }

            private delegate long SumByPtr(ptr<T> value, slice<byte> b);
            private delegate long SumByVal(T value, slice<byte> b);

            private static readonly SumByPtr? s_SumByPtr;
            private static readonly SumByVal? s_SumByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public long Sum(slice<byte> b)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_SumByPtr is null || !m_target_is_ptr)
                    return s_SumByVal!(target, b);

                return s_SumByPtr(m_target_ptr, b);
            }

            private delegate long ResetByPtr(ptr<T> value);
            private delegate long ResetByVal(T value);

            private static readonly ResetByPtr? s_ResetByPtr;
            private static readonly ResetByVal? s_ResetByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public long Reset()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_ResetByPtr is null || !m_target_is_ptr)
                    return s_ResetByVal!(target);

                return s_ResetByPtr(m_target_ptr);
            }

            private delegate long SizeByPtr(ptr<T> value);
            private delegate long SizeByVal(T value);

            private static readonly SizeByPtr? s_SizeByPtr;
            private static readonly SizeByVal? s_SizeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public long Size()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_SizeByPtr is null || !m_target_is_ptr)
                    return s_SizeByVal!(target);

                return s_SizeByPtr(m_target_ptr);
            }

            private delegate long BlockSizeByPtr(ptr<T> value);
            private delegate long BlockSizeByVal(T value);

            private static readonly BlockSizeByPtr? s_BlockSizeByPtr;
            private static readonly BlockSizeByVal? s_BlockSizeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public long BlockSize()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_BlockSizeByPtr is null || !m_target_is_ptr)
                    return s_BlockSizeByVal!(target);

                return s_BlockSizeByPtr(m_target_ptr);
            }

            private delegate (long, error) WriteByPtr(ptr<T> value, slice<byte> p);
            private delegate (long, error) WriteByVal(T value, slice<byte> p);

            private static readonly WriteByPtr? s_WriteByPtr;
            private static readonly WriteByVal? s_WriteByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (long, error) Write(slice<byte> p)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_WriteByPtr is null || !m_target_is_ptr)
                    return s_WriteByVal!(target, p);

                return s_WriteByPtr(m_target_ptr, p);
            }
            
            public string ToString(string? format, IFormatProvider? formatProvider) => format;

            [DebuggerStepperBoundary]
            static Hash32()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Sum32");

                if (!(extensionMethod is null))
                    s_Sum32ByPtr = extensionMethod.CreateStaticDelegate(typeof(Sum32ByPtr)) as Sum32ByPtr;

                extensionMethod = targetType.GetExtensionMethod("Sum32");

                if (!(extensionMethod is null))
                    s_Sum32ByVal = extensionMethod.CreateStaticDelegate(typeof(Sum32ByVal)) as Sum32ByVal;

                if (s_Sum32ByPtr is null && s_Sum32ByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Hash32.Sum32 method", new Exception("Sum32"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Sum");

                if (!(extensionMethod is null))
                    s_SumByPtr = extensionMethod.CreateStaticDelegate(typeof(SumByPtr)) as SumByPtr;

                extensionMethod = targetType.GetExtensionMethod("Sum");

                if (!(extensionMethod is null))
                    s_SumByVal = extensionMethod.CreateStaticDelegate(typeof(SumByVal)) as SumByVal;

                if (s_SumByPtr is null && s_SumByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Hash32.Sum method", new Exception("Sum"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Reset");

                if (!(extensionMethod is null))
                    s_ResetByPtr = extensionMethod.CreateStaticDelegate(typeof(ResetByPtr)) as ResetByPtr;

                extensionMethod = targetType.GetExtensionMethod("Reset");

                if (!(extensionMethod is null))
                    s_ResetByVal = extensionMethod.CreateStaticDelegate(typeof(ResetByVal)) as ResetByVal;

                if (s_ResetByPtr is null && s_ResetByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Hash32.Reset method", new Exception("Reset"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Size");

                if (!(extensionMethod is null))
                    s_SizeByPtr = extensionMethod.CreateStaticDelegate(typeof(SizeByPtr)) as SizeByPtr;

                extensionMethod = targetType.GetExtensionMethod("Size");

                if (!(extensionMethod is null))
                    s_SizeByVal = extensionMethod.CreateStaticDelegate(typeof(SizeByVal)) as SizeByVal;

                if (s_SizeByPtr is null && s_SizeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Hash32.Size method", new Exception("Size"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("BlockSize");

                if (!(extensionMethod is null))
                    s_BlockSizeByPtr = extensionMethod.CreateStaticDelegate(typeof(BlockSizeByPtr)) as BlockSizeByPtr;

                extensionMethod = targetType.GetExtensionMethod("BlockSize");

                if (!(extensionMethod is null))
                    s_BlockSizeByVal = extensionMethod.CreateStaticDelegate(typeof(BlockSizeByVal)) as BlockSizeByVal;

                if (s_BlockSizeByPtr is null && s_BlockSizeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Hash32.BlockSize method", new Exception("BlockSize"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Write");

                if (!(extensionMethod is null))
                    s_WriteByPtr = extensionMethod.CreateStaticDelegate(typeof(WriteByPtr)) as WriteByPtr;

                extensionMethod = targetType.GetExtensionMethod("Write");

                if (!(extensionMethod is null))
                    s_WriteByVal = extensionMethod.CreateStaticDelegate(typeof(WriteByVal)) as WriteByVal;

                if (s_WriteByPtr is null && s_WriteByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Hash32.Write method", new Exception("Write"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Hash32<T>(in ptr<T> target_ptr) => new Hash32<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Hash32<T>(in T target) => new Hash32<T>(target);

            // Enable comparisons between nil and Hash32<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Hash32<T> value, NilType nil) => Activator.CreateInstance<Hash32<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Hash32<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Hash32<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Hash32<T> value) => value != nil;
        }
    }
}

namespace go
{
    public static class hash_Hash32Extensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.hash_package.Hash32 target)
        {
            try
            {
                return ((go.hash_package.Hash32<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.hash_package.Hash32 target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.hash_package.Hash32 target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.hash_package.Hash32<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.hash_package.Hash32 target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}