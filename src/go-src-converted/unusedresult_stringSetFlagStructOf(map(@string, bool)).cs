//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 06:04:22 UTC
// </auto-generated>
//---------------------------------------------------------
using System.CodeDom.Compiler;
using System.Runtime.CompilerServices;
using go;

#nullable enable

namespace go {
namespace golang.org {
namespace x {
namespace tools {
namespace go {
namespace analysis {
namespace passes
{
    public static partial class unusedresult_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct stringSetFlag
        {
            // Value of the stringSetFlag struct
            private readonly map<@string, bool> m_value;

            public stringSetFlag(map<@string, bool> value) => m_value = value;

            // Enable implicit conversions between map<@string, bool> and stringSetFlag struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator stringSetFlag(map<@string, bool> value) => new stringSetFlag(value);
            
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator map<@string, bool>(stringSetFlag value) => value.m_value;
            
            // Enable comparisons between nil and stringSetFlag struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(stringSetFlag value, NilType nil) => value.Equals(default(stringSetFlag));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(stringSetFlag value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, stringSetFlag value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, stringSetFlag value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator stringSetFlag(NilType nil) => default(stringSetFlag);
        }
    }
}}}}}}}
