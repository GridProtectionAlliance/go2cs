//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:19:26 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using io = go.io_package;
using fs = go.io.fs_package;
using path = go.path_package;
using sort = go.sort_package;
using strings = go.strings_package;
using time = go.time_package;
using go;

#nullable enable

namespace go {
namespace testing
{
    public static partial class fstest_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct noSub
        {
            // Constructors
            public noSub(NilType _)
            {
                this.MapFS = default;
            }

            public noSub(MapFS MapFS = default)
            {
                this.MapFS = MapFS;
            }

            // Enable comparisons between nil and noSub struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(noSub value, NilType nil) => value.Equals(default(noSub));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(noSub value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, noSub value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, noSub value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator noSub(NilType nil) => default(noSub);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static noSub noSub_cast(dynamic value)
        {
            return new noSub(value.MapFS);
        }
    }
}}