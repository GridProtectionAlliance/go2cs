//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 06:43:10 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using bytes = go.bytes_package;
using errors = go.errors_package;
using flag = go.flag_package;
using fmt = go.fmt_package;
using race = go.@internal.race_package;
using io = go.io_package;
using rand = go.math.rand_package;
using os = go.os_package;
using runtime = go.runtime_package;
using debug = go.runtime.debug_package;
using trace = go.runtime.trace_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using sync = go.sync_package;
using atomic = go.sync.atomic_package;
using time = go.time_package;
using unicode = go.unicode_package;
using utf8 = go.unicode.utf8_package;

#nullable enable

namespace go
{
    public static partial class testing_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        [PromotedStruct(typeof(common))]
        public partial struct T
        {
            // common structure promotion - sourced from value copy
            private readonly ptr<common> m_commonRef;

            private ref common common_val => ref m_commonRef.Value;

            public ref sync.RWMutex mu => ref m_commonRef.Value.mu;

            public ref slice<byte> output => ref m_commonRef.Value.output;

            public ref io.Writer w => ref m_commonRef.Value.w;

            public ref bool ran => ref m_commonRef.Value.ran;

            public ref bool failed => ref m_commonRef.Value.failed;

            public ref bool skipped => ref m_commonRef.Value.skipped;

            public ref bool done => ref m_commonRef.Value.done;

            public ref slice<Action> cleanups => ref m_commonRef.Value.cleanups;

            public ref @string cleanupName => ref m_commonRef.Value.cleanupName;

            public ref slice<System.UIntPtr> cleanupPc => ref m_commonRef.Value.cleanupPc;

            public ref bool finished => ref m_commonRef.Value.finished;

            public ref ptr<chattyPrinter> chatty => ref m_commonRef.Value.chatty;

            public ref bool bench => ref m_commonRef.Value.bench;

            public ref int hasSub => ref m_commonRef.Value.hasSub;

            public ref nint raceErrors => ref m_commonRef.Value.raceErrors;

            public ref @string runner => ref m_commonRef.Value.runner;

            public ref ptr<common> parent => ref m_commonRef.Value.parent;

            public ref nint level => ref m_commonRef.Value.level;

            public ref slice<System.UIntPtr> creator => ref m_commonRef.Value.creator;

            public ref @string name => ref m_commonRef.Value.name;

            public ref time.Time start => ref m_commonRef.Value.start;

            public ref time.Duration duration => ref m_commonRef.Value.duration;

            public ref channel<bool> barrier => ref m_commonRef.Value.barrier;

            public ref channel<bool> signal => ref m_commonRef.Value.signal;

            public ref slice<ptr<T>> sub => ref m_commonRef.Value.sub;

            public ref sync.Mutex tempDirMu => ref m_commonRef.Value.tempDirMu;

            public ref @string tempDir => ref m_commonRef.Value.tempDir;

            public ref error tempDirErr => ref m_commonRef.Value.tempDirErr;

            public ref int tempDirSeq => ref m_commonRef.Value.tempDirSeq;

            // Constructors
            public T(NilType _)
            {
                this.m_commonRef = new ptr<common>(new common(nil));
                this.isParallel = default;
                this.isEnvSet = default;
                this.context = default;
            }

            public T(common common = default, bool isParallel = default, bool isEnvSet = default, ref ptr<testContext> context = default)
            {
                this.m_commonRef = new ptr<common>(common);
                this.isParallel = isParallel;
                this.isEnvSet = isEnvSet;
                this.context = context;
            }

            // Enable comparisons between nil and T struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(T value, NilType nil) => value.Equals(default(T));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(T value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, T value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, T value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator T(NilType nil) => default(T);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        public static T T_cast(dynamic value)
        {
            return new T(value.common, value.isParallel, value.isEnvSet, ref value.context);
        }
    }
}