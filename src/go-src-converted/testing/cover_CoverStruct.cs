//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 04:36:29 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using fmt = go.fmt_package;
using os = go.os_package;
using atomic = go.sync.atomic_package;

namespace go
{
    public static partial class testing_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Cover
        {
            // Constructors
            public Cover(NilType _)
            {
                this.Mode = default;
                this.Counters = default;
                this.Blocks = default;
                this.CoveredPackages = default;
            }

            public Cover(@string Mode = default, map<@string, slice<uint>> Counters = default, map<@string, slice<CoverBlock>> Blocks = default, @string CoveredPackages = default)
            {
                this.Mode = Mode;
                this.Counters = Counters;
                this.Blocks = Blocks;
                this.CoveredPackages = CoveredPackages;
            }

            // Enable comparisons between nil and Cover struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Cover value, NilType nil) => value.Equals(default(Cover));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Cover value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Cover value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Cover value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Cover(NilType nil) => default(Cover);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Cover Cover_cast(dynamic value)
        {
            return new Cover(value.Mode, value.Counters, value.Blocks, value.CoveredPackages);
        }
    }
}