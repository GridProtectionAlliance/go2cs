//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:19:25 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using bytes = go.bytes_package;
using errors = go.errors_package;
using flag = go.flag_package;
using fmt = go.fmt_package;
using race = go.@internal.race_package;
using io = go.io_package;
using rand = go.math.rand_package;
using os = go.os_package;
using runtime = go.runtime_package;
using debug = go.runtime.debug_package;
using trace = go.runtime.trace_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using sync = go.sync_package;
using atomic = go.sync.atomic_package;
using time = go.time_package;
using unicode = go.unicode_package;
using utf8 = go.unicode.utf8_package;

#nullable enable

namespace go
{
    public static partial class testing_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct common
        {
            // Constructors
            public common(NilType _)
            {
                this.mu = default;
                this.output = default;
                this.w = default;
                this.ran = default;
                this.failed = default;
                this.skipped = default;
                this.done = default;
                this.cleanups = default;
                this.cleanupName = default;
                this.cleanupPc = default;
                this.finished = default;
                this.chatty = default;
                this.bench = default;
                this.hasSub = default;
                this.raceErrors = default;
                this.runner = default;
                this.parent = default;
                this.level = default;
                this.creator = default;
                this.name = default;
                this.start = default;
                this.duration = default;
                this.barrier = default;
                this.signal = default;
                this.sub = default;
                this.tempDirMu = default;
                this.tempDir = default;
                this.tempDirErr = default;
                this.tempDirSeq = default;
            }

            public common(sync.RWMutex mu = default, slice<byte> output = default, io.Writer w = default, bool ran = default, bool failed = default, bool skipped = default, bool done = default, slice<Action> cleanups = default, @string cleanupName = default, slice<System.UIntPtr> cleanupPc = default, bool finished = default, ref ptr<chattyPrinter> chatty = default, bool bench = default, int hasSub = default, nint raceErrors = default, @string runner = default, ref ptr<common> parent = default, nint level = default, slice<System.UIntPtr> creator = default, @string name = default, time.Time start = default, time.Duration duration = default, channel<bool> barrier = default, channel<bool> signal = default, slice<ptr<T>> sub = default, sync.Mutex tempDirMu = default, @string tempDir = default, error tempDirErr = default, int tempDirSeq = default)
            {
                this.mu = mu;
                this.output = output;
                this.w = w;
                this.ran = ran;
                this.failed = failed;
                this.skipped = skipped;
                this.done = done;
                this.cleanups = cleanups;
                this.cleanupName = cleanupName;
                this.cleanupPc = cleanupPc;
                this.finished = finished;
                this.chatty = chatty;
                this.bench = bench;
                this.hasSub = hasSub;
                this.raceErrors = raceErrors;
                this.runner = runner;
                this.parent = parent;
                this.level = level;
                this.creator = creator;
                this.name = name;
                this.start = start;
                this.duration = duration;
                this.barrier = barrier;
                this.signal = signal;
                this.sub = sub;
                this.tempDirMu = tempDirMu;
                this.tempDir = tempDir;
                this.tempDirErr = tempDirErr;
                this.tempDirSeq = tempDirSeq;
            }

            // Enable comparisons between nil and common struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(common value, NilType nil) => value.Equals(default(common));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(common value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, common value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, common value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator common(NilType nil) => default(common);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static common common_cast(dynamic value)
        {
            return new common(value.mu, value.output, value.w, value.ran, value.failed, value.skipped, value.done, value.cleanups, value.cleanupName, value.cleanupPc, value.finished, ref value.chatty, value.bench, value.hasSub, value.raceErrors, value.runner, ref value.parent, value.level, value.creator, value.name, value.start, value.duration, value.barrier, value.signal, value.sub, value.tempDirMu, value.tempDir, value.tempDirErr, value.tempDirSeq);
        }
    }
}