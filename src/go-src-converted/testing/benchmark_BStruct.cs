//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 05:47:38 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using flag = go.flag_package;
using fmt = go.fmt_package;
using race = go.@internal.race_package;
using io = go.io_package;
using math = go.math_package;
using os = go.os_package;
using runtime = go.runtime_package;
using sort = go.sort_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using sync = go.sync_package;
using atomic = go.sync.atomic_package;
using time = go.time_package;
using unicode = go.unicode_package;

#nullable enable

namespace go
{
    public static partial class testing_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct B
        {
            // Constructors
            public B(NilType _)
            {
                this.common = default;
                this.importPath = default;
                this.context = default;
                this.N = default;
                this.previousN = default;
                this.previousDuration = default;
                this.benchFunc = default;
                this.benchTime = default;
                this.bytes = default;
                this.missingBytes = default;
                this.timerOn = default;
                this.showAllocResult = default;
                this.result = default;
                this.parallelism = default;
                this.startAllocs = default;
                this.startBytes = default;
                this.netAllocs = default;
                this.netBytes = default;
                this.extra = default;
            }

            public B(common common = default, @string importPath = default, ref ptr<benchContext> context = default, long N = default, long previousN = default, time.Duration previousDuration = default, Action<ptr<B>> benchFunc = default, benchTimeFlag benchTime = default, long bytes = default, bool missingBytes = default, bool timerOn = default, bool showAllocResult = default, BenchmarkResult result = default, long parallelism = default, ulong startAllocs = default, ulong startBytes = default, ulong netAllocs = default, ulong netBytes = default, map<@string, double> extra = default)
            {
                this.common = common;
                this.importPath = importPath;
                this.context = context;
                this.N = N;
                this.previousN = previousN;
                this.previousDuration = previousDuration;
                this.benchFunc = benchFunc;
                this.benchTime = benchTime;
                this.bytes = bytes;
                this.missingBytes = missingBytes;
                this.timerOn = timerOn;
                this.showAllocResult = showAllocResult;
                this.result = result;
                this.parallelism = parallelism;
                this.startAllocs = startAllocs;
                this.startBytes = startBytes;
                this.netAllocs = netAllocs;
                this.netBytes = netBytes;
                this.extra = extra;
            }

            // Enable comparisons between nil and B struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(B value, NilType nil) => value.Equals(default(B));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(B value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, B value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, B value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator B(NilType nil) => default(B);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static B B_cast(dynamic value)
        {
            return new B(value.common, value.importPath, ref value.context, value.N, value.previousN, value.previousDuration, value.benchFunc, value.benchTime, value.bytes, value.missingBytes, value.timerOn, value.showAllocResult, value.result, value.parallelism, value.startAllocs, value.startBytes, value.netAllocs, value.netBytes, value.extra);
        }
    }
}