//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:54:27 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using bytes = go.bytes_package;
using fmt = go.fmt_package;
using io = go.io_package;
using os = go.os_package;
using unicode = go.unicode_package;
using utf8 = go.unicode.utf8_package;
using go;

#nullable enable

namespace go {
namespace text
{
    public static partial class scanner_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        public partial struct Position
        {
            // Constructors
            public Position(NilType _)
            {
                this.Filename = default;
                this.Offset = default;
                this.Line = default;
                this.Column = default;
            }

            public Position(@string Filename = default, nint Offset = default, nint Line = default, nint Column = default)
            {
                this.Filename = Filename;
                this.Offset = Offset;
                this.Line = Line;
                this.Column = Column;
            }

            // Enable comparisons between nil and Position struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Position value, NilType nil) => value.Equals(default(Position));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Position value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Position value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Position value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Position(NilType nil) => default(Position);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        public static Position Position_cast(dynamic value)
        {
            return new Position(value.Filename, value.Offset, value.Line, value.Column);
        }
    }
}}