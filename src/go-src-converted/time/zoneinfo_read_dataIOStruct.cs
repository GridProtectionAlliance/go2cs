//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:41:07 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using errors = go.errors_package;
using runtime = go.runtime_package;
using syscall = go.syscall_package;

#nullable enable

namespace go
{
    public static partial class time_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial struct dataIO
        {
            // Constructors
            public dataIO(NilType _)
            {
                this.p = default;
                this.error = default;
            }

            public dataIO(slice<byte> p = default, bool error = default)
            {
                this.p = p;
                this.error = error;
            }

            // Enable comparisons between nil and dataIO struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(dataIO value, NilType nil) => value.Equals(default(dataIO));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(dataIO value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, dataIO value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, dataIO value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator dataIO(NilType nil) => default(dataIO);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private static dataIO dataIO_cast(dynamic value)
        {
            return new dataIO(value.p, value.error);
        }
    }
}