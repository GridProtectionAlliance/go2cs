//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:33:43 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using fmt = go.fmt_package;
using reflect = go.reflect_package;
using strings = go.strings_package;

#nullable enable

namespace go
{
    public static partial class main_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct s
        {
            // Constructors
            public s(NilType _)
            {
                this.x = default;
                this._ = default;
                this.z = default;
            }

            public s(nint x = default, nint _ = default, nint z = default)
            {
                this.x = x;
                this._ = _;
                this.z = z;
            }

            // Enable comparisons between nil and s struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(s value, NilType nil) => value.Equals(default(s));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(s value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, s value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, s value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator s(NilType nil) => default(s);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static s s_cast(dynamic value)
        {
            return new s(value.x, value._, value.z);
        }
    }
}