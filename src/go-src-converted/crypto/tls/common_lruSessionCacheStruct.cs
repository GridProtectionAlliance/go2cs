//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:34:29 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using bytes = go.bytes_package;
using list = go.container.list_package;
using context = go.context_package;
using crypto = go.crypto_package;
using ecdsa = go.crypto.ecdsa_package;
using ed25519 = go.crypto.ed25519_package;
using elliptic = go.crypto.elliptic_package;
using rand = go.crypto.rand_package;
using rsa = go.crypto.rsa_package;
using sha512 = go.crypto.sha512_package;
using x509 = go.crypto.x509_package;
using errors = go.errors_package;
using fmt = go.fmt_package;
using io = go.io_package;
using net = go.net_package;
using strings = go.strings_package;
using sync = go.sync_package;
using time = go.time_package;
using go;

#nullable enable

namespace go {
namespace crypto
{
    public static partial class tls_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        [PromotedStruct(typeof(sync.Mutex))]
        private partial struct lruSessionCache
        {
            // Mutex structure promotion - sourced from value copy
            private readonly ptr<Mutex> m_MutexRef;

            private ref Mutex Mutex_val => ref m_MutexRef.Value;

            public ref int state => ref m_MutexRef.Value.state;

            public ref uint sema => ref m_MutexRef.Value.sema;

            // Constructors
            public lruSessionCache(NilType _)
            {
                this.m_MutexRef = new ptr<sync.Mutex>(new sync.Mutex(nil));
                this.m = default;
                this.q = default;
                this.capacity = default;
            }

            public lruSessionCache(sync.Mutex Mutex = default, map<@string, ptr<list.Element>> m = default, ref ptr<list.List> q = default, nint capacity = default)
            {
                this.m_MutexRef = new ptr<sync.Mutex>(Mutex);
                this.m = m;
                this.q = q;
                this.capacity = capacity;
            }

            // Enable comparisons between nil and lruSessionCache struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(lruSessionCache value, NilType nil) => value.Equals(default(lruSessionCache));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(lruSessionCache value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, lruSessionCache value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, lruSessionCache value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator lruSessionCache(NilType nil) => default(lruSessionCache);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private static lruSessionCache lruSessionCache_cast(dynamic value)
        {
            return new lruSessionCache(value.Mutex, value.m, ref value.q, value.capacity);
        }
    }
}}