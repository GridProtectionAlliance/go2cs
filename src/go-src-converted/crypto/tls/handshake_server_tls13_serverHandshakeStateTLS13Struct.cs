//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 22:21:02 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using bytes = go.bytes_package;
using context = go.context_package;
using crypto = go.crypto_package;
using hmac = go.crypto.hmac_package;
using rsa = go.crypto.rsa_package;
using errors = go.errors_package;
using hash = go.hash_package;
using io = go.io_package;
using atomic = go.sync.atomic_package;
using time = go.time_package;
using go;

#nullable enable

namespace go {
namespace crypto
{
    public static partial class tls_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct serverHandshakeStateTLS13
        {
            // Constructors
            public serverHandshakeStateTLS13(NilType _)
            {
                this.c = default;
                this.ctx = default;
                this.clientHello = default;
                this.hello = default;
                this.sentDummyCCS = default;
                this.usingPSK = default;
                this.suite = default;
                this.cert = default;
                this.sigAlg = default;
                this.earlySecret = default;
                this.sharedKey = default;
                this.handshakeSecret = default;
                this.masterSecret = default;
                this.trafficSecret = default;
                this.transcript = default;
                this.clientFinished = default;
            }

            public serverHandshakeStateTLS13(ref ptr<Conn> c = default, context.Context ctx = default, ref ptr<clientHelloMsg> clientHello = default, ref ptr<serverHelloMsg> hello = default, bool sentDummyCCS = default, bool usingPSK = default, ref ptr<cipherSuiteTLS13> suite = default, ref ptr<Certificate> cert = default, SignatureScheme sigAlg = default, slice<byte> earlySecret = default, slice<byte> sharedKey = default, slice<byte> handshakeSecret = default, slice<byte> masterSecret = default, slice<byte> trafficSecret = default, hash.Hash transcript = default, slice<byte> clientFinished = default)
            {
                this.c = c;
                this.ctx = ctx;
                this.clientHello = clientHello;
                this.hello = hello;
                this.sentDummyCCS = sentDummyCCS;
                this.usingPSK = usingPSK;
                this.suite = suite;
                this.cert = cert;
                this.sigAlg = sigAlg;
                this.earlySecret = earlySecret;
                this.sharedKey = sharedKey;
                this.handshakeSecret = handshakeSecret;
                this.masterSecret = masterSecret;
                this.trafficSecret = trafficSecret;
                this.transcript = transcript;
                this.clientFinished = clientFinished;
            }

            // Enable comparisons between nil and serverHandshakeStateTLS13 struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(serverHandshakeStateTLS13 value, NilType nil) => value.Equals(default(serverHandshakeStateTLS13));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(serverHandshakeStateTLS13 value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, serverHandshakeStateTLS13 value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, serverHandshakeStateTLS13 value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator serverHandshakeStateTLS13(NilType nil) => default(serverHandshakeStateTLS13);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static serverHandshakeStateTLS13 serverHandshakeStateTLS13_cast(dynamic value)
        {
            return new serverHandshakeStateTLS13(ref value.c, value.ctx, ref value.clientHello, ref value.hello, value.sentDummyCCS, value.usingPSK, ref value.suite, ref value.cert, value.sigAlg, value.earlySecret, value.sharedKey, value.handshakeSecret, value.masterSecret, value.trafficSecret, value.transcript, value.clientFinished);
        }
    }
}}