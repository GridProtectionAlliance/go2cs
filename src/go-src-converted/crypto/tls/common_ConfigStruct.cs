//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:34:29 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using bytes = go.bytes_package;
using list = go.container.list_package;
using context = go.context_package;
using crypto = go.crypto_package;
using ecdsa = go.crypto.ecdsa_package;
using ed25519 = go.crypto.ed25519_package;
using elliptic = go.crypto.elliptic_package;
using rand = go.crypto.rand_package;
using rsa = go.crypto.rsa_package;
using sha512 = go.crypto.sha512_package;
using x509 = go.crypto.x509_package;
using errors = go.errors_package;
using fmt = go.fmt_package;
using io = go.io_package;
using net = go.net_package;
using strings = go.strings_package;
using sync = go.sync_package;
using time = go.time_package;
using go;

#nullable enable

namespace go {
namespace crypto
{
    public static partial class tls_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        public partial struct Config
        {
            // Constructors
            public Config(NilType _)
            {
                this.Rand = default;
                this.Time = default;
                this.Certificates = default;
                this.NameToCertificate = default;
                this.GetCertificate = default;
                this.GetClientCertificate = default;
                this.GetConfigForClient = default;
                this.VerifyPeerCertificate = default;
                this.VerifyConnection = default;
                this.RootCAs = default;
                this.NextProtos = default;
                this.ServerName = default;
                this.ClientAuth = default;
                this.ClientCAs = default;
                this.InsecureSkipVerify = default;
                this.CipherSuites = default;
                this.PreferServerCipherSuites = default;
                this.SessionTicketsDisabled = default;
                this.SessionTicketKey = default;
                this.ClientSessionCache = default;
                this.MinVersion = default;
                this.MaxVersion = default;
                this.CurvePreferences = default;
                this.DynamicRecordSizingDisabled = default;
                this.Renegotiation = default;
                this.KeyLogWriter = default;
                this.mutex = default;
                this.sessionTicketKeys = default;
                this.autoSessionTicketKeys = default;
            }

            public Config(io.Reader Rand = default, Func<time.Time> Time = default, slice<Certificate> Certificates = default, map<@string, ptr<Certificate>> NameToCertificate = default, Func<ptr<ClientHelloInfo>, (ptr<Certificate>, error)> GetCertificate = default, Func<ptr<CertificateRequestInfo>, (ptr<Certificate>, error)> GetClientCertificate = default, Func<ptr<ClientHelloInfo>, (ptr<Config>, error)> GetConfigForClient = default, Func<slice<slice<byte>>, slice<slice<ptr<x509.Certificate>>>, error> VerifyPeerCertificate = default, Func<ConnectionState, error> VerifyConnection = default, ref ptr<x509.CertPool> RootCAs = default, slice<@string> NextProtos = default, @string ServerName = default, ClientAuthType ClientAuth = default, ref ptr<x509.CertPool> ClientCAs = default, bool InsecureSkipVerify = default, slice<ushort> CipherSuites = default, bool PreferServerCipherSuites = default, bool SessionTicketsDisabled = default, array<byte> SessionTicketKey = default, ClientSessionCache ClientSessionCache = default, ushort MinVersion = default, ushort MaxVersion = default, slice<CurveID> CurvePreferences = default, bool DynamicRecordSizingDisabled = default, RenegotiationSupport Renegotiation = default, io.Writer KeyLogWriter = default, sync.RWMutex mutex = default, slice<ticketKey> sessionTicketKeys = default, slice<ticketKey> autoSessionTicketKeys = default)
            {
                this.Rand = Rand;
                this.Time = Time;
                this.Certificates = Certificates;
                this.NameToCertificate = NameToCertificate;
                this.GetCertificate = GetCertificate;
                this.GetClientCertificate = GetClientCertificate;
                this.GetConfigForClient = GetConfigForClient;
                this.VerifyPeerCertificate = VerifyPeerCertificate;
                this.VerifyConnection = VerifyConnection;
                this.RootCAs = RootCAs;
                this.NextProtos = NextProtos;
                this.ServerName = ServerName;
                this.ClientAuth = ClientAuth;
                this.ClientCAs = ClientCAs;
                this.InsecureSkipVerify = InsecureSkipVerify;
                this.CipherSuites = CipherSuites;
                this.PreferServerCipherSuites = PreferServerCipherSuites;
                this.SessionTicketsDisabled = SessionTicketsDisabled;
                this.SessionTicketKey = SessionTicketKey;
                this.ClientSessionCache = ClientSessionCache;
                this.MinVersion = MinVersion;
                this.MaxVersion = MaxVersion;
                this.CurvePreferences = CurvePreferences;
                this.DynamicRecordSizingDisabled = DynamicRecordSizingDisabled;
                this.Renegotiation = Renegotiation;
                this.KeyLogWriter = KeyLogWriter;
                this.mutex = mutex;
                this.sessionTicketKeys = sessionTicketKeys;
                this.autoSessionTicketKeys = autoSessionTicketKeys;
            }

            // Enable comparisons between nil and Config struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Config value, NilType nil) => value.Equals(default(Config));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Config value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Config value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Config value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Config(NilType nil) => default(Config);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        public static Config Config_cast(dynamic value)
        {
            return new Config(value.Rand, value.Time, value.Certificates, value.NameToCertificate, value.GetCertificate, value.GetClientCertificate, value.GetConfigForClient, value.VerifyPeerCertificate, value.VerifyConnection, ref value.RootCAs, value.NextProtos, value.ServerName, value.ClientAuth, ref value.ClientCAs, value.InsecureSkipVerify, value.CipherSuites, value.PreferServerCipherSuites, value.SessionTicketsDisabled, value.SessionTicketKey, value.ClientSessionCache, value.MinVersion, value.MaxVersion, value.CurvePreferences, value.DynamicRecordSizingDisabled, value.Renegotiation, value.KeyLogWriter, value.mutex, value.sessionTicketKeys, value.autoSessionTicketKeys);
        }
    }
}}