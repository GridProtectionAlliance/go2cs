// Code generated by "stringer -type=SignatureScheme,CurveID,ClientAuthType -output=common_string.go"; DO NOT EDIT.

// package tls -- go2cs converted at 2022 March 13 05:35:00 UTC
// import "crypto/tls" ==> using tls = go.crypto.tls_package
// Original source: C:\Program Files\Go\src\crypto\tls\common_string.go
namespace go.crypto;

using strconv = strconv_package;

public static partial class tls_package {

private static void _() { 
    // An "invalid array index" compiler error signifies that the constant values have changed.
    // Re-run the stringer command to generate them again.
    var x = default;
    _ = x[PKCS1WithSHA256 - 1025];
    _ = x[PKCS1WithSHA384 - 1281];
    _ = x[PKCS1WithSHA512 - 1537];
    _ = x[PSSWithSHA256 - 2052];
    _ = x[PSSWithSHA384 - 2053];
    _ = x[PSSWithSHA512 - 2054];
    _ = x[ECDSAWithP256AndSHA256 - 1027];
    _ = x[ECDSAWithP384AndSHA384 - 1283];
    _ = x[ECDSAWithP521AndSHA512 - 1539];
    _ = x[Ed25519 - 2055];
    _ = x[PKCS1WithSHA1 - 513];
    _ = x[ECDSAWithSHA1 - 515];
}

private static readonly @string _SignatureScheme_name_0 = "PKCS1WithSHA1";
private static readonly @string _SignatureScheme_name_1 = "ECDSAWithSHA1";
private static readonly @string _SignatureScheme_name_2 = "PKCS1WithSHA256";
private static readonly @string _SignatureScheme_name_3 = "ECDSAWithP256AndSHA256";
private static readonly @string _SignatureScheme_name_4 = "PKCS1WithSHA384";
private static readonly @string _SignatureScheme_name_5 = "ECDSAWithP384AndSHA384";
private static readonly @string _SignatureScheme_name_6 = "PKCS1WithSHA512";
private static readonly @string _SignatureScheme_name_7 = "ECDSAWithP521AndSHA512";
private static readonly @string _SignatureScheme_name_8 = "PSSWithSHA256PSSWithSHA384PSSWithSHA512Ed25519";

private static array<byte> _SignatureScheme_index_8 = new array<byte>(new byte[] { 0, 13, 26, 39, 46 });

public static @string String(this SignatureScheme i) {

    if (i == 513) 
        return _SignatureScheme_name_0;
    else if (i == 515) 
        return _SignatureScheme_name_1;
    else if (i == 1025) 
        return _SignatureScheme_name_2;
    else if (i == 1027) 
        return _SignatureScheme_name_3;
    else if (i == 1281) 
        return _SignatureScheme_name_4;
    else if (i == 1283) 
        return _SignatureScheme_name_5;
    else if (i == 1537) 
        return _SignatureScheme_name_6;
    else if (i == 1539) 
        return _SignatureScheme_name_7;
    else if (2052 <= i && i <= 2055) 
        i -= 2052;
        return _SignatureScheme_name_8[(int)_SignatureScheme_index_8[i]..(int)_SignatureScheme_index_8[i + 1]];
    else 
        return "SignatureScheme(" + strconv.FormatInt(int64(i), 10) + ")";
    }
private static void _() { 
    // An "invalid array index" compiler error signifies that the constant values have changed.
    // Re-run the stringer command to generate them again.
    var x = default;
    _ = x[CurveP256 - 23];
    _ = x[CurveP384 - 24];
    _ = x[CurveP521 - 25];
    _ = x[X25519 - 29];
}

private static readonly @string _CurveID_name_0 = "CurveP256CurveP384CurveP521";
private static readonly @string _CurveID_name_1 = "X25519";

private static array<byte> _CurveID_index_0 = new array<byte>(new byte[] { 0, 9, 18, 27 });

public static @string String(this CurveID i) {

    if (23 <= i && i <= 25) 
        i -= 23;
        return _CurveID_name_0[(int)_CurveID_index_0[i]..(int)_CurveID_index_0[i + 1]];
    else if (i == 29) 
        return _CurveID_name_1;
    else 
        return "CurveID(" + strconv.FormatInt(int64(i), 10) + ")";
    }
private static void _() { 
    // An "invalid array index" compiler error signifies that the constant values have changed.
    // Re-run the stringer command to generate them again.
    var x = default;
    _ = x[NoClientCert - 0];
    _ = x[RequestClientCert - 1];
    _ = x[RequireAnyClientCert - 2];
    _ = x[VerifyClientCertIfGiven - 3];
    _ = x[RequireAndVerifyClientCert - 4];
}

private static readonly @string _ClientAuthType_name = "NoClientCertRequestClientCertRequireAnyClientCertVerifyClientCertIfGivenRequireAndVerifyClientCert";



private static array<byte> _ClientAuthType_index = new array<byte>(new byte[] { 0, 12, 29, 49, 72, 98 });

public static @string String(this ClientAuthType i) {
    if (i < 0 || i >= ClientAuthType(len(_ClientAuthType_index) - 1)) {
        return "ClientAuthType(" + strconv.FormatInt(int64(i), 10) + ")";
    }
    return _ClientAuthType_name[(int)_ClientAuthType_index[i]..(int)_ClientAuthType_index[i + 1]];
}

} // end tls_package
