//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:36:10 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using crypto = go.crypto_package;
using md5 = go.crypto.md5_package;
using rsa = go.crypto.rsa_package;
using sha1 = go.crypto.sha1_package;
using x509 = go.crypto.x509_package;
using errors = go.errors_package;
using fmt = go.fmt_package;
using io = go.io_package;
using go;

#nullable enable
#pragma warning disable CS0660, CS0661

namespace go {
namespace crypto
{
    public static partial class tls_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial interface keyAgreement
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static keyAgreement As<T>(in T target) => (keyAgreement<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static keyAgreement As<T>(ptr<T> target_ptr) => (keyAgreement<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static keyAgreement? As(object target) =>
                typeof(keyAgreement<>).CreateInterfaceHandler<keyAgreement>(target);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private class keyAgreement<T> : keyAgreement
        {
            private T m_target = default!;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && m_target_ptr is not null)
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public keyAgreement(in T target) => m_target = target;

            public keyAgreement(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate (slice<byte>, ptr<clientKeyExchangeMsg>, error) generateServerKeyExchangeByPtr(ptr<T> value, ptr<Config> _p0, ptr<Certificate> _p0, ptr<clientHelloMsg> _p0, ptr<serverHelloMsg> _p0);
            private delegate (slice<byte>, ptr<clientKeyExchangeMsg>, error) generateServerKeyExchangeByVal(T value, ptr<Config> _p0, ptr<Certificate> _p0, ptr<clientHelloMsg> _p0, ptr<serverHelloMsg> _p0);

            private static readonly generateServerKeyExchangeByPtr? s_generateServerKeyExchangeByPtr;
            private static readonly generateServerKeyExchangeByVal? s_generateServerKeyExchangeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (slice<byte>, ptr<clientKeyExchangeMsg>, error) generateServerKeyExchange(ptr<Config> _p0, ptr<Certificate> _p0, ptr<clientHelloMsg> _p0, ptr<serverHelloMsg> _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_generateServerKeyExchangeByPtr is null || !m_target_is_ptr)
                    return s_generateServerKeyExchangeByVal!(target, _p0, _p0, _p0, _p0);

                return s_generateServerKeyExchangeByPtr(m_target_ptr!, _p0, _p0, _p0, _p0);
            }

            private delegate (slice<byte>, ptr<clientKeyExchangeMsg>, error) processClientKeyExchangeByPtr(ptr<T> value, ptr<Config> _p0, ptr<Certificate> _p0, ptr<clientKeyExchangeMsg> _p0, ushort _p0);
            private delegate (slice<byte>, ptr<clientKeyExchangeMsg>, error) processClientKeyExchangeByVal(T value, ptr<Config> _p0, ptr<Certificate> _p0, ptr<clientKeyExchangeMsg> _p0, ushort _p0);

            private static readonly processClientKeyExchangeByPtr? s_processClientKeyExchangeByPtr;
            private static readonly processClientKeyExchangeByVal? s_processClientKeyExchangeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (slice<byte>, ptr<clientKeyExchangeMsg>, error) processClientKeyExchange(ptr<Config> _p0, ptr<Certificate> _p0, ptr<clientKeyExchangeMsg> _p0, ushort _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_processClientKeyExchangeByPtr is null || !m_target_is_ptr)
                    return s_processClientKeyExchangeByVal!(target, _p0, _p0, _p0, _p0);

                return s_processClientKeyExchangeByPtr(m_target_ptr!, _p0, _p0, _p0, _p0);
            }

            private delegate (slice<byte>, ptr<clientKeyExchangeMsg>, error) processServerKeyExchangeByPtr(ptr<T> value, ptr<Config> _p0, ptr<clientHelloMsg> _p0, ptr<serverHelloMsg> _p0, ptr<x509.Certificate> _p0, ptr<serverKeyExchangeMsg> _p0);
            private delegate (slice<byte>, ptr<clientKeyExchangeMsg>, error) processServerKeyExchangeByVal(T value, ptr<Config> _p0, ptr<clientHelloMsg> _p0, ptr<serverHelloMsg> _p0, ptr<x509.Certificate> _p0, ptr<serverKeyExchangeMsg> _p0);

            private static readonly processServerKeyExchangeByPtr? s_processServerKeyExchangeByPtr;
            private static readonly processServerKeyExchangeByVal? s_processServerKeyExchangeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (slice<byte>, ptr<clientKeyExchangeMsg>, error) processServerKeyExchange(ptr<Config> _p0, ptr<clientHelloMsg> _p0, ptr<serverHelloMsg> _p0, ptr<x509.Certificate> _p0, ptr<serverKeyExchangeMsg> _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_processServerKeyExchangeByPtr is null || !m_target_is_ptr)
                    return s_processServerKeyExchangeByVal!(target, _p0, _p0, _p0, _p0, _p0);

                return s_processServerKeyExchangeByPtr(m_target_ptr!, _p0, _p0, _p0, _p0, _p0);
            }

            private delegate (slice<byte>, ptr<clientKeyExchangeMsg>, error) generateClientKeyExchangeByPtr(ptr<T> value, ptr<Config> _p0, ptr<clientHelloMsg> _p0, ptr<x509.Certificate> _p0);
            private delegate (slice<byte>, ptr<clientKeyExchangeMsg>, error) generateClientKeyExchangeByVal(T value, ptr<Config> _p0, ptr<clientHelloMsg> _p0, ptr<x509.Certificate> _p0);

            private static readonly generateClientKeyExchangeByPtr? s_generateClientKeyExchangeByPtr;
            private static readonly generateClientKeyExchangeByVal? s_generateClientKeyExchangeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (slice<byte>, ptr<clientKeyExchangeMsg>, error) generateClientKeyExchange(ptr<Config> _p0, ptr<clientHelloMsg> _p0, ptr<x509.Certificate> _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_generateClientKeyExchangeByPtr is null || !m_target_is_ptr)
                    return s_generateClientKeyExchangeByVal!(target, _p0, _p0, _p0);

                return s_generateClientKeyExchangeByPtr(m_target_ptr!, _p0, _p0, _p0);
            }
            
            public string ToString(string? format, IFormatProvider? formatProvider) => format ?? GetGoTypeName(typeof(T));

            [DebuggerStepperBoundary]
            static keyAgreement()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("generateServerKeyExchange");

                if (extensionMethod is not null)
                    s_generateServerKeyExchangeByPtr = extensionMethod.CreateStaticDelegate(typeof(generateServerKeyExchangeByPtr)) as generateServerKeyExchangeByPtr;

                extensionMethod = targetType.GetExtensionMethod("generateServerKeyExchange");

                if (extensionMethod is not null)
                    s_generateServerKeyExchangeByVal = extensionMethod.CreateStaticDelegate(typeof(generateServerKeyExchangeByVal)) as generateServerKeyExchangeByVal;

                if (s_generateServerKeyExchangeByPtr is null && s_generateServerKeyExchangeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement keyAgreement.generateServerKeyExchange method", new Exception("generateServerKeyExchange"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("processClientKeyExchange");

                if (extensionMethod is not null)
                    s_processClientKeyExchangeByPtr = extensionMethod.CreateStaticDelegate(typeof(processClientKeyExchangeByPtr)) as processClientKeyExchangeByPtr;

                extensionMethod = targetType.GetExtensionMethod("processClientKeyExchange");

                if (extensionMethod is not null)
                    s_processClientKeyExchangeByVal = extensionMethod.CreateStaticDelegate(typeof(processClientKeyExchangeByVal)) as processClientKeyExchangeByVal;

                if (s_processClientKeyExchangeByPtr is null && s_processClientKeyExchangeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement keyAgreement.processClientKeyExchange method", new Exception("processClientKeyExchange"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("processServerKeyExchange");

                if (extensionMethod is not null)
                    s_processServerKeyExchangeByPtr = extensionMethod.CreateStaticDelegate(typeof(processServerKeyExchangeByPtr)) as processServerKeyExchangeByPtr;

                extensionMethod = targetType.GetExtensionMethod("processServerKeyExchange");

                if (extensionMethod is not null)
                    s_processServerKeyExchangeByVal = extensionMethod.CreateStaticDelegate(typeof(processServerKeyExchangeByVal)) as processServerKeyExchangeByVal;

                if (s_processServerKeyExchangeByPtr is null && s_processServerKeyExchangeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement keyAgreement.processServerKeyExchange method", new Exception("processServerKeyExchange"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("generateClientKeyExchange");

                if (extensionMethod is not null)
                    s_generateClientKeyExchangeByPtr = extensionMethod.CreateStaticDelegate(typeof(generateClientKeyExchangeByPtr)) as generateClientKeyExchangeByPtr;

                extensionMethod = targetType.GetExtensionMethod("generateClientKeyExchange");

                if (extensionMethod is not null)
                    s_generateClientKeyExchangeByVal = extensionMethod.CreateStaticDelegate(typeof(generateClientKeyExchangeByVal)) as generateClientKeyExchangeByVal;

                if (s_generateClientKeyExchangeByPtr is null && s_generateClientKeyExchangeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement keyAgreement.generateClientKeyExchange method", new Exception("generateClientKeyExchange"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator keyAgreement<T>(in ptr<T> target_ptr) => new keyAgreement<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator keyAgreement<T>(in T target) => new keyAgreement<T>(target);

            // Enable comparisons between nil and keyAgreement<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(keyAgreement<T> value, NilType nil) => Activator.CreateInstance<keyAgreement<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(keyAgreement<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, keyAgreement<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, keyAgreement<T> value) => value != nil;
        }
    }
}}

namespace go
{
    public static class tls_keyAgreementExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.2.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.crypto.tls_package.keyAgreement target)
        {
            try
            {
                return ((go.crypto.tls_package.keyAgreement<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.2.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.crypto.tls_package.keyAgreement target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.2.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.crypto.tls_package.keyAgreement target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.crypto.tls_package.keyAgreement<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.2.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.crypto.tls_package.keyAgreement target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}