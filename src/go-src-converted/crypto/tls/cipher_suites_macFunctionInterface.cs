//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 03:36:44 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using crypto = go.crypto_package;
using aes = go.crypto.aes_package;
using cipher = go.crypto.cipher_package;
using des = go.crypto.des_package;
using hmac = go.crypto.hmac_package;
using rc4 = go.crypto.rc4_package;
using sha1 = go.crypto.sha1_package;
using sha256 = go.crypto.sha256_package;
using x509 = go.crypto.x509_package;
using fmt = go.fmt_package;
using hash = go.hash_package;
using chacha20poly1305 = go.golang.org.x.crypto.chacha20poly1305_package;
using go;

#pragma warning disable CS0660, CS0661

namespace go {
namespace crypto
{
    public static partial class tls_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial interface macFunction
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static macFunction As<T>(in T target) => (macFunction<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static macFunction As<T>(ptr<T> target_ptr) => (macFunction<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static macFunction? As(object target) =>
                typeof(macFunction<>).CreateInterfaceHandler<macFunction>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private class macFunction<T> : macFunction
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public macFunction(in T target) => m_target = target;

            public macFunction(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate slice<byte> SizeByPtr(ptr<T> value);
            private delegate slice<byte> SizeByVal(T value);

            private static readonly SizeByPtr s_SizeByPtr;
            private static readonly SizeByVal s_SizeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public slice<byte> Size()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_SizeByPtr is null || !m_target_is_ptr)
                    return s_SizeByVal!(target);

                return s_SizeByPtr(m_target_ptr);
            }

            private delegate slice<byte> MACByPtr(ptr<T> value, slice<byte> seq, slice<byte> header, slice<byte> data, slice<byte> extra);
            private delegate slice<byte> MACByVal(T value, slice<byte> seq, slice<byte> header, slice<byte> data, slice<byte> extra);

            private static readonly MACByPtr s_MACByPtr;
            private static readonly MACByVal s_MACByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public slice<byte> MAC(slice<byte> seq, slice<byte> header, slice<byte> data, slice<byte> extra)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_MACByPtr is null || !m_target_is_ptr)
                    return s_MACByVal!(target, seq, header, data, extra);

                return s_MACByPtr(m_target_ptr, seq, header, data, extra);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static macFunction()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Size");

                if (!(extensionMethod is null))
                    s_SizeByPtr = extensionMethod.CreateStaticDelegate(typeof(SizeByPtr)) as SizeByPtr;

                extensionMethod = targetType.GetExtensionMethod("Size");

                if (!(extensionMethod is null))
                    s_SizeByVal = extensionMethod.CreateStaticDelegate(typeof(SizeByVal)) as SizeByVal;

                if (s_SizeByPtr is null && s_SizeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement macFunction.Size method", new Exception("Size"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("MAC");

                if (!(extensionMethod is null))
                    s_MACByPtr = extensionMethod.CreateStaticDelegate(typeof(MACByPtr)) as MACByPtr;

                extensionMethod = targetType.GetExtensionMethod("MAC");

                if (!(extensionMethod is null))
                    s_MACByVal = extensionMethod.CreateStaticDelegate(typeof(MACByVal)) as MACByVal;

                if (s_MACByPtr is null && s_MACByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement macFunction.MAC method", new Exception("MAC"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator macFunction<T>(in ptr<T> target_ptr) => new macFunction<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator macFunction<T>(in T target) => new macFunction<T>(target);

            // Enable comparisons between nil and macFunction<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(macFunction<T> value, NilType nil) => Activator.CreateInstance<macFunction<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(macFunction<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, macFunction<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, macFunction<T> value) => value != nil;
        }
    }
}}

namespace go
{
    public static class tls_macFunctionExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.crypto.tls_package.macFunction target)
        {
            try
            {
                return ((go.crypto.tls_package.macFunction<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.crypto.tls_package.macFunction target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.crypto.tls_package.macFunction target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.crypto.tls_package.macFunction<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.crypto.tls_package.macFunction target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}