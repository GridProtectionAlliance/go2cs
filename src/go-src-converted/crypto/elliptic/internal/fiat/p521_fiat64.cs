// Code generated by Fiat Cryptography. DO NOT EDIT.
//
// Autogenerated: 'fiat-crypto/src/ExtractionOCaml/unsaturated_solinas' --lang Go --no-wide-int --cmovznz-by-mul --internal-static --public-function-case camelCase --public-type-case camelCase --private-function-case camelCase --private-type-case camelCase --no-prefix-fiat --package-name fiat --doc-text-before-function-name '' --doc-prepend-header 'Code generated by Fiat Cryptography. DO NOT EDIT.' --doc-newline-before-package-declaration p521 64 9 '2^521 - 1' carry_mul carry_square carry add sub to_bytes from_bytes selectznz
//
// curve description: p521
//
// machine_wordsize = 64 (from "64")
//
// requested operations: carry_mul, carry_square, carry, add, sub, to_bytes, from_bytes, selectznz
//
// n = 9 (from "9")
//
// s-c = 2^521 - [(1, 1)] (from "2^521 - 1")
//
// tight_bounds_multiplier = 1 (from "")
//
//
//
// Computed values:
//
//   carry_chain = [0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1]
//
//   eval z = z[0] + (z[1] << 58) + (z[2] << 116) + (z[3] << 174) + (z[4] << 232) + (z[5] << 0x122) + (z[6] << 0x15c) + (z[7] << 0x196) + (z[8] << 0x1d0)
//
//   bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184) + (z[24] << 192) + (z[25] << 200) + (z[26] << 208) + (z[27] << 216) + (z[28] << 224) + (z[29] << 232) + (z[30] << 240) + (z[31] << 248) + (z[32] << 256) + (z[33] << 0x108) + (z[34] << 0x110) + (z[35] << 0x118) + (z[36] << 0x120) + (z[37] << 0x128) + (z[38] << 0x130) + (z[39] << 0x138) + (z[40] << 0x140) + (z[41] << 0x148) + (z[42] << 0x150) + (z[43] << 0x158) + (z[44] << 0x160) + (z[45] << 0x168) + (z[46] << 0x170) + (z[47] << 0x178) + (z[48] << 0x180) + (z[49] << 0x188) + (z[50] << 0x190) + (z[51] << 0x198) + (z[52] << 0x1a0) + (z[53] << 0x1a8) + (z[54] << 0x1b0) + (z[55] << 0x1b8) + (z[56] << 0x1c0) + (z[57] << 0x1c8) + (z[58] << 0x1d0) + (z[59] << 0x1d8) + (z[60] << 0x1e0) + (z[61] << 0x1e8) + (z[62] << 0x1f0) + (z[63] << 0x1f8) + (z[64] << 2^9) + (z[65] << 0x208)
//
//   balance = [0x7fffffffffffffe, 0x7fffffffffffffe, 0x7fffffffffffffe, 0x7fffffffffffffe, 0x7fffffffffffffe, 0x7fffffffffffffe, 0x7fffffffffffffe, 0x7fffffffffffffe, 0x3fffffffffffffe]

// package fiat -- go2cs converted at 2022 March 13 05:34:13 UTC
// import "crypto/elliptic/internal/fiat" ==> using fiat = go.crypto.elliptic.@internal.fiat_package
// Original source: C:\Program Files\Go\src\crypto\elliptic\internal\fiat\p521_fiat64.go
namespace go.crypto.elliptic.@internal;

using bits = math.bits_package;

public static partial class fiat_package {

private partial struct p521Uint1 { // : byte
}
private partial struct p521Int1 { // : sbyte
}

// p521AddcarryxU64 is a thin wrapper around bits.Add64 that uses p521Uint1 rather than uint64
private static (ulong, p521Uint1) p521AddcarryxU64(ulong x, ulong y, p521Uint1 carry) {
    ulong _p0 = default;
    p521Uint1 _p0 = default;

    var (sum, carryOut) = bits.Add64(x, y, uint64(carry));
    return (sum, p521Uint1(carryOut));
}

// p521SubborrowxU64 is a thin wrapper around bits.Sub64 that uses p521Uint1 rather than uint64
private static (ulong, p521Uint1) p521SubborrowxU64(ulong x, ulong y, p521Uint1 carry) {
    ulong _p0 = default;
    p521Uint1 _p0 = default;

    var (sum, carryOut) = bits.Sub64(x, y, uint64(carry));
    return (sum, p521Uint1(carryOut));
}

// p521AddcarryxU58 is an addition with carry.
//
// Postconditions:
//   out1 = (arg1 + arg2 + arg3) mod 2^58
//   out2 = ⌊(arg1 + arg2 + arg3) / 2^58⌋
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [0x0 ~> 0x3ffffffffffffff]
//   arg3: [0x0 ~> 0x3ffffffffffffff]
// Output Bounds:
//   out1: [0x0 ~> 0x3ffffffffffffff]
//   out2: [0x0 ~> 0x1]
private static void p521AddcarryxU58(ptr<ulong> _addr_out1, ptr<p521Uint1> _addr_out2, p521Uint1 arg1, ulong arg2, ulong arg3) {
    ref ulong out1 = ref _addr_out1.val;
    ref p521Uint1 out2 = ref _addr_out2.val;

    var x1 = ((uint64(arg1) + arg2) + arg3);
    var x2 = (x1 & 0x3ffffffffffffff);
    var x3 = p521Uint1((x1 >> 58));
    out1 = x2;
    out2 = x3;
}

// p521SubborrowxU58 is a subtraction with borrow.
//
// Postconditions:
//   out1 = (-arg1 + arg2 + -arg3) mod 2^58
//   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^58⌋
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [0x0 ~> 0x3ffffffffffffff]
//   arg3: [0x0 ~> 0x3ffffffffffffff]
// Output Bounds:
//   out1: [0x0 ~> 0x3ffffffffffffff]
//   out2: [0x0 ~> 0x1]
private static void p521SubborrowxU58(ptr<ulong> _addr_out1, ptr<p521Uint1> _addr_out2, p521Uint1 arg1, ulong arg2, ulong arg3) {
    ref ulong out1 = ref _addr_out1.val;
    ref p521Uint1 out2 = ref _addr_out2.val;

    var x1 = ((int64(arg2) - int64(arg1)) - int64(arg3));
    var x2 = p521Int1((x1 >> 58));
    var x3 = (uint64(x1) & 0x3ffffffffffffff);
    out1 = x3;
    out2 = (0x0 - p521Uint1(x2));
}

// p521AddcarryxU57 is an addition with carry.
//
// Postconditions:
//   out1 = (arg1 + arg2 + arg3) mod 2^57
//   out2 = ⌊(arg1 + arg2 + arg3) / 2^57⌋
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [0x0 ~> 0x1ffffffffffffff]
//   arg3: [0x0 ~> 0x1ffffffffffffff]
// Output Bounds:
//   out1: [0x0 ~> 0x1ffffffffffffff]
//   out2: [0x0 ~> 0x1]
private static void p521AddcarryxU57(ptr<ulong> _addr_out1, ptr<p521Uint1> _addr_out2, p521Uint1 arg1, ulong arg2, ulong arg3) {
    ref ulong out1 = ref _addr_out1.val;
    ref p521Uint1 out2 = ref _addr_out2.val;

    var x1 = ((uint64(arg1) + arg2) + arg3);
    var x2 = (x1 & 0x1ffffffffffffff);
    var x3 = p521Uint1((x1 >> 57));
    out1 = x2;
    out2 = x3;
}

// p521SubborrowxU57 is a subtraction with borrow.
//
// Postconditions:
//   out1 = (-arg1 + arg2 + -arg3) mod 2^57
//   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^57⌋
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [0x0 ~> 0x1ffffffffffffff]
//   arg3: [0x0 ~> 0x1ffffffffffffff]
// Output Bounds:
//   out1: [0x0 ~> 0x1ffffffffffffff]
//   out2: [0x0 ~> 0x1]
private static void p521SubborrowxU57(ptr<ulong> _addr_out1, ptr<p521Uint1> _addr_out2, p521Uint1 arg1, ulong arg2, ulong arg3) {
    ref ulong out1 = ref _addr_out1.val;
    ref p521Uint1 out2 = ref _addr_out2.val;

    var x1 = ((int64(arg2) - int64(arg1)) - int64(arg3));
    var x2 = p521Int1((x1 >> 57));
    var x3 = (uint64(x1) & 0x1ffffffffffffff);
    out1 = x3;
    out2 = (0x0 - p521Uint1(x2));
}

// p521CmovznzU64 is a single-word conditional move.
//
// Postconditions:
//   out1 = (if arg1 = 0 then arg2 else arg3)
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [0x0 ~> 0xffffffffffffffff]
//   arg3: [0x0 ~> 0xffffffffffffffff]
// Output Bounds:
//   out1: [0x0 ~> 0xffffffffffffffff]
private static void p521CmovznzU64(ptr<ulong> _addr_out1, p521Uint1 arg1, ulong arg2, ulong arg3) {
    ref ulong out1 = ref _addr_out1.val;

    var x1 = (uint64(arg1) * 0xffffffffffffffff);
    var x2 = ((x1 & arg3) | ((~x1) & arg2));
    out1 = x2;
}

// p521CarryMul multiplies two field elements and reduces the result.
//
// Postconditions:
//   eval out1 mod m = (eval arg1 * eval arg2) mod m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0x600000000000000]]
//   arg2: [[0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0x600000000000000]]
// Output Bounds:
//   out1: [[0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x200000000000000]]
private static void p521CarryMul(ptr<array<ulong>> _addr_out1, ptr<array<ulong>> _addr_arg1, ptr<array<ulong>> _addr_arg2) {
    ref array<ulong> out1 = ref _addr_out1.val;
    ref array<ulong> arg1 = ref _addr_arg1.val;
    ref array<ulong> arg2 = ref _addr_arg2.val;

    ulong x1 = default;
    ulong x2 = default;
    x2, x1 = bits.Mul64(arg1[8], (arg2[8] * 0x2));
    ulong x3 = default;
    ulong x4 = default;
    x4, x3 = bits.Mul64(arg1[8], (arg2[7] * 0x2));
    ulong x5 = default;
    ulong x6 = default;
    x6, x5 = bits.Mul64(arg1[8], (arg2[6] * 0x2));
    ulong x7 = default;
    ulong x8 = default;
    x8, x7 = bits.Mul64(arg1[8], (arg2[5] * 0x2));
    ulong x9 = default;
    ulong x10 = default;
    x10, x9 = bits.Mul64(arg1[8], (arg2[4] * 0x2));
    ulong x11 = default;
    ulong x12 = default;
    x12, x11 = bits.Mul64(arg1[8], (arg2[3] * 0x2));
    ulong x13 = default;
    ulong x14 = default;
    x14, x13 = bits.Mul64(arg1[8], (arg2[2] * 0x2));
    ulong x15 = default;
    ulong x16 = default;
    x16, x15 = bits.Mul64(arg1[8], (arg2[1] * 0x2));
    ulong x17 = default;
    ulong x18 = default;
    x18, x17 = bits.Mul64(arg1[7], (arg2[8] * 0x2));
    ulong x19 = default;
    ulong x20 = default;
    x20, x19 = bits.Mul64(arg1[7], (arg2[7] * 0x2));
    ulong x21 = default;
    ulong x22 = default;
    x22, x21 = bits.Mul64(arg1[7], (arg2[6] * 0x2));
    ulong x23 = default;
    ulong x24 = default;
    x24, x23 = bits.Mul64(arg1[7], (arg2[5] * 0x2));
    ulong x25 = default;
    ulong x26 = default;
    x26, x25 = bits.Mul64(arg1[7], (arg2[4] * 0x2));
    ulong x27 = default;
    ulong x28 = default;
    x28, x27 = bits.Mul64(arg1[7], (arg2[3] * 0x2));
    ulong x29 = default;
    ulong x30 = default;
    x30, x29 = bits.Mul64(arg1[7], (arg2[2] * 0x2));
    ulong x31 = default;
    ulong x32 = default;
    x32, x31 = bits.Mul64(arg1[6], (arg2[8] * 0x2));
    ulong x33 = default;
    ulong x34 = default;
    x34, x33 = bits.Mul64(arg1[6], (arg2[7] * 0x2));
    ulong x35 = default;
    ulong x36 = default;
    x36, x35 = bits.Mul64(arg1[6], (arg2[6] * 0x2));
    ulong x37 = default;
    ulong x38 = default;
    x38, x37 = bits.Mul64(arg1[6], (arg2[5] * 0x2));
    ulong x39 = default;
    ulong x40 = default;
    x40, x39 = bits.Mul64(arg1[6], (arg2[4] * 0x2));
    ulong x41 = default;
    ulong x42 = default;
    x42, x41 = bits.Mul64(arg1[6], (arg2[3] * 0x2));
    ulong x43 = default;
    ulong x44 = default;
    x44, x43 = bits.Mul64(arg1[5], (arg2[8] * 0x2));
    ulong x45 = default;
    ulong x46 = default;
    x46, x45 = bits.Mul64(arg1[5], (arg2[7] * 0x2));
    ulong x47 = default;
    ulong x48 = default;
    x48, x47 = bits.Mul64(arg1[5], (arg2[6] * 0x2));
    ulong x49 = default;
    ulong x50 = default;
    x50, x49 = bits.Mul64(arg1[5], (arg2[5] * 0x2));
    ulong x51 = default;
    ulong x52 = default;
    x52, x51 = bits.Mul64(arg1[5], (arg2[4] * 0x2));
    ulong x53 = default;
    ulong x54 = default;
    x54, x53 = bits.Mul64(arg1[4], (arg2[8] * 0x2));
    ulong x55 = default;
    ulong x56 = default;
    x56, x55 = bits.Mul64(arg1[4], (arg2[7] * 0x2));
    ulong x57 = default;
    ulong x58 = default;
    x58, x57 = bits.Mul64(arg1[4], (arg2[6] * 0x2));
    ulong x59 = default;
    ulong x60 = default;
    x60, x59 = bits.Mul64(arg1[4], (arg2[5] * 0x2));
    ulong x61 = default;
    ulong x62 = default;
    x62, x61 = bits.Mul64(arg1[3], (arg2[8] * 0x2));
    ulong x63 = default;
    ulong x64 = default;
    x64, x63 = bits.Mul64(arg1[3], (arg2[7] * 0x2));
    ulong x65 = default;
    ulong x66 = default;
    x66, x65 = bits.Mul64(arg1[3], (arg2[6] * 0x2));
    ulong x67 = default;
    ulong x68 = default;
    x68, x67 = bits.Mul64(arg1[2], (arg2[8] * 0x2));
    ulong x69 = default;
    ulong x70 = default;
    x70, x69 = bits.Mul64(arg1[2], (arg2[7] * 0x2));
    ulong x71 = default;
    ulong x72 = default;
    x72, x71 = bits.Mul64(arg1[1], (arg2[8] * 0x2));
    ulong x73 = default;
    ulong x74 = default;
    x74, x73 = bits.Mul64(arg1[8], arg2[0]);
    ulong x75 = default;
    ulong x76 = default;
    x76, x75 = bits.Mul64(arg1[7], arg2[1]);
    ulong x77 = default;
    ulong x78 = default;
    x78, x77 = bits.Mul64(arg1[7], arg2[0]);
    ulong x79 = default;
    ulong x80 = default;
    x80, x79 = bits.Mul64(arg1[6], arg2[2]);
    ulong x81 = default;
    ulong x82 = default;
    x82, x81 = bits.Mul64(arg1[6], arg2[1]);
    ulong x83 = default;
    ulong x84 = default;
    x84, x83 = bits.Mul64(arg1[6], arg2[0]);
    ulong x85 = default;
    ulong x86 = default;
    x86, x85 = bits.Mul64(arg1[5], arg2[3]);
    ulong x87 = default;
    ulong x88 = default;
    x88, x87 = bits.Mul64(arg1[5], arg2[2]);
    ulong x89 = default;
    ulong x90 = default;
    x90, x89 = bits.Mul64(arg1[5], arg2[1]);
    ulong x91 = default;
    ulong x92 = default;
    x92, x91 = bits.Mul64(arg1[5], arg2[0]);
    ulong x93 = default;
    ulong x94 = default;
    x94, x93 = bits.Mul64(arg1[4], arg2[4]);
    ulong x95 = default;
    ulong x96 = default;
    x96, x95 = bits.Mul64(arg1[4], arg2[3]);
    ulong x97 = default;
    ulong x98 = default;
    x98, x97 = bits.Mul64(arg1[4], arg2[2]);
    ulong x99 = default;
    ulong x100 = default;
    x100, x99 = bits.Mul64(arg1[4], arg2[1]);
    ulong x101 = default;
    ulong x102 = default;
    x102, x101 = bits.Mul64(arg1[4], arg2[0]);
    ulong x103 = default;
    ulong x104 = default;
    x104, x103 = bits.Mul64(arg1[3], arg2[5]);
    ulong x105 = default;
    ulong x106 = default;
    x106, x105 = bits.Mul64(arg1[3], arg2[4]);
    ulong x107 = default;
    ulong x108 = default;
    x108, x107 = bits.Mul64(arg1[3], arg2[3]);
    ulong x109 = default;
    ulong x110 = default;
    x110, x109 = bits.Mul64(arg1[3], arg2[2]);
    ulong x111 = default;
    ulong x112 = default;
    x112, x111 = bits.Mul64(arg1[3], arg2[1]);
    ulong x113 = default;
    ulong x114 = default;
    x114, x113 = bits.Mul64(arg1[3], arg2[0]);
    ulong x115 = default;
    ulong x116 = default;
    x116, x115 = bits.Mul64(arg1[2], arg2[6]);
    ulong x117 = default;
    ulong x118 = default;
    x118, x117 = bits.Mul64(arg1[2], arg2[5]);
    ulong x119 = default;
    ulong x120 = default;
    x120, x119 = bits.Mul64(arg1[2], arg2[4]);
    ulong x121 = default;
    ulong x122 = default;
    x122, x121 = bits.Mul64(arg1[2], arg2[3]);
    ulong x123 = default;
    ulong x124 = default;
    x124, x123 = bits.Mul64(arg1[2], arg2[2]);
    ulong x125 = default;
    ulong x126 = default;
    x126, x125 = bits.Mul64(arg1[2], arg2[1]);
    ulong x127 = default;
    ulong x128 = default;
    x128, x127 = bits.Mul64(arg1[2], arg2[0]);
    ulong x129 = default;
    ulong x130 = default;
    x130, x129 = bits.Mul64(arg1[1], arg2[7]);
    ulong x131 = default;
    ulong x132 = default;
    x132, x131 = bits.Mul64(arg1[1], arg2[6]);
    ulong x133 = default;
    ulong x134 = default;
    x134, x133 = bits.Mul64(arg1[1], arg2[5]);
    ulong x135 = default;
    ulong x136 = default;
    x136, x135 = bits.Mul64(arg1[1], arg2[4]);
    ulong x137 = default;
    ulong x138 = default;
    x138, x137 = bits.Mul64(arg1[1], arg2[3]);
    ulong x139 = default;
    ulong x140 = default;
    x140, x139 = bits.Mul64(arg1[1], arg2[2]);
    ulong x141 = default;
    ulong x142 = default;
    x142, x141 = bits.Mul64(arg1[1], arg2[1]);
    ulong x143 = default;
    ulong x144 = default;
    x144, x143 = bits.Mul64(arg1[1], arg2[0]);
    ulong x145 = default;
    ulong x146 = default;
    x146, x145 = bits.Mul64(arg1[0], arg2[8]);
    ulong x147 = default;
    ulong x148 = default;
    x148, x147 = bits.Mul64(arg1[0], arg2[7]);
    ulong x149 = default;
    ulong x150 = default;
    x150, x149 = bits.Mul64(arg1[0], arg2[6]);
    ulong x151 = default;
    ulong x152 = default;
    x152, x151 = bits.Mul64(arg1[0], arg2[5]);
    ulong x153 = default;
    ulong x154 = default;
    x154, x153 = bits.Mul64(arg1[0], arg2[4]);
    ulong x155 = default;
    ulong x156 = default;
    x156, x155 = bits.Mul64(arg1[0], arg2[3]);
    ulong x157 = default;
    ulong x158 = default;
    x158, x157 = bits.Mul64(arg1[0], arg2[2]);
    ulong x159 = default;
    ulong x160 = default;
    x160, x159 = bits.Mul64(arg1[0], arg2[1]);
    ulong x161 = default;
    ulong x162 = default;
    x162, x161 = bits.Mul64(arg1[0], arg2[0]);
    ulong x163 = default;
    p521Uint1 x164 = default;
    x163, x164 = p521AddcarryxU64(x29, x15, 0x0);
    ulong x165 = default;
    x165, _ = p521AddcarryxU64(x30, x16, x164);
    ulong x167 = default;
    p521Uint1 x168 = default;
    x167, x168 = p521AddcarryxU64(x41, x163, 0x0);
    ulong x169 = default;
    x169, _ = p521AddcarryxU64(x42, x165, x168);
    ulong x171 = default;
    p521Uint1 x172 = default;
    x171, x172 = p521AddcarryxU64(x51, x167, 0x0);
    ulong x173 = default;
    x173, _ = p521AddcarryxU64(x52, x169, x172);
    ulong x175 = default;
    p521Uint1 x176 = default;
    x175, x176 = p521AddcarryxU64(x59, x171, 0x0);
    ulong x177 = default;
    x177, _ = p521AddcarryxU64(x60, x173, x176);
    ulong x179 = default;
    p521Uint1 x180 = default;
    x179, x180 = p521AddcarryxU64(x65, x175, 0x0);
    ulong x181 = default;
    x181, _ = p521AddcarryxU64(x66, x177, x180);
    ulong x183 = default;
    p521Uint1 x184 = default;
    x183, x184 = p521AddcarryxU64(x69, x179, 0x0);
    ulong x185 = default;
    x185, _ = p521AddcarryxU64(x70, x181, x184);
    ulong x187 = default;
    p521Uint1 x188 = default;
    x187, x188 = p521AddcarryxU64(x71, x183, 0x0);
    ulong x189 = default;
    x189, _ = p521AddcarryxU64(x72, x185, x188);
    ulong x191 = default;
    p521Uint1 x192 = default;
    x191, x192 = p521AddcarryxU64(x161, x187, 0x0);
    ulong x193 = default;
    x193, _ = p521AddcarryxU64(x162, x189, x192);
    var x195 = ((x191 >> 58) | ((x193 << 6) & 0xffffffffffffffff));
    var x196 = (x193 >> 58);
    var x197 = (x191 & 0x3ffffffffffffff);
    ulong x198 = default;
    p521Uint1 x199 = default;
    x198, x199 = p521AddcarryxU64(x75, x73, 0x0);
    ulong x200 = default;
    x200, _ = p521AddcarryxU64(x76, x74, x199);
    ulong x202 = default;
    p521Uint1 x203 = default;
    x202, x203 = p521AddcarryxU64(x79, x198, 0x0);
    ulong x204 = default;
    x204, _ = p521AddcarryxU64(x80, x200, x203);
    ulong x206 = default;
    p521Uint1 x207 = default;
    x206, x207 = p521AddcarryxU64(x85, x202, 0x0);
    ulong x208 = default;
    x208, _ = p521AddcarryxU64(x86, x204, x207);
    ulong x210 = default;
    p521Uint1 x211 = default;
    x210, x211 = p521AddcarryxU64(x93, x206, 0x0);
    ulong x212 = default;
    x212, _ = p521AddcarryxU64(x94, x208, x211);
    ulong x214 = default;
    p521Uint1 x215 = default;
    x214, x215 = p521AddcarryxU64(x103, x210, 0x0);
    ulong x216 = default;
    x216, _ = p521AddcarryxU64(x104, x212, x215);
    ulong x218 = default;
    p521Uint1 x219 = default;
    x218, x219 = p521AddcarryxU64(x115, x214, 0x0);
    ulong x220 = default;
    x220, _ = p521AddcarryxU64(x116, x216, x219);
    ulong x222 = default;
    p521Uint1 x223 = default;
    x222, x223 = p521AddcarryxU64(x129, x218, 0x0);
    ulong x224 = default;
    x224, _ = p521AddcarryxU64(x130, x220, x223);
    ulong x226 = default;
    p521Uint1 x227 = default;
    x226, x227 = p521AddcarryxU64(x145, x222, 0x0);
    ulong x228 = default;
    x228, _ = p521AddcarryxU64(x146, x224, x227);
    ulong x230 = default;
    p521Uint1 x231 = default;
    x230, x231 = p521AddcarryxU64(x77, x1, 0x0);
    ulong x232 = default;
    x232, _ = p521AddcarryxU64(x78, x2, x231);
    ulong x234 = default;
    p521Uint1 x235 = default;
    x234, x235 = p521AddcarryxU64(x81, x230, 0x0);
    ulong x236 = default;
    x236, _ = p521AddcarryxU64(x82, x232, x235);
    ulong x238 = default;
    p521Uint1 x239 = default;
    x238, x239 = p521AddcarryxU64(x87, x234, 0x0);
    ulong x240 = default;
    x240, _ = p521AddcarryxU64(x88, x236, x239);
    ulong x242 = default;
    p521Uint1 x243 = default;
    x242, x243 = p521AddcarryxU64(x95, x238, 0x0);
    ulong x244 = default;
    x244, _ = p521AddcarryxU64(x96, x240, x243);
    ulong x246 = default;
    p521Uint1 x247 = default;
    x246, x247 = p521AddcarryxU64(x105, x242, 0x0);
    ulong x248 = default;
    x248, _ = p521AddcarryxU64(x106, x244, x247);
    ulong x250 = default;
    p521Uint1 x251 = default;
    x250, x251 = p521AddcarryxU64(x117, x246, 0x0);
    ulong x252 = default;
    x252, _ = p521AddcarryxU64(x118, x248, x251);
    ulong x254 = default;
    p521Uint1 x255 = default;
    x254, x255 = p521AddcarryxU64(x131, x250, 0x0);
    ulong x256 = default;
    x256, _ = p521AddcarryxU64(x132, x252, x255);
    ulong x258 = default;
    p521Uint1 x259 = default;
    x258, x259 = p521AddcarryxU64(x147, x254, 0x0);
    ulong x260 = default;
    x260, _ = p521AddcarryxU64(x148, x256, x259);
    ulong x262 = default;
    p521Uint1 x263 = default;
    x262, x263 = p521AddcarryxU64(x17, x3, 0x0);
    ulong x264 = default;
    x264, _ = p521AddcarryxU64(x18, x4, x263);
    ulong x266 = default;
    p521Uint1 x267 = default;
    x266, x267 = p521AddcarryxU64(x83, x262, 0x0);
    ulong x268 = default;
    x268, _ = p521AddcarryxU64(x84, x264, x267);
    ulong x270 = default;
    p521Uint1 x271 = default;
    x270, x271 = p521AddcarryxU64(x89, x266, 0x0);
    ulong x272 = default;
    x272, _ = p521AddcarryxU64(x90, x268, x271);
    ulong x274 = default;
    p521Uint1 x275 = default;
    x274, x275 = p521AddcarryxU64(x97, x270, 0x0);
    ulong x276 = default;
    x276, _ = p521AddcarryxU64(x98, x272, x275);
    ulong x278 = default;
    p521Uint1 x279 = default;
    x278, x279 = p521AddcarryxU64(x107, x274, 0x0);
    ulong x280 = default;
    x280, _ = p521AddcarryxU64(x108, x276, x279);
    ulong x282 = default;
    p521Uint1 x283 = default;
    x282, x283 = p521AddcarryxU64(x119, x278, 0x0);
    ulong x284 = default;
    x284, _ = p521AddcarryxU64(x120, x280, x283);
    ulong x286 = default;
    p521Uint1 x287 = default;
    x286, x287 = p521AddcarryxU64(x133, x282, 0x0);
    ulong x288 = default;
    x288, _ = p521AddcarryxU64(x134, x284, x287);
    ulong x290 = default;
    p521Uint1 x291 = default;
    x290, x291 = p521AddcarryxU64(x149, x286, 0x0);
    ulong x292 = default;
    x292, _ = p521AddcarryxU64(x150, x288, x291);
    ulong x294 = default;
    p521Uint1 x295 = default;
    x294, x295 = p521AddcarryxU64(x19, x5, 0x0);
    ulong x296 = default;
    x296, _ = p521AddcarryxU64(x20, x6, x295);
    ulong x298 = default;
    p521Uint1 x299 = default;
    x298, x299 = p521AddcarryxU64(x31, x294, 0x0);
    ulong x300 = default;
    x300, _ = p521AddcarryxU64(x32, x296, x299);
    ulong x302 = default;
    p521Uint1 x303 = default;
    x302, x303 = p521AddcarryxU64(x91, x298, 0x0);
    ulong x304 = default;
    x304, _ = p521AddcarryxU64(x92, x300, x303);
    ulong x306 = default;
    p521Uint1 x307 = default;
    x306, x307 = p521AddcarryxU64(x99, x302, 0x0);
    ulong x308 = default;
    x308, _ = p521AddcarryxU64(x100, x304, x307);
    ulong x310 = default;
    p521Uint1 x311 = default;
    x310, x311 = p521AddcarryxU64(x109, x306, 0x0);
    ulong x312 = default;
    x312, _ = p521AddcarryxU64(x110, x308, x311);
    ulong x314 = default;
    p521Uint1 x315 = default;
    x314, x315 = p521AddcarryxU64(x121, x310, 0x0);
    ulong x316 = default;
    x316, _ = p521AddcarryxU64(x122, x312, x315);
    ulong x318 = default;
    p521Uint1 x319 = default;
    x318, x319 = p521AddcarryxU64(x135, x314, 0x0);
    ulong x320 = default;
    x320, _ = p521AddcarryxU64(x136, x316, x319);
    ulong x322 = default;
    p521Uint1 x323 = default;
    x322, x323 = p521AddcarryxU64(x151, x318, 0x0);
    ulong x324 = default;
    x324, _ = p521AddcarryxU64(x152, x320, x323);
    ulong x326 = default;
    p521Uint1 x327 = default;
    x326, x327 = p521AddcarryxU64(x21, x7, 0x0);
    ulong x328 = default;
    x328, _ = p521AddcarryxU64(x22, x8, x327);
    ulong x330 = default;
    p521Uint1 x331 = default;
    x330, x331 = p521AddcarryxU64(x33, x326, 0x0);
    ulong x332 = default;
    x332, _ = p521AddcarryxU64(x34, x328, x331);
    ulong x334 = default;
    p521Uint1 x335 = default;
    x334, x335 = p521AddcarryxU64(x43, x330, 0x0);
    ulong x336 = default;
    x336, _ = p521AddcarryxU64(x44, x332, x335);
    ulong x338 = default;
    p521Uint1 x339 = default;
    x338, x339 = p521AddcarryxU64(x101, x334, 0x0);
    ulong x340 = default;
    x340, _ = p521AddcarryxU64(x102, x336, x339);
    ulong x342 = default;
    p521Uint1 x343 = default;
    x342, x343 = p521AddcarryxU64(x111, x338, 0x0);
    ulong x344 = default;
    x344, _ = p521AddcarryxU64(x112, x340, x343);
    ulong x346 = default;
    p521Uint1 x347 = default;
    x346, x347 = p521AddcarryxU64(x123, x342, 0x0);
    ulong x348 = default;
    x348, _ = p521AddcarryxU64(x124, x344, x347);
    ulong x350 = default;
    p521Uint1 x351 = default;
    x350, x351 = p521AddcarryxU64(x137, x346, 0x0);
    ulong x352 = default;
    x352, _ = p521AddcarryxU64(x138, x348, x351);
    ulong x354 = default;
    p521Uint1 x355 = default;
    x354, x355 = p521AddcarryxU64(x153, x350, 0x0);
    ulong x356 = default;
    x356, _ = p521AddcarryxU64(x154, x352, x355);
    ulong x358 = default;
    p521Uint1 x359 = default;
    x358, x359 = p521AddcarryxU64(x23, x9, 0x0);
    ulong x360 = default;
    x360, _ = p521AddcarryxU64(x24, x10, x359);
    ulong x362 = default;
    p521Uint1 x363 = default;
    x362, x363 = p521AddcarryxU64(x35, x358, 0x0);
    ulong x364 = default;
    x364, _ = p521AddcarryxU64(x36, x360, x363);
    ulong x366 = default;
    p521Uint1 x367 = default;
    x366, x367 = p521AddcarryxU64(x45, x362, 0x0);
    ulong x368 = default;
    x368, _ = p521AddcarryxU64(x46, x364, x367);
    ulong x370 = default;
    p521Uint1 x371 = default;
    x370, x371 = p521AddcarryxU64(x53, x366, 0x0);
    ulong x372 = default;
    x372, _ = p521AddcarryxU64(x54, x368, x371);
    ulong x374 = default;
    p521Uint1 x375 = default;
    x374, x375 = p521AddcarryxU64(x113, x370, 0x0);
    ulong x376 = default;
    x376, _ = p521AddcarryxU64(x114, x372, x375);
    ulong x378 = default;
    p521Uint1 x379 = default;
    x378, x379 = p521AddcarryxU64(x125, x374, 0x0);
    ulong x380 = default;
    x380, _ = p521AddcarryxU64(x126, x376, x379);
    ulong x382 = default;
    p521Uint1 x383 = default;
    x382, x383 = p521AddcarryxU64(x139, x378, 0x0);
    ulong x384 = default;
    x384, _ = p521AddcarryxU64(x140, x380, x383);
    ulong x386 = default;
    p521Uint1 x387 = default;
    x386, x387 = p521AddcarryxU64(x155, x382, 0x0);
    ulong x388 = default;
    x388, _ = p521AddcarryxU64(x156, x384, x387);
    ulong x390 = default;
    p521Uint1 x391 = default;
    x390, x391 = p521AddcarryxU64(x25, x11, 0x0);
    ulong x392 = default;
    x392, _ = p521AddcarryxU64(x26, x12, x391);
    ulong x394 = default;
    p521Uint1 x395 = default;
    x394, x395 = p521AddcarryxU64(x37, x390, 0x0);
    ulong x396 = default;
    x396, _ = p521AddcarryxU64(x38, x392, x395);
    ulong x398 = default;
    p521Uint1 x399 = default;
    x398, x399 = p521AddcarryxU64(x47, x394, 0x0);
    ulong x400 = default;
    x400, _ = p521AddcarryxU64(x48, x396, x399);
    ulong x402 = default;
    p521Uint1 x403 = default;
    x402, x403 = p521AddcarryxU64(x55, x398, 0x0);
    ulong x404 = default;
    x404, _ = p521AddcarryxU64(x56, x400, x403);
    ulong x406 = default;
    p521Uint1 x407 = default;
    x406, x407 = p521AddcarryxU64(x61, x402, 0x0);
    ulong x408 = default;
    x408, _ = p521AddcarryxU64(x62, x404, x407);
    ulong x410 = default;
    p521Uint1 x411 = default;
    x410, x411 = p521AddcarryxU64(x127, x406, 0x0);
    ulong x412 = default;
    x412, _ = p521AddcarryxU64(x128, x408, x411);
    ulong x414 = default;
    p521Uint1 x415 = default;
    x414, x415 = p521AddcarryxU64(x141, x410, 0x0);
    ulong x416 = default;
    x416, _ = p521AddcarryxU64(x142, x412, x415);
    ulong x418 = default;
    p521Uint1 x419 = default;
    x418, x419 = p521AddcarryxU64(x157, x414, 0x0);
    ulong x420 = default;
    x420, _ = p521AddcarryxU64(x158, x416, x419);
    ulong x422 = default;
    p521Uint1 x423 = default;
    x422, x423 = p521AddcarryxU64(x27, x13, 0x0);
    ulong x424 = default;
    x424, _ = p521AddcarryxU64(x28, x14, x423);
    ulong x426 = default;
    p521Uint1 x427 = default;
    x426, x427 = p521AddcarryxU64(x39, x422, 0x0);
    ulong x428 = default;
    x428, _ = p521AddcarryxU64(x40, x424, x427);
    ulong x430 = default;
    p521Uint1 x431 = default;
    x430, x431 = p521AddcarryxU64(x49, x426, 0x0);
    ulong x432 = default;
    x432, _ = p521AddcarryxU64(x50, x428, x431);
    ulong x434 = default;
    p521Uint1 x435 = default;
    x434, x435 = p521AddcarryxU64(x57, x430, 0x0);
    ulong x436 = default;
    x436, _ = p521AddcarryxU64(x58, x432, x435);
    ulong x438 = default;
    p521Uint1 x439 = default;
    x438, x439 = p521AddcarryxU64(x63, x434, 0x0);
    ulong x440 = default;
    x440, _ = p521AddcarryxU64(x64, x436, x439);
    ulong x442 = default;
    p521Uint1 x443 = default;
    x442, x443 = p521AddcarryxU64(x67, x438, 0x0);
    ulong x444 = default;
    x444, _ = p521AddcarryxU64(x68, x440, x443);
    ulong x446 = default;
    p521Uint1 x447 = default;
    x446, x447 = p521AddcarryxU64(x143, x442, 0x0);
    ulong x448 = default;
    x448, _ = p521AddcarryxU64(x144, x444, x447);
    ulong x450 = default;
    p521Uint1 x451 = default;
    x450, x451 = p521AddcarryxU64(x159, x446, 0x0);
    ulong x452 = default;
    x452, _ = p521AddcarryxU64(x160, x448, x451);
    ulong x454 = default;
    p521Uint1 x455 = default;
    x454, x455 = p521AddcarryxU64(x195, x450, 0x0);
    ulong x456 = default;
    x456, _ = p521AddcarryxU64(x196, x452, x455);
    var x458 = ((x454 >> 58) | ((x456 << 6) & 0xffffffffffffffff));
    var x459 = (x456 >> 58);
    var x460 = (x454 & 0x3ffffffffffffff);
    ulong x461 = default;
    p521Uint1 x462 = default;
    x461, x462 = p521AddcarryxU64(x458, x418, 0x0);
    ulong x463 = default;
    x463, _ = p521AddcarryxU64(x459, x420, x462);
    var x465 = ((x461 >> 58) | ((x463 << 6) & 0xffffffffffffffff));
    var x466 = (x463 >> 58);
    var x467 = (x461 & 0x3ffffffffffffff);
    ulong x468 = default;
    p521Uint1 x469 = default;
    x468, x469 = p521AddcarryxU64(x465, x386, 0x0);
    ulong x470 = default;
    x470, _ = p521AddcarryxU64(x466, x388, x469);
    var x472 = ((x468 >> 58) | ((x470 << 6) & 0xffffffffffffffff));
    var x473 = (x470 >> 58);
    var x474 = (x468 & 0x3ffffffffffffff);
    ulong x475 = default;
    p521Uint1 x476 = default;
    x475, x476 = p521AddcarryxU64(x472, x354, 0x0);
    ulong x477 = default;
    x477, _ = p521AddcarryxU64(x473, x356, x476);
    var x479 = ((x475 >> 58) | ((x477 << 6) & 0xffffffffffffffff));
    var x480 = (x477 >> 58);
    var x481 = (x475 & 0x3ffffffffffffff);
    ulong x482 = default;
    p521Uint1 x483 = default;
    x482, x483 = p521AddcarryxU64(x479, x322, 0x0);
    ulong x484 = default;
    x484, _ = p521AddcarryxU64(x480, x324, x483);
    var x486 = ((x482 >> 58) | ((x484 << 6) & 0xffffffffffffffff));
    var x487 = (x484 >> 58);
    var x488 = (x482 & 0x3ffffffffffffff);
    ulong x489 = default;
    p521Uint1 x490 = default;
    x489, x490 = p521AddcarryxU64(x486, x290, 0x0);
    ulong x491 = default;
    x491, _ = p521AddcarryxU64(x487, x292, x490);
    var x493 = ((x489 >> 58) | ((x491 << 6) & 0xffffffffffffffff));
    var x494 = (x491 >> 58);
    var x495 = (x489 & 0x3ffffffffffffff);
    ulong x496 = default;
    p521Uint1 x497 = default;
    x496, x497 = p521AddcarryxU64(x493, x258, 0x0);
    ulong x498 = default;
    x498, _ = p521AddcarryxU64(x494, x260, x497);
    var x500 = ((x496 >> 58) | ((x498 << 6) & 0xffffffffffffffff));
    var x501 = (x498 >> 58);
    var x502 = (x496 & 0x3ffffffffffffff);
    ulong x503 = default;
    p521Uint1 x504 = default;
    x503, x504 = p521AddcarryxU64(x500, x226, 0x0);
    ulong x505 = default;
    x505, _ = p521AddcarryxU64(x501, x228, x504);
    var x507 = ((x503 >> 57) | ((x505 << 7) & 0xffffffffffffffff));
    var x508 = (x505 >> 57);
    var x509 = (x503 & 0x1ffffffffffffff);
    ulong x510 = default;
    p521Uint1 x511 = default;
    x510, x511 = p521AddcarryxU64(x197, x507, 0x0);
    var x512 = (uint64(x511) + x508);
    var x513 = ((x510 >> 58) | ((x512 << 6) & 0xffffffffffffffff));
    var x514 = (x510 & 0x3ffffffffffffff);
    var x515 = (x513 + x460);
    var x516 = p521Uint1((x515 >> 58));
    var x517 = (x515 & 0x3ffffffffffffff);
    var x518 = (uint64(x516) + x467);
    out1[0] = x514;
    out1[1] = x517;
    out1[2] = x518;
    out1[3] = x474;
    out1[4] = x481;
    out1[5] = x488;
    out1[6] = x495;
    out1[7] = x502;
    out1[8] = x509;
}

// p521CarrySquare squares a field element and reduces the result.
//
// Postconditions:
//   eval out1 mod m = (eval arg1 * eval arg1) mod m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0x600000000000000]]
// Output Bounds:
//   out1: [[0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x200000000000000]]
private static void p521CarrySquare(ptr<array<ulong>> _addr_out1, ptr<array<ulong>> _addr_arg1) {
    ref array<ulong> out1 = ref _addr_out1.val;
    ref array<ulong> arg1 = ref _addr_arg1.val;

    var x1 = arg1[8];
    var x2 = (x1 * 0x2);
    var x3 = (arg1[8] * 0x2);
    var x4 = arg1[7];
    var x5 = (x4 * 0x2);
    var x6 = (arg1[7] * 0x2);
    var x7 = arg1[6];
    var x8 = (x7 * 0x2);
    var x9 = (arg1[6] * 0x2);
    var x10 = arg1[5];
    var x11 = (x10 * 0x2);
    var x12 = (arg1[5] * 0x2);
    var x13 = (arg1[4] * 0x2);
    var x14 = (arg1[3] * 0x2);
    var x15 = (arg1[2] * 0x2);
    var x16 = (arg1[1] * 0x2);
    ulong x17 = default;
    ulong x18 = default;
    x18, x17 = bits.Mul64(arg1[8], (x1 * 0x2));
    ulong x19 = default;
    ulong x20 = default;
    x20, x19 = bits.Mul64(arg1[7], (x2 * 0x2));
    ulong x21 = default;
    ulong x22 = default;
    x22, x21 = bits.Mul64(arg1[7], (x4 * 0x2));
    ulong x23 = default;
    ulong x24 = default;
    x24, x23 = bits.Mul64(arg1[6], (x2 * 0x2));
    ulong x25 = default;
    ulong x26 = default;
    x26, x25 = bits.Mul64(arg1[6], (x5 * 0x2));
    ulong x27 = default;
    ulong x28 = default;
    x28, x27 = bits.Mul64(arg1[6], (x7 * 0x2));
    ulong x29 = default;
    ulong x30 = default;
    x30, x29 = bits.Mul64(arg1[5], (x2 * 0x2));
    ulong x31 = default;
    ulong x32 = default;
    x32, x31 = bits.Mul64(arg1[5], (x5 * 0x2));
    ulong x33 = default;
    ulong x34 = default;
    x34, x33 = bits.Mul64(arg1[5], (x8 * 0x2));
    ulong x35 = default;
    ulong x36 = default;
    x36, x35 = bits.Mul64(arg1[5], (x10 * 0x2));
    ulong x37 = default;
    ulong x38 = default;
    x38, x37 = bits.Mul64(arg1[4], (x2 * 0x2));
    ulong x39 = default;
    ulong x40 = default;
    x40, x39 = bits.Mul64(arg1[4], (x5 * 0x2));
    ulong x41 = default;
    ulong x42 = default;
    x42, x41 = bits.Mul64(arg1[4], (x8 * 0x2));
    ulong x43 = default;
    ulong x44 = default;
    x44, x43 = bits.Mul64(arg1[4], (x11 * 0x2));
    ulong x45 = default;
    ulong x46 = default;
    x46, x45 = bits.Mul64(arg1[4], arg1[4]);
    ulong x47 = default;
    ulong x48 = default;
    x48, x47 = bits.Mul64(arg1[3], (x2 * 0x2));
    ulong x49 = default;
    ulong x50 = default;
    x50, x49 = bits.Mul64(arg1[3], (x5 * 0x2));
    ulong x51 = default;
    ulong x52 = default;
    x52, x51 = bits.Mul64(arg1[3], (x8 * 0x2));
    ulong x53 = default;
    ulong x54 = default;
    x54, x53 = bits.Mul64(arg1[3], x12);
    ulong x55 = default;
    ulong x56 = default;
    x56, x55 = bits.Mul64(arg1[3], x13);
    ulong x57 = default;
    ulong x58 = default;
    x58, x57 = bits.Mul64(arg1[3], arg1[3]);
    ulong x59 = default;
    ulong x60 = default;
    x60, x59 = bits.Mul64(arg1[2], (x2 * 0x2));
    ulong x61 = default;
    ulong x62 = default;
    x62, x61 = bits.Mul64(arg1[2], (x5 * 0x2));
    ulong x63 = default;
    ulong x64 = default;
    x64, x63 = bits.Mul64(arg1[2], x9);
    ulong x65 = default;
    ulong x66 = default;
    x66, x65 = bits.Mul64(arg1[2], x12);
    ulong x67 = default;
    ulong x68 = default;
    x68, x67 = bits.Mul64(arg1[2], x13);
    ulong x69 = default;
    ulong x70 = default;
    x70, x69 = bits.Mul64(arg1[2], x14);
    ulong x71 = default;
    ulong x72 = default;
    x72, x71 = bits.Mul64(arg1[2], arg1[2]);
    ulong x73 = default;
    ulong x74 = default;
    x74, x73 = bits.Mul64(arg1[1], (x2 * 0x2));
    ulong x75 = default;
    ulong x76 = default;
    x76, x75 = bits.Mul64(arg1[1], x6);
    ulong x77 = default;
    ulong x78 = default;
    x78, x77 = bits.Mul64(arg1[1], x9);
    ulong x79 = default;
    ulong x80 = default;
    x80, x79 = bits.Mul64(arg1[1], x12);
    ulong x81 = default;
    ulong x82 = default;
    x82, x81 = bits.Mul64(arg1[1], x13);
    ulong x83 = default;
    ulong x84 = default;
    x84, x83 = bits.Mul64(arg1[1], x14);
    ulong x85 = default;
    ulong x86 = default;
    x86, x85 = bits.Mul64(arg1[1], x15);
    ulong x87 = default;
    ulong x88 = default;
    x88, x87 = bits.Mul64(arg1[1], arg1[1]);
    ulong x89 = default;
    ulong x90 = default;
    x90, x89 = bits.Mul64(arg1[0], x3);
    ulong x91 = default;
    ulong x92 = default;
    x92, x91 = bits.Mul64(arg1[0], x6);
    ulong x93 = default;
    ulong x94 = default;
    x94, x93 = bits.Mul64(arg1[0], x9);
    ulong x95 = default;
    ulong x96 = default;
    x96, x95 = bits.Mul64(arg1[0], x12);
    ulong x97 = default;
    ulong x98 = default;
    x98, x97 = bits.Mul64(arg1[0], x13);
    ulong x99 = default;
    ulong x100 = default;
    x100, x99 = bits.Mul64(arg1[0], x14);
    ulong x101 = default;
    ulong x102 = default;
    x102, x101 = bits.Mul64(arg1[0], x15);
    ulong x103 = default;
    ulong x104 = default;
    x104, x103 = bits.Mul64(arg1[0], x16);
    ulong x105 = default;
    ulong x106 = default;
    x106, x105 = bits.Mul64(arg1[0], arg1[0]);
    ulong x107 = default;
    p521Uint1 x108 = default;
    x107, x108 = p521AddcarryxU64(x51, x43, 0x0);
    ulong x109 = default;
    x109, _ = p521AddcarryxU64(x52, x44, x108);
    ulong x111 = default;
    p521Uint1 x112 = default;
    x111, x112 = p521AddcarryxU64(x61, x107, 0x0);
    ulong x113 = default;
    x113, _ = p521AddcarryxU64(x62, x109, x112);
    ulong x115 = default;
    p521Uint1 x116 = default;
    x115, x116 = p521AddcarryxU64(x73, x111, 0x0);
    ulong x117 = default;
    x117, _ = p521AddcarryxU64(x74, x113, x116);
    ulong x119 = default;
    p521Uint1 x120 = default;
    x119, x120 = p521AddcarryxU64(x105, x115, 0x0);
    ulong x121 = default;
    x121, _ = p521AddcarryxU64(x106, x117, x120);
    var x123 = ((x119 >> 58) | ((x121 << 6) & 0xffffffffffffffff));
    var x124 = (x121 >> 58);
    var x125 = (x119 & 0x3ffffffffffffff);
    ulong x126 = default;
    p521Uint1 x127 = default;
    x126, x127 = p521AddcarryxU64(x53, x45, 0x0);
    ulong x128 = default;
    x128, _ = p521AddcarryxU64(x54, x46, x127);
    ulong x130 = default;
    p521Uint1 x131 = default;
    x130, x131 = p521AddcarryxU64(x63, x126, 0x0);
    ulong x132 = default;
    x132, _ = p521AddcarryxU64(x64, x128, x131);
    ulong x134 = default;
    p521Uint1 x135 = default;
    x134, x135 = p521AddcarryxU64(x75, x130, 0x0);
    ulong x136 = default;
    x136, _ = p521AddcarryxU64(x76, x132, x135);
    ulong x138 = default;
    p521Uint1 x139 = default;
    x138, x139 = p521AddcarryxU64(x89, x134, 0x0);
    ulong x140 = default;
    x140, _ = p521AddcarryxU64(x90, x136, x139);
    ulong x142 = default;
    p521Uint1 x143 = default;
    x142, x143 = p521AddcarryxU64(x55, x17, 0x0);
    ulong x144 = default;
    x144, _ = p521AddcarryxU64(x56, x18, x143);
    ulong x146 = default;
    p521Uint1 x147 = default;
    x146, x147 = p521AddcarryxU64(x65, x142, 0x0);
    ulong x148 = default;
    x148, _ = p521AddcarryxU64(x66, x144, x147);
    ulong x150 = default;
    p521Uint1 x151 = default;
    x150, x151 = p521AddcarryxU64(x77, x146, 0x0);
    ulong x152 = default;
    x152, _ = p521AddcarryxU64(x78, x148, x151);
    ulong x154 = default;
    p521Uint1 x155 = default;
    x154, x155 = p521AddcarryxU64(x91, x150, 0x0);
    ulong x156 = default;
    x156, _ = p521AddcarryxU64(x92, x152, x155);
    ulong x158 = default;
    p521Uint1 x159 = default;
    x158, x159 = p521AddcarryxU64(x57, x19, 0x0);
    ulong x160 = default;
    x160, _ = p521AddcarryxU64(x58, x20, x159);
    ulong x162 = default;
    p521Uint1 x163 = default;
    x162, x163 = p521AddcarryxU64(x67, x158, 0x0);
    ulong x164 = default;
    x164, _ = p521AddcarryxU64(x68, x160, x163);
    ulong x166 = default;
    p521Uint1 x167 = default;
    x166, x167 = p521AddcarryxU64(x79, x162, 0x0);
    ulong x168 = default;
    x168, _ = p521AddcarryxU64(x80, x164, x167);
    ulong x170 = default;
    p521Uint1 x171 = default;
    x170, x171 = p521AddcarryxU64(x93, x166, 0x0);
    ulong x172 = default;
    x172, _ = p521AddcarryxU64(x94, x168, x171);
    ulong x174 = default;
    p521Uint1 x175 = default;
    x174, x175 = p521AddcarryxU64(x23, x21, 0x0);
    ulong x176 = default;
    x176, _ = p521AddcarryxU64(x24, x22, x175);
    ulong x178 = default;
    p521Uint1 x179 = default;
    x178, x179 = p521AddcarryxU64(x69, x174, 0x0);
    ulong x180 = default;
    x180, _ = p521AddcarryxU64(x70, x176, x179);
    ulong x182 = default;
    p521Uint1 x183 = default;
    x182, x183 = p521AddcarryxU64(x81, x178, 0x0);
    ulong x184 = default;
    x184, _ = p521AddcarryxU64(x82, x180, x183);
    ulong x186 = default;
    p521Uint1 x187 = default;
    x186, x187 = p521AddcarryxU64(x95, x182, 0x0);
    ulong x188 = default;
    x188, _ = p521AddcarryxU64(x96, x184, x187);
    ulong x190 = default;
    p521Uint1 x191 = default;
    x190, x191 = p521AddcarryxU64(x29, x25, 0x0);
    ulong x192 = default;
    x192, _ = p521AddcarryxU64(x30, x26, x191);
    ulong x194 = default;
    p521Uint1 x195 = default;
    x194, x195 = p521AddcarryxU64(x71, x190, 0x0);
    ulong x196 = default;
    x196, _ = p521AddcarryxU64(x72, x192, x195);
    ulong x198 = default;
    p521Uint1 x199 = default;
    x198, x199 = p521AddcarryxU64(x83, x194, 0x0);
    ulong x200 = default;
    x200, _ = p521AddcarryxU64(x84, x196, x199);
    ulong x202 = default;
    p521Uint1 x203 = default;
    x202, x203 = p521AddcarryxU64(x97, x198, 0x0);
    ulong x204 = default;
    x204, _ = p521AddcarryxU64(x98, x200, x203);
    ulong x206 = default;
    p521Uint1 x207 = default;
    x206, x207 = p521AddcarryxU64(x31, x27, 0x0);
    ulong x208 = default;
    x208, _ = p521AddcarryxU64(x32, x28, x207);
    ulong x210 = default;
    p521Uint1 x211 = default;
    x210, x211 = p521AddcarryxU64(x37, x206, 0x0);
    ulong x212 = default;
    x212, _ = p521AddcarryxU64(x38, x208, x211);
    ulong x214 = default;
    p521Uint1 x215 = default;
    x214, x215 = p521AddcarryxU64(x85, x210, 0x0);
    ulong x216 = default;
    x216, _ = p521AddcarryxU64(x86, x212, x215);
    ulong x218 = default;
    p521Uint1 x219 = default;
    x218, x219 = p521AddcarryxU64(x99, x214, 0x0);
    ulong x220 = default;
    x220, _ = p521AddcarryxU64(x100, x216, x219);
    ulong x222 = default;
    p521Uint1 x223 = default;
    x222, x223 = p521AddcarryxU64(x39, x33, 0x0);
    ulong x224 = default;
    x224, _ = p521AddcarryxU64(x40, x34, x223);
    ulong x226 = default;
    p521Uint1 x227 = default;
    x226, x227 = p521AddcarryxU64(x47, x222, 0x0);
    ulong x228 = default;
    x228, _ = p521AddcarryxU64(x48, x224, x227);
    ulong x230 = default;
    p521Uint1 x231 = default;
    x230, x231 = p521AddcarryxU64(x87, x226, 0x0);
    ulong x232 = default;
    x232, _ = p521AddcarryxU64(x88, x228, x231);
    ulong x234 = default;
    p521Uint1 x235 = default;
    x234, x235 = p521AddcarryxU64(x101, x230, 0x0);
    ulong x236 = default;
    x236, _ = p521AddcarryxU64(x102, x232, x235);
    ulong x238 = default;
    p521Uint1 x239 = default;
    x238, x239 = p521AddcarryxU64(x41, x35, 0x0);
    ulong x240 = default;
    x240, _ = p521AddcarryxU64(x42, x36, x239);
    ulong x242 = default;
    p521Uint1 x243 = default;
    x242, x243 = p521AddcarryxU64(x49, x238, 0x0);
    ulong x244 = default;
    x244, _ = p521AddcarryxU64(x50, x240, x243);
    ulong x246 = default;
    p521Uint1 x247 = default;
    x246, x247 = p521AddcarryxU64(x59, x242, 0x0);
    ulong x248 = default;
    x248, _ = p521AddcarryxU64(x60, x244, x247);
    ulong x250 = default;
    p521Uint1 x251 = default;
    x250, x251 = p521AddcarryxU64(x103, x246, 0x0);
    ulong x252 = default;
    x252, _ = p521AddcarryxU64(x104, x248, x251);
    ulong x254 = default;
    p521Uint1 x255 = default;
    x254, x255 = p521AddcarryxU64(x123, x250, 0x0);
    ulong x256 = default;
    x256, _ = p521AddcarryxU64(x124, x252, x255);
    var x258 = ((x254 >> 58) | ((x256 << 6) & 0xffffffffffffffff));
    var x259 = (x256 >> 58);
    var x260 = (x254 & 0x3ffffffffffffff);
    ulong x261 = default;
    p521Uint1 x262 = default;
    x261, x262 = p521AddcarryxU64(x258, x234, 0x0);
    ulong x263 = default;
    x263, _ = p521AddcarryxU64(x259, x236, x262);
    var x265 = ((x261 >> 58) | ((x263 << 6) & 0xffffffffffffffff));
    var x266 = (x263 >> 58);
    var x267 = (x261 & 0x3ffffffffffffff);
    ulong x268 = default;
    p521Uint1 x269 = default;
    x268, x269 = p521AddcarryxU64(x265, x218, 0x0);
    ulong x270 = default;
    x270, _ = p521AddcarryxU64(x266, x220, x269);
    var x272 = ((x268 >> 58) | ((x270 << 6) & 0xffffffffffffffff));
    var x273 = (x270 >> 58);
    var x274 = (x268 & 0x3ffffffffffffff);
    ulong x275 = default;
    p521Uint1 x276 = default;
    x275, x276 = p521AddcarryxU64(x272, x202, 0x0);
    ulong x277 = default;
    x277, _ = p521AddcarryxU64(x273, x204, x276);
    var x279 = ((x275 >> 58) | ((x277 << 6) & 0xffffffffffffffff));
    var x280 = (x277 >> 58);
    var x281 = (x275 & 0x3ffffffffffffff);
    ulong x282 = default;
    p521Uint1 x283 = default;
    x282, x283 = p521AddcarryxU64(x279, x186, 0x0);
    ulong x284 = default;
    x284, _ = p521AddcarryxU64(x280, x188, x283);
    var x286 = ((x282 >> 58) | ((x284 << 6) & 0xffffffffffffffff));
    var x287 = (x284 >> 58);
    var x288 = (x282 & 0x3ffffffffffffff);
    ulong x289 = default;
    p521Uint1 x290 = default;
    x289, x290 = p521AddcarryxU64(x286, x170, 0x0);
    ulong x291 = default;
    x291, _ = p521AddcarryxU64(x287, x172, x290);
    var x293 = ((x289 >> 58) | ((x291 << 6) & 0xffffffffffffffff));
    var x294 = (x291 >> 58);
    var x295 = (x289 & 0x3ffffffffffffff);
    ulong x296 = default;
    p521Uint1 x297 = default;
    x296, x297 = p521AddcarryxU64(x293, x154, 0x0);
    ulong x298 = default;
    x298, _ = p521AddcarryxU64(x294, x156, x297);
    var x300 = ((x296 >> 58) | ((x298 << 6) & 0xffffffffffffffff));
    var x301 = (x298 >> 58);
    var x302 = (x296 & 0x3ffffffffffffff);
    ulong x303 = default;
    p521Uint1 x304 = default;
    x303, x304 = p521AddcarryxU64(x300, x138, 0x0);
    ulong x305 = default;
    x305, _ = p521AddcarryxU64(x301, x140, x304);
    var x307 = ((x303 >> 57) | ((x305 << 7) & 0xffffffffffffffff));
    var x308 = (x305 >> 57);
    var x309 = (x303 & 0x1ffffffffffffff);
    ulong x310 = default;
    p521Uint1 x311 = default;
    x310, x311 = p521AddcarryxU64(x125, x307, 0x0);
    var x312 = (uint64(x311) + x308);
    var x313 = ((x310 >> 58) | ((x312 << 6) & 0xffffffffffffffff));
    var x314 = (x310 & 0x3ffffffffffffff);
    var x315 = (x313 + x260);
    var x316 = p521Uint1((x315 >> 58));
    var x317 = (x315 & 0x3ffffffffffffff);
    var x318 = (uint64(x316) + x267);
    out1[0] = x314;
    out1[1] = x317;
    out1[2] = x318;
    out1[3] = x274;
    out1[4] = x281;
    out1[5] = x288;
    out1[6] = x295;
    out1[7] = x302;
    out1[8] = x309;
}

// p521Carry reduces a field element.
//
// Postconditions:
//   eval out1 mod m = eval arg1 mod m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0x600000000000000]]
// Output Bounds:
//   out1: [[0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x200000000000000]]
private static void p521Carry(ptr<array<ulong>> _addr_out1, ptr<array<ulong>> _addr_arg1) {
    ref array<ulong> out1 = ref _addr_out1.val;
    ref array<ulong> arg1 = ref _addr_arg1.val;

    var x1 = arg1[0];
    var x2 = ((x1 >> 58) + arg1[1]);
    var x3 = ((x2 >> 58) + arg1[2]);
    var x4 = ((x3 >> 58) + arg1[3]);
    var x5 = ((x4 >> 58) + arg1[4]);
    var x6 = ((x5 >> 58) + arg1[5]);
    var x7 = ((x6 >> 58) + arg1[6]);
    var x8 = ((x7 >> 58) + arg1[7]);
    var x9 = ((x8 >> 58) + arg1[8]);
    var x10 = ((x1 & 0x3ffffffffffffff) + (x9 >> 57));
    var x11 = (uint64(p521Uint1((x10 >> 58))) + (x2 & 0x3ffffffffffffff));
    var x12 = (x10 & 0x3ffffffffffffff);
    var x13 = (x11 & 0x3ffffffffffffff);
    var x14 = (uint64(p521Uint1((x11 >> 58))) + (x3 & 0x3ffffffffffffff));
    var x15 = (x4 & 0x3ffffffffffffff);
    var x16 = (x5 & 0x3ffffffffffffff);
    var x17 = (x6 & 0x3ffffffffffffff);
    var x18 = (x7 & 0x3ffffffffffffff);
    var x19 = (x8 & 0x3ffffffffffffff);
    var x20 = (x9 & 0x1ffffffffffffff);
    out1[0] = x12;
    out1[1] = x13;
    out1[2] = x14;
    out1[3] = x15;
    out1[4] = x16;
    out1[5] = x17;
    out1[6] = x18;
    out1[7] = x19;
    out1[8] = x20;
}

// p521Add adds two field elements.
//
// Postconditions:
//   eval out1 mod m = (eval arg1 + eval arg2) mod m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x200000000000000]]
//   arg2: [[0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x200000000000000]]
// Output Bounds:
//   out1: [[0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0x600000000000000]]
private static void p521Add(ptr<array<ulong>> _addr_out1, ptr<array<ulong>> _addr_arg1, ptr<array<ulong>> _addr_arg2) {
    ref array<ulong> out1 = ref _addr_out1.val;
    ref array<ulong> arg1 = ref _addr_arg1.val;
    ref array<ulong> arg2 = ref _addr_arg2.val;

    var x1 = (arg1[0] + arg2[0]);
    var x2 = (arg1[1] + arg2[1]);
    var x3 = (arg1[2] + arg2[2]);
    var x4 = (arg1[3] + arg2[3]);
    var x5 = (arg1[4] + arg2[4]);
    var x6 = (arg1[5] + arg2[5]);
    var x7 = (arg1[6] + arg2[6]);
    var x8 = (arg1[7] + arg2[7]);
    var x9 = (arg1[8] + arg2[8]);
    out1[0] = x1;
    out1[1] = x2;
    out1[2] = x3;
    out1[3] = x4;
    out1[4] = x5;
    out1[5] = x6;
    out1[6] = x7;
    out1[7] = x8;
    out1[8] = x9;
}

// p521Sub subtracts two field elements.
//
// Postconditions:
//   eval out1 mod m = (eval arg1 - eval arg2) mod m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x200000000000000]]
//   arg2: [[0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x200000000000000]]
// Output Bounds:
//   out1: [[0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0x600000000000000]]
private static void p521Sub(ptr<array<ulong>> _addr_out1, ptr<array<ulong>> _addr_arg1, ptr<array<ulong>> _addr_arg2) {
    ref array<ulong> out1 = ref _addr_out1.val;
    ref array<ulong> arg1 = ref _addr_arg1.val;
    ref array<ulong> arg2 = ref _addr_arg2.val;

    nuint x1 = ((0x7fffffffffffffe + arg1[0]) - arg2[0]);
    nuint x2 = ((0x7fffffffffffffe + arg1[1]) - arg2[1]);
    nuint x3 = ((0x7fffffffffffffe + arg1[2]) - arg2[2]);
    nuint x4 = ((0x7fffffffffffffe + arg1[3]) - arg2[3]);
    nuint x5 = ((0x7fffffffffffffe + arg1[4]) - arg2[4]);
    nuint x6 = ((0x7fffffffffffffe + arg1[5]) - arg2[5]);
    nuint x7 = ((0x7fffffffffffffe + arg1[6]) - arg2[6]);
    nuint x8 = ((0x7fffffffffffffe + arg1[7]) - arg2[7]);
    nuint x9 = ((0x3fffffffffffffe + arg1[8]) - arg2[8]);
    out1[0] = x1;
    out1[1] = x2;
    out1[2] = x3;
    out1[3] = x4;
    out1[4] = x5;
    out1[5] = x6;
    out1[6] = x7;
    out1[7] = x8;
    out1[8] = x9;
}

// p521ToBytes serializes a field element to bytes in little-endian order.
//
// Postconditions:
//   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..65]
//
// Input Bounds:
//   arg1: [[0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x200000000000000]]
// Output Bounds:
//   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x1]]
private static void p521ToBytes(ptr<array<byte>> _addr_out1, ptr<array<ulong>> _addr_arg1) {
    ref array<byte> out1 = ref _addr_out1.val;
    ref array<ulong> arg1 = ref _addr_arg1.val;

    ref ulong x1 = ref heap(out ptr<ulong> _addr_x1);
    ref p521Uint1 x2 = ref heap(out ptr<p521Uint1> _addr_x2);
    p521SubborrowxU58(_addr_x1, _addr_x2, 0x0, arg1[0], 0x3ffffffffffffff);
    ref ulong x3 = ref heap(out ptr<ulong> _addr_x3);
    ref p521Uint1 x4 = ref heap(out ptr<p521Uint1> _addr_x4);
    p521SubborrowxU58(_addr_x3, _addr_x4, x2, arg1[1], 0x3ffffffffffffff);
    ref ulong x5 = ref heap(out ptr<ulong> _addr_x5);
    ref p521Uint1 x6 = ref heap(out ptr<p521Uint1> _addr_x6);
    p521SubborrowxU58(_addr_x5, _addr_x6, x4, arg1[2], 0x3ffffffffffffff);
    ref ulong x7 = ref heap(out ptr<ulong> _addr_x7);
    ref p521Uint1 x8 = ref heap(out ptr<p521Uint1> _addr_x8);
    p521SubborrowxU58(_addr_x7, _addr_x8, x6, arg1[3], 0x3ffffffffffffff);
    ref ulong x9 = ref heap(out ptr<ulong> _addr_x9);
    ref p521Uint1 x10 = ref heap(out ptr<p521Uint1> _addr_x10);
    p521SubborrowxU58(_addr_x9, _addr_x10, x8, arg1[4], 0x3ffffffffffffff);
    ref ulong x11 = ref heap(out ptr<ulong> _addr_x11);
    ref p521Uint1 x12 = ref heap(out ptr<p521Uint1> _addr_x12);
    p521SubborrowxU58(_addr_x11, _addr_x12, x10, arg1[5], 0x3ffffffffffffff);
    ref ulong x13 = ref heap(out ptr<ulong> _addr_x13);
    ref p521Uint1 x14 = ref heap(out ptr<p521Uint1> _addr_x14);
    p521SubborrowxU58(_addr_x13, _addr_x14, x12, arg1[6], 0x3ffffffffffffff);
    ref ulong x15 = ref heap(out ptr<ulong> _addr_x15);
    ref p521Uint1 x16 = ref heap(out ptr<p521Uint1> _addr_x16);
    p521SubborrowxU58(_addr_x15, _addr_x16, x14, arg1[7], 0x3ffffffffffffff);
    ref ulong x17 = ref heap(out ptr<ulong> _addr_x17);
    ref p521Uint1 x18 = ref heap(out ptr<p521Uint1> _addr_x18);
    p521SubborrowxU57(_addr_x17, _addr_x18, x16, arg1[8], 0x1ffffffffffffff);
    ref ulong x19 = ref heap(out ptr<ulong> _addr_x19);
    p521CmovznzU64(_addr_x19, x18, uint64(0x0), 0xffffffffffffffff);
    ref ulong x20 = ref heap(out ptr<ulong> _addr_x20);
    ref p521Uint1 x21 = ref heap(out ptr<p521Uint1> _addr_x21);
    p521AddcarryxU58(_addr_x20, _addr_x21, 0x0, x1, (x19 & 0x3ffffffffffffff));
    ref ulong x22 = ref heap(out ptr<ulong> _addr_x22);
    ref p521Uint1 x23 = ref heap(out ptr<p521Uint1> _addr_x23);
    p521AddcarryxU58(_addr_x22, _addr_x23, x21, x3, (x19 & 0x3ffffffffffffff));
    ref ulong x24 = ref heap(out ptr<ulong> _addr_x24);
    ref p521Uint1 x25 = ref heap(out ptr<p521Uint1> _addr_x25);
    p521AddcarryxU58(_addr_x24, _addr_x25, x23, x5, (x19 & 0x3ffffffffffffff));
    ref ulong x26 = ref heap(out ptr<ulong> _addr_x26);
    ref p521Uint1 x27 = ref heap(out ptr<p521Uint1> _addr_x27);
    p521AddcarryxU58(_addr_x26, _addr_x27, x25, x7, (x19 & 0x3ffffffffffffff));
    ref ulong x28 = ref heap(out ptr<ulong> _addr_x28);
    ref p521Uint1 x29 = ref heap(out ptr<p521Uint1> _addr_x29);
    p521AddcarryxU58(_addr_x28, _addr_x29, x27, x9, (x19 & 0x3ffffffffffffff));
    ref ulong x30 = ref heap(out ptr<ulong> _addr_x30);
    ref p521Uint1 x31 = ref heap(out ptr<p521Uint1> _addr_x31);
    p521AddcarryxU58(_addr_x30, _addr_x31, x29, x11, (x19 & 0x3ffffffffffffff));
    ref ulong x32 = ref heap(out ptr<ulong> _addr_x32);
    ref p521Uint1 x33 = ref heap(out ptr<p521Uint1> _addr_x33);
    p521AddcarryxU58(_addr_x32, _addr_x33, x31, x13, (x19 & 0x3ffffffffffffff));
    ref ulong x34 = ref heap(out ptr<ulong> _addr_x34);
    ref p521Uint1 x35 = ref heap(out ptr<p521Uint1> _addr_x35);
    p521AddcarryxU58(_addr_x34, _addr_x35, x33, x15, (x19 & 0x3ffffffffffffff));
    ref ulong x36 = ref heap(out ptr<ulong> _addr_x36);
    ref p521Uint1 x37 = ref heap(out ptr<p521Uint1> _addr_x37);
    p521AddcarryxU57(_addr_x36, _addr_x37, x35, x17, (x19 & 0x1ffffffffffffff));
    var x38 = (x34 << 6);
    var x39 = (x32 << 4);
    var x40 = (x30 << 2);
    var x41 = (x26 << 6);
    var x42 = (x24 << 4);
    var x43 = (x22 << 2);
    var x44 = (uint8(x20) & 0xff);
    var x45 = (x20 >> 8);
    var x46 = (uint8(x45) & 0xff);
    var x47 = (x45 >> 8);
    var x48 = (uint8(x47) & 0xff);
    var x49 = (x47 >> 8);
    var x50 = (uint8(x49) & 0xff);
    var x51 = (x49 >> 8);
    var x52 = (uint8(x51) & 0xff);
    var x53 = (x51 >> 8);
    var x54 = (uint8(x53) & 0xff);
    var x55 = (x53 >> 8);
    var x56 = (uint8(x55) & 0xff);
    var x57 = uint8((x55 >> 8));
    var x58 = (x43 + uint64(x57));
    var x59 = (uint8(x58) & 0xff);
    var x60 = (x58 >> 8);
    var x61 = (uint8(x60) & 0xff);
    var x62 = (x60 >> 8);
    var x63 = (uint8(x62) & 0xff);
    var x64 = (x62 >> 8);
    var x65 = (uint8(x64) & 0xff);
    var x66 = (x64 >> 8);
    var x67 = (uint8(x66) & 0xff);
    var x68 = (x66 >> 8);
    var x69 = (uint8(x68) & 0xff);
    var x70 = (x68 >> 8);
    var x71 = (uint8(x70) & 0xff);
    var x72 = uint8((x70 >> 8));
    var x73 = (x42 + uint64(x72));
    var x74 = (uint8(x73) & 0xff);
    var x75 = (x73 >> 8);
    var x76 = (uint8(x75) & 0xff);
    var x77 = (x75 >> 8);
    var x78 = (uint8(x77) & 0xff);
    var x79 = (x77 >> 8);
    var x80 = (uint8(x79) & 0xff);
    var x81 = (x79 >> 8);
    var x82 = (uint8(x81) & 0xff);
    var x83 = (x81 >> 8);
    var x84 = (uint8(x83) & 0xff);
    var x85 = (x83 >> 8);
    var x86 = (uint8(x85) & 0xff);
    var x87 = uint8((x85 >> 8));
    var x88 = (x41 + uint64(x87));
    var x89 = (uint8(x88) & 0xff);
    var x90 = (x88 >> 8);
    var x91 = (uint8(x90) & 0xff);
    var x92 = (x90 >> 8);
    var x93 = (uint8(x92) & 0xff);
    var x94 = (x92 >> 8);
    var x95 = (uint8(x94) & 0xff);
    var x96 = (x94 >> 8);
    var x97 = (uint8(x96) & 0xff);
    var x98 = (x96 >> 8);
    var x99 = (uint8(x98) & 0xff);
    var x100 = (x98 >> 8);
    var x101 = (uint8(x100) & 0xff);
    var x102 = uint8((x100 >> 8));
    var x103 = (uint8(x28) & 0xff);
    var x104 = (x28 >> 8);
    var x105 = (uint8(x104) & 0xff);
    var x106 = (x104 >> 8);
    var x107 = (uint8(x106) & 0xff);
    var x108 = (x106 >> 8);
    var x109 = (uint8(x108) & 0xff);
    var x110 = (x108 >> 8);
    var x111 = (uint8(x110) & 0xff);
    var x112 = (x110 >> 8);
    var x113 = (uint8(x112) & 0xff);
    var x114 = (x112 >> 8);
    var x115 = (uint8(x114) & 0xff);
    var x116 = uint8((x114 >> 8));
    var x117 = (x40 + uint64(x116));
    var x118 = (uint8(x117) & 0xff);
    var x119 = (x117 >> 8);
    var x120 = (uint8(x119) & 0xff);
    var x121 = (x119 >> 8);
    var x122 = (uint8(x121) & 0xff);
    var x123 = (x121 >> 8);
    var x124 = (uint8(x123) & 0xff);
    var x125 = (x123 >> 8);
    var x126 = (uint8(x125) & 0xff);
    var x127 = (x125 >> 8);
    var x128 = (uint8(x127) & 0xff);
    var x129 = (x127 >> 8);
    var x130 = (uint8(x129) & 0xff);
    var x131 = uint8((x129 >> 8));
    var x132 = (x39 + uint64(x131));
    var x133 = (uint8(x132) & 0xff);
    var x134 = (x132 >> 8);
    var x135 = (uint8(x134) & 0xff);
    var x136 = (x134 >> 8);
    var x137 = (uint8(x136) & 0xff);
    var x138 = (x136 >> 8);
    var x139 = (uint8(x138) & 0xff);
    var x140 = (x138 >> 8);
    var x141 = (uint8(x140) & 0xff);
    var x142 = (x140 >> 8);
    var x143 = (uint8(x142) & 0xff);
    var x144 = (x142 >> 8);
    var x145 = (uint8(x144) & 0xff);
    var x146 = uint8((x144 >> 8));
    var x147 = (x38 + uint64(x146));
    var x148 = (uint8(x147) & 0xff);
    var x149 = (x147 >> 8);
    var x150 = (uint8(x149) & 0xff);
    var x151 = (x149 >> 8);
    var x152 = (uint8(x151) & 0xff);
    var x153 = (x151 >> 8);
    var x154 = (uint8(x153) & 0xff);
    var x155 = (x153 >> 8);
    var x156 = (uint8(x155) & 0xff);
    var x157 = (x155 >> 8);
    var x158 = (uint8(x157) & 0xff);
    var x159 = (x157 >> 8);
    var x160 = (uint8(x159) & 0xff);
    var x161 = uint8((x159 >> 8));
    var x162 = (uint8(x36) & 0xff);
    var x163 = (x36 >> 8);
    var x164 = (uint8(x163) & 0xff);
    var x165 = (x163 >> 8);
    var x166 = (uint8(x165) & 0xff);
    var x167 = (x165 >> 8);
    var x168 = (uint8(x167) & 0xff);
    var x169 = (x167 >> 8);
    var x170 = (uint8(x169) & 0xff);
    var x171 = (x169 >> 8);
    var x172 = (uint8(x171) & 0xff);
    var x173 = (x171 >> 8);
    var x174 = (uint8(x173) & 0xff);
    var x175 = p521Uint1((x173 >> 8));
    out1[0] = x44;
    out1[1] = x46;
    out1[2] = x48;
    out1[3] = x50;
    out1[4] = x52;
    out1[5] = x54;
    out1[6] = x56;
    out1[7] = x59;
    out1[8] = x61;
    out1[9] = x63;
    out1[10] = x65;
    out1[11] = x67;
    out1[12] = x69;
    out1[13] = x71;
    out1[14] = x74;
    out1[15] = x76;
    out1[16] = x78;
    out1[17] = x80;
    out1[18] = x82;
    out1[19] = x84;
    out1[20] = x86;
    out1[21] = x89;
    out1[22] = x91;
    out1[23] = x93;
    out1[24] = x95;
    out1[25] = x97;
    out1[26] = x99;
    out1[27] = x101;
    out1[28] = x102;
    out1[29] = x103;
    out1[30] = x105;
    out1[31] = x107;
    out1[32] = x109;
    out1[33] = x111;
    out1[34] = x113;
    out1[35] = x115;
    out1[36] = x118;
    out1[37] = x120;
    out1[38] = x122;
    out1[39] = x124;
    out1[40] = x126;
    out1[41] = x128;
    out1[42] = x130;
    out1[43] = x133;
    out1[44] = x135;
    out1[45] = x137;
    out1[46] = x139;
    out1[47] = x141;
    out1[48] = x143;
    out1[49] = x145;
    out1[50] = x148;
    out1[51] = x150;
    out1[52] = x152;
    out1[53] = x154;
    out1[54] = x156;
    out1[55] = x158;
    out1[56] = x160;
    out1[57] = x161;
    out1[58] = x162;
    out1[59] = x164;
    out1[60] = x166;
    out1[61] = x168;
    out1[62] = x170;
    out1[63] = x172;
    out1[64] = x174;
    out1[65] = uint8(x175);
}

// p521FromBytes deserializes a field element from bytes in little-endian order.
//
// Postconditions:
//   eval out1 mod m = bytes_eval arg1 mod m
//
// Input Bounds:
//   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x1]]
// Output Bounds:
//   out1: [[0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x200000000000000]]
private static void p521FromBytes(ptr<array<ulong>> _addr_out1, ptr<array<byte>> _addr_arg1) {
    ref array<ulong> out1 = ref _addr_out1.val;
    ref array<byte> arg1 = ref _addr_arg1.val;

    var x1 = (uint64(p521Uint1(arg1[65])) << 56);
    var x2 = (uint64(arg1[64]) << 48);
    var x3 = (uint64(arg1[63]) << 40);
    var x4 = (uint64(arg1[62]) << 32);
    var x5 = (uint64(arg1[61]) << 24);
    var x6 = (uint64(arg1[60]) << 16);
    var x7 = (uint64(arg1[59]) << 8);
    var x8 = arg1[58];
    var x9 = (uint64(arg1[57]) << 50);
    var x10 = (uint64(arg1[56]) << 42);
    var x11 = (uint64(arg1[55]) << 34);
    var x12 = (uint64(arg1[54]) << 26);
    var x13 = (uint64(arg1[53]) << 18);
    var x14 = (uint64(arg1[52]) << 10);
    var x15 = (uint64(arg1[51]) << 2);
    var x16 = (uint64(arg1[50]) << 52);
    var x17 = (uint64(arg1[49]) << 44);
    var x18 = (uint64(arg1[48]) << 36);
    var x19 = (uint64(arg1[47]) << 28);
    var x20 = (uint64(arg1[46]) << 20);
    var x21 = (uint64(arg1[45]) << 12);
    var x22 = (uint64(arg1[44]) << 4);
    var x23 = (uint64(arg1[43]) << 54);
    var x24 = (uint64(arg1[42]) << 46);
    var x25 = (uint64(arg1[41]) << 38);
    var x26 = (uint64(arg1[40]) << 30);
    var x27 = (uint64(arg1[39]) << 22);
    var x28 = (uint64(arg1[38]) << 14);
    var x29 = (uint64(arg1[37]) << 6);
    var x30 = (uint64(arg1[36]) << 56);
    var x31 = (uint64(arg1[35]) << 48);
    var x32 = (uint64(arg1[34]) << 40);
    var x33 = (uint64(arg1[33]) << 32);
    var x34 = (uint64(arg1[32]) << 24);
    var x35 = (uint64(arg1[31]) << 16);
    var x36 = (uint64(arg1[30]) << 8);
    var x37 = arg1[29];
    var x38 = (uint64(arg1[28]) << 50);
    var x39 = (uint64(arg1[27]) << 42);
    var x40 = (uint64(arg1[26]) << 34);
    var x41 = (uint64(arg1[25]) << 26);
    var x42 = (uint64(arg1[24]) << 18);
    var x43 = (uint64(arg1[23]) << 10);
    var x44 = (uint64(arg1[22]) << 2);
    var x45 = (uint64(arg1[21]) << 52);
    var x46 = (uint64(arg1[20]) << 44);
    var x47 = (uint64(arg1[19]) << 36);
    var x48 = (uint64(arg1[18]) << 28);
    var x49 = (uint64(arg1[17]) << 20);
    var x50 = (uint64(arg1[16]) << 12);
    var x51 = (uint64(arg1[15]) << 4);
    var x52 = (uint64(arg1[14]) << 54);
    var x53 = (uint64(arg1[13]) << 46);
    var x54 = (uint64(arg1[12]) << 38);
    var x55 = (uint64(arg1[11]) << 30);
    var x56 = (uint64(arg1[10]) << 22);
    var x57 = (uint64(arg1[9]) << 14);
    var x58 = (uint64(arg1[8]) << 6);
    var x59 = (uint64(arg1[7]) << 56);
    var x60 = (uint64(arg1[6]) << 48);
    var x61 = (uint64(arg1[5]) << 40);
    var x62 = (uint64(arg1[4]) << 32);
    var x63 = (uint64(arg1[3]) << 24);
    var x64 = (uint64(arg1[2]) << 16);
    var x65 = (uint64(arg1[1]) << 8);
    var x66 = arg1[0];
    var x67 = (x65 + uint64(x66));
    var x68 = (x64 + x67);
    var x69 = (x63 + x68);
    var x70 = (x62 + x69);
    var x71 = (x61 + x70);
    var x72 = (x60 + x71);
    var x73 = (x59 + x72);
    var x74 = (x73 & 0x3ffffffffffffff);
    var x75 = uint8((x73 >> 58));
    var x76 = (x58 + uint64(x75));
    var x77 = (x57 + x76);
    var x78 = (x56 + x77);
    var x79 = (x55 + x78);
    var x80 = (x54 + x79);
    var x81 = (x53 + x80);
    var x82 = (x52 + x81);
    var x83 = (x82 & 0x3ffffffffffffff);
    var x84 = uint8((x82 >> 58));
    var x85 = (x51 + uint64(x84));
    var x86 = (x50 + x85);
    var x87 = (x49 + x86);
    var x88 = (x48 + x87);
    var x89 = (x47 + x88);
    var x90 = (x46 + x89);
    var x91 = (x45 + x90);
    var x92 = (x91 & 0x3ffffffffffffff);
    var x93 = uint8((x91 >> 58));
    var x94 = (x44 + uint64(x93));
    var x95 = (x43 + x94);
    var x96 = (x42 + x95);
    var x97 = (x41 + x96);
    var x98 = (x40 + x97);
    var x99 = (x39 + x98);
    var x100 = (x38 + x99);
    var x101 = (x36 + uint64(x37));
    var x102 = (x35 + x101);
    var x103 = (x34 + x102);
    var x104 = (x33 + x103);
    var x105 = (x32 + x104);
    var x106 = (x31 + x105);
    var x107 = (x30 + x106);
    var x108 = (x107 & 0x3ffffffffffffff);
    var x109 = uint8((x107 >> 58));
    var x110 = (x29 + uint64(x109));
    var x111 = (x28 + x110);
    var x112 = (x27 + x111);
    var x113 = (x26 + x112);
    var x114 = (x25 + x113);
    var x115 = (x24 + x114);
    var x116 = (x23 + x115);
    var x117 = (x116 & 0x3ffffffffffffff);
    var x118 = uint8((x116 >> 58));
    var x119 = (x22 + uint64(x118));
    var x120 = (x21 + x119);
    var x121 = (x20 + x120);
    var x122 = (x19 + x121);
    var x123 = (x18 + x122);
    var x124 = (x17 + x123);
    var x125 = (x16 + x124);
    var x126 = (x125 & 0x3ffffffffffffff);
    var x127 = uint8((x125 >> 58));
    var x128 = (x15 + uint64(x127));
    var x129 = (x14 + x128);
    var x130 = (x13 + x129);
    var x131 = (x12 + x130);
    var x132 = (x11 + x131);
    var x133 = (x10 + x132);
    var x134 = (x9 + x133);
    var x135 = (x7 + uint64(x8));
    var x136 = (x6 + x135);
    var x137 = (x5 + x136);
    var x138 = (x4 + x137);
    var x139 = (x3 + x138);
    var x140 = (x2 + x139);
    var x141 = (x1 + x140);
    out1[0] = x74;
    out1[1] = x83;
    out1[2] = x92;
    out1[3] = x100;
    out1[4] = x108;
    out1[5] = x117;
    out1[6] = x126;
    out1[7] = x134;
    out1[8] = x141;
}

// p521Selectznz is a multi-limb conditional select.
//
// Postconditions:
//   eval out1 = (if arg1 = 0 then eval arg2 else eval arg3)
//
// Input Bounds:
//   arg1: [0x0 ~> 0x1]
//   arg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
//   arg3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
// Output Bounds:
//   out1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]
private static void p521Selectznz(ptr<array<ulong>> _addr_out1, p521Uint1 arg1, ptr<array<ulong>> _addr_arg2, ptr<array<ulong>> _addr_arg3) {
    ref array<ulong> out1 = ref _addr_out1.val;
    ref array<ulong> arg2 = ref _addr_arg2.val;
    ref array<ulong> arg3 = ref _addr_arg3.val;

    ref ulong x1 = ref heap(out ptr<ulong> _addr_x1);
    p521CmovznzU64(_addr_x1, arg1, arg2[0], arg3[0]);
    ref ulong x2 = ref heap(out ptr<ulong> _addr_x2);
    p521CmovznzU64(_addr_x2, arg1, arg2[1], arg3[1]);
    ref ulong x3 = ref heap(out ptr<ulong> _addr_x3);
    p521CmovznzU64(_addr_x3, arg1, arg2[2], arg3[2]);
    ref ulong x4 = ref heap(out ptr<ulong> _addr_x4);
    p521CmovznzU64(_addr_x4, arg1, arg2[3], arg3[3]);
    ref ulong x5 = ref heap(out ptr<ulong> _addr_x5);
    p521CmovznzU64(_addr_x5, arg1, arg2[4], arg3[4]);
    ref ulong x6 = ref heap(out ptr<ulong> _addr_x6);
    p521CmovznzU64(_addr_x6, arg1, arg2[5], arg3[5]);
    ref ulong x7 = ref heap(out ptr<ulong> _addr_x7);
    p521CmovznzU64(_addr_x7, arg1, arg2[6], arg3[6]);
    ref ulong x8 = ref heap(out ptr<ulong> _addr_x8);
    p521CmovznzU64(_addr_x8, arg1, arg2[7], arg3[7]);
    ref ulong x9 = ref heap(out ptr<ulong> _addr_x9);
    p521CmovznzU64(_addr_x9, arg1, arg2[8], arg3[8]);
    out1[0] = x1;
    out1[1] = x2;
    out1[2] = x3;
    out1[3] = x4;
    out1[4] = x5;
    out1[5] = x6;
    out1[6] = x7;
    out1[7] = x8;
    out1[8] = x9;
}

} // end fiat_package
