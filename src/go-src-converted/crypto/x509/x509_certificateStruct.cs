//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 03:37:22 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bytes = go.bytes_package;
using crypto = go.crypto_package;
using dsa = go.crypto.dsa_package;
using ecdsa = go.crypto.ecdsa_package;
using ed25519 = go.crypto.ed25519_package;
using elliptic = go.crypto.elliptic_package;
using rsa = go.crypto.rsa_package;
using sha1 = go.crypto.sha1_package;
using _sha256_ = go.crypto.sha256_package;
using _sha512_ = go.crypto.sha512_package;
using pkix = go.crypto.x509.pkix_package;
using asn1 = go.encoding.asn1_package;
using pem = go.encoding.pem_package;
using errors = go.errors_package;
using fmt = go.fmt_package;
using io = go.io_package;
using big = go.math.big_package;
using net = go.net_package;
using url = go.net.url_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using time = go.time_package;
using utf8 = go.unicode.utf8_package;
using cryptobyte = go.golang.org.x.crypto.cryptobyte_package;
using cryptobyte_asn1 = go.golang.org.x.crypto.cryptobyte.asn1_package;
using go;

namespace go {
namespace crypto
{
    public static partial class x509_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Certificate
        {
            // Constructors
            public Certificate(NilType _)
            {
                this.Raw = default;
                this.RawTBSCertificate = default;
                this.RawSubjectPublicKeyInfo = default;
                this.RawSubject = default;
                this.RawIssuer = default;
                this.Signature = default;
                this.SignatureAlgorithm = default;
                this.PublicKeyAlgorithm = default;
                this.Version = default;
                this.SerialNumber = default;
                this.Issuer = default;
                this.Subject = default;
                this.NotBefore = default;
                this.NotAfter = default;
                this.KeyUsage = default;
                this.Extensions = default;
                this.ExtraExtensions = default;
                this.UnhandledCriticalExtensions = default;
                this.ExtKeyUsage = default;
                this.UnknownExtKeyUsage = default;
                this.BasicConstraintsValid = default;
                this.IsCA = default;
                this.MaxPathLen = default;
                this.MaxPathLenZero = default;
                this.SubjectKeyId = default;
                this.AuthorityKeyId = default;
                this.OCSPServer = default;
                this.IssuingCertificateURL = default;
                this.DNSNames = default;
                this.EmailAddresses = default;
                this.IPAddresses = default;
                this.URIs = default;
                this.PermittedDNSDomainsCritical = default;
                this.PermittedDNSDomains = default;
                this.ExcludedDNSDomains = default;
                this.PermittedIPRanges = default;
                this.ExcludedIPRanges = default;
                this.PermittedEmailAddresses = default;
                this.ExcludedEmailAddresses = default;
                this.PermittedURIDomains = default;
                this.ExcludedURIDomains = default;
                this.CRLDistributionPoints = default;
                this.PolicyIdentifiers = default;
            }

            public Certificate(slice<byte> Raw = default, slice<byte> RawTBSCertificate = default, slice<byte> RawSubjectPublicKeyInfo = default, slice<byte> RawSubject = default, slice<byte> RawIssuer = default, slice<byte> Signature = default, SignatureAlgorithm SignatureAlgorithm = default, PublicKeyAlgorithm PublicKeyAlgorithm = default, long Version = default, ref ptr<big.Int> SerialNumber = default, pkix.Name Issuer = default, pkix.Name Subject = default, time.Time NotBefore = default, time.Time NotAfter = default, KeyUsage KeyUsage = default, slice<pkix.Extension> Extensions = default, slice<pkix.Extension> ExtraExtensions = default, slice<asn1.ObjectIdentifier> UnhandledCriticalExtensions = default, slice<ExtKeyUsage> ExtKeyUsage = default, slice<asn1.ObjectIdentifier> UnknownExtKeyUsage = default, bool BasicConstraintsValid = default, bool IsCA = default, long MaxPathLen = default, bool MaxPathLenZero = default, slice<byte> SubjectKeyId = default, slice<byte> AuthorityKeyId = default, slice<@string> OCSPServer = default, slice<@string> IssuingCertificateURL = default, slice<@string> DNSNames = default, slice<@string> EmailAddresses = default, slice<net.IP> IPAddresses = default, slice<ptr<url.URL>> URIs = default, bool PermittedDNSDomainsCritical = default, slice<@string> PermittedDNSDomains = default, slice<@string> ExcludedDNSDomains = default, slice<ptr<net.IPNet>> PermittedIPRanges = default, slice<ptr<net.IPNet>> ExcludedIPRanges = default, slice<@string> PermittedEmailAddresses = default, slice<@string> ExcludedEmailAddresses = default, slice<@string> PermittedURIDomains = default, slice<@string> ExcludedURIDomains = default, slice<@string> CRLDistributionPoints = default, slice<asn1.ObjectIdentifier> PolicyIdentifiers = default)
            {
                this.Raw = Raw;
                this.RawTBSCertificate = RawTBSCertificate;
                this.RawSubjectPublicKeyInfo = RawSubjectPublicKeyInfo;
                this.RawSubject = RawSubject;
                this.RawIssuer = RawIssuer;
                this.Signature = Signature;
                this.SignatureAlgorithm = SignatureAlgorithm;
                this.PublicKeyAlgorithm = PublicKeyAlgorithm;
                this.Version = Version;
                this.SerialNumber = SerialNumber;
                this.Issuer = Issuer;
                this.Subject = Subject;
                this.NotBefore = NotBefore;
                this.NotAfter = NotAfter;
                this.KeyUsage = KeyUsage;
                this.Extensions = Extensions;
                this.ExtraExtensions = ExtraExtensions;
                this.UnhandledCriticalExtensions = UnhandledCriticalExtensions;
                this.ExtKeyUsage = ExtKeyUsage;
                this.UnknownExtKeyUsage = UnknownExtKeyUsage;
                this.BasicConstraintsValid = BasicConstraintsValid;
                this.IsCA = IsCA;
                this.MaxPathLen = MaxPathLen;
                this.MaxPathLenZero = MaxPathLenZero;
                this.SubjectKeyId = SubjectKeyId;
                this.AuthorityKeyId = AuthorityKeyId;
                this.OCSPServer = OCSPServer;
                this.IssuingCertificateURL = IssuingCertificateURL;
                this.DNSNames = DNSNames;
                this.EmailAddresses = EmailAddresses;
                this.IPAddresses = IPAddresses;
                this.URIs = URIs;
                this.PermittedDNSDomainsCritical = PermittedDNSDomainsCritical;
                this.PermittedDNSDomains = PermittedDNSDomains;
                this.ExcludedDNSDomains = ExcludedDNSDomains;
                this.PermittedIPRanges = PermittedIPRanges;
                this.ExcludedIPRanges = ExcludedIPRanges;
                this.PermittedEmailAddresses = PermittedEmailAddresses;
                this.ExcludedEmailAddresses = ExcludedEmailAddresses;
                this.PermittedURIDomains = PermittedURIDomains;
                this.ExcludedURIDomains = ExcludedURIDomains;
                this.CRLDistributionPoints = CRLDistributionPoints;
                this.PolicyIdentifiers = PolicyIdentifiers;
            }

            // Enable comparisons between nil and Certificate struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Certificate value, NilType nil) => value.Equals(default(Certificate));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Certificate value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Certificate value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Certificate value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Certificate(NilType nil) => default(Certificate);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Certificate Certificate_cast(dynamic value)
        {
            return new Certificate(value.Raw, value.RawTBSCertificate, value.RawSubjectPublicKeyInfo, value.RawSubject, value.RawIssuer, value.Signature, value.SignatureAlgorithm, value.PublicKeyAlgorithm, value.Version, ref value.SerialNumber, value.Issuer, value.Subject, value.NotBefore, value.NotAfter, value.KeyUsage, value.Extensions, value.ExtraExtensions, value.UnhandledCriticalExtensions, value.ExtKeyUsage, value.UnknownExtKeyUsage, value.BasicConstraintsValid, value.IsCA, value.MaxPathLen, value.MaxPathLenZero, value.SubjectKeyId, value.AuthorityKeyId, value.OCSPServer, value.IssuingCertificateURL, value.DNSNames, value.EmailAddresses, value.IPAddresses, value.URIs, value.PermittedDNSDomainsCritical, value.PermittedDNSDomains, value.ExcludedDNSDomains, value.PermittedIPRanges, value.ExcludedIPRanges, value.PermittedEmailAddresses, value.ExcludedEmailAddresses, value.PermittedURIDomains, value.ExcludedURIDomains, value.CRLDistributionPoints, value.PolicyIdentifiers);
        }
    }
}}