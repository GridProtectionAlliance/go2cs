//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 06:03:00 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using ast = go.go.ast_package;
using go;

#nullable enable

namespace go {
namespace golang.org {
namespace x {
namespace tools {
namespace go {
namespace ast
{
    public static partial class inspector_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Inspector
        {
            // Constructors
            public Inspector(NilType _)
            {
                this.events = default;
            }

            public Inspector(slice<event> events = default)
            {
                this.events = events;
            }

            // Enable comparisons between nil and Inspector struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Inspector value, NilType nil) => value.Equals(default(Inspector));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Inspector value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Inspector value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Inspector value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Inspector(NilType nil) => default(Inspector);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Inspector Inspector_cast(dynamic value)
        {
            return new Inspector(value.events);
        }
    }
}}}}}}