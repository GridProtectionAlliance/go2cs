//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 06:01:58 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using context = go.context_package;
using json = go.encoding.json_package;
using fmt = go.fmt_package;
using ast = go.go.ast_package;
using parser = go.go.parser_package;
using scanner = go.go.scanner_package;
using token = go.go.token_package;
using types = go.go.types_package;
using ioutil = go.io.ioutil_package;
using log = go.log_package;
using os = go.os_package;
using filepath = go.path.filepath_package;
using strings = go.strings_package;
using sync = go.sync_package;
using time = go.time_package;
using gcexportdata = go.golang.org.x.tools.go.gcexportdata_package;
using gocommand = go.golang.org.x.tools.@internal.gocommand_package;
using packagesinternal = go.golang.org.x.tools.@internal.packagesinternal_package;
using typesinternal = go.golang.org.x.tools.@internal.typesinternal_package;
using go;

#nullable enable

namespace go {
namespace golang.org {
namespace x {
namespace tools {
namespace go
{
    public static partial class packages_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        [PromotedStruct(typeof(Config))]
        private partial struct loader
        {
            // Config structure promotion - sourced from value copy
            private readonly ptr<Config> m_ConfigRef;

            private ref Config Config_val => ref m_ConfigRef.Value;

            public ref LoadMode Mode => ref m_ConfigRef.Value.Mode;

            public ref context.Context Context => ref m_ConfigRef.Value.Context;

            public ref Action<@string, object[]> Logf => ref m_ConfigRef.Value.Logf;

            public ref @string Dir => ref m_ConfigRef.Value.Dir;

            public ref slice<@string> Env => ref m_ConfigRef.Value.Env;

            public ref ptr<gocommand.Runner> gocmdRunner => ref m_ConfigRef.Value.gocmdRunner;

            public ref slice<@string> BuildFlags => ref m_ConfigRef.Value.BuildFlags;

            public ref ptr<token.FileSet> Fset => ref m_ConfigRef.Value.Fset;

            public ref Func<ptr<token.FileSet>, @string, slice<byte>, (ptr<ast.File>, error)> ParseFile => ref m_ConfigRef.Value.ParseFile;

            public ref bool Tests => ref m_ConfigRef.Value.Tests;

            public ref map<@string, slice<byte>> Overlay => ref m_ConfigRef.Value.Overlay;

            // Constructors
            public loader(NilType _)
            {
                this.pkgs = default;
                this.m_ConfigRef = new ptr<Config>(new Config(nil));
                this.sizes = default;
                this.parseCache = default;
                this.parseCacheMu = default;
                this.exportMu = default;
                this.requestedMode = default;
            }

            public loader(map<@string, ptr<loaderPackage>> pkgs = default, Config Config = default, types.Sizes sizes = default, map<@string, ptr<parseValue>> parseCache = default, sync.Mutex parseCacheMu = default, sync.Mutex exportMu = default, LoadMode requestedMode = default)
            {
                this.pkgs = pkgs;
                this.m_ConfigRef = new ptr<Config>(Config);
                this.sizes = sizes;
                this.parseCache = parseCache;
                this.parseCacheMu = parseCacheMu;
                this.exportMu = exportMu;
                this.requestedMode = requestedMode;
            }

            // Enable comparisons between nil and loader struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(loader value, NilType nil) => value.Equals(default(loader));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(loader value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, loader value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, loader value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator loader(NilType nil) => default(loader);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static loader loader_cast(dynamic value)
        {
            return new loader(value.pkgs, value.Config, value.sizes, value.parseCache, value.parseCacheMu, value.exportMu, value.requestedMode);
        }
    }
}}}}}