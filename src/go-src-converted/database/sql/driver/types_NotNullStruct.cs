//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 04:58:47 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using fmt = go.fmt_package;
using reflect = go.reflect_package;
using strconv = go.strconv_package;
using time = go.time_package;
using go;

namespace go {
namespace database {
namespace sql
{
    public static partial class driver_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct NotNull
        {
            // Constructors
            public NotNull(NilType _)
            {
                this.Converter = default;
            }

            public NotNull(ValueConverter Converter = default)
            {
                this.Converter = Converter;
            }

            // Enable comparisons between nil and NotNull struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NotNull value, NilType nil) => value.Equals(default(NotNull));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NotNull value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, NotNull value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, NotNull value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator NotNull(NilType nil) => default(NotNull);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static NotNull NotNull_cast(dynamic value)
        {
            return new NotNull(value.Converter);
        }
    }
}}}