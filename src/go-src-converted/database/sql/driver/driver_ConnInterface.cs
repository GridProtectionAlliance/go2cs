//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 06:05:18 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using context = go.context_package;
using errors = go.errors_package;
using reflect = go.reflect_package;
using go;

#nullable enable
#pragma warning disable CS0660, CS0661

namespace go {
namespace database {
namespace sql
{
    public static partial class driver_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface Conn
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Conn As<T>(in T target) => (Conn<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Conn As<T>(ptr<T> target_ptr) => (Conn<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Conn? As(object target) =>
                typeof(Conn<>).CreateInterfaceHandler<Conn>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class Conn<T> : Conn
        {
            private T m_target = default!;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public Conn(in T target) => m_target = target;

            public Conn(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate (Tx, error) PrepareByPtr(ptr<T> value, @string query);
            private delegate (Tx, error) PrepareByVal(T value, @string query);

            private static readonly PrepareByPtr? s_PrepareByPtr;
            private static readonly PrepareByVal? s_PrepareByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (Tx, error) Prepare(@string query)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_PrepareByPtr is null || !m_target_is_ptr)
                    return s_PrepareByVal!(target, query);

                return s_PrepareByPtr(m_target_ptr, query);
            }

            private delegate (Tx, error) CloseByPtr(ptr<T> value);
            private delegate (Tx, error) CloseByVal(T value);

            private static readonly CloseByPtr? s_CloseByPtr;
            private static readonly CloseByVal? s_CloseByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (Tx, error) Close()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_CloseByPtr is null || !m_target_is_ptr)
                    return s_CloseByVal!(target);

                return s_CloseByPtr(m_target_ptr);
            }

            private delegate (Tx, error) BeginByPtr(ptr<T> value);
            private delegate (Tx, error) BeginByVal(T value);

            private static readonly BeginByPtr? s_BeginByPtr;
            private static readonly BeginByVal? s_BeginByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (Tx, error) Begin()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_BeginByPtr is null || !m_target_is_ptr)
                    return s_BeginByVal!(target);

                return s_BeginByPtr(m_target_ptr);
            }
            
            public string ToString(string? format, IFormatProvider? formatProvider) => format;

            [DebuggerStepperBoundary]
            static Conn()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Prepare");

                if (!(extensionMethod is null))
                    s_PrepareByPtr = extensionMethod.CreateStaticDelegate(typeof(PrepareByPtr)) as PrepareByPtr;

                extensionMethod = targetType.GetExtensionMethod("Prepare");

                if (!(extensionMethod is null))
                    s_PrepareByVal = extensionMethod.CreateStaticDelegate(typeof(PrepareByVal)) as PrepareByVal;

                if (s_PrepareByPtr is null && s_PrepareByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Conn.Prepare method", new Exception("Prepare"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Close");

                if (!(extensionMethod is null))
                    s_CloseByPtr = extensionMethod.CreateStaticDelegate(typeof(CloseByPtr)) as CloseByPtr;

                extensionMethod = targetType.GetExtensionMethod("Close");

                if (!(extensionMethod is null))
                    s_CloseByVal = extensionMethod.CreateStaticDelegate(typeof(CloseByVal)) as CloseByVal;

                if (s_CloseByPtr is null && s_CloseByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Conn.Close method", new Exception("Close"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Begin");

                if (!(extensionMethod is null))
                    s_BeginByPtr = extensionMethod.CreateStaticDelegate(typeof(BeginByPtr)) as BeginByPtr;

                extensionMethod = targetType.GetExtensionMethod("Begin");

                if (!(extensionMethod is null))
                    s_BeginByVal = extensionMethod.CreateStaticDelegate(typeof(BeginByVal)) as BeginByVal;

                if (s_BeginByPtr is null && s_BeginByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Conn.Begin method", new Exception("Begin"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Conn<T>(in ptr<T> target_ptr) => new Conn<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Conn<T>(in T target) => new Conn<T>(target);

            // Enable comparisons between nil and Conn<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Conn<T> value, NilType nil) => Activator.CreateInstance<Conn<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Conn<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Conn<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Conn<T> value) => value != nil;
        }
    }
}}}

namespace go
{
    public static class driver_ConnExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.database.sql.driver_package.Conn target)
        {
            try
            {
                return ((go.database.sql.driver_package.Conn<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.database.sql.driver_package.Conn target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.database.sql.driver_package.Conn target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.database.sql.driver_package.Conn<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.database.sql.driver_package.Conn target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}