//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 06:43:37 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using context = go.context_package;
using driver = go.database.sql.driver_package;
using errors = go.errors_package;
using fmt = go.fmt_package;
using io = go.io_package;
using reflect = go.reflect_package;
using runtime = go.runtime_package;
using sort = go.sort_package;
using strconv = go.strconv_package;
using sync = go.sync_package;
using atomic = go.sync.atomic_package;
using time = go.time_package;
using go;

#nullable enable

namespace go {
namespace database
{
    public static partial class sql_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        [PromotedStruct(typeof(sync.Mutex))]
        private partial struct driverConn
        {
            // Mutex structure promotion - sourced from value copy
            private readonly ptr<Mutex> m_MutexRef;

            private ref Mutex Mutex_val => ref m_MutexRef.Value;

            public ref int state => ref m_MutexRef.Value.state;

            public ref uint sema => ref m_MutexRef.Value.sema;

            // Constructors
            public driverConn(NilType _)
            {
                this.db = default;
                this.createdAt = default;
                this.m_MutexRef = new ptr<sync.Mutex>(new sync.Mutex(nil));
                this.ci = default;
                this.needReset = default;
                this.closed = default;
                this.finalClosed = default;
                this.openStmt = default;
                this.inUse = default;
                this.returnedAt = default;
                this.onPut = default;
                this.dbmuClosed = default;
            }

            public driverConn(ref ptr<DB> db = default, time.Time createdAt = default, sync.Mutex Mutex = default, driver.Conn ci = default, bool needReset = default, bool closed = default, bool finalClosed = default, map<ptr<driverStmt>, bool> openStmt = default, bool inUse = default, time.Time returnedAt = default, slice<Action> onPut = default, bool dbmuClosed = default)
            {
                this.db = db;
                this.createdAt = createdAt;
                this.m_MutexRef = new ptr<sync.Mutex>(Mutex);
                this.ci = ci;
                this.needReset = needReset;
                this.closed = closed;
                this.finalClosed = finalClosed;
                this.openStmt = openStmt;
                this.inUse = inUse;
                this.returnedAt = returnedAt;
                this.onPut = onPut;
                this.dbmuClosed = dbmuClosed;
            }

            // Enable comparisons between nil and driverConn struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(driverConn value, NilType nil) => value.Equals(default(driverConn));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(driverConn value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, driverConn value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, driverConn value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator driverConn(NilType nil) => default(driverConn);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private static driverConn driverConn_cast(dynamic value)
        {
            return new driverConn(ref value.db, value.createdAt, value.Mutex, value.ci, value.needReset, value.closed, value.finalClosed, value.openStmt, value.inUse, value.returnedAt, value.onPut, value.dbmuClosed);
        }
    }
}}