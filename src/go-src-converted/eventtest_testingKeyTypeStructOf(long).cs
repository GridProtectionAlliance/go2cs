//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 04:54:57 UTC
// </auto-generated>
//---------------------------------------------------------
using System.CodeDom.Compiler;
using System.Runtime.CompilerServices;
using go;

namespace go {
namespace golang.org {
namespace x {
namespace tools {
namespace @internal {
namespace @event {
namespace export
{
    public static partial class eventtest_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct testingKeyType
        {
            // Value of the testingKeyType struct
            private readonly long m_value;

            public testingKeyType(long value) => m_value = value;

            // Enable implicit conversions between long and testingKeyType struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator testingKeyType(long value) => new testingKeyType(value);
            
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator long(testingKeyType value) => value.m_value;
            
            // Enable comparisons between nil and testingKeyType struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(testingKeyType value, NilType nil) => value.Equals(default(testingKeyType));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(testingKeyType value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, testingKeyType value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, testingKeyType value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator testingKeyType(NilType nil) => default(testingKeyType);
        }
    }
}}}}}}}
