//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 04:49:50 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using errors = go.errors_package;
using reflectlite = go.@internal.reflectlite_package;
using sync = go.sync_package;
using atomic = go.sync.atomic_package;
using time = go.time_package;

#nullable enable
#pragma warning disable CS0660, CS0661

namespace go
{
    public static partial class context_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface Context
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Context As<T>(in T target) => (Context<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Context As<T>(ptr<T> target_ptr) => (Context<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static Context? As(object target) =>
                typeof(Context<>).CreateInterfaceHandler<Context>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class Context<T> : Context
        {
            private T m_target = default!;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public Context(in T target) => m_target = target;

            public Context(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate void DeadlineByPtr(ptr<T> value);
            private delegate void DeadlineByVal(T value);

            private static readonly DeadlineByPtr? s_DeadlineByPtr;
            private static readonly DeadlineByVal? s_DeadlineByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Deadline()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_DeadlineByPtr is null || !m_target_is_ptr)
                {
                    s_DeadlineByVal!(target);
                    return;
                }

                s_DeadlineByPtr(m_target_ptr);
                return;
                
            }

            private delegate void DoneByPtr(ptr<T> value);
            private delegate void DoneByVal(T value);

            private static readonly DoneByPtr? s_DoneByPtr;
            private static readonly DoneByVal? s_DoneByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Done()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_DoneByPtr is null || !m_target_is_ptr)
                {
                    s_DoneByVal!(target);
                    return;
                }

                s_DoneByPtr(m_target_ptr);
                return;
                
            }

            private delegate void ErrByPtr(ptr<T> value);
            private delegate void ErrByVal(T value);

            private static readonly ErrByPtr? s_ErrByPtr;
            private static readonly ErrByVal? s_ErrByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Err()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_ErrByPtr is null || !m_target_is_ptr)
                {
                    s_ErrByVal!(target);
                    return;
                }

                s_ErrByPtr(m_target_ptr);
                return;
                
            }

            private delegate void ValueByPtr(ptr<T> value, object key);
            private delegate void ValueByVal(T value, object key);

            private static readonly ValueByPtr? s_ValueByPtr;
            private static readonly ValueByVal? s_ValueByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Value(object key)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_ValueByPtr is null || !m_target_is_ptr)
                {
                    s_ValueByVal!(target, key);
                    return;
                }

                s_ValueByPtr(m_target_ptr, key);
                return;
                
            }
            
            public string ToString(string? format, IFormatProvider? formatProvider) => format;

            [DebuggerStepperBoundary]
            static Context()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Deadline");

                if (!(extensionMethod is null))
                    s_DeadlineByPtr = extensionMethod.CreateStaticDelegate(typeof(DeadlineByPtr)) as DeadlineByPtr;

                extensionMethod = targetType.GetExtensionMethod("Deadline");

                if (!(extensionMethod is null))
                    s_DeadlineByVal = extensionMethod.CreateStaticDelegate(typeof(DeadlineByVal)) as DeadlineByVal;

                if (s_DeadlineByPtr is null && s_DeadlineByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Context.Deadline method", new Exception("Deadline"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Done");

                if (!(extensionMethod is null))
                    s_DoneByPtr = extensionMethod.CreateStaticDelegate(typeof(DoneByPtr)) as DoneByPtr;

                extensionMethod = targetType.GetExtensionMethod("Done");

                if (!(extensionMethod is null))
                    s_DoneByVal = extensionMethod.CreateStaticDelegate(typeof(DoneByVal)) as DoneByVal;

                if (s_DoneByPtr is null && s_DoneByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Context.Done method", new Exception("Done"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Err");

                if (!(extensionMethod is null))
                    s_ErrByPtr = extensionMethod.CreateStaticDelegate(typeof(ErrByPtr)) as ErrByPtr;

                extensionMethod = targetType.GetExtensionMethod("Err");

                if (!(extensionMethod is null))
                    s_ErrByVal = extensionMethod.CreateStaticDelegate(typeof(ErrByVal)) as ErrByVal;

                if (s_ErrByPtr is null && s_ErrByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Context.Err method", new Exception("Err"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Value");

                if (!(extensionMethod is null))
                    s_ValueByPtr = extensionMethod.CreateStaticDelegate(typeof(ValueByPtr)) as ValueByPtr;

                extensionMethod = targetType.GetExtensionMethod("Value");

                if (!(extensionMethod is null))
                    s_ValueByVal = extensionMethod.CreateStaticDelegate(typeof(ValueByVal)) as ValueByVal;

                if (s_ValueByPtr is null && s_ValueByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement Context.Value method", new Exception("Value"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Context<T>(in ptr<T> target_ptr) => new Context<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator Context<T>(in T target) => new Context<T>(target);

            // Enable comparisons between nil and Context<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Context<T> value, NilType nil) => Activator.CreateInstance<Context<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Context<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Context<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Context<T> value) => value != nil;
        }
    }
}

namespace go
{
    public static class context_ContextExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.context_package.Context target)
        {
            try
            {
                return ((go.context_package.Context<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.context_package.Context target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.context_package.Context target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.context_package.Context<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.context_package.Context target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}