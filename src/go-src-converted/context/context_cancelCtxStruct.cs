//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 22:14:03 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using errors = go.errors_package;
using reflectlite = go.@internal.reflectlite_package;
using sync = go.sync_package;
using atomic = go.sync.atomic_package;
using time = go.time_package;

#nullable enable

namespace go
{
    public static partial class context_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct cancelCtx
        {
            // Context.Deadline function promotion
            private delegate void DeadlineByVal(T value);
            private delegate void DeadlineByRef(ref T value);

            private static readonly DeadlineByVal s_DeadlineByVal;
            private static readonly DeadlineByRef s_DeadlineByRef;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Deadline() => s_DeadlineByRef?.Invoke(ref this) ?? s_DeadlineByVal?.Invoke(this) ?? Context?.Deadline() ?? throw new PanicException(RuntimeErrorPanic.NilPointerDereference);

            // Context.Done function promotion
            private delegate void DoneByVal(T value);
            private delegate void DoneByRef(ref T value);

            private static readonly DoneByVal s_DoneByVal;
            private static readonly DoneByRef s_DoneByRef;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Done() => s_DoneByRef?.Invoke(ref this) ?? s_DoneByVal?.Invoke(this) ?? Context?.Done() ?? throw new PanicException(RuntimeErrorPanic.NilPointerDereference);

            // Context.Err function promotion
            private delegate void ErrByVal(T value);
            private delegate void ErrByRef(ref T value);

            private static readonly ErrByVal s_ErrByVal;
            private static readonly ErrByRef s_ErrByRef;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Err() => s_ErrByRef?.Invoke(ref this) ?? s_ErrByVal?.Invoke(this) ?? Context?.Err() ?? throw new PanicException(RuntimeErrorPanic.NilPointerDereference);

            // Context.Value function promotion
            private delegate void ValueByVal(T value, object key);
            private delegate void ValueByRef(ref T value, object key);

            private static readonly ValueByVal s_ValueByVal;
            private static readonly ValueByRef s_ValueByRef;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void Value(object key) => s_ValueByRef?.Invoke(ref this, key) ?? s_ValueByVal?.Invoke(this, key) ?? Context?.Value(key) ?? throw new PanicException(RuntimeErrorPanic.NilPointerDereference);
            
            [DebuggerStepperBoundary]
            static cancelCtx()
            {
                Type targetType = typeof(cancelCtx);
                MethodInfo extensionMethod;
                
                extensionMethod = targetType.GetExtensionMethodSearchingPromotions("Deadline");

                if (extensionMethod is not null)
                {
                    s_DeadlineByRef = extensionMethod.CreateStaticDelegate(typeof(DeadlineByRef)) as DeadlineByRef;

                    if (s_DeadlineByRef is null)
                        s_DeadlineByVal = extensionMethod.CreateStaticDelegate(typeof(DeadlineByVal)) as DeadlineByVal;
                }
                
                extensionMethod = targetType.GetExtensionMethodSearchingPromotions("Done");

                if (extensionMethod is not null)
                {
                    s_DoneByRef = extensionMethod.CreateStaticDelegate(typeof(DoneByRef)) as DoneByRef;

                    if (s_DoneByRef is null)
                        s_DoneByVal = extensionMethod.CreateStaticDelegate(typeof(DoneByVal)) as DoneByVal;
                }
                
                extensionMethod = targetType.GetExtensionMethodSearchingPromotions("Err");

                if (extensionMethod is not null)
                {
                    s_ErrByRef = extensionMethod.CreateStaticDelegate(typeof(ErrByRef)) as ErrByRef;

                    if (s_ErrByRef is null)
                        s_ErrByVal = extensionMethod.CreateStaticDelegate(typeof(ErrByVal)) as ErrByVal;
                }
                
                extensionMethod = targetType.GetExtensionMethodSearchingPromotions("Value");

                if (extensionMethod is not null)
                {
                    s_ValueByRef = extensionMethod.CreateStaticDelegate(typeof(ValueByRef)) as ValueByRef;

                    if (s_ValueByRef is null)
                        s_ValueByVal = extensionMethod.CreateStaticDelegate(typeof(ValueByVal)) as ValueByVal;
                }
            }

            // Constructors
            public cancelCtx(NilType _)
            {
                this.Context = default;
                this.mu = default;
                this.done = default;
                this.err = default;
            }

            public cancelCtx(Context Context = default, sync.Mutex mu = default, atomic.Value done = default, error err = default)
            {
                this.Context = Context;
                this.mu = mu;
                this.done = done;
                this.err = err;
            }

            // Enable comparisons between nil and cancelCtx struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(cancelCtx value, NilType nil) => value.Equals(default(cancelCtx));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(cancelCtx value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, cancelCtx value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, cancelCtx value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator cancelCtx(NilType nil) => default(cancelCtx);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static cancelCtx cancelCtx_cast(dynamic value)
        {
            return new cancelCtx(value.Context, value.mu, value.done, value.err);
        }
    }
}