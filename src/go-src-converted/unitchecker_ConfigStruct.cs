//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 23:32:34 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using gob = go.encoding.gob_package;
using json = go.encoding.json_package;
using flag = go.flag_package;
using fmt = go.fmt_package;
using ast = go.go.ast_package;
using build = go.go.build_package;
using importer = go.go.importer_package;
using parser = go.go.parser_package;
using token = go.go.token_package;
using types = go.go.types_package;
using io = go.io_package;
using ioutil = go.io.ioutil_package;
using log = go.log_package;
using os = go.os_package;
using filepath = go.path.filepath_package;
using reflect = go.reflect_package;
using sort = go.sort_package;
using strings = go.strings_package;
using sync = go.sync_package;
using time = go.time_package;
using analysis = go.golang.org.x.tools.go.analysis_package;
using analysisflags = go.golang.org.x.tools.go.analysis.@internal.analysisflags_package;
using facts = go.golang.org.x.tools.go.analysis.@internal.facts_package;
using go;

#nullable enable

namespace go {
namespace golang.org {
namespace x {
namespace tools {
namespace go {
namespace analysis
{
    public static partial class unitchecker_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Config
        {
            // Constructors
            public Config(NilType _)
            {
                this.ID = default;
                this.Compiler = default;
                this.Dir = default;
                this.ImportPath = default;
                this.GoFiles = default;
                this.NonGoFiles = default;
                this.ImportMap = default;
                this.PackageFile = default;
                this.Standard = default;
                this.PackageVetx = default;
                this.VetxOnly = default;
                this.VetxOutput = default;
                this.SucceedOnTypecheckFailure = default;
            }

            public Config(@string ID = default, @string Compiler = default, @string Dir = default, @string ImportPath = default, slice<@string> GoFiles = default, slice<@string> NonGoFiles = default, map<@string, @string> ImportMap = default, map<@string, @string> PackageFile = default, map<@string, bool> Standard = default, map<@string, @string> PackageVetx = default, bool VetxOnly = default, @string VetxOutput = default, bool SucceedOnTypecheckFailure = default)
            {
                this.ID = ID;
                this.Compiler = Compiler;
                this.Dir = Dir;
                this.ImportPath = ImportPath;
                this.GoFiles = GoFiles;
                this.NonGoFiles = NonGoFiles;
                this.ImportMap = ImportMap;
                this.PackageFile = PackageFile;
                this.Standard = Standard;
                this.PackageVetx = PackageVetx;
                this.VetxOnly = VetxOnly;
                this.VetxOutput = VetxOutput;
                this.SucceedOnTypecheckFailure = SucceedOnTypecheckFailure;
            }

            // Enable comparisons between nil and Config struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Config value, NilType nil) => value.Equals(default(Config));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Config value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Config value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Config value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Config(NilType nil) => default(Config);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Config Config_cast(dynamic value)
        {
            return new Config(value.ID, value.Compiler, value.Dir, value.ImportPath, value.GoFiles, value.NonGoFiles, value.ImportMap, value.PackageFile, value.Standard, value.PackageVetx, value.VetxOnly, value.VetxOutput, value.SucceedOnTypecheckFailure);
        }
    }
}}}}}}