//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 06:03:53 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bytes = go.bytes_package;
using fmt = go.fmt_package;
using token = go.go.token_package;
using types = go.go.types_package;
using ssa = go.golang.org.x.tools.go.ssa_package;
using go;

#nullable enable

namespace go {
namespace golang.org {
namespace x {
namespace tools {
namespace go {
namespace ssa
{
    public static partial class ssautil_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct TypeCase
        {
            // Constructors
            public TypeCase(NilType _)
            {
                this.Block = default;
                this.Body = default;
                this.Type = default;
                this.Binding = default;
            }

            public TypeCase(ref ptr<ssa.BasicBlock> Block = default, ref ptr<ssa.BasicBlock> Body = default, types.Type Type = default, ssa.Value Binding = default)
            {
                this.Block = Block;
                this.Body = Body;
                this.Type = Type;
                this.Binding = Binding;
            }

            // Enable comparisons between nil and TypeCase struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(TypeCase value, NilType nil) => value.Equals(default(TypeCase));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(TypeCase value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, TypeCase value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, TypeCase value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator TypeCase(NilType nil) => default(TypeCase);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static TypeCase TypeCase_cast(dynamic value)
        {
            return new TypeCase(ref value.Block, ref value.Body, value.Type, value.Binding);
        }
    }
}}}}}}