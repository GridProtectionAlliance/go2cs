//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:27:47 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using errors = go.errors_package;
using path = go.path_package;
using go;

#nullable enable

namespace go {
namespace io
{
    public static partial class fs_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial struct subFS
        {
            // Constructors
            public subFS(NilType _)
            {
                this.fsys = default;
                this.dir = default;
            }

            public subFS(FS fsys = default, @string dir = default)
            {
                this.fsys = fsys;
                this.dir = dir;
            }

            // Enable comparisons between nil and subFS struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(subFS value, NilType nil) => value.Equals(default(subFS));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(subFS value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, subFS value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, subFS value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator subFS(NilType nil) => default(subFS);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private static subFS subFS_cast(dynamic value)
        {
            return new subFS(value.fsys, value.dir);
        }
    }
}}