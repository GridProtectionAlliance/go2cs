//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 04:49:26 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using errors = go.errors_package;

#nullable enable

namespace go
{
    public static partial class io_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct LimitedReader
        {
            // Constructors
            public LimitedReader(NilType _)
            {
                this.R = default;
                this.N = default;
            }

            public LimitedReader(Reader R = default, long N = default)
            {
                this.R = R;
                this.N = N;
            }

            // Enable comparisons between nil and LimitedReader struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(LimitedReader value, NilType nil) => value.Equals(default(LimitedReader));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(LimitedReader value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, LimitedReader value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, LimitedReader value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator LimitedReader(NilType nil) => default(LimitedReader);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static LimitedReader LimitedReader_cast(dynamic value)
        {
            return new LimitedReader(value.R, value.N);
        }
    }
}