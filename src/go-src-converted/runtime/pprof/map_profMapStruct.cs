//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:28:40 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using @unsafe = go.@unsafe_package;
using go;

#nullable enable

namespace go {
namespace runtime
{
    public static partial class pprof_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial struct profMap
        {
            // Constructors
            public profMap(NilType _)
            {
                this.hash = default;
                this.all = default;
                this.last = default;
                this.free = default;
                this.freeStk = default;
            }

            public profMap(map<System.UIntPtr, ptr<profMapEntry>> hash = default, ref ptr<profMapEntry> all = default, ref ptr<profMapEntry> last = default, slice<profMapEntry> free = default, slice<System.UIntPtr> freeStk = default)
            {
                this.hash = hash;
                this.all = all;
                this.last = last;
                this.free = free;
                this.freeStk = freeStk;
            }

            // Enable comparisons between nil and profMap struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(profMap value, NilType nil) => value.Equals(default(profMap));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(profMap value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, profMap value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, profMap value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator profMap(NilType nil) => default(profMap);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private static profMap profMap_cast(dynamic value)
        {
            return new profMap(value.hash, ref value.all, ref value.last, value.free, value.freeStk);
        }
    }
}}