//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 04:48:50 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using atomic = go.runtime.@internal.atomic_package;
using sys = go.runtime.@internal.sys_package;
using @unsafe = go.@unsafe_package;

#nullable enable

namespace go
{
    public static partial class runtime_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct moduledata
        {
            // Constructors
            public moduledata(NilType _)
            {
                this.pclntable = default;
                this.ftab = default;
                this.filetab = default;
                this.findfunctab = default;
                this.minpc = default;
                this.maxpc = default;
                this.text = default;
                this.etext = default;
                this.noptrdata = default;
                this.enoptrdata = default;
                this.data = default;
                this.edata = default;
                this.bss = default;
                this.ebss = default;
                this.noptrbss = default;
                this.enoptrbss = default;
                this.end = default;
                this.gcdata = default;
                this.gcbss = default;
                this.types = default;
                this.etypes = default;
                this.textsectmap = default;
                this.typelinks = default;
                this.itablinks = default;
                this.ptab = default;
                this.pluginpath = default;
                this.pkghashes = default;
                this.modulename = default;
                this.modulehashes = default;
                this.hasmain = default;
                this.gcdatamask = default;
                this.gcbssmask = default;
                this.typemap = default;
                this.bad = default;
                this.next = default;
            }

            public moduledata(slice<byte> pclntable = default, slice<functab> ftab = default, slice<uint> filetab = default, System.UIntPtr findfunctab = default, System.UIntPtr minpc = default, System.UIntPtr maxpc = default, System.UIntPtr text = default, System.UIntPtr etext = default, System.UIntPtr noptrdata = default, System.UIntPtr enoptrdata = default, System.UIntPtr data = default, System.UIntPtr edata = default, System.UIntPtr bss = default, System.UIntPtr ebss = default, System.UIntPtr noptrbss = default, System.UIntPtr enoptrbss = default, System.UIntPtr end = default, System.UIntPtr gcdata = default, System.UIntPtr gcbss = default, System.UIntPtr types = default, System.UIntPtr etypes = default, slice<textsect> textsectmap = default, slice<int> typelinks = default, slice<ptr<itab>> itablinks = default, slice<ptabEntry> ptab = default, @string pluginpath = default, slice<modulehash> pkghashes = default, @string modulename = default, slice<modulehash> modulehashes = default, byte hasmain = default, bitvector gcdatamask = default, bitvector gcbssmask = default, map<typeOff, ptr<_type>> typemap = default, bool bad = default, ref ptr<moduledata> next = default)
            {
                this.pclntable = pclntable;
                this.ftab = ftab;
                this.filetab = filetab;
                this.findfunctab = findfunctab;
                this.minpc = minpc;
                this.maxpc = maxpc;
                this.text = text;
                this.etext = etext;
                this.noptrdata = noptrdata;
                this.enoptrdata = enoptrdata;
                this.data = data;
                this.edata = edata;
                this.bss = bss;
                this.ebss = ebss;
                this.noptrbss = noptrbss;
                this.enoptrbss = enoptrbss;
                this.end = end;
                this.gcdata = gcdata;
                this.gcbss = gcbss;
                this.types = types;
                this.etypes = etypes;
                this.textsectmap = textsectmap;
                this.typelinks = typelinks;
                this.itablinks = itablinks;
                this.ptab = ptab;
                this.pluginpath = pluginpath;
                this.pkghashes = pkghashes;
                this.modulename = modulename;
                this.modulehashes = modulehashes;
                this.hasmain = hasmain;
                this.gcdatamask = gcdatamask;
                this.gcbssmask = gcbssmask;
                this.typemap = typemap;
                this.bad = bad;
                this.next = next;
            }

            // Enable comparisons between nil and moduledata struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(moduledata value, NilType nil) => value.Equals(default(moduledata));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(moduledata value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, moduledata value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, moduledata value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator moduledata(NilType nil) => default(moduledata);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static moduledata moduledata_cast(dynamic value)
        {
            return new moduledata(value.pclntable, value.ftab, value.filetab, value.findfunctab, value.minpc, value.maxpc, value.text, value.etext, value.noptrdata, value.enoptrdata, value.data, value.edata, value.bss, value.ebss, value.noptrbss, value.enoptrbss, value.end, value.gcdata, value.gcbss, value.types, value.etypes, value.textsectmap, value.typelinks, value.itablinks, value.ptab, value.pluginpath, value.pkghashes, value.modulename, value.modulehashes, value.hasmain, value.gcdatamask, value.gcbssmask, value.typemap, value.bad, ref value.next);
        }
    }
}