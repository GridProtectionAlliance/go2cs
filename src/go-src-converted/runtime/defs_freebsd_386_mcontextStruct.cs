//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 03:19:31 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using @unsafe = go.@unsafe_package;

namespace go
{
    public static partial class runtime_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct mcontext
        {
            // Constructors
            public mcontext(NilType _)
            {
                this.mc_onstack = default;
                this.mc_gs = default;
                this.mc_fs = default;
                this.mc_es = default;
                this.mc_ds = default;
                this.mc_edi = default;
                this.mc_esi = default;
                this.mc_ebp = default;
                this.mc_isp = default;
                this.mc_ebx = default;
                this.mc_edx = default;
                this.mc_ecx = default;
                this.mc_eax = default;
                this.mc_trapno = default;
                this.mc_err = default;
                this.mc_eip = default;
                this.mc_cs = default;
                this.mc_eflags = default;
                this.mc_esp = default;
                this.mc_ss = default;
                this.mc_len = default;
                this.mc_fpformat = default;
                this.mc_ownedfp = default;
                this.mc_flags = default;
                this.mc_fpstate = default;
                this.mc_fsbase = default;
                this.mc_gsbase = default;
                this.mc_xfpustate = default;
                this.mc_xfpustate_len = default;
                this.mc_spare2 = default;
            }

            public mcontext(uint mc_onstack = default, uint mc_gs = default, uint mc_fs = default, uint mc_es = default, uint mc_ds = default, uint mc_edi = default, uint mc_esi = default, uint mc_ebp = default, uint mc_isp = default, uint mc_ebx = default, uint mc_edx = default, uint mc_ecx = default, uint mc_eax = default, uint mc_trapno = default, uint mc_err = default, uint mc_eip = default, uint mc_cs = default, uint mc_eflags = default, uint mc_esp = default, uint mc_ss = default, uint mc_len = default, uint mc_fpformat = default, uint mc_ownedfp = default, uint mc_flags = default, array<uint> mc_fpstate = default, uint mc_fsbase = default, uint mc_gsbase = default, uint mc_xfpustate = default, uint mc_xfpustate_len = default, array<uint> mc_spare2 = default)
            {
                this.mc_onstack = mc_onstack;
                this.mc_gs = mc_gs;
                this.mc_fs = mc_fs;
                this.mc_es = mc_es;
                this.mc_ds = mc_ds;
                this.mc_edi = mc_edi;
                this.mc_esi = mc_esi;
                this.mc_ebp = mc_ebp;
                this.mc_isp = mc_isp;
                this.mc_ebx = mc_ebx;
                this.mc_edx = mc_edx;
                this.mc_ecx = mc_ecx;
                this.mc_eax = mc_eax;
                this.mc_trapno = mc_trapno;
                this.mc_err = mc_err;
                this.mc_eip = mc_eip;
                this.mc_cs = mc_cs;
                this.mc_eflags = mc_eflags;
                this.mc_esp = mc_esp;
                this.mc_ss = mc_ss;
                this.mc_len = mc_len;
                this.mc_fpformat = mc_fpformat;
                this.mc_ownedfp = mc_ownedfp;
                this.mc_flags = mc_flags;
                this.mc_fpstate = mc_fpstate;
                this.mc_fsbase = mc_fsbase;
                this.mc_gsbase = mc_gsbase;
                this.mc_xfpustate = mc_xfpustate;
                this.mc_xfpustate_len = mc_xfpustate_len;
                this.mc_spare2 = mc_spare2;
            }

            // Enable comparisons between nil and mcontext struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(mcontext value, NilType nil) => value.Equals(default(mcontext));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(mcontext value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, mcontext value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, mcontext value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator mcontext(NilType nil) => default(mcontext);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static mcontext mcontext_cast(dynamic value)
        {
            return new mcontext(value.mc_onstack, value.mc_gs, value.mc_fs, value.mc_es, value.mc_ds, value.mc_edi, value.mc_esi, value.mc_ebp, value.mc_isp, value.mc_ebx, value.mc_edx, value.mc_ecx, value.mc_eax, value.mc_trapno, value.mc_err, value.mc_eip, value.mc_cs, value.mc_eflags, value.mc_esp, value.mc_ss, value.mc_len, value.mc_fpformat, value.mc_ownedfp, value.mc_flags, value.mc_fpstate, value.mc_fsbase, value.mc_gsbase, value.mc_xfpustate, value.mc_xfpustate_len, value.mc_spare2);
        }
    }
}