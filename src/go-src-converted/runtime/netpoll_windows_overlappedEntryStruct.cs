//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 22:10:18 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using atomic = go.runtime.@internal.atomic_package;
using @unsafe = go.@unsafe_package;

#nullable enable

namespace go
{
    public static partial class runtime_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct overlappedEntry
        {
            // Constructors
            public overlappedEntry(NilType _)
            {
                this.key = default;
                this.op = default;
                this.@internal = default;
                this.qty = default;
            }

            public overlappedEntry(System.UIntPtr key = default, ref ptr<net_op> op = default, System.UIntPtr @internal = default, uint qty = default)
            {
                this.key = key;
                this.op = op;
                this.@internal = @internal;
                this.qty = qty;
            }

            // Enable comparisons between nil and overlappedEntry struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(overlappedEntry value, NilType nil) => value.Equals(default(overlappedEntry));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(overlappedEntry value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, overlappedEntry value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, overlappedEntry value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator overlappedEntry(NilType nil) => default(overlappedEntry);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static overlappedEntry overlappedEntry_cast(dynamic value)
        {
            return new overlappedEntry(value.key, ref value.op, value.@internal, value.qty);
        }
    }
}