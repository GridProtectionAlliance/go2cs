//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 03:21:14 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using cpu = go.@internal.cpu_package;
using atomic = go.runtime.@internal.atomic_package;
using sys = go.runtime.@internal.sys_package;
using @unsafe = go.@unsafe_package;

namespace go
{
    public static partial class runtime_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct mheap
        {
            // Constructors
            public mheap(NilType _)
            {
                this.@lock = default;
                this.pages = default;
                this.sweepgen = default;
                this.sweepdone = default;
                this.sweepers = default;
                this.allspans = default;
                this.sweepSpans = default;
                this._ = default;
                this.pagesInUse = default;
                this.pagesSwept = default;
                this.pagesSweptBasis = default;
                this.sweepHeapLiveBasis = default;
                this.sweepPagesPerByte = default;
                this.scavengeGoal = default;
                this.reclaimIndex = default;
                this.reclaimCredit = default;
                this.largealloc = default;
                this.nlargealloc = default;
                this.largefree = default;
                this.nlargefree = default;
                this.nsmallfree = default;
                this.arenas = default;
                this.heapArenaAlloc = default;
                this.arenaHints = default;
                this.arena = default;
                this.allArenas = default;
                this.sweepArenas = default;
                this.markArenas = default;
                this.spanalloc = default;
                this.cachealloc = default;
                this.specialfinalizeralloc = default;
                this.specialprofilealloc = default;
                this.speciallock = default;
                this.arenaHintAlloc = default;
                this.unused = default;
            }

            public mheap(mutex @lock = default, pageAlloc pages = default, uint sweepgen = default, uint sweepdone = default, uint sweepers = default, slice<ptr<mspan>> allspans = default, array<gcSweepBuf> sweepSpans = default, uint _ = default, ulong pagesInUse = default, ulong pagesSwept = default, ulong pagesSweptBasis = default, ulong sweepHeapLiveBasis = default, double sweepPagesPerByte = default, ulong scavengeGoal = default, ulong reclaimIndex = default, System.UIntPtr reclaimCredit = default, ulong largealloc = default, ulong nlargealloc = default, ulong largefree = default, ulong nlargefree = default, array<ulong> nsmallfree = default, array<ptr<array<ptr<heapArena>>>> arenas = default, linearAlloc heapArenaAlloc = default, ref ptr<arenaHint> arenaHints = default, linearAlloc arena = default, slice<arenaIdx> allArenas = default, slice<arenaIdx> sweepArenas = default, slice<arenaIdx> markArenas = default, fixalloc spanalloc = default, fixalloc cachealloc = default, fixalloc specialfinalizeralloc = default, fixalloc specialprofilealloc = default, mutex speciallock = default, fixalloc arenaHintAlloc = default, ref ptr<specialfinalizer> unused = default)
            {
                this.@lock = @lock;
                this.pages = pages;
                this.sweepgen = sweepgen;
                this.sweepdone = sweepdone;
                this.sweepers = sweepers;
                this.allspans = allspans;
                this.sweepSpans = sweepSpans;
                this._ = _;
                this.pagesInUse = pagesInUse;
                this.pagesSwept = pagesSwept;
                this.pagesSweptBasis = pagesSweptBasis;
                this.sweepHeapLiveBasis = sweepHeapLiveBasis;
                this.sweepPagesPerByte = sweepPagesPerByte;
                this.scavengeGoal = scavengeGoal;
                this.reclaimIndex = reclaimIndex;
                this.reclaimCredit = reclaimCredit;
                this.largealloc = largealloc;
                this.nlargealloc = nlargealloc;
                this.largefree = largefree;
                this.nlargefree = nlargefree;
                this.nsmallfree = nsmallfree;
                this.arenas = arenas;
                this.heapArenaAlloc = heapArenaAlloc;
                this.arenaHints = arenaHints;
                this.arena = arena;
                this.allArenas = allArenas;
                this.sweepArenas = sweepArenas;
                this.markArenas = markArenas;
                this.spanalloc = spanalloc;
                this.cachealloc = cachealloc;
                this.specialfinalizeralloc = specialfinalizeralloc;
                this.specialprofilealloc = specialprofilealloc;
                this.speciallock = speciallock;
                this.arenaHintAlloc = arenaHintAlloc;
                this.unused = unused;
            }

            // Enable comparisons between nil and mheap struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(mheap value, NilType nil) => value.Equals(default(mheap));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(mheap value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, mheap value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, mheap value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator mheap(NilType nil) => default(mheap);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static mheap mheap_cast(dynamic value)
        {
            return new mheap(value.@lock, value.pages, value.sweepgen, value.sweepdone, value.sweepers, value.allspans, value.sweepSpans, value._, value.pagesInUse, value.pagesSwept, value.pagesSweptBasis, value.sweepHeapLiveBasis, value.sweepPagesPerByte, value.scavengeGoal, value.reclaimIndex, value.reclaimCredit, value.largealloc, value.nlargealloc, value.largefree, value.nlargefree, value.nsmallfree, value.arenas, value.heapArenaAlloc, ref value.arenaHints, value.arena, value.allArenas, value.sweepArenas, value.markArenas, value.spanalloc, value.cachealloc, value.specialfinalizeralloc, value.specialprofilealloc, value.speciallock, value.arenaHintAlloc, ref value.unused);
        }
    }
}