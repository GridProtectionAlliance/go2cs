//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 04:45:33 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using cpu = go.@internal.cpu_package;
using @unsafe = go.@unsafe_package;
using go;

#nullable enable

namespace go {
namespace runtime {
namespace @internal
{
    public static partial class atomic_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct spinlock
        {
            // Constructors
            public spinlock(NilType _)
            {
                this.v = default;
            }

            public spinlock(uint v = default)
            {
                this.v = v;
            }

            // Enable comparisons between nil and spinlock struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(spinlock value, NilType nil) => value.Equals(default(spinlock));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(spinlock value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, spinlock value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, spinlock value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator spinlock(NilType nil) => default(spinlock);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static spinlock spinlock_cast(dynamic value)
        {
            return new spinlock(value.v);
        }
    }
}}}