//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 22:11:17 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using atomic = go.runtime.@internal.atomic_package;
using sys = go.runtime.@internal.sys_package;
using @unsafe = go.@unsafe_package;

#nullable enable

namespace go
{
    public static partial class runtime_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct lfnode
        {
            // Constructors
            public lfnode(NilType _)
            {
                this.next = default;
                this.pushcnt = default;
            }

            public lfnode(ulong next = default, System.UIntPtr pushcnt = default)
            {
                this.next = next;
                this.pushcnt = pushcnt;
            }

            // Enable comparisons between nil and lfnode struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(lfnode value, NilType nil) => value.Equals(default(lfnode));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(lfnode value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, lfnode value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, lfnode value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator lfnode(NilType nil) => default(lfnode);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static lfnode lfnode_cast(dynamic value)
        {
            return new lfnode(value.next, value.pushcnt);
        }
    }
}