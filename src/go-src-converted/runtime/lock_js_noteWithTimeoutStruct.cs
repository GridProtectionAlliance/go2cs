//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 03:20:01 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using _@unsafe_ = go.@unsafe_package;

namespace go
{
    public static partial class runtime_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct noteWithTimeout
        {
            // Constructors
            public noteWithTimeout(NilType _)
            {
                this.gp = default;
                this.deadline = default;
            }

            public noteWithTimeout(ref ptr<g> gp = default, long deadline = default)
            {
                this.gp = gp;
                this.deadline = deadline;
            }

            // Enable comparisons between nil and noteWithTimeout struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(noteWithTimeout value, NilType nil) => value.Equals(default(noteWithTimeout));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(noteWithTimeout value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, noteWithTimeout value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, noteWithTimeout value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator noteWithTimeout(NilType nil) => default(noteWithTimeout);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static noteWithTimeout noteWithTimeout_cast(dynamic value)
        {
            return new noteWithTimeout(ref value.gp, value.deadline);
        }
    }
}