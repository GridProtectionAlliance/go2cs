//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 22:08:34 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using @unsafe = go.@unsafe_package;

#nullable enable

namespace go
{
    public static partial class runtime_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct sigcontext
        {
            // Constructors
            public sigcontext(NilType _)
            {
                this.sc_rdi = default;
                this.sc_rsi = default;
                this.sc_rdx = default;
                this.sc_rcx = default;
                this.sc_r8 = default;
                this.sc_r9 = default;
                this.sc_r10 = default;
                this.sc_r11 = default;
                this.sc_r12 = default;
                this.sc_r13 = default;
                this.sc_r14 = default;
                this.sc_r15 = default;
                this.sc_rbp = default;
                this.sc_rbx = default;
                this.sc_rax = default;
                this.sc_gs = default;
                this.sc_fs = default;
                this.sc_es = default;
                this.sc_ds = default;
                this.sc_trapno = default;
                this.sc_err = default;
                this.sc_rip = default;
                this.sc_cs = default;
                this.sc_rflags = default;
                this.sc_rsp = default;
                this.sc_ss = default;
                this.sc_fpstate = default;
                this.__sc_unused = default;
                this.sc_mask = default;
            }

            public sigcontext(ulong sc_rdi = default, ulong sc_rsi = default, ulong sc_rdx = default, ulong sc_rcx = default, ulong sc_r8 = default, ulong sc_r9 = default, ulong sc_r10 = default, ulong sc_r11 = default, ulong sc_r12 = default, ulong sc_r13 = default, ulong sc_r14 = default, ulong sc_r15 = default, ulong sc_rbp = default, ulong sc_rbx = default, ulong sc_rax = default, ulong sc_gs = default, ulong sc_fs = default, ulong sc_es = default, ulong sc_ds = default, ulong sc_trapno = default, ulong sc_err = default, ulong sc_rip = default, ulong sc_cs = default, ulong sc_rflags = default, ulong sc_rsp = default, ulong sc_ss = default, unsafe.Pointer sc_fpstate = default, int __sc_unused = default, int sc_mask = default)
            {
                this.sc_rdi = sc_rdi;
                this.sc_rsi = sc_rsi;
                this.sc_rdx = sc_rdx;
                this.sc_rcx = sc_rcx;
                this.sc_r8 = sc_r8;
                this.sc_r9 = sc_r9;
                this.sc_r10 = sc_r10;
                this.sc_r11 = sc_r11;
                this.sc_r12 = sc_r12;
                this.sc_r13 = sc_r13;
                this.sc_r14 = sc_r14;
                this.sc_r15 = sc_r15;
                this.sc_rbp = sc_rbp;
                this.sc_rbx = sc_rbx;
                this.sc_rax = sc_rax;
                this.sc_gs = sc_gs;
                this.sc_fs = sc_fs;
                this.sc_es = sc_es;
                this.sc_ds = sc_ds;
                this.sc_trapno = sc_trapno;
                this.sc_err = sc_err;
                this.sc_rip = sc_rip;
                this.sc_cs = sc_cs;
                this.sc_rflags = sc_rflags;
                this.sc_rsp = sc_rsp;
                this.sc_ss = sc_ss;
                this.sc_fpstate = sc_fpstate;
                this.__sc_unused = __sc_unused;
                this.sc_mask = sc_mask;
            }

            // Enable comparisons between nil and sigcontext struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(sigcontext value, NilType nil) => value.Equals(default(sigcontext));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(sigcontext value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, sigcontext value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, sigcontext value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator sigcontext(NilType nil) => default(sigcontext);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static sigcontext sigcontext_cast(dynamic value)
        {
            return new sigcontext(value.sc_rdi, value.sc_rsi, value.sc_rdx, value.sc_rcx, value.sc_r8, value.sc_r9, value.sc_r10, value.sc_r11, value.sc_r12, value.sc_r13, value.sc_r14, value.sc_r15, value.sc_rbp, value.sc_rbx, value.sc_rax, value.sc_gs, value.sc_fs, value.sc_es, value.sc_ds, value.sc_trapno, value.sc_err, value.sc_rip, value.sc_cs, value.sc_rflags, value.sc_rsp, value.sc_ss, value.sc_fpstate, value.__sc_unused, value.sc_mask);
        }
    }
}