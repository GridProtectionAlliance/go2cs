//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 22:08:33 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using @unsafe = go.@unsafe_package;

#nullable enable

namespace go
{
    public static partial class runtime_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct bintime
        {
            // Constructors
            public bintime(NilType _)
            {
                this.sec = default;
                this.frac = default;
            }

            public bintime(int sec = default, ulong frac = default)
            {
                this.sec = sec;
                this.frac = frac;
            }

            // Enable comparisons between nil and bintime struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(bintime value, NilType nil) => value.Equals(default(bintime));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(bintime value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, bintime value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, bintime value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator bintime(NilType nil) => default(bintime);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static bintime bintime_cast(dynamic value)
        {
            return new bintime(value.sec, value.frac);
        }
    }
}