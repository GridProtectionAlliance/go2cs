//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 04:45:49 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using @unsafe = go.@unsafe_package;

#nullable enable

namespace go
{
    public static partial class runtime_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct mcontext
        {
            // Constructors
            public mcontext(NilType _)
            {
                this.mc_onstack = default;
                this.mc_rdi = default;
                this.mc_rsi = default;
                this.mc_rdx = default;
                this.mc_rcx = default;
                this.mc_r8 = default;
                this.mc_r9 = default;
                this.mc_rax = default;
                this.mc_rbx = default;
                this.mc_rbp = default;
                this.mc_r10 = default;
                this.mc_r11 = default;
                this.mc_r12 = default;
                this.mc_r13 = default;
                this.mc_r14 = default;
                this.mc_r15 = default;
                this.mc_trapno = default;
                this.mc_fs = default;
                this.mc_gs = default;
                this.mc_addr = default;
                this.mc_flags = default;
                this.mc_es = default;
                this.mc_ds = default;
                this.mc_err = default;
                this.mc_rip = default;
                this.mc_cs = default;
                this.mc_rflags = default;
                this.mc_rsp = default;
                this.mc_ss = default;
                this.mc_len = default;
                this.mc_fpformat = default;
                this.mc_ownedfp = default;
                this.mc_fpstate = default;
                this.mc_fsbase = default;
                this.mc_gsbase = default;
                this.mc_xfpustate = default;
                this.mc_xfpustate_len = default;
                this.mc_spare = default;
            }

            public mcontext(ulong mc_onstack = default, ulong mc_rdi = default, ulong mc_rsi = default, ulong mc_rdx = default, ulong mc_rcx = default, ulong mc_r8 = default, ulong mc_r9 = default, ulong mc_rax = default, ulong mc_rbx = default, ulong mc_rbp = default, ulong mc_r10 = default, ulong mc_r11 = default, ulong mc_r12 = default, ulong mc_r13 = default, ulong mc_r14 = default, ulong mc_r15 = default, uint mc_trapno = default, ushort mc_fs = default, ushort mc_gs = default, ulong mc_addr = default, uint mc_flags = default, ushort mc_es = default, ushort mc_ds = default, ulong mc_err = default, ulong mc_rip = default, ulong mc_cs = default, ulong mc_rflags = default, ulong mc_rsp = default, ulong mc_ss = default, ulong mc_len = default, ulong mc_fpformat = default, ulong mc_ownedfp = default, array<ulong> mc_fpstate = default, ulong mc_fsbase = default, ulong mc_gsbase = default, ulong mc_xfpustate = default, ulong mc_xfpustate_len = default, array<ulong> mc_spare = default)
            {
                this.mc_onstack = mc_onstack;
                this.mc_rdi = mc_rdi;
                this.mc_rsi = mc_rsi;
                this.mc_rdx = mc_rdx;
                this.mc_rcx = mc_rcx;
                this.mc_r8 = mc_r8;
                this.mc_r9 = mc_r9;
                this.mc_rax = mc_rax;
                this.mc_rbx = mc_rbx;
                this.mc_rbp = mc_rbp;
                this.mc_r10 = mc_r10;
                this.mc_r11 = mc_r11;
                this.mc_r12 = mc_r12;
                this.mc_r13 = mc_r13;
                this.mc_r14 = mc_r14;
                this.mc_r15 = mc_r15;
                this.mc_trapno = mc_trapno;
                this.mc_fs = mc_fs;
                this.mc_gs = mc_gs;
                this.mc_addr = mc_addr;
                this.mc_flags = mc_flags;
                this.mc_es = mc_es;
                this.mc_ds = mc_ds;
                this.mc_err = mc_err;
                this.mc_rip = mc_rip;
                this.mc_cs = mc_cs;
                this.mc_rflags = mc_rflags;
                this.mc_rsp = mc_rsp;
                this.mc_ss = mc_ss;
                this.mc_len = mc_len;
                this.mc_fpformat = mc_fpformat;
                this.mc_ownedfp = mc_ownedfp;
                this.mc_fpstate = mc_fpstate;
                this.mc_fsbase = mc_fsbase;
                this.mc_gsbase = mc_gsbase;
                this.mc_xfpustate = mc_xfpustate;
                this.mc_xfpustate_len = mc_xfpustate_len;
                this.mc_spare = mc_spare;
            }

            // Enable comparisons between nil and mcontext struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(mcontext value, NilType nil) => value.Equals(default(mcontext));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(mcontext value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, mcontext value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, mcontext value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator mcontext(NilType nil) => default(mcontext);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static mcontext mcontext_cast(dynamic value)
        {
            return new mcontext(value.mc_onstack, value.mc_rdi, value.mc_rsi, value.mc_rdx, value.mc_rcx, value.mc_r8, value.mc_r9, value.mc_rax, value.mc_rbx, value.mc_rbp, value.mc_r10, value.mc_r11, value.mc_r12, value.mc_r13, value.mc_r14, value.mc_r15, value.mc_trapno, value.mc_fs, value.mc_gs, value.mc_addr, value.mc_flags, value.mc_es, value.mc_ds, value.mc_err, value.mc_rip, value.mc_cs, value.mc_rflags, value.mc_rsp, value.mc_ss, value.mc_len, value.mc_fpformat, value.mc_ownedfp, value.mc_fpstate, value.mc_fsbase, value.mc_gsbase, value.mc_xfpustate, value.mc_xfpustate_len, value.mc_spare);
        }
    }
}