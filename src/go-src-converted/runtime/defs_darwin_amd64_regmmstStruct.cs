//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 03:19:29 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using @unsafe = go.@unsafe_package;

namespace go
{
    public static partial class runtime_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct regmmst
        {
            // Constructors
            public regmmst(NilType _)
            {
                this.mmst_reg = default;
                this.mmst_rsrv = default;
            }

            public regmmst(array<sbyte> mmst_reg = default, array<sbyte> mmst_rsrv = default)
            {
                this.mmst_reg = mmst_reg;
                this.mmst_rsrv = mmst_rsrv;
            }

            // Enable comparisons between nil and regmmst struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(regmmst value, NilType nil) => value.Equals(default(regmmst));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(regmmst value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, regmmst value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, regmmst value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator regmmst(NilType nil) => default(regmmst);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static regmmst regmmst_cast(dynamic value)
        {
            return new regmmst(value.mmst_reg, value.mmst_rsrv);
        }
    }
}