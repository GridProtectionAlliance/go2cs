//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 22:11:17 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using atomic = go.runtime.@internal.atomic_package;
using sys = go.runtime.@internal.sys_package;
using @unsafe = go.@unsafe_package;

#nullable enable

namespace go
{
    public static partial class runtime_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct m
        {
            // Constructors
            public m(NilType _)
            {
                this.g0 = default;
                this.morebuf = default;
                this.divmod = default;
                this.procid = default;
                this.gsignal = default;
                this.goSigStack = default;
                this.sigmask = default;
                this.tls = default;
                this.mstartfn = default;
                this.curg = default;
                this.caughtsig = default;
                this.p = default;
                this.nextp = default;
                this.oldp = default;
                this.id = default;
                this.mallocing = default;
                this.throwing = default;
                this.preemptoff = default;
                this.locks = default;
                this.dying = default;
                this.profilehz = default;
                this.spinning = default;
                this.blocked = default;
                this.newSigstack = default;
                this.printlock = default;
                this.incgo = default;
                this.freeWait = default;
                this.fastrand = default;
                this.needextram = default;
                this.traceback = default;
                this.ncgocall = default;
                this.ncgo = default;
                this.cgoCallersUse = default;
                this.cgoCallers = default;
                this.doesPark = default;
                this.park = default;
                this.alllink = default;
                this.schedlink = default;
                this.lockedg = default;
                this.createstack = default;
                this.lockedExt = default;
                this.lockedInt = default;
                this.nextwaitm = default;
                this.waitunlockf = default;
                this.waitlock = default;
                this.waittraceev = default;
                this.waittraceskip = default;
                this.startingtrace = default;
                this.syscalltick = default;
                this.freelink = default;
                this.libcall = default;
                this.libcallpc = default;
                this.libcallsp = default;
                this.libcallg = default;
                this.syscall = default;
                this.vdsoSP = default;
                this.vdsoPC = default;
                this.preemptGen = default;
                this.signalPending = default;
                this.dlogPerM = default;
                this.mOS = default;
                this.locksHeldLen = default;
                this.locksHeld = default;
            }

            public m(ref ptr<g> g0 = default, gobuf morebuf = default, uint divmod = default, ulong procid = default, ref ptr<g> gsignal = default, gsignalStack goSigStack = default, sigset sigmask = default, array<System.UIntPtr> tls = default, Action mstartfn = default, ref ptr<g> curg = default, guintptr caughtsig = default, puintptr p = default, puintptr nextp = default, puintptr oldp = default, long id = default, int mallocing = default, int throwing = default, @string preemptoff = default, int locks = default, int dying = default, int profilehz = default, bool spinning = default, bool blocked = default, bool newSigstack = default, sbyte printlock = default, bool incgo = default, uint freeWait = default, array<uint> fastrand = default, bool needextram = default, byte traceback = default, ulong ncgocall = default, int ncgo = default, uint cgoCallersUse = default, ref ptr<cgoCallers> cgoCallers = default, bool doesPark = default, note park = default, ref ptr<m> alllink = default, muintptr schedlink = default, guintptr lockedg = default, array<System.UIntPtr> createstack = default, uint lockedExt = default, uint lockedInt = default, muintptr nextwaitm = default, Func<ptr<g>, unsafe.Pointer, bool> waitunlockf = default, unsafe.Pointer waitlock = default, byte waittraceev = default, nint waittraceskip = default, bool startingtrace = default, uint syscalltick = default, ref ptr<m> freelink = default, libcall libcall = default, System.UIntPtr libcallpc = default, System.UIntPtr libcallsp = default, guintptr libcallg = default, libcall syscall = default, System.UIntPtr vdsoSP = default, System.UIntPtr vdsoPC = default, uint preemptGen = default, uint signalPending = default, dlogPerM dlogPerM = default, mOS mOS = default, nint locksHeldLen = default, array<heldLockInfo> locksHeld = default)
            {
                this.g0 = g0;
                this.morebuf = morebuf;
                this.divmod = divmod;
                this.procid = procid;
                this.gsignal = gsignal;
                this.goSigStack = goSigStack;
                this.sigmask = sigmask;
                this.tls = tls;
                this.mstartfn = mstartfn;
                this.curg = curg;
                this.caughtsig = caughtsig;
                this.p = p;
                this.nextp = nextp;
                this.oldp = oldp;
                this.id = id;
                this.mallocing = mallocing;
                this.throwing = throwing;
                this.preemptoff = preemptoff;
                this.locks = locks;
                this.dying = dying;
                this.profilehz = profilehz;
                this.spinning = spinning;
                this.blocked = blocked;
                this.newSigstack = newSigstack;
                this.printlock = printlock;
                this.incgo = incgo;
                this.freeWait = freeWait;
                this.fastrand = fastrand;
                this.needextram = needextram;
                this.traceback = traceback;
                this.ncgocall = ncgocall;
                this.ncgo = ncgo;
                this.cgoCallersUse = cgoCallersUse;
                this.cgoCallers = cgoCallers;
                this.doesPark = doesPark;
                this.park = park;
                this.alllink = alllink;
                this.schedlink = schedlink;
                this.lockedg = lockedg;
                this.createstack = createstack;
                this.lockedExt = lockedExt;
                this.lockedInt = lockedInt;
                this.nextwaitm = nextwaitm;
                this.waitunlockf = waitunlockf;
                this.waitlock = waitlock;
                this.waittraceev = waittraceev;
                this.waittraceskip = waittraceskip;
                this.startingtrace = startingtrace;
                this.syscalltick = syscalltick;
                this.freelink = freelink;
                this.libcall = libcall;
                this.libcallpc = libcallpc;
                this.libcallsp = libcallsp;
                this.libcallg = libcallg;
                this.syscall = syscall;
                this.vdsoSP = vdsoSP;
                this.vdsoPC = vdsoPC;
                this.preemptGen = preemptGen;
                this.signalPending = signalPending;
                this.dlogPerM = dlogPerM;
                this.mOS = mOS;
                this.locksHeldLen = locksHeldLen;
                this.locksHeld = locksHeld;
            }

            // Enable comparisons between nil and m struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(m value, NilType nil) => value.Equals(default(m));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(m value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, m value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, m value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator m(NilType nil) => default(m);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static m m_cast(dynamic value)
        {
            return new m(ref value.g0, value.morebuf, value.divmod, value.procid, ref value.gsignal, value.goSigStack, value.sigmask, value.tls, value.mstartfn, ref value.curg, value.caughtsig, value.p, value.nextp, value.oldp, value.id, value.mallocing, value.throwing, value.preemptoff, value.locks, value.dying, value.profilehz, value.spinning, value.blocked, value.newSigstack, value.printlock, value.incgo, value.freeWait, value.fastrand, value.needextram, value.traceback, value.ncgocall, value.ncgo, value.cgoCallersUse, ref value.cgoCallers, value.doesPark, value.park, ref value.alllink, value.schedlink, value.lockedg, value.createstack, value.lockedExt, value.lockedInt, value.nextwaitm, value.waitunlockf, value.waitlock, value.waittraceev, value.waittraceskip, value.startingtrace, value.syscalltick, ref value.freelink, value.libcall, value.libcallpc, value.libcallsp, value.libcallg, value.syscall, value.vdsoSP, value.vdsoPC, value.preemptGen, value.signalPending, value.dlogPerM, value.mOS, value.locksHeldLen, value.locksHeld);
        }
    }
}