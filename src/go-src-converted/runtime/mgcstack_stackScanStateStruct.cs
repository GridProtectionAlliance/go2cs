//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:25:34 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using sys = go.runtime.@internal.sys_package;
using @unsafe = go.@unsafe_package;

#nullable enable

namespace go
{
    public static partial class runtime_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial struct stackScanState
        {
            // Constructors
            public stackScanState(NilType _)
            {
                this.cache = default;
                this.stack = default;
                this.conservative = default;
                this.buf = default;
                this.freeBuf = default;
                this.cbuf = default;
                this.head = default;
                this.tail = default;
                this.nobjs = default;
                this.root = default;
            }

            public stackScanState(pcvalueCache cache = default, stack stack = default, bool conservative = default, ref ptr<stackWorkBuf> buf = default, ref ptr<stackWorkBuf> freeBuf = default, ref ptr<stackWorkBuf> cbuf = default, ref ptr<stackObjectBuf> head = default, ref ptr<stackObjectBuf> tail = default, nint nobjs = default, ref ptr<stackObject> root = default)
            {
                this.cache = cache;
                this.stack = stack;
                this.conservative = conservative;
                this.buf = buf;
                this.freeBuf = freeBuf;
                this.cbuf = cbuf;
                this.head = head;
                this.tail = tail;
                this.nobjs = nobjs;
                this.root = root;
            }

            // Enable comparisons between nil and stackScanState struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(stackScanState value, NilType nil) => value.Equals(default(stackScanState));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(stackScanState value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, stackScanState value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, stackScanState value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator stackScanState(NilType nil) => default(stackScanState);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private static stackScanState stackScanState_cast(dynamic value)
        {
            return new stackScanState(value.cache, value.stack, value.conservative, ref value.buf, ref value.freeBuf, ref value.cbuf, ref value.head, ref value.tail, value.nobjs, ref value.root);
        }
    }
}