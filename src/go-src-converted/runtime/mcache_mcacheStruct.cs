//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:25:04 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using atomic = go.runtime.@internal.atomic_package;
using @unsafe = go.@unsafe_package;

#nullable enable

namespace go
{
    public static partial class runtime_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial struct mcache
        {
            // Constructors
            public mcache(NilType _)
            {
                this.nextSample = default;
                this.scanAlloc = default;
                this.tiny = default;
                this.tinyoffset = default;
                this.tinyAllocs = default;
                this.alloc = default;
                this.stackcache = default;
                this.flushGen = default;
            }

            public mcache(System.UIntPtr nextSample = default, System.UIntPtr scanAlloc = default, System.UIntPtr tiny = default, System.UIntPtr tinyoffset = default, System.UIntPtr tinyAllocs = default, array<ptr<mspan>> alloc = default, array<stackfreelist> stackcache = default, uint flushGen = default)
            {
                this.nextSample = nextSample;
                this.scanAlloc = scanAlloc;
                this.tiny = tiny;
                this.tinyoffset = tinyoffset;
                this.tinyAllocs = tinyAllocs;
                this.alloc = alloc;
                this.stackcache = stackcache;
                this.flushGen = flushGen;
            }

            // Enable comparisons between nil and mcache struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(mcache value, NilType nil) => value.Equals(default(mcache));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(mcache value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, mcache value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, mcache value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator mcache(NilType nil) => default(mcache);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private static mcache mcache_cast(dynamic value)
        {
            return new mcache(value.nextSample, value.scanAlloc, value.tiny, value.tinyoffset, value.tinyAllocs, value.alloc, value.stackcache, value.flushGen);
        }
    }
}