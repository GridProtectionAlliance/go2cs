//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 04:48:11 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using @unsafe = go.@unsafe_package;

#nullable enable

namespace go
{
    public static partial class runtime_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct scase
        {
            // Constructors
            public scase(NilType _)
            {
                this.c = default;
                this.elem = default;
                this.kind = default;
                this.pc = default;
                this.releasetime = default;
            }

            public scase(ref ptr<hchan> c = default, unsafe.Pointer elem = default, ushort kind = default, System.UIntPtr pc = default, long releasetime = default)
            {
                this.c = c;
                this.elem = elem;
                this.kind = kind;
                this.pc = pc;
                this.releasetime = releasetime;
            }

            // Enable comparisons between nil and scase struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(scase value, NilType nil) => value.Equals(default(scase));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(scase value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, scase value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, scase value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator scase(NilType nil) => default(scase);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static scase scase_cast(dynamic value)
        {
            return new scase(ref value.c, value.elem, value.kind, value.pc, value.releasetime);
        }
    }
}