//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 03:19:34 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using @unsafe = go.@unsafe_package;

namespace go
{
    public static partial class runtime_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct sigcontext
        {
            // Constructors
            public sigcontext(NilType _)
            {
                this.sc_gs = default;
                this.sc_fs = default;
                this.sc_es = default;
                this.sc_ds = default;
                this.sc_edi = default;
                this.sc_esi = default;
                this.sc_ebp = default;
                this.sc_ebx = default;
                this.sc_edx = default;
                this.sc_ecx = default;
                this.sc_eax = default;
                this.sc_eip = default;
                this.sc_cs = default;
                this.sc_eflags = default;
                this.sc_esp = default;
                this.sc_ss = default;
                this.__sc_unused = default;
                this.sc_mask = default;
                this.sc_trapno = default;
                this.sc_err = default;
                this.sc_fpstate = default;
            }

            public sigcontext(uint sc_gs = default, uint sc_fs = default, uint sc_es = default, uint sc_ds = default, uint sc_edi = default, uint sc_esi = default, uint sc_ebp = default, uint sc_ebx = default, uint sc_edx = default, uint sc_ecx = default, uint sc_eax = default, uint sc_eip = default, uint sc_cs = default, uint sc_eflags = default, uint sc_esp = default, uint sc_ss = default, uint __sc_unused = default, uint sc_mask = default, uint sc_trapno = default, uint sc_err = default, unsafe.Pointer sc_fpstate = default)
            {
                this.sc_gs = sc_gs;
                this.sc_fs = sc_fs;
                this.sc_es = sc_es;
                this.sc_ds = sc_ds;
                this.sc_edi = sc_edi;
                this.sc_esi = sc_esi;
                this.sc_ebp = sc_ebp;
                this.sc_ebx = sc_ebx;
                this.sc_edx = sc_edx;
                this.sc_ecx = sc_ecx;
                this.sc_eax = sc_eax;
                this.sc_eip = sc_eip;
                this.sc_cs = sc_cs;
                this.sc_eflags = sc_eflags;
                this.sc_esp = sc_esp;
                this.sc_ss = sc_ss;
                this.__sc_unused = __sc_unused;
                this.sc_mask = sc_mask;
                this.sc_trapno = sc_trapno;
                this.sc_err = sc_err;
                this.sc_fpstate = sc_fpstate;
            }

            // Enable comparisons between nil and sigcontext struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(sigcontext value, NilType nil) => value.Equals(default(sigcontext));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(sigcontext value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, sigcontext value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, sigcontext value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator sigcontext(NilType nil) => default(sigcontext);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static sigcontext sigcontext_cast(dynamic value)
        {
            return new sigcontext(value.sc_gs, value.sc_fs, value.sc_es, value.sc_ds, value.sc_edi, value.sc_esi, value.sc_ebp, value.sc_ebx, value.sc_edx, value.sc_ecx, value.sc_eax, value.sc_eip, value.sc_cs, value.sc_eflags, value.sc_esp, value.sc_ss, value.__sc_unused, value.sc_mask, value.sc_trapno, value.sc_err, value.sc_fpstate);
        }
    }
}