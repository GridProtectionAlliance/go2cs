//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 04:46:16 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using atomic = go.runtime.@internal.atomic_package;
using math = go.runtime.@internal.math_package;
using sys = go.runtime.@internal.sys_package;
using @unsafe = go.@unsafe_package;

#nullable enable

namespace go
{
    public static partial class runtime_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct mapextra
        {
            // Constructors
            public mapextra(NilType _)
            {
                this.overflow = default;
                this.oldoverflow = default;
                this.nextOverflow = default;
            }

            public mapextra(ref ptr<slice<ptr<bmap>>> overflow = default, ref ptr<slice<ptr<bmap>>> oldoverflow = default, ref ptr<bmap> nextOverflow = default)
            {
                this.overflow = overflow;
                this.oldoverflow = oldoverflow;
                this.nextOverflow = nextOverflow;
            }

            // Enable comparisons between nil and mapextra struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(mapextra value, NilType nil) => value.Equals(default(mapextra));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(mapextra value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, mapextra value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, mapextra value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator mapextra(NilType nil) => default(mapextra);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static mapextra mapextra_cast(dynamic value)
        {
            return new mapextra(ref value.overflow, ref value.oldoverflow, ref value.nextOverflow);
        }
    }
}