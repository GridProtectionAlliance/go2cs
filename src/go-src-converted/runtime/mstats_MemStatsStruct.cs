//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 03:21:32 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using atomic = go.runtime.@internal.atomic_package;
using sys = go.runtime.@internal.sys_package;
using @unsafe = go.@unsafe_package;

namespace go
{
    public static partial class runtime_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct MemStats
        {
            // Constructors
            public MemStats(NilType _)
            {
                this.Alloc = default;
                this.TotalAlloc = default;
                this.Sys = default;
                this.Lookups = default;
                this.Mallocs = default;
                this.Frees = default;
                this.HeapAlloc = default;
                this.HeapSys = default;
                this.HeapIdle = default;
                this.HeapInuse = default;
                this.HeapReleased = default;
                this.HeapObjects = default;
                this.StackInuse = default;
                this.StackSys = default;
                this.MSpanInuse = default;
                this.MSpanSys = default;
                this.MCacheInuse = default;
                this.MCacheSys = default;
                this.BuckHashSys = default;
                this.GCSys = default;
                this.OtherSys = default;
                this.NextGC = default;
                this.LastGC = default;
                this.PauseTotalNs = default;
                this.PauseNs = default;
                this.PauseEnd = default;
                this.NumGC = default;
                this.NumForcedGC = default;
                this.GCCPUFraction = default;
                this.EnableGC = default;
                this.DebugGC = default;
            }

            public MemStats(ulong Alloc = default, ulong TotalAlloc = default, ulong Sys = default, ulong Lookups = default, ulong Mallocs = default, ulong Frees = default, ulong HeapAlloc = default, ulong HeapSys = default, ulong HeapIdle = default, ulong HeapInuse = default, ulong HeapReleased = default, ulong HeapObjects = default, ulong StackInuse = default, ulong StackSys = default, ulong MSpanInuse = default, ulong MSpanSys = default, ulong MCacheInuse = default, ulong MCacheSys = default, ulong BuckHashSys = default, ulong GCSys = default, ulong OtherSys = default, ulong NextGC = default, ulong LastGC = default, ulong PauseTotalNs = default, array<ulong> PauseNs = default, array<ulong> PauseEnd = default, uint NumGC = default, uint NumForcedGC = default, double GCCPUFraction = default, bool EnableGC = default, bool DebugGC = default)
            {
                this.Alloc = Alloc;
                this.TotalAlloc = TotalAlloc;
                this.Sys = Sys;
                this.Lookups = Lookups;
                this.Mallocs = Mallocs;
                this.Frees = Frees;
                this.HeapAlloc = HeapAlloc;
                this.HeapSys = HeapSys;
                this.HeapIdle = HeapIdle;
                this.HeapInuse = HeapInuse;
                this.HeapReleased = HeapReleased;
                this.HeapObjects = HeapObjects;
                this.StackInuse = StackInuse;
                this.StackSys = StackSys;
                this.MSpanInuse = MSpanInuse;
                this.MSpanSys = MSpanSys;
                this.MCacheInuse = MCacheInuse;
                this.MCacheSys = MCacheSys;
                this.BuckHashSys = BuckHashSys;
                this.GCSys = GCSys;
                this.OtherSys = OtherSys;
                this.NextGC = NextGC;
                this.LastGC = LastGC;
                this.PauseTotalNs = PauseTotalNs;
                this.PauseNs = PauseNs;
                this.PauseEnd = PauseEnd;
                this.NumGC = NumGC;
                this.NumForcedGC = NumForcedGC;
                this.GCCPUFraction = GCCPUFraction;
                this.EnableGC = EnableGC;
                this.DebugGC = DebugGC;
            }

            // Enable comparisons between nil and MemStats struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(MemStats value, NilType nil) => value.Equals(default(MemStats));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(MemStats value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, MemStats value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, MemStats value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator MemStats(NilType nil) => default(MemStats);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static MemStats MemStats_cast(dynamic value)
        {
            return new MemStats(value.Alloc, value.TotalAlloc, value.Sys, value.Lookups, value.Mallocs, value.Frees, value.HeapAlloc, value.HeapSys, value.HeapIdle, value.HeapInuse, value.HeapReleased, value.HeapObjects, value.StackInuse, value.StackSys, value.MSpanInuse, value.MSpanSys, value.MCacheInuse, value.MCacheSys, value.BuckHashSys, value.GCSys, value.OtherSys, value.NextGC, value.LastGC, value.PauseTotalNs, value.PauseNs, value.PauseEnd, value.NumGC, value.NumForcedGC, value.GCCPUFraction, value.EnableGC, value.DebugGC);
        }
    }
}