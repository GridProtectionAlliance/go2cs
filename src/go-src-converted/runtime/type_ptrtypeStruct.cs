//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 03:24:19 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using @unsafe = go.@unsafe_package;

namespace go
{
    public static partial class runtime_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct ptrtype
        {
            // Constructors
            public ptrtype(NilType _)
            {
                this.typ = default;
                this.elem = default;
            }

            public ptrtype(_type typ = default, ref ptr<_type> elem = default)
            {
                this.typ = typ;
                this.elem = elem;
            }

            // Enable comparisons between nil and ptrtype struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(ptrtype value, NilType nil) => value.Equals(default(ptrtype));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(ptrtype value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, ptrtype value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, ptrtype value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator ptrtype(NilType nil) => default(ptrtype);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static ptrtype ptrtype_cast(dynamic value)
        {
            return new ptrtype(value.typ, ref value.elem);
        }
    }
}