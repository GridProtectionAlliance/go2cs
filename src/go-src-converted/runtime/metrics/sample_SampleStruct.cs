//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:28:33 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using _runtime_ = go.runtime_package;
using @unsafe = go.@unsafe_package;
using go;

#nullable enable

namespace go {
namespace runtime
{
    public static partial class metrics_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        public partial struct Sample
        {
            // Constructors
            public Sample(NilType _)
            {
                this.Name = default;
                this.Value = default;
            }

            public Sample(@string Name = default, Value Value = default)
            {
                this.Name = Name;
                this.Value = Value;
            }

            // Enable comparisons between nil and Sample struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Sample value, NilType nil) => value.Equals(default(Sample));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Sample value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Sample value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Sample value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Sample(NilType nil) => default(Sample);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        public static Sample Sample_cast(dynamic value)
        {
            return new Sample(value.Name, value.Value);
        }
    }
}}