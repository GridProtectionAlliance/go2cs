//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 04:50:48 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using math = go.math_package;
using go;

#nullable enable

namespace go {
namespace math
{
    public static partial class rand_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Zipf
        {
            // Constructors
            public Zipf(NilType _)
            {
                this.r = default;
                this.imax = default;
                this.v = default;
                this.q = default;
                this.s = default;
                this.oneminusQ = default;
                this.oneminusQinv = default;
                this.hxm = default;
                this.hx0minusHxm = default;
            }

            public Zipf(ref ptr<Rand> r = default, double imax = default, double v = default, double q = default, double s = default, double oneminusQ = default, double oneminusQinv = default, double hxm = default, double hx0minusHxm = default)
            {
                this.r = r;
                this.imax = imax;
                this.v = v;
                this.q = q;
                this.s = s;
                this.oneminusQ = oneminusQ;
                this.oneminusQinv = oneminusQinv;
                this.hxm = hxm;
                this.hx0minusHxm = hx0minusHxm;
            }

            // Enable comparisons between nil and Zipf struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Zipf value, NilType nil) => value.Equals(default(Zipf));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Zipf value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Zipf value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Zipf value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Zipf(NilType nil) => default(Zipf);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Zipf Zipf_cast(dynamic value)
        {
            return new Zipf(ref value.r, value.imax, value.v, value.q, value.s, value.oneminusQ, value.oneminusQinv, value.hxm, value.hx0minusHxm);
        }
    }
}}