//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 22:17:51 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using fmt = go.fmt_package;
using io = go.io_package;
using rand = go.math.rand_package;
using strings = go.strings_package;
using go;

#nullable enable

namespace go {
namespace math
{
    public static partial class big_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Int
        {
            // Constructors
            public Int(NilType _)
            {
                this.neg = default;
                this.abs = default;
            }

            public Int(bool neg = default, nat abs = default)
            {
                this.neg = neg;
                this.abs = abs;
            }

            // Enable comparisons between nil and Int struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Int value, NilType nil) => value.Equals(default(Int));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Int value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Int value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Int value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Int(NilType nil) => default(Int);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Int Int_cast(dynamic value)
        {
            return new Int(value.neg, value.abs);
        }
    }
}}