//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 04:59:50 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;


namespace go
{
    public static partial class plugin_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Plugin
        {
            // Constructors
            public Plugin(NilType _)
            {
                this.pluginpath = default;
                this.err = default;
                this.loaded = default;
            }

            public Plugin(@string pluginpath = default, @string err = default, channel<object> loaded = default)
            {
                this.pluginpath = pluginpath;
                this.err = err;
                this.loaded = loaded;
            }

            // Enable comparisons between nil and Plugin struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Plugin value, NilType nil) => value.Equals(default(Plugin));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Plugin value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Plugin value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Plugin value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Plugin(NilType nil) => default(Plugin);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Plugin Plugin_cast(dynamic value)
        {
            return new Plugin(value.pluginpath, value.err, value.loaded);
        }
    }
}