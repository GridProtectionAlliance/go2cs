//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 06:03:51 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using errors = go.errors_package;
using fmt = go.fmt_package;
using ast = go.go.ast_package;
using build = go.go.build_package;
using parser = go.go.parser_package;
using token = go.go.token_package;
using types = go.go.types_package;
using os = go.os_package;
using filepath = go.path.filepath_package;
using sort = go.sort_package;
using strings = go.strings_package;
using sync = go.sync_package;
using time = go.time_package;
using astutil = go.golang.org.x.tools.go.ast.astutil_package;
using cgo = go.golang.org.x.tools.go.@internal.cgo_package;
using go;

#nullable enable

namespace go {
namespace golang.org {
namespace x {
namespace tools {
namespace go
{
    public static partial class loader_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Config
        {
            // Constructors
            public Config(NilType _)
            {
                this.Fset = default;
                this.ParserMode = default;
                this.TypeChecker = default;
                this.TypeCheckFuncBodies = default;
                this.Build = default;
                this.Cwd = default;
                this.DisplayPath = default;
                this.AllowErrors = default;
                this.CreatePkgs = default;
                this.ImportPkgs = default;
                this.FindPackage = default;
                this.AfterTypeCheck = default;
            }

            public Config(ref ptr<token.FileSet> Fset = default, parser.Mode ParserMode = default, types.Config TypeChecker = default, Func<@string, bool> TypeCheckFuncBodies = default, ref ptr<build.Context> Build = default, @string Cwd = default, Func<@string, @string> DisplayPath = default, bool AllowErrors = default, slice<PkgSpec> CreatePkgs = default, map<@string, bool> ImportPkgs = default, Func<ptr<build.Context>, @string, @string, build.ImportMode, (ptr<build.Package>, error)> FindPackage = default, Action<ptr<PackageInfo>, slice<ptr<ast.File>>> AfterTypeCheck = default)
            {
                this.Fset = Fset;
                this.ParserMode = ParserMode;
                this.TypeChecker = TypeChecker;
                this.TypeCheckFuncBodies = TypeCheckFuncBodies;
                this.Build = Build;
                this.Cwd = Cwd;
                this.DisplayPath = DisplayPath;
                this.AllowErrors = AllowErrors;
                this.CreatePkgs = CreatePkgs;
                this.ImportPkgs = ImportPkgs;
                this.FindPackage = FindPackage;
                this.AfterTypeCheck = AfterTypeCheck;
            }

            // Enable comparisons between nil and Config struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Config value, NilType nil) => value.Equals(default(Config));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Config value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Config value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Config value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Config(NilType nil) => default(Config);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Config Config_cast(dynamic value)
        {
            return new Config(ref value.Fset, value.ParserMode, value.TypeChecker, value.TypeCheckFuncBodies, ref value.Build, value.Cwd, value.DisplayPath, value.AllowErrors, value.CreatePkgs, value.ImportPkgs, value.FindPackage, value.AfterTypeCheck);
        }
    }
}}}}}