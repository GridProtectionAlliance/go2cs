//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 04:57:02 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using ast = go.go.ast_package;
using token = go.go.token_package;
using types = go.go.types_package;
using go;

#pragma warning disable CS0660, CS0661

namespace go {
namespace golang.org {
namespace x {
namespace tools {
namespace go
{
    public static partial class ssa_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial interface lvalue
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static lvalue As<T>(in T target) => (lvalue<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static lvalue As<T>(ptr<T> target_ptr) => (lvalue<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static lvalue? As(object target) =>
                typeof(lvalue<>).CreateInterfaceHandler<lvalue>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private class lvalue<T> : lvalue
        {
            private T m_target;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public lvalue(in T target) => m_target = target;

            public lvalue(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate types.Type storeByPtr(ptr<T> value, ptr<Function> fn, Value v);
            private delegate types.Type storeByVal(T value, ptr<Function> fn, Value v);

            private static readonly storeByPtr s_storeByPtr;
            private static readonly storeByVal s_storeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public types.Type store(ptr<Function> fn, Value v)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_storeByPtr is null || !m_target_is_ptr)
                    return s_storeByVal!(target, fn, v);

                return s_storeByPtr(m_target_ptr, fn, v);
            }

            private delegate types.Type loadByPtr(ptr<T> value, ptr<Function> fn);
            private delegate types.Type loadByVal(T value, ptr<Function> fn);

            private static readonly loadByPtr s_loadByPtr;
            private static readonly loadByVal s_loadByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public types.Type load(ptr<Function> fn)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_loadByPtr is null || !m_target_is_ptr)
                    return s_loadByVal!(target, fn);

                return s_loadByPtr(m_target_ptr, fn);
            }

            private delegate types.Type addressByPtr(ptr<T> value, ptr<Function> fn);
            private delegate types.Type addressByVal(T value, ptr<Function> fn);

            private static readonly addressByPtr s_addressByPtr;
            private static readonly addressByVal s_addressByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public types.Type address(ptr<Function> fn)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_addressByPtr is null || !m_target_is_ptr)
                    return s_addressByVal!(target, fn);

                return s_addressByPtr(m_target_ptr, fn);
            }

            private delegate types.Type typByPtr(ptr<T> value);
            private delegate types.Type typByVal(T value);

            private static readonly typByPtr s_typByPtr;
            private static readonly typByVal s_typByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public types.Type typ()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_typByPtr is null || !m_target_is_ptr)
                    return s_typByVal!(target);

                return s_typByPtr(m_target_ptr);
            }
            
            public string ToString(string format, IFormatProvider formatProvider) => format;

            [DebuggerStepperBoundary]
            static lvalue()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("store");

                if (!(extensionMethod is null))
                    s_storeByPtr = extensionMethod.CreateStaticDelegate(typeof(storeByPtr)) as storeByPtr;

                extensionMethod = targetType.GetExtensionMethod("store");

                if (!(extensionMethod is null))
                    s_storeByVal = extensionMethod.CreateStaticDelegate(typeof(storeByVal)) as storeByVal;

                if (s_storeByPtr is null && s_storeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement lvalue.store method", new Exception("store"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("load");

                if (!(extensionMethod is null))
                    s_loadByPtr = extensionMethod.CreateStaticDelegate(typeof(loadByPtr)) as loadByPtr;

                extensionMethod = targetType.GetExtensionMethod("load");

                if (!(extensionMethod is null))
                    s_loadByVal = extensionMethod.CreateStaticDelegate(typeof(loadByVal)) as loadByVal;

                if (s_loadByPtr is null && s_loadByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement lvalue.load method", new Exception("load"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("address");

                if (!(extensionMethod is null))
                    s_addressByPtr = extensionMethod.CreateStaticDelegate(typeof(addressByPtr)) as addressByPtr;

                extensionMethod = targetType.GetExtensionMethod("address");

                if (!(extensionMethod is null))
                    s_addressByVal = extensionMethod.CreateStaticDelegate(typeof(addressByVal)) as addressByVal;

                if (s_addressByPtr is null && s_addressByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement lvalue.address method", new Exception("address"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("typ");

                if (!(extensionMethod is null))
                    s_typByPtr = extensionMethod.CreateStaticDelegate(typeof(typByPtr)) as typByPtr;

                extensionMethod = targetType.GetExtensionMethod("typ");

                if (!(extensionMethod is null))
                    s_typByVal = extensionMethod.CreateStaticDelegate(typeof(typByVal)) as typByVal;

                if (s_typByPtr is null && s_typByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement lvalue.typ method", new Exception("typ"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator lvalue<T>(in ptr<T> target_ptr) => new lvalue<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator lvalue<T>(in T target) => new lvalue<T>(target);

            // Enable comparisons between nil and lvalue<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(lvalue<T> value, NilType nil) => Activator.CreateInstance<lvalue<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(lvalue<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, lvalue<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, lvalue<T> value) => value != nil;
        }
    }
}}}}}

namespace go
{
    public static class ssa_lvalueExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.golang.org.x.tools.go.ssa_package.lvalue target)
        {
            try
            {
                return ((go.golang.org.x.tools.go.ssa_package.lvalue<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.golang.org.x.tools.go.ssa_package.lvalue target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.golang.org.x.tools.go.ssa_package.lvalue target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.golang.org.x.tools.go.ssa_package.lvalue<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.golang.org.x.tools.go.ssa_package.lvalue target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}