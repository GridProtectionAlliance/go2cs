//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 06:01:58 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using context = go.context_package;
using json = go.encoding.json_package;
using fmt = go.fmt_package;
using ast = go.go.ast_package;
using parser = go.go.parser_package;
using scanner = go.go.scanner_package;
using token = go.go.token_package;
using types = go.go.types_package;
using ioutil = go.io.ioutil_package;
using log = go.log_package;
using os = go.os_package;
using filepath = go.path.filepath_package;
using strings = go.strings_package;
using sync = go.sync_package;
using time = go.time_package;
using gcexportdata = go.golang.org.x.tools.go.gcexportdata_package;
using gocommand = go.golang.org.x.tools.@internal.gocommand_package;
using packagesinternal = go.golang.org.x.tools.@internal.packagesinternal_package;
using typesinternal = go.golang.org.x.tools.@internal.typesinternal_package;
using go;

#nullable enable

namespace go {
namespace golang.org {
namespace x {
namespace tools {
namespace go
{
    public static partial class packages_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Config
        {
            // Constructors
            public Config(NilType _)
            {
                this.Mode = default;
                this.Context = default;
                this.Logf = default;
                this.Dir = default;
                this.Env = default;
                this.gocmdRunner = default;
                this.BuildFlags = default;
                this.Fset = default;
                this.ParseFile = default;
                this.Tests = default;
                this.Overlay = default;
            }

            public Config(LoadMode Mode = default, context.Context Context = default, Action<@string, object[]> Logf = default, @string Dir = default, slice<@string> Env = default, ref ptr<gocommand.Runner> gocmdRunner = default, slice<@string> BuildFlags = default, ref ptr<token.FileSet> Fset = default, Func<ptr<token.FileSet>, @string, slice<byte>, (ptr<ast.File>, error)> ParseFile = default, bool Tests = default, map<@string, slice<byte>> Overlay = default)
            {
                this.Mode = Mode;
                this.Context = Context;
                this.Logf = Logf;
                this.Dir = Dir;
                this.Env = Env;
                this.gocmdRunner = gocmdRunner;
                this.BuildFlags = BuildFlags;
                this.Fset = Fset;
                this.ParseFile = ParseFile;
                this.Tests = Tests;
                this.Overlay = Overlay;
            }

            // Enable comparisons between nil and Config struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Config value, NilType nil) => value.Equals(default(Config));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Config value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Config value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Config value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Config(NilType nil) => default(Config);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Config Config_cast(dynamic value)
        {
            return new Config(value.Mode, value.Context, value.Logf, value.Dir, value.Env, ref value.gocmdRunner, value.BuildFlags, ref value.Fset, value.ParseFile, value.Tests, value.Overlay);
        }
    }
}}}}}