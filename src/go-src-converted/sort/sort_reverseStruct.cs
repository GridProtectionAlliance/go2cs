//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 04:49:20 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;


#nullable enable

namespace go
{
    public static partial class sort_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct reverse
        {
            // Interface.Len function promotion
            private delegate bool LenByVal(T value);
            private delegate bool LenByRef(ref T value);

            private static readonly LenByVal s_LenByVal;
            private static readonly LenByRef s_LenByRef;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Len() => s_LenByRef?.Invoke(ref this) ?? s_LenByVal?.Invoke(this) ?? Interface?.Len() ?? throw new PanicException(RuntimeErrorPanic.NilPointerDereference);

            // Interface.Less function promotion
            private delegate bool LessByVal(T value, long i, long j);
            private delegate bool LessByRef(ref T value, long i, long j);

            private static readonly LessByVal s_LessByVal;
            private static readonly LessByRef s_LessByRef;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Less(long i, long j) => s_LessByRef?.Invoke(ref this, i, j) ?? s_LessByVal?.Invoke(this, i, j) ?? Interface?.Less(i, j) ?? throw new PanicException(RuntimeErrorPanic.NilPointerDereference);

            // Interface.Swap function promotion
            private delegate bool SwapByVal(T value, long i, long j);
            private delegate bool SwapByRef(ref T value, long i, long j);

            private static readonly SwapByVal s_SwapByVal;
            private static readonly SwapByRef s_SwapByRef;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Swap(long i, long j) => s_SwapByRef?.Invoke(ref this, i, j) ?? s_SwapByVal?.Invoke(this, i, j) ?? Interface?.Swap(i, j) ?? throw new PanicException(RuntimeErrorPanic.NilPointerDereference);
            
            [DebuggerStepperBoundary]
            static reverse()
            {
                Type targetType = typeof(reverse);
                MethodInfo extensionMethod;
                
                extensionMethod = targetType.GetExtensionMethodSearchingPromotions("Len");

                if ((object)extensionMethod != null)
                {
                    s_LenByRef = extensionMethod.CreateStaticDelegate(typeof(LenByRef)) as LenByRef;

                    if ((object)s_LenByRef == null)
                        s_LenByVal = extensionMethod.CreateStaticDelegate(typeof(LenByVal)) as LenByVal;
                }
                
                extensionMethod = targetType.GetExtensionMethodSearchingPromotions("Less");

                if ((object)extensionMethod != null)
                {
                    s_LessByRef = extensionMethod.CreateStaticDelegate(typeof(LessByRef)) as LessByRef;

                    if ((object)s_LessByRef == null)
                        s_LessByVal = extensionMethod.CreateStaticDelegate(typeof(LessByVal)) as LessByVal;
                }
                
                extensionMethod = targetType.GetExtensionMethodSearchingPromotions("Swap");

                if ((object)extensionMethod != null)
                {
                    s_SwapByRef = extensionMethod.CreateStaticDelegate(typeof(SwapByRef)) as SwapByRef;

                    if ((object)s_SwapByRef == null)
                        s_SwapByVal = extensionMethod.CreateStaticDelegate(typeof(SwapByVal)) as SwapByVal;
                }
            }

            // Constructors
            public reverse(NilType _)
            {
                this.Interface = default;
            }

            public reverse(Interface Interface = default)
            {
                this.Interface = Interface;
            }

            // Enable comparisons between nil and reverse struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(reverse value, NilType nil) => value.Equals(default(reverse));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(reverse value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, reverse value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, reverse value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator reverse(NilType nil) => default(reverse);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static reverse reverse_cast(dynamic value)
        {
            return new reverse(value.Interface);
        }
    }
}