//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:37:11 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using bufio = go.bufio_package;
using bytes = go.bytes_package;
using gzip = go.compress.gzip_package;
using context = go.context_package;
using rand = go.crypto.rand_package;
using tls = go.crypto.tls_package;
using binary = go.encoding.binary_package;
using errors = go.errors_package;
using fmt = go.fmt_package;
using io = go.io_package;
using ioutil = go.io.ioutil_package;
using log = go.log_package;
using math = go.math_package;
using mathrand = go.math.rand_package;
using net = go.net_package;
using httptrace = go.net.http.httptrace_package;
using textproto = go.net.textproto_package;
using url = go.net.url_package;
using os = go.os_package;
using reflect = go.reflect_package;
using runtime = go.runtime_package;
using sort = go.sort_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using sync = go.sync_package;
using atomic = go.sync.atomic_package;
using time = go.time_package;
using httpguts = go.golang.org.x.net.http.httpguts_package;
using hpack = go.golang.org.x.net.http2.hpack_package;
using idna = go.golang.org.x.net.idna_package;
using go;

#nullable enable

namespace go {
namespace net
{
    public static partial class http_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial struct http2ClientConn
        {
            // Constructors
            public http2ClientConn(NilType _)
            {
                this.t = default;
                this.tconn = default;
                this.tlsState = default;
                this.reused = default;
                this.singleUse = default;
                this.getConnCalled = default;
                this.readerDone = default;
                this.readerErr = default;
                this.idleTimeout = default;
                this.idleTimer = default;
                this.mu = default;
                this.cond = default;
                this.flow = default;
                this.inflow = default;
                this.doNotReuse = default;
                this.closing = default;
                this.closed = default;
                this.seenSettings = default;
                this.wantSettingsAck = default;
                this.goAway = default;
                this.goAwayDebug = default;
                this.streams = default;
                this.streamsReserved = default;
                this.nextStreamID = default;
                this.pendingRequests = default;
                this.pings = default;
                this.br = default;
                this.lastActive = default;
                this.lastIdle = default;
                this.maxFrameSize = default;
                this.maxConcurrentStreams = default;
                this.peerMaxHeaderListSize = default;
                this.initialWindowSize = default;
                this.reqHeaderMu = default;
                this.wmu = default;
                this.bw = default;
                this.fr = default;
                this.werr = default;
                this.hbuf = default;
                this.henc = default;
            }

            public http2ClientConn(ref ptr<http2Transport> t = default, net.Conn tconn = default, ref ptr<tls.ConnectionState> tlsState = default, uint reused = default, bool singleUse = default, bool getConnCalled = default, channel<object> readerDone = default, error readerErr = default, time.Duration idleTimeout = default, ref ptr<time.Timer> idleTimer = default, sync.Mutex mu = default, ref ptr<sync.Cond> cond = default, http2flow flow = default, http2flow inflow = default, bool doNotReuse = default, bool closing = default, bool closed = default, bool seenSettings = default, bool wantSettingsAck = default, ref ptr<http2GoAwayFrame> goAway = default, @string goAwayDebug = default, map<uint, ptr<http2clientStream>> streams = default, nint streamsReserved = default, uint nextStreamID = default, nint pendingRequests = default, map<array<byte>, channel<object>> pings = default, ref ptr<bufio.Reader> br = default, time.Time lastActive = default, time.Time lastIdle = default, uint maxFrameSize = default, uint maxConcurrentStreams = default, ulong peerMaxHeaderListSize = default, uint initialWindowSize = default, channel<object> reqHeaderMu = default, sync.Mutex wmu = default, ref ptr<bufio.Writer> bw = default, ref ptr<http2Framer> fr = default, error werr = default, bytes.Buffer hbuf = default, ref ptr<hpack.Encoder> henc = default)
            {
                this.t = t;
                this.tconn = tconn;
                this.tlsState = tlsState;
                this.reused = reused;
                this.singleUse = singleUse;
                this.getConnCalled = getConnCalled;
                this.readerDone = readerDone;
                this.readerErr = readerErr;
                this.idleTimeout = idleTimeout;
                this.idleTimer = idleTimer;
                this.mu = mu;
                this.cond = cond;
                this.flow = flow;
                this.inflow = inflow;
                this.doNotReuse = doNotReuse;
                this.closing = closing;
                this.closed = closed;
                this.seenSettings = seenSettings;
                this.wantSettingsAck = wantSettingsAck;
                this.goAway = goAway;
                this.goAwayDebug = goAwayDebug;
                this.streams = streams;
                this.streamsReserved = streamsReserved;
                this.nextStreamID = nextStreamID;
                this.pendingRequests = pendingRequests;
                this.pings = pings;
                this.br = br;
                this.lastActive = lastActive;
                this.lastIdle = lastIdle;
                this.maxFrameSize = maxFrameSize;
                this.maxConcurrentStreams = maxConcurrentStreams;
                this.peerMaxHeaderListSize = peerMaxHeaderListSize;
                this.initialWindowSize = initialWindowSize;
                this.reqHeaderMu = reqHeaderMu;
                this.wmu = wmu;
                this.bw = bw;
                this.fr = fr;
                this.werr = werr;
                this.hbuf = hbuf;
                this.henc = henc;
            }

            // Enable comparisons between nil and http2ClientConn struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(http2ClientConn value, NilType nil) => value.Equals(default(http2ClientConn));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(http2ClientConn value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, http2ClientConn value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, http2ClientConn value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator http2ClientConn(NilType nil) => default(http2ClientConn);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private static http2ClientConn http2ClientConn_cast(dynamic value)
        {
            return new http2ClientConn(ref value.t, value.tconn, ref value.tlsState, value.reused, value.singleUse, value.getConnCalled, value.readerDone, value.readerErr, value.idleTimeout, ref value.idleTimer, value.mu, ref value.cond, value.flow, value.inflow, value.doNotReuse, value.closing, value.closed, value.seenSettings, value.wantSettingsAck, ref value.goAway, value.goAwayDebug, value.streams, value.streamsReserved, value.nextStreamID, value.pendingRequests, value.pings, ref value.br, value.lastActive, value.lastIdle, value.maxFrameSize, value.maxConcurrentStreams, value.peerMaxHeaderListSize, value.initialWindowSize, value.reqHeaderMu, value.wmu, ref value.bw, ref value.fr, value.werr, value.hbuf, ref value.henc);
        }
    }
}}