//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:37:10 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using bufio = go.bufio_package;
using bytes = go.bytes_package;
using gzip = go.compress.gzip_package;
using context = go.context_package;
using rand = go.crypto.rand_package;
using tls = go.crypto.tls_package;
using binary = go.encoding.binary_package;
using errors = go.errors_package;
using fmt = go.fmt_package;
using io = go.io_package;
using ioutil = go.io.ioutil_package;
using log = go.log_package;
using math = go.math_package;
using mathrand = go.math.rand_package;
using net = go.net_package;
using httptrace = go.net.http.httptrace_package;
using textproto = go.net.textproto_package;
using url = go.net.url_package;
using os = go.os_package;
using reflect = go.reflect_package;
using runtime = go.runtime_package;
using sort = go.sort_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using sync = go.sync_package;
using atomic = go.sync.atomic_package;
using time = go.time_package;
using httpguts = go.golang.org.x.net.http.httpguts_package;
using hpack = go.golang.org.x.net.http2.hpack_package;
using idna = go.golang.org.x.net.idna_package;
using go;

#nullable enable

namespace go {
namespace net
{
    public static partial class http_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial struct http2serverConn
        {
            // Constructors
            public http2serverConn(NilType _)
            {
                this.srv = default;
                this.hs = default;
                this.conn = default;
                this.bw = default;
                this.handler = default;
                this.baseCtx = default;
                this.framer = default;
                this.doneServing = default;
                this.readFrameCh = default;
                this.wantWriteFrameCh = default;
                this.wroteFrameCh = default;
                this.bodyReadCh = default;
                this.serveMsgCh = default;
                this.flow = default;
                this.inflow = default;
                this.tlsState = default;
                this.remoteAddrStr = default;
                this.writeSched = default;
                this.serveG = default;
                this.pushEnabled = default;
                this.sawFirstSettings = default;
                this.needToSendSettingsAck = default;
                this.unackedSettings = default;
                this.queuedControlFrames = default;
                this.clientMaxStreams = default;
                this.advMaxStreams = default;
                this.curClientStreams = default;
                this.curPushedStreams = default;
                this.maxClientStreamID = default;
                this.maxPushPromiseID = default;
                this.streams = default;
                this.initialStreamSendWindowSize = default;
                this.maxFrameSize = default;
                this.headerTableSize = default;
                this.peerMaxHeaderListSize = default;
                this.canonHeader = default;
                this.writingFrame = default;
                this.writingFrameAsync = default;
                this.needsFrameFlush = default;
                this.inGoAway = default;
                this.inFrameScheduleLoop = default;
                this.needToSendGoAway = default;
                this.goAwayCode = default;
                this.shutdownTimer = default;
                this.idleTimer = default;
                this.headerWriteBuf = default;
                this.hpackEncoder = default;
                this.shutdownOnce = default;
            }

            public http2serverConn(ref ptr<http2Server> srv = default, ref ptr<Server> hs = default, net.Conn conn = default, ref ptr<http2bufferedWriter> bw = default, Handler handler = default, context.Context baseCtx = default, ref ptr<http2Framer> framer = default, channel<object> doneServing = default, channel<http2readFrameResult> readFrameCh = default, channel<http2FrameWriteRequest> wantWriteFrameCh = default, channel<http2frameWriteResult> wroteFrameCh = default, channel<http2bodyReadMsg> bodyReadCh = default, channel<object> serveMsgCh = default, http2flow flow = default, http2flow inflow = default, ref ptr<tls.ConnectionState> tlsState = default, @string remoteAddrStr = default, http2WriteScheduler writeSched = default, http2goroutineLock serveG = default, bool pushEnabled = default, bool sawFirstSettings = default, bool needToSendSettingsAck = default, nint unackedSettings = default, nint queuedControlFrames = default, uint clientMaxStreams = default, uint advMaxStreams = default, uint curClientStreams = default, uint curPushedStreams = default, uint maxClientStreamID = default, uint maxPushPromiseID = default, map<uint, ptr<http2stream>> streams = default, int initialStreamSendWindowSize = default, int maxFrameSize = default, uint headerTableSize = default, uint peerMaxHeaderListSize = default, map<@string, @string> canonHeader = default, bool writingFrame = default, bool writingFrameAsync = default, bool needsFrameFlush = default, bool inGoAway = default, bool inFrameScheduleLoop = default, bool needToSendGoAway = default, http2ErrCode goAwayCode = default, ref ptr<time.Timer> shutdownTimer = default, ref ptr<time.Timer> idleTimer = default, bytes.Buffer headerWriteBuf = default, ref ptr<hpack.Encoder> hpackEncoder = default, sync.Once shutdownOnce = default)
            {
                this.srv = srv;
                this.hs = hs;
                this.conn = conn;
                this.bw = bw;
                this.handler = handler;
                this.baseCtx = baseCtx;
                this.framer = framer;
                this.doneServing = doneServing;
                this.readFrameCh = readFrameCh;
                this.wantWriteFrameCh = wantWriteFrameCh;
                this.wroteFrameCh = wroteFrameCh;
                this.bodyReadCh = bodyReadCh;
                this.serveMsgCh = serveMsgCh;
                this.flow = flow;
                this.inflow = inflow;
                this.tlsState = tlsState;
                this.remoteAddrStr = remoteAddrStr;
                this.writeSched = writeSched;
                this.serveG = serveG;
                this.pushEnabled = pushEnabled;
                this.sawFirstSettings = sawFirstSettings;
                this.needToSendSettingsAck = needToSendSettingsAck;
                this.unackedSettings = unackedSettings;
                this.queuedControlFrames = queuedControlFrames;
                this.clientMaxStreams = clientMaxStreams;
                this.advMaxStreams = advMaxStreams;
                this.curClientStreams = curClientStreams;
                this.curPushedStreams = curPushedStreams;
                this.maxClientStreamID = maxClientStreamID;
                this.maxPushPromiseID = maxPushPromiseID;
                this.streams = streams;
                this.initialStreamSendWindowSize = initialStreamSendWindowSize;
                this.maxFrameSize = maxFrameSize;
                this.headerTableSize = headerTableSize;
                this.peerMaxHeaderListSize = peerMaxHeaderListSize;
                this.canonHeader = canonHeader;
                this.writingFrame = writingFrame;
                this.writingFrameAsync = writingFrameAsync;
                this.needsFrameFlush = needsFrameFlush;
                this.inGoAway = inGoAway;
                this.inFrameScheduleLoop = inFrameScheduleLoop;
                this.needToSendGoAway = needToSendGoAway;
                this.goAwayCode = goAwayCode;
                this.shutdownTimer = shutdownTimer;
                this.idleTimer = idleTimer;
                this.headerWriteBuf = headerWriteBuf;
                this.hpackEncoder = hpackEncoder;
                this.shutdownOnce = shutdownOnce;
            }

            // Enable comparisons between nil and http2serverConn struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(http2serverConn value, NilType nil) => value.Equals(default(http2serverConn));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(http2serverConn value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, http2serverConn value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, http2serverConn value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator http2serverConn(NilType nil) => default(http2serverConn);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private static http2serverConn http2serverConn_cast(dynamic value)
        {
            return new http2serverConn(ref value.srv, ref value.hs, value.conn, ref value.bw, value.handler, value.baseCtx, ref value.framer, value.doneServing, value.readFrameCh, value.wantWriteFrameCh, value.wroteFrameCh, value.bodyReadCh, value.serveMsgCh, value.flow, value.inflow, ref value.tlsState, value.remoteAddrStr, value.writeSched, value.serveG, value.pushEnabled, value.sawFirstSettings, value.needToSendSettingsAck, value.unackedSettings, value.queuedControlFrames, value.clientMaxStreams, value.advMaxStreams, value.curClientStreams, value.curPushedStreams, value.maxClientStreamID, value.maxPushPromiseID, value.streams, value.initialStreamSendWindowSize, value.maxFrameSize, value.headerTableSize, value.peerMaxHeaderListSize, value.canonHeader, value.writingFrame, value.writingFrameAsync, value.needsFrameFlush, value.inGoAway, value.inFrameScheduleLoop, value.needToSendGoAway, value.goAwayCode, ref value.shutdownTimer, ref value.idleTimer, value.headerWriteBuf, ref value.hpackEncoder, value.shutdownOnce);
        }
    }
}}