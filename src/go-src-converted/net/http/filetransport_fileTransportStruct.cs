//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 22:21:20 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using fmt = go.fmt_package;
using io = go.io_package;
using go;

#nullable enable

namespace go {
namespace net
{
    public static partial class http_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct fileTransport
        {
            // Constructors
            public fileTransport(NilType _)
            {
                this.fh = default;
            }

            public fileTransport(fileHandler fh = default)
            {
                this.fh = fh;
            }

            // Enable comparisons between nil and fileTransport struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(fileTransport value, NilType nil) => value.Equals(default(fileTransport));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(fileTransport value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, fileTransport value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, fileTransport value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator fileTransport(NilType nil) => default(fileTransport);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static fileTransport fileTransport_cast(dynamic value)
        {
            return new fileTransport(value.fh);
        }
    }
}}