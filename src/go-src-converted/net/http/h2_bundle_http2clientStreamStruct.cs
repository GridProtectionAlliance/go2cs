//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 08 03:39:18 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bufio = go.bufio_package;
using bytes = go.bytes_package;
using gzip = go.compress.gzip_package;
using context = go.context_package;
using rand = go.crypto.rand_package;
using tls = go.crypto.tls_package;
using binary = go.encoding.binary_package;
using errors = go.errors_package;
using fmt = go.fmt_package;
using io = go.io_package;
using ioutil = go.io.ioutil_package;
using log = go.log_package;
using math = go.math_package;
using mathrand = go.math.rand_package;
using net = go.net_package;
using httptrace = go.net.http.httptrace_package;
using textproto = go.net.textproto_package;
using url = go.net.url_package;
using os = go.os_package;
using reflect = go.reflect_package;
using runtime = go.runtime_package;
using sort = go.sort_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using sync = go.sync_package;
using atomic = go.sync.atomic_package;
using time = go.time_package;
using httpguts = go.golang.org.x.net.http.httpguts_package;
using hpack = go.golang.org.x.net.http2.hpack_package;
using idna = go.golang.org.x.net.idna_package;
using go;

namespace go {
namespace net
{
    public static partial class http_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct http2clientStream
        {
            // Constructors
            public http2clientStream(NilType _)
            {
                this.cc = default;
                this.req = default;
                this.trace = default;
                this.ID = default;
                this.resc = default;
                this.bufPipe = default;
                this.startedWrite = default;
                this.requestedGzip = default;
                this.on100 = default;
                this.flow = default;
                this.inflow = default;
                this.bytesRemain = default;
                this.readErr = default;
                this.stopReqBody = default;
                this.didReset = default;
                this.peerReset = default;
                this.resetErr = default;
                this.done = default;
                this.firstByte = default;
                this.pastHeaders = default;
                this.pastTrailers = default;
                this.num1xx = default;
                this.trailer = default;
                this.resTrailer = default;
            }

            public http2clientStream(ref ptr<http2ClientConn> cc = default, ref ptr<Request> req = default, ref ptr<httptrace.ClientTrace> trace = default, uint ID = default, channel<http2resAndError> resc = default, http2pipe bufPipe = default, bool startedWrite = default, bool requestedGzip = default, Action on100 = default, http2flow flow = default, http2flow inflow = default, long bytesRemain = default, error readErr = default, error stopReqBody = default, bool didReset = default, channel<object> peerReset = default, error resetErr = default, channel<object> done = default, bool firstByte = default, bool pastHeaders = default, bool pastTrailers = default, byte num1xx = default, Header trailer = default, ref ptr<Header> resTrailer = default)
            {
                this.cc = cc;
                this.req = req;
                this.trace = trace;
                this.ID = ID;
                this.resc = resc;
                this.bufPipe = bufPipe;
                this.startedWrite = startedWrite;
                this.requestedGzip = requestedGzip;
                this.on100 = on100;
                this.flow = flow;
                this.inflow = inflow;
                this.bytesRemain = bytesRemain;
                this.readErr = readErr;
                this.stopReqBody = stopReqBody;
                this.didReset = didReset;
                this.peerReset = peerReset;
                this.resetErr = resetErr;
                this.done = done;
                this.firstByte = firstByte;
                this.pastHeaders = pastHeaders;
                this.pastTrailers = pastTrailers;
                this.num1xx = num1xx;
                this.trailer = trailer;
                this.resTrailer = resTrailer;
            }

            // Enable comparisons between nil and http2clientStream struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(http2clientStream value, NilType nil) => value.Equals(default(http2clientStream));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(http2clientStream value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, http2clientStream value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, http2clientStream value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator http2clientStream(NilType nil) => default(http2clientStream);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static http2clientStream http2clientStream_cast(dynamic value)
        {
            return new http2clientStream(ref value.cc, ref value.req, ref value.trace, value.ID, value.resc, value.bufPipe, value.startedWrite, value.requestedGzip, value.on100, value.flow, value.inflow, value.bytesRemain, value.readErr, value.stopReqBody, value.didReset, value.peerReset, value.resetErr, value.done, value.firstByte, value.pastHeaders, value.pastTrailers, value.num1xx, value.trailer, ref value.resTrailer);
        }
    }
}}