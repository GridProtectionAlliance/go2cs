//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 22:22:01 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using bufio = go.bufio_package;
using bytes = go.bytes_package;
using gzip = go.compress.gzip_package;
using context = go.context_package;
using rand = go.crypto.rand_package;
using tls = go.crypto.tls_package;
using binary = go.encoding.binary_package;
using errors = go.errors_package;
using fmt = go.fmt_package;
using io = go.io_package;
using ioutil = go.io.ioutil_package;
using log = go.log_package;
using math = go.math_package;
using mathrand = go.math.rand_package;
using net = go.net_package;
using httptrace = go.net.http.httptrace_package;
using textproto = go.net.textproto_package;
using url = go.net.url_package;
using os = go.os_package;
using reflect = go.reflect_package;
using runtime = go.runtime_package;
using sort = go.sort_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using sync = go.sync_package;
using atomic = go.sync.atomic_package;
using time = go.time_package;
using httpguts = go.golang.org.x.net.http.httpguts_package;
using hpack = go.golang.org.x.net.http2.hpack_package;
using idna = go.golang.org.x.net.idna_package;
using go;

#nullable enable

namespace go {
namespace net
{
    public static partial class http_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct http2clientStream
        {
            // Constructors
            public http2clientStream(NilType _)
            {
                this.cc = default;
                this.ctx = default;
                this.reqCancel = default;
                this.trace = default;
                this.ID = default;
                this.bufPipe = default;
                this.requestedGzip = default;
                this.isHead = default;
                this.abortOnce = default;
                this.abort = default;
                this.abortErr = default;
                this.peerClosed = default;
                this.donec = default;
                this.on100 = default;
                this.respHeaderRecv = default;
                this.res = default;
                this.flow = default;
                this.inflow = default;
                this.bytesRemain = default;
                this.readErr = default;
                this.reqBody = default;
                this.reqBodyContentLength = default;
                this.reqBodyClosed = default;
                this.sentEndStream = default;
                this.sentHeaders = default;
                this.firstByte = default;
                this.pastHeaders = default;
                this.pastTrailers = default;
                this.num1xx = default;
                this.readClosed = default;
                this.readAborted = default;
                this.trailer = default;
                this.resTrailer = default;
            }

            public http2clientStream(ref ptr<http2ClientConn> cc = default, context.Context ctx = default, channel<object> reqCancel = default, ref ptr<httptrace.ClientTrace> trace = default, uint ID = default, http2pipe bufPipe = default, bool requestedGzip = default, bool isHead = default, sync.Once abortOnce = default, channel<object> abort = default, error abortErr = default, channel<object> peerClosed = default, channel<object> donec = default, channel<object> on100 = default, channel<object> respHeaderRecv = default, ref ptr<Response> res = default, http2flow flow = default, http2flow inflow = default, long bytesRemain = default, error readErr = default, io.ReadCloser reqBody = default, long reqBodyContentLength = default, bool reqBodyClosed = default, bool sentEndStream = default, bool sentHeaders = default, bool firstByte = default, bool pastHeaders = default, bool pastTrailers = default, byte num1xx = default, bool readClosed = default, bool readAborted = default, Header trailer = default, ref ptr<Header> resTrailer = default)
            {
                this.cc = cc;
                this.ctx = ctx;
                this.reqCancel = reqCancel;
                this.trace = trace;
                this.ID = ID;
                this.bufPipe = bufPipe;
                this.requestedGzip = requestedGzip;
                this.isHead = isHead;
                this.abortOnce = abortOnce;
                this.abort = abort;
                this.abortErr = abortErr;
                this.peerClosed = peerClosed;
                this.donec = donec;
                this.on100 = on100;
                this.respHeaderRecv = respHeaderRecv;
                this.res = res;
                this.flow = flow;
                this.inflow = inflow;
                this.bytesRemain = bytesRemain;
                this.readErr = readErr;
                this.reqBody = reqBody;
                this.reqBodyContentLength = reqBodyContentLength;
                this.reqBodyClosed = reqBodyClosed;
                this.sentEndStream = sentEndStream;
                this.sentHeaders = sentHeaders;
                this.firstByte = firstByte;
                this.pastHeaders = pastHeaders;
                this.pastTrailers = pastTrailers;
                this.num1xx = num1xx;
                this.readClosed = readClosed;
                this.readAborted = readAborted;
                this.trailer = trailer;
                this.resTrailer = resTrailer;
            }

            // Enable comparisons between nil and http2clientStream struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(http2clientStream value, NilType nil) => value.Equals(default(http2clientStream));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(http2clientStream value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, http2clientStream value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, http2clientStream value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator http2clientStream(NilType nil) => default(http2clientStream);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static http2clientStream http2clientStream_cast(dynamic value)
        {
            return new http2clientStream(ref value.cc, value.ctx, value.reqCancel, ref value.trace, value.ID, value.bufPipe, value.requestedGzip, value.isHead, value.abortOnce, value.abort, value.abortErr, value.peerClosed, value.donec, value.on100, value.respHeaderRecv, ref value.res, value.flow, value.inflow, value.bytesRemain, value.readErr, value.reqBody, value.reqBodyContentLength, value.reqBodyClosed, value.sentEndStream, value.sentHeaders, value.firstByte, value.pastHeaders, value.pastTrailers, value.num1xx, value.readClosed, value.readAborted, value.trailer, ref value.resTrailer);
        }
    }
}}