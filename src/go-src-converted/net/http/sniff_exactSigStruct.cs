//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:37:33 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using bytes = go.bytes_package;
using binary = go.encoding.binary_package;
using go;

#nullable enable

namespace go {
namespace net
{
    public static partial class http_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial struct exactSig
        {
            // Constructors
            public exactSig(NilType _)
            {
                this.sig = default;
                this.ct = default;
            }

            public exactSig(slice<byte> sig = default, @string ct = default)
            {
                this.sig = sig;
                this.ct = ct;
            }

            // Enable comparisons between nil and exactSig struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(exactSig value, NilType nil) => value.Equals(default(exactSig));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(exactSig value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, exactSig value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, exactSig value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator exactSig(NilType nil) => default(exactSig);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private static exactSig exactSig_cast(dynamic value)
        {
            return new exactSig(value.sig, value.ct);
        }
    }
}}