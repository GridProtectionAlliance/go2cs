//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:37:12 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using bufio = go.bufio_package;
using bytes = go.bytes_package;
using gzip = go.compress.gzip_package;
using context = go.context_package;
using rand = go.crypto.rand_package;
using tls = go.crypto.tls_package;
using binary = go.encoding.binary_package;
using errors = go.errors_package;
using fmt = go.fmt_package;
using io = go.io_package;
using ioutil = go.io.ioutil_package;
using log = go.log_package;
using math = go.math_package;
using mathrand = go.math.rand_package;
using net = go.net_package;
using httptrace = go.net.http.httptrace_package;
using textproto = go.net.textproto_package;
using url = go.net.url_package;
using os = go.os_package;
using reflect = go.reflect_package;
using runtime = go.runtime_package;
using sort = go.sort_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using sync = go.sync_package;
using atomic = go.sync.atomic_package;
using time = go.time_package;
using httpguts = go.golang.org.x.net.http.httpguts_package;
using hpack = go.golang.org.x.net.http2.hpack_package;
using idna = go.golang.org.x.net.idna_package;
using go;

#nullable enable
#pragma warning disable CS0660, CS0661

namespace go {
namespace net
{
    public static partial class http_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial interface http2writeContext
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static http2writeContext As<T>(in T target) => (http2writeContext<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static http2writeContext As<T>(ptr<T> target_ptr) => (http2writeContext<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static http2writeContext? As(object target) =>
                typeof(http2writeContext<>).CreateInterfaceHandler<http2writeContext>(target);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private class http2writeContext<T> : http2writeContext
        {
            private T m_target = default!;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && m_target_ptr is not null)
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public http2writeContext(in T target) => m_target = target;

            public http2writeContext(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate (ptr<hpack.Encoder>, ptr<bytes.Buffer>) FramerByPtr(ptr<T> value);
            private delegate (ptr<hpack.Encoder>, ptr<bytes.Buffer>) FramerByVal(T value);

            private static readonly FramerByPtr? s_FramerByPtr;
            private static readonly FramerByVal? s_FramerByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ptr<hpack.Encoder>, ptr<bytes.Buffer>) Framer()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_FramerByPtr is null || !m_target_is_ptr)
                    return s_FramerByVal!(target);

                return s_FramerByPtr(m_target_ptr!);
            }

            private delegate (ptr<hpack.Encoder>, ptr<bytes.Buffer>) FlushByPtr(ptr<T> value);
            private delegate (ptr<hpack.Encoder>, ptr<bytes.Buffer>) FlushByVal(T value);

            private static readonly FlushByPtr? s_FlushByPtr;
            private static readonly FlushByVal? s_FlushByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ptr<hpack.Encoder>, ptr<bytes.Buffer>) Flush()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_FlushByPtr is null || !m_target_is_ptr)
                    return s_FlushByVal!(target);

                return s_FlushByPtr(m_target_ptr!);
            }

            private delegate (ptr<hpack.Encoder>, ptr<bytes.Buffer>) CloseConnByPtr(ptr<T> value);
            private delegate (ptr<hpack.Encoder>, ptr<bytes.Buffer>) CloseConnByVal(T value);

            private static readonly CloseConnByPtr? s_CloseConnByPtr;
            private static readonly CloseConnByVal? s_CloseConnByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ptr<hpack.Encoder>, ptr<bytes.Buffer>) CloseConn()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_CloseConnByPtr is null || !m_target_is_ptr)
                    return s_CloseConnByVal!(target);

                return s_CloseConnByPtr(m_target_ptr!);
            }

            private delegate (ptr<hpack.Encoder>, ptr<bytes.Buffer>) HeaderEncoderByPtr(ptr<T> value);
            private delegate (ptr<hpack.Encoder>, ptr<bytes.Buffer>) HeaderEncoderByVal(T value);

            private static readonly HeaderEncoderByPtr? s_HeaderEncoderByPtr;
            private static readonly HeaderEncoderByVal? s_HeaderEncoderByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public (ptr<hpack.Encoder>, ptr<bytes.Buffer>) HeaderEncoder()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_HeaderEncoderByPtr is null || !m_target_is_ptr)
                    return s_HeaderEncoderByVal!(target);

                return s_HeaderEncoderByPtr(m_target_ptr!);
            }
            
            public string ToString(string? format, IFormatProvider? formatProvider) => format ?? GetGoTypeName(typeof(T));

            [DebuggerStepperBoundary]
            static http2writeContext()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Framer");

                if (extensionMethod is not null)
                    s_FramerByPtr = extensionMethod.CreateStaticDelegate(typeof(FramerByPtr)) as FramerByPtr;

                extensionMethod = targetType.GetExtensionMethod("Framer");

                if (extensionMethod is not null)
                    s_FramerByVal = extensionMethod.CreateStaticDelegate(typeof(FramerByVal)) as FramerByVal;

                if (s_FramerByPtr is null && s_FramerByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement http2writeContext.Framer method", new Exception("Framer"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Flush");

                if (extensionMethod is not null)
                    s_FlushByPtr = extensionMethod.CreateStaticDelegate(typeof(FlushByPtr)) as FlushByPtr;

                extensionMethod = targetType.GetExtensionMethod("Flush");

                if (extensionMethod is not null)
                    s_FlushByVal = extensionMethod.CreateStaticDelegate(typeof(FlushByVal)) as FlushByVal;

                if (s_FlushByPtr is null && s_FlushByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement http2writeContext.Flush method", new Exception("Flush"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("CloseConn");

                if (extensionMethod is not null)
                    s_CloseConnByPtr = extensionMethod.CreateStaticDelegate(typeof(CloseConnByPtr)) as CloseConnByPtr;

                extensionMethod = targetType.GetExtensionMethod("CloseConn");

                if (extensionMethod is not null)
                    s_CloseConnByVal = extensionMethod.CreateStaticDelegate(typeof(CloseConnByVal)) as CloseConnByVal;

                if (s_CloseConnByPtr is null && s_CloseConnByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement http2writeContext.CloseConn method", new Exception("CloseConn"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("HeaderEncoder");

                if (extensionMethod is not null)
                    s_HeaderEncoderByPtr = extensionMethod.CreateStaticDelegate(typeof(HeaderEncoderByPtr)) as HeaderEncoderByPtr;

                extensionMethod = targetType.GetExtensionMethod("HeaderEncoder");

                if (extensionMethod is not null)
                    s_HeaderEncoderByVal = extensionMethod.CreateStaticDelegate(typeof(HeaderEncoderByVal)) as HeaderEncoderByVal;

                if (s_HeaderEncoderByPtr is null && s_HeaderEncoderByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement http2writeContext.HeaderEncoder method", new Exception("HeaderEncoder"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator http2writeContext<T>(in ptr<T> target_ptr) => new http2writeContext<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator http2writeContext<T>(in T target) => new http2writeContext<T>(target);

            // Enable comparisons between nil and http2writeContext<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(http2writeContext<T> value, NilType nil) => Activator.CreateInstance<http2writeContext<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(http2writeContext<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, http2writeContext<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, http2writeContext<T> value) => value != nil;
        }
    }
}}

namespace go
{
    public static class http_http2writeContextExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.2.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.net.http_package.http2writeContext target)
        {
            try
            {
                return ((go.net.http_package.http2writeContext<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.2.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.net.http_package.http2writeContext target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.2.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.net.http_package.http2writeContext target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.net.http_package.http2writeContext<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.2.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.net.http_package.http2writeContext target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}