//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 04:56:48 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bufio = go.bufio_package;
using bytes = go.bytes_package;
using gzip = go.compress.gzip_package;
using context = go.context_package;
using rand = go.crypto.rand_package;
using tls = go.crypto.tls_package;
using binary = go.encoding.binary_package;
using errors = go.errors_package;
using fmt = go.fmt_package;
using io = go.io_package;
using ioutil = go.io.ioutil_package;
using log = go.log_package;
using math = go.math_package;
using mathrand = go.math.rand_package;
using net = go.net_package;
using httptrace = go.net.http.httptrace_package;
using textproto = go.net.textproto_package;
using url = go.net.url_package;
using os = go.os_package;
using reflect = go.reflect_package;
using runtime = go.runtime_package;
using sort = go.sort_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using sync = go.sync_package;
using atomic = go.sync.atomic_package;
using time = go.time_package;
using httpguts = go.golang.org.x.net.http.httpguts_package;
using hpack = go.golang.org.x.net.http2.hpack_package;
using idna = go.golang.org.x.net.idna_package;
using go;

#nullable enable

namespace go {
namespace net
{
    public static partial class http_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct http2Framer
        {
            // Constructors
            public http2Framer(NilType _)
            {
                this.r = default;
                this.lastFrame = default;
                this.errDetail = default;
                this.lastHeaderStream = default;
                this.maxReadSize = default;
                this.headerBuf = default;
                this.getReadBuf = default;
                this.readBuf = default;
                this.maxWriteSize = default;
                this.w = default;
                this.wbuf = default;
                this.AllowIllegalWrites = default;
                this.AllowIllegalReads = default;
                this.ReadMetaHeaders = default;
                this.MaxHeaderListSize = default;
                this.logReads = default;
                this.logWrites = default;
                this.debugFramer = default;
                this.debugFramerBuf = default;
                this.debugReadLoggerf = default;
                this.debugWriteLoggerf = default;
                this.frameCache = default;
            }

            public http2Framer(io.Reader r = default, http2Frame lastFrame = default, error errDetail = default, uint lastHeaderStream = default, uint maxReadSize = default, array<byte> headerBuf = default, Func<uint, slice<byte>> getReadBuf = default, slice<byte> readBuf = default, uint maxWriteSize = default, io.Writer w = default, slice<byte> wbuf = default, bool AllowIllegalWrites = default, bool AllowIllegalReads = default, ref ptr<hpack.Decoder> ReadMetaHeaders = default, uint MaxHeaderListSize = default, bool logReads = default, bool logWrites = default, ref ptr<http2Framer> debugFramer = default, ref ptr<bytes.Buffer> debugFramerBuf = default, Action<@string, object> debugReadLoggerf = default, Action<@string, object> debugWriteLoggerf = default, ref ptr<http2frameCache> frameCache = default)
            {
                this.r = r;
                this.lastFrame = lastFrame;
                this.errDetail = errDetail;
                this.lastHeaderStream = lastHeaderStream;
                this.maxReadSize = maxReadSize;
                this.headerBuf = headerBuf;
                this.getReadBuf = getReadBuf;
                this.readBuf = readBuf;
                this.maxWriteSize = maxWriteSize;
                this.w = w;
                this.wbuf = wbuf;
                this.AllowIllegalWrites = AllowIllegalWrites;
                this.AllowIllegalReads = AllowIllegalReads;
                this.ReadMetaHeaders = ReadMetaHeaders;
                this.MaxHeaderListSize = MaxHeaderListSize;
                this.logReads = logReads;
                this.logWrites = logWrites;
                this.debugFramer = debugFramer;
                this.debugFramerBuf = debugFramerBuf;
                this.debugReadLoggerf = debugReadLoggerf;
                this.debugWriteLoggerf = debugWriteLoggerf;
                this.frameCache = frameCache;
            }

            // Enable comparisons between nil and http2Framer struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(http2Framer value, NilType nil) => value.Equals(default(http2Framer));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(http2Framer value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, http2Framer value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, http2Framer value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator http2Framer(NilType nil) => default(http2Framer);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static http2Framer http2Framer_cast(dynamic value)
        {
            return new http2Framer(value.r, value.lastFrame, value.errDetail, value.lastHeaderStream, value.maxReadSize, value.headerBuf, value.getReadBuf, value.readBuf, value.maxWriteSize, value.w, value.wbuf, value.AllowIllegalWrites, value.AllowIllegalReads, ref value.ReadMetaHeaders, value.MaxHeaderListSize, value.logReads, value.logWrites, ref value.debugFramer, ref value.debugFramerBuf, value.debugReadLoggerf, value.debugWriteLoggerf, ref value.frameCache);
        }
    }
}}