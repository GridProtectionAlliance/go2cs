//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 04:58:18 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using errors = go.errors_package;
using fmt = go.fmt_package;
using net = go.net_package;
using url = go.net.url_package;
using os = go.os_package;
using strings = go.strings_package;
using utf8 = go.unicode.utf8_package;
using idna = go.golang.org.x.net.idna_package;
using go;

#nullable enable

namespace go {
namespace golang.org {
namespace x {
namespace net {
namespace http
{
    public static partial class httpproxy_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        [PromotedStruct(typeof(Config))]
        private partial struct config
        {
            // Config structure promotion - sourced from value copy
            private readonly ptr<Config> m_ConfigRef;

            private ref Config Config_val => ref m_ConfigRef.Value;

            public ref @string HTTPProxy => ref m_ConfigRef.Value.HTTPProxy;

            public ref @string HTTPSProxy => ref m_ConfigRef.Value.HTTPSProxy;

            public ref @string NoProxy => ref m_ConfigRef.Value.NoProxy;

            public ref bool CGI => ref m_ConfigRef.Value.CGI;

            // Constructors
            public config(NilType _)
            {
                this.m_ConfigRef = new ptr<Config>(new Config(nil));
                this.httpsProxy = default;
                this.httpProxy = default;
                this.ipMatchers = default;
                this.domainMatchers = default;
            }

            public config(Config Config = default, ref ptr<url.URL> httpsProxy = default, ref ptr<url.URL> httpProxy = default, slice<matcher> ipMatchers = default, slice<matcher> domainMatchers = default)
            {
                this.m_ConfigRef = new ptr<Config>(Config);
                this.httpsProxy = httpsProxy;
                this.httpProxy = httpProxy;
                this.ipMatchers = ipMatchers;
                this.domainMatchers = domainMatchers;
            }

            // Enable comparisons between nil and config struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(config value, NilType nil) => value.Equals(default(config));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(config value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, config value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, config value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator config(NilType nil) => default(config);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static config config_cast(dynamic value)
        {
            return new config(value.Config, ref value.httpsProxy, ref value.httpProxy, value.ipMatchers, value.domainMatchers);
        }
    }
}}}}}