//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 04:58:02 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bufio = go.bufio_package;
using bytes = go.bytes_package;
using context = go.context_package;
using tls = go.crypto.tls_package;
using errors = go.errors_package;
using fmt = go.fmt_package;
using io = go.io_package;
using ioutil = go.io.ioutil_package;
using log = go.log_package;
using net = go.net_package;
using textproto = go.net.textproto_package;
using url = go.net.url_package;
using os = go.os_package;
using path = go.path_package;
using runtime = go.runtime_package;
using sort = go.sort_package;
using strconv = go.strconv_package;
using strings = go.strings_package;
using sync = go.sync_package;
using atomic = go.sync.atomic_package;
using time = go.time_package;
using httpguts = go.golang.org.x.net.http.httpguts_package;
using go;

#nullable enable

namespace go {
namespace net
{
    public static partial class http_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        private partial struct response
        {
            // Constructors
            public response(NilType _)
            {
                this.conn = default;
                this.req = default;
                this.reqBody = default;
                this.cancelCtx = default;
                this.wroteHeader = default;
                this.wroteContinue = default;
                this.wants10KeepAlive = default;
                this.wantsClose = default;
                this.canWriteContinue = default;
                this.writeContinueMu = default;
                this.w = default;
                this.cw = default;
                this.handlerHeader = default;
                this.calledHeader = default;
                this.written = default;
                this.contentLength = default;
                this.status = default;
                this.closeAfterReply = default;
                this.requestBodyLimitHit = default;
                this.trailers = default;
                this.handlerDone = default;
                this.dateBuf = default;
                this.clenBuf = default;
                this.statusBuf = default;
                this.closeNotifyCh = default;
                this.didCloseNotify = default;
            }

            public response(ref ptr<conn> conn = default, ref ptr<Request> req = default, io.ReadCloser reqBody = default, context.CancelFunc cancelCtx = default, bool wroteHeader = default, bool wroteContinue = default, bool wants10KeepAlive = default, bool wantsClose = default, atomicBool canWriteContinue = default, sync.Mutex writeContinueMu = default, ref ptr<bufio.Writer> w = default, chunkWriter cw = default, Header handlerHeader = default, bool calledHeader = default, long written = default, long contentLength = default, long status = default, bool closeAfterReply = default, bool requestBodyLimitHit = default, slice<@string> trailers = default, atomicBool handlerDone = default, array<byte> dateBuf = default, array<byte> clenBuf = default, array<byte> statusBuf = default, channel<bool> closeNotifyCh = default, int didCloseNotify = default)
            {
                this.conn = conn;
                this.req = req;
                this.reqBody = reqBody;
                this.cancelCtx = cancelCtx;
                this.wroteHeader = wroteHeader;
                this.wroteContinue = wroteContinue;
                this.wants10KeepAlive = wants10KeepAlive;
                this.wantsClose = wantsClose;
                this.canWriteContinue = canWriteContinue;
                this.writeContinueMu = writeContinueMu;
                this.w = w;
                this.cw = cw;
                this.handlerHeader = handlerHeader;
                this.calledHeader = calledHeader;
                this.written = written;
                this.contentLength = contentLength;
                this.status = status;
                this.closeAfterReply = closeAfterReply;
                this.requestBodyLimitHit = requestBodyLimitHit;
                this.trailers = trailers;
                this.handlerDone = handlerDone;
                this.dateBuf = dateBuf;
                this.clenBuf = clenBuf;
                this.statusBuf = statusBuf;
                this.closeNotifyCh = closeNotifyCh;
                this.didCloseNotify = didCloseNotify;
            }

            // Enable comparisons between nil and response struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(response value, NilType nil) => value.Equals(default(response));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(response value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, response value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, response value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator response(NilType nil) => default(response);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        private static response response_cast(dynamic value)
        {
            return new response(ref value.conn, ref value.req, value.reqBody, value.cancelCtx, value.wroteHeader, value.wroteContinue, value.wants10KeepAlive, value.wantsClose, value.canWriteContinue, value.writeContinueMu, ref value.w, value.cw, value.handlerHeader, value.calledHeader, value.written, value.contentLength, value.status, value.closeAfterReply, value.requestBodyLimitHit, value.trailers, value.handlerDone, value.dateBuf, value.clenBuf, value.statusBuf, value.closeNotifyCh, value.didCloseNotify);
        }
    }
}}