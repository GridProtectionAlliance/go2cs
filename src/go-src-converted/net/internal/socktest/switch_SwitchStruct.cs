//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 05:00:24 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using fmt = go.fmt_package;
using sync = go.sync_package;
using go;

#nullable enable

namespace go {
namespace net {
namespace @internal
{
    public static partial class socktest_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct Switch
        {
            // Constructors
            public Switch(NilType _)
            {
                this.once = default;
                this.fmu = default;
                this.fltab = default;
                this.smu = default;
                this.sotab = default;
                this.stats = default;
            }

            public Switch(sync.Once once = default, sync.RWMutex fmu = default, map<FilterType, Filter> fltab = default, sync.RWMutex smu = default, Sockets sotab = default, stats stats = default)
            {
                this.once = once;
                this.fmu = fmu;
                this.fltab = fltab;
                this.smu = smu;
                this.sotab = sotab;
                this.stats = stats;
            }

            // Enable comparisons between nil and Switch struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(Switch value, NilType nil) => value.Equals(default(Switch));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(Switch value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, Switch value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, Switch value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator Switch(NilType nil) => default(Switch);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static Switch Switch_cast(dynamic value)
        {
            return new Switch(value.once, value.fmu, value.fltab, value.smu, value.sotab, value.stats);
        }
    }
}}}