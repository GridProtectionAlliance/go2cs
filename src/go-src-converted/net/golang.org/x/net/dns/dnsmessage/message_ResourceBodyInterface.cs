//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 06 22:15:38 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using errors = go.errors_package;
using fmt = go.fmt_package;
using go;

#nullable enable
#pragma warning disable CS0660, CS0661

namespace go {
namespace golang.org {
namespace x {
namespace net {
namespace dns
{
    public static partial class dnsmessage_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface ResourceBody
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static ResourceBody As<T>(in T target) => (ResourceBody<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static ResourceBody As<T>(ptr<T> target_ptr) => (ResourceBody<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static ResourceBody? As(object target) =>
                typeof(ResourceBody<>).CreateInterfaceHandler<ResourceBody>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class ResourceBody<T> : ResourceBody
        {
            private T m_target = default!;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && m_target_ptr is not null)
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public ResourceBody(in T target) => m_target = target;

            public ResourceBody(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate @string packByPtr(ptr<T> value, slice<byte> msg, map<@string, nint> compression, nint compressionOff);
            private delegate @string packByVal(T value, slice<byte> msg, map<@string, nint> compression, nint compressionOff);

            private static readonly packByPtr? s_packByPtr;
            private static readonly packByVal? s_packByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public @string pack(slice<byte> msg, map<@string, nint> compression, nint compressionOff)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_packByPtr is null || !m_target_is_ptr)
                    return s_packByVal!(target, msg, compression, compressionOff);

                return s_packByPtr(m_target_ptr!, msg, compression, compressionOff);
            }

            private delegate @string realTypeByPtr(ptr<T> value);
            private delegate @string realTypeByVal(T value);

            private static readonly realTypeByPtr? s_realTypeByPtr;
            private static readonly realTypeByVal? s_realTypeByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public @string realType()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_realTypeByPtr is null || !m_target_is_ptr)
                    return s_realTypeByVal!(target);

                return s_realTypeByPtr(m_target_ptr!);
            }

            private delegate @string GoStringByPtr(ptr<T> value);
            private delegate @string GoStringByVal(T value);

            private static readonly GoStringByPtr? s_GoStringByPtr;
            private static readonly GoStringByVal? s_GoStringByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public @string GoString()
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;

                if (s_GoStringByPtr is null || !m_target_is_ptr)
                    return s_GoStringByVal!(target);

                return s_GoStringByPtr(m_target_ptr!);
            }
            
            public string ToString(string? format, IFormatProvider? formatProvider) => format ?? GetGoTypeName(typeof(T));

            [DebuggerStepperBoundary]
            static ResourceBody()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("pack");

                if (extensionMethod is not null)
                    s_packByPtr = extensionMethod.CreateStaticDelegate(typeof(packByPtr)) as packByPtr;

                extensionMethod = targetType.GetExtensionMethod("pack");

                if (extensionMethod is not null)
                    s_packByVal = extensionMethod.CreateStaticDelegate(typeof(packByVal)) as packByVal;

                if (s_packByPtr is null && s_packByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ResourceBody.pack method", new Exception("pack"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("realType");

                if (extensionMethod is not null)
                    s_realTypeByPtr = extensionMethod.CreateStaticDelegate(typeof(realTypeByPtr)) as realTypeByPtr;

                extensionMethod = targetType.GetExtensionMethod("realType");

                if (extensionMethod is not null)
                    s_realTypeByVal = extensionMethod.CreateStaticDelegate(typeof(realTypeByVal)) as realTypeByVal;

                if (s_realTypeByPtr is null && s_realTypeByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ResourceBody.realType method", new Exception("realType"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("GoString");

                if (extensionMethod is not null)
                    s_GoStringByPtr = extensionMethod.CreateStaticDelegate(typeof(GoStringByPtr)) as GoStringByPtr;

                extensionMethod = targetType.GetExtensionMethod("GoString");

                if (extensionMethod is not null)
                    s_GoStringByVal = extensionMethod.CreateStaticDelegate(typeof(GoStringByVal)) as GoStringByVal;

                if (s_GoStringByPtr is null && s_GoStringByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ResourceBody.GoString method", new Exception("GoString"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator ResourceBody<T>(in ptr<T> target_ptr) => new ResourceBody<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator ResourceBody<T>(in T target) => new ResourceBody<T>(target);

            // Enable comparisons between nil and ResourceBody<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(ResourceBody<T> value, NilType nil) => Activator.CreateInstance<ResourceBody<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(ResourceBody<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, ResourceBody<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, ResourceBody<T> value) => value != nil;
        }
    }
}}}}}

namespace go
{
    public static class dnsmessage_ResourceBodyExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.golang.org.x.net.dns.dnsmessage_package.ResourceBody target)
        {
            try
            {
                return ((go.golang.org.x.net.dns.dnsmessage_package.ResourceBody<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.golang.org.x.net.dns.dnsmessage_package.ResourceBody target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.golang.org.x.net.dns.dnsmessage_package.ResourceBody target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.golang.org.x.net.dns.dnsmessage_package.ResourceBody<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.golang.org.x.net.dns.dnsmessage_package.ResourceBody target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}