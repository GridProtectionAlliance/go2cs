//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 04:51:53 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using context = go.context_package;
using syscall = go.syscall_package;

#nullable enable

namespace go
{
    public static partial class net_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial struct IPAddr
        {
            // Constructors
            public IPAddr(NilType _)
            {
                this.IP = default;
                this.Zone = default;
            }

            public IPAddr(IP IP = default, @string Zone = default)
            {
                this.IP = IP;
                this.Zone = Zone;
            }

            // Enable comparisons between nil and IPAddr struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(IPAddr value, NilType nil) => value.Equals(default(IPAddr));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(IPAddr value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, IPAddr value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, IPAddr value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator IPAddr(NilType nil) => default(IPAddr);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public static IPAddr IPAddr_cast(dynamic value)
        {
            return new IPAddr(value.IP, value.Zone);
        }
    }
}