//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2022 March 13 05:40:20 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using fmt = go.fmt_package;
using template = go.html.template_package;
using http = go.net.http_package;
using sort = go.sort_package;
using go;

#nullable enable

namespace go {
namespace net
{
    public static partial class rpc_package
    {
        [GeneratedCode("go2cs", "0.1.2.0")]
        private partial struct debugHTTP
        {
            // Constructors
            public debugHTTP(NilType _)
            {
                this.ptr<Server> = default;
            }

            public debugHTTP(ref ptr<Server> ptr<Server> = default)
            {
                this.ptr<Server> = ptr<Server>;
            }

            // Enable comparisons between nil and debugHTTP struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(debugHTTP value, NilType nil) => value.Equals(default(debugHTTP));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(debugHTTP value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, debugHTTP value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, debugHTTP value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator debugHTTP(NilType nil) => default(debugHTTP);
        }

        [GeneratedCode("go2cs", "0.1.2.0")]
        private static debugHTTP debugHTTP_cast(dynamic value)
        {
            return new debugHTTP(ref value.ptr<Server>);
        }
    }
}}