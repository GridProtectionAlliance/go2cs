//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on 2020 October 09 05:00:36 UTC
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static go.builtin;
using bufio = go.bufio_package;
using gob = go.encoding.gob_package;
using errors = go.errors_package;
using token = go.go.token_package;
using io = go.io_package;
using log = go.log_package;
using net = go.net_package;
using http = go.net.http_package;
using reflect = go.reflect_package;
using strings = go.strings_package;
using sync = go.sync_package;
using go;

#nullable enable
#pragma warning disable CS0660, CS0661

namespace go {
namespace net
{
    public static partial class rpc_package
    {
        [GeneratedCode("go2cs", "0.1.0.0")]
        public partial interface ServerCodec
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static ServerCodec As<T>(in T target) => (ServerCodec<T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static ServerCodec As<T>(ptr<T> target_ptr) => (ServerCodec<T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static ServerCodec? As(object target) =>
                typeof(ServerCodec<>).CreateInterfaceHandler<ServerCodec>(target);
        }

        [GeneratedCode("go2cs", "0.1.0.0")]
        public class ServerCodec<T> : ServerCodec
        {
            private T m_target = default!;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && !(m_target_ptr is null))
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public ServerCodec(in T target) => m_target = target;

            public ServerCodec(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }

            private delegate error ReadRequestHeaderByPtr(ptr<T> value, ptr<Request> _p0);
            private delegate error ReadRequestHeaderByVal(T value, ptr<Request> _p0);

            private static readonly ReadRequestHeaderByPtr? s_ReadRequestHeaderByPtr;
            private static readonly ReadRequestHeaderByVal? s_ReadRequestHeaderByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error ReadRequestHeader(ptr<Request> _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_ReadRequestHeaderByPtr is null || !m_target_is_ptr)
                    return s_ReadRequestHeaderByVal!(target, _p0);

                return s_ReadRequestHeaderByPtr(m_target_ptr, _p0);
            }

            private delegate error ReadRequestBodyByPtr(ptr<T> value, object _p0);
            private delegate error ReadRequestBodyByVal(T value, object _p0);

            private static readonly ReadRequestBodyByPtr? s_ReadRequestBodyByPtr;
            private static readonly ReadRequestBodyByVal? s_ReadRequestBodyByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error ReadRequestBody(object _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_ReadRequestBodyByPtr is null || !m_target_is_ptr)
                    return s_ReadRequestBodyByVal!(target, _p0);

                return s_ReadRequestBodyByPtr(m_target_ptr, _p0);
            }

            private delegate error WriteResponseByPtr(ptr<T> value, ptr<Response> _p0, object _p0);
            private delegate error WriteResponseByVal(T value, ptr<Response> _p0, object _p0);

            private static readonly WriteResponseByPtr? s_WriteResponseByPtr;
            private static readonly WriteResponseByVal? s_WriteResponseByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error WriteResponse(ptr<Response> _p0, object _p0)
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_WriteResponseByPtr is null || !m_target_is_ptr)
                    return s_WriteResponseByVal!(target, _p0, _p0);

                return s_WriteResponseByPtr(m_target_ptr, _p0, _p0);
            }

            private delegate error CloseByPtr(ptr<T> value);
            private delegate error CloseByVal(T value);

            private static readonly CloseByPtr? s_CloseByPtr;
            private static readonly CloseByVal? s_CloseByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            public error Close()
            {
                T target = m_target;

                if (m_target_is_ptr && !(m_target_ptr is null))
                    target = m_target_ptr.val;

                if (s_CloseByPtr is null || !m_target_is_ptr)
                    return s_CloseByVal!(target);

                return s_CloseByPtr(m_target_ptr);
            }
            
            public string ToString(string? format, IFormatProvider? formatProvider) => format;

            [DebuggerStepperBoundary]
            static ServerCodec()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo extensionMethod;

               extensionMethod = targetTypeByPtr.GetExtensionMethod("ReadRequestHeader");

                if (!(extensionMethod is null))
                    s_ReadRequestHeaderByPtr = extensionMethod.CreateStaticDelegate(typeof(ReadRequestHeaderByPtr)) as ReadRequestHeaderByPtr;

                extensionMethod = targetType.GetExtensionMethod("ReadRequestHeader");

                if (!(extensionMethod is null))
                    s_ReadRequestHeaderByVal = extensionMethod.CreateStaticDelegate(typeof(ReadRequestHeaderByVal)) as ReadRequestHeaderByVal;

                if (s_ReadRequestHeaderByPtr is null && s_ReadRequestHeaderByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ServerCodec.ReadRequestHeader method", new Exception("ReadRequestHeader"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("ReadRequestBody");

                if (!(extensionMethod is null))
                    s_ReadRequestBodyByPtr = extensionMethod.CreateStaticDelegate(typeof(ReadRequestBodyByPtr)) as ReadRequestBodyByPtr;

                extensionMethod = targetType.GetExtensionMethod("ReadRequestBody");

                if (!(extensionMethod is null))
                    s_ReadRequestBodyByVal = extensionMethod.CreateStaticDelegate(typeof(ReadRequestBodyByVal)) as ReadRequestBodyByVal;

                if (s_ReadRequestBodyByPtr is null && s_ReadRequestBodyByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ServerCodec.ReadRequestBody method", new Exception("ReadRequestBody"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("WriteResponse");

                if (!(extensionMethod is null))
                    s_WriteResponseByPtr = extensionMethod.CreateStaticDelegate(typeof(WriteResponseByPtr)) as WriteResponseByPtr;

                extensionMethod = targetType.GetExtensionMethod("WriteResponse");

                if (!(extensionMethod is null))
                    s_WriteResponseByVal = extensionMethod.CreateStaticDelegate(typeof(WriteResponseByVal)) as WriteResponseByVal;

                if (s_WriteResponseByPtr is null && s_WriteResponseByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ServerCodec.WriteResponse method", new Exception("WriteResponse"));

               extensionMethod = targetTypeByPtr.GetExtensionMethod("Close");

                if (!(extensionMethod is null))
                    s_CloseByPtr = extensionMethod.CreateStaticDelegate(typeof(CloseByPtr)) as CloseByPtr;

                extensionMethod = targetType.GetExtensionMethod("Close");

                if (!(extensionMethod is null))
                    s_CloseByVal = extensionMethod.CreateStaticDelegate(typeof(CloseByVal)) as CloseByVal;

                if (s_CloseByPtr is null && s_CloseByVal is null)
                    throw new NotImplementedException($"{targetType.FullName} does not implement ServerCodec.Close method", new Exception("Close"));
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator ServerCodec<T>(in ptr<T> target_ptr) => new ServerCodec<T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator ServerCodec<T>(in T target) => new ServerCodec<T>(target);

            // Enable comparisons between nil and ServerCodec<T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(ServerCodec<T> value, NilType nil) => Activator.CreateInstance<ServerCodec<T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(ServerCodec<T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, ServerCodec<T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, ServerCodec<T> value) => value != nil;
        }
    }
}}

namespace go
{
    public static class rpc_ServerCodecExtensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this go.net.rpc_package.ServerCodec target)
        {
            try
            {
                return ((go.net.rpc_package.ServerCodec<T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this go.net.rpc_package.ServerCodec target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this go.net.rpc_package.ServerCodec target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(go.net.rpc_package.ServerCodec<>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [GeneratedCode("go2cs", "0.1.0.0"), MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this go.net.rpc_package.ServerCodec target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}