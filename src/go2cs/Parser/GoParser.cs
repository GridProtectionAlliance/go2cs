//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GoParser.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class GoParser : GoParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BREAK=1, DEFAULT=2, FUNC=3, INTERFACE=4, SELECT=5, CASE=6, DEFER=7, GO=8, 
		MAP=9, STRUCT=10, CHAN=11, ELSE=12, GOTO=13, PACKAGE=14, SWITCH=15, CONST=16, 
		FALLTHROUGH=17, IF=18, RANGE=19, TYPE=20, CONTINUE=21, FOR=22, IMPORT=23, 
		RETURN=24, VAR=25, NIL_LIT=26, IDENTIFIER=27, L_PAREN=28, R_PAREN=29, 
		L_CURLY=30, R_CURLY=31, L_BRACKET=32, R_BRACKET=33, ASSIGN=34, COMMA=35, 
		SEMI=36, COLON=37, DOT=38, PLUS_PLUS=39, MINUS_MINUS=40, DECLARE_ASSIGN=41, 
		ELLIPSIS=42, LOGICAL_OR=43, LOGICAL_AND=44, EQUALS=45, NOT_EQUALS=46, 
		LESS=47, LESS_OR_EQUALS=48, GREATER=49, GREATER_OR_EQUALS=50, OR=51, DIV=52, 
		MOD=53, LSHIFT=54, RSHIFT=55, BIT_CLEAR=56, EXCLAMATION=57, PLUS=58, MINUS=59, 
		CARET=60, STAR=61, AMPERSAND=62, RECEIVE=63, DECIMAL_LIT=64, BINARY_LIT=65, 
		OCTAL_LIT=66, HEX_LIT=67, FLOAT_LIT=68, DECIMAL_FLOAT_LIT=69, HEX_FLOAT_LIT=70, 
		IMAGINARY_LIT=71, RUNE_LIT=72, BYTE_VALUE=73, OCTAL_BYTE_VALUE=74, HEX_BYTE_VALUE=75, 
		LITTLE_U_VALUE=76, BIG_U_VALUE=77, RAW_STRING_LIT=78, INTERPRETED_STRING_LIT=79, 
		WS=80, COMMENT=81, TERMINATOR=82, LINE_COMMENT=83;
	public const int
		RULE_sourceFile = 0, RULE_topLevelDecl = 1, RULE_packageClause = 2, RULE_importDecl = 3, 
		RULE_importSpec = 4, RULE_importPath = 5, RULE_declaration = 6, RULE_constDecl = 7, 
		RULE_constSpec = 8, RULE_identifierList = 9, RULE_expressionList = 10, 
		RULE_typeDecl = 11, RULE_typeSpec = 12, RULE_functionDecl = 13, RULE_methodDecl = 14, 
		RULE_receiver = 15, RULE_varDecl = 16, RULE_varSpec = 17, RULE_block = 18, 
		RULE_statementList = 19, RULE_statement = 20, RULE_simpleStmt = 21, RULE_expressionStmt = 22, 
		RULE_sendStmt = 23, RULE_incDecStmt = 24, RULE_assignment = 25, RULE_assign_op = 26, 
		RULE_shortVarDecl = 27, RULE_emptyStmt = 28, RULE_labeledStmt = 29, RULE_returnStmt = 30, 
		RULE_breakStmt = 31, RULE_continueStmt = 32, RULE_gotoStmt = 33, RULE_fallthroughStmt = 34, 
		RULE_deferStmt = 35, RULE_ifStmt = 36, RULE_switchStmt = 37, RULE_exprSwitchStmt = 38, 
		RULE_exprCaseClause = 39, RULE_exprSwitchCase = 40, RULE_typeSwitchStmt = 41, 
		RULE_typeSwitchGuard = 42, RULE_typeCaseClause = 43, RULE_typeSwitchCase = 44, 
		RULE_typeList = 45, RULE_selectStmt = 46, RULE_commClause = 47, RULE_commCase = 48, 
		RULE_recvStmt = 49, RULE_forStmt = 50, RULE_forClause = 51, RULE_rangeClause = 52, 
		RULE_goStmt = 53, RULE_type_ = 54, RULE_typeName = 55, RULE_typeLit = 56, 
		RULE_arrayType = 57, RULE_arrayLength = 58, RULE_elementType = 59, RULE_pointerType = 60, 
		RULE_interfaceType = 61, RULE_sliceType = 62, RULE_mapType = 63, RULE_channelType = 64, 
		RULE_methodSpec = 65, RULE_functionType = 66, RULE_signature = 67, RULE_result = 68, 
		RULE_parameters = 69, RULE_parameterDecl = 70, RULE_expression = 71, RULE_primaryExpr = 72, 
		RULE_unaryExpr = 73, RULE_conversion = 74, RULE_operand = 75, RULE_literal = 76, 
		RULE_basicLit = 77, RULE_integer = 78, RULE_operandName = 79, RULE_qualifiedIdent = 80, 
		RULE_compositeLit = 81, RULE_literalType = 82, RULE_literalValue = 83, 
		RULE_elementList = 84, RULE_keyedElement = 85, RULE_key = 86, RULE_element = 87, 
		RULE_structType = 88, RULE_fieldDecl = 89, RULE_string_ = 90, RULE_anonymousField = 91, 
		RULE_functionLit = 92, RULE_index = 93, RULE_slice_ = 94, RULE_typeAssertion = 95, 
		RULE_arguments = 96, RULE_methodExpr = 97, RULE_receiverType = 98, RULE_eos = 99;
	public static readonly string[] ruleNames = {
		"sourceFile", "topLevelDecl", "packageClause", "importDecl", "importSpec", 
		"importPath", "declaration", "constDecl", "constSpec", "identifierList", 
		"expressionList", "typeDecl", "typeSpec", "functionDecl", "methodDecl", 
		"receiver", "varDecl", "varSpec", "block", "statementList", "statement", 
		"simpleStmt", "expressionStmt", "sendStmt", "incDecStmt", "assignment", 
		"assign_op", "shortVarDecl", "emptyStmt", "labeledStmt", "returnStmt", 
		"breakStmt", "continueStmt", "gotoStmt", "fallthroughStmt", "deferStmt", 
		"ifStmt", "switchStmt", "exprSwitchStmt", "exprCaseClause", "exprSwitchCase", 
		"typeSwitchStmt", "typeSwitchGuard", "typeCaseClause", "typeSwitchCase", 
		"typeList", "selectStmt", "commClause", "commCase", "recvStmt", "forStmt", 
		"forClause", "rangeClause", "goStmt", "type_", "typeName", "typeLit", 
		"arrayType", "arrayLength", "elementType", "pointerType", "interfaceType", 
		"sliceType", "mapType", "channelType", "methodSpec", "functionType", "signature", 
		"result", "parameters", "parameterDecl", "expression", "primaryExpr", 
		"unaryExpr", "conversion", "operand", "literal", "basicLit", "integer", 
		"operandName", "qualifiedIdent", "compositeLit", "literalType", "literalValue", 
		"elementList", "keyedElement", "key", "element", "structType", "fieldDecl", 
		"string_", "anonymousField", "functionLit", "index", "slice_", "typeAssertion", 
		"arguments", "methodExpr", "receiverType", "eos"
	};

	private static readonly string[] _LiteralNames = {
		null, "'break'", "'default'", "'func'", "'interface'", "'select'", "'case'", 
		"'defer'", "'go'", "'map'", "'struct'", "'chan'", "'else'", "'goto'", 
		"'package'", "'switch'", "'const'", "'fallthrough'", "'if'", "'range'", 
		"'type'", "'continue'", "'for'", "'import'", "'return'", "'var'", "'nil'", 
		null, "'('", "')'", "'{'", "'}'", "'['", "']'", "'='", "','", "';'", "':'", 
		"'.'", "'++'", "'--'", "':='", "'...'", "'||'", "'&&'", "'=='", "'!='", 
		"'<'", "'<='", "'>'", "'>='", "'|'", "'/'", "'%'", "'<<'", "'>>'", "'&^'", 
		"'!'", "'+'", "'-'", "'^'", "'*'", "'&'", "'<-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BREAK", "DEFAULT", "FUNC", "INTERFACE", "SELECT", "CASE", "DEFER", 
		"GO", "MAP", "STRUCT", "CHAN", "ELSE", "GOTO", "PACKAGE", "SWITCH", "CONST", 
		"FALLTHROUGH", "IF", "RANGE", "TYPE", "CONTINUE", "FOR", "IMPORT", "RETURN", 
		"VAR", "NIL_LIT", "IDENTIFIER", "L_PAREN", "R_PAREN", "L_CURLY", "R_CURLY", 
		"L_BRACKET", "R_BRACKET", "ASSIGN", "COMMA", "SEMI", "COLON", "DOT", "PLUS_PLUS", 
		"MINUS_MINUS", "DECLARE_ASSIGN", "ELLIPSIS", "LOGICAL_OR", "LOGICAL_AND", 
		"EQUALS", "NOT_EQUALS", "LESS", "LESS_OR_EQUALS", "GREATER", "GREATER_OR_EQUALS", 
		"OR", "DIV", "MOD", "LSHIFT", "RSHIFT", "BIT_CLEAR", "EXCLAMATION", "PLUS", 
		"MINUS", "CARET", "STAR", "AMPERSAND", "RECEIVE", "DECIMAL_LIT", "BINARY_LIT", 
		"OCTAL_LIT", "HEX_LIT", "FLOAT_LIT", "DECIMAL_FLOAT_LIT", "HEX_FLOAT_LIT", 
		"IMAGINARY_LIT", "RUNE_LIT", "BYTE_VALUE", "OCTAL_BYTE_VALUE", "HEX_BYTE_VALUE", 
		"LITTLE_U_VALUE", "BIG_U_VALUE", "RAW_STRING_LIT", "INTERPRETED_STRING_LIT", 
		"WS", "COMMENT", "TERMINATOR", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GoParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GoParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GoParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GoParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SourceFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PackageClauseContext packageClause() {
			return GetRuleContext<PackageClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GoParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclContext[] importDecl() {
			return GetRuleContexts<ImportDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclContext importDecl(int i) {
			return GetRuleContext<ImportDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclContext[] topLevelDecl() {
			return GetRuleContexts<TopLevelDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclContext topLevelDecl(int i) {
			return GetRuleContext<TopLevelDeclContext>(i);
		}
		public SourceFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterSourceFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitSourceFile(this);
		}
	}

	[RuleVersion(0)]
	public SourceFileContext sourceFile() {
		SourceFileContext _localctx = new SourceFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_sourceFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			packageClause();
			State = 201;
			eos();
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 202;
				importDecl();
				State = 203;
				eos();
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << CONST) | (1L << TYPE) | (1L << VAR))) != 0)) {
				{
				{
				State = 210;
				topLevelDecl();
				State = 211;
				eos();
				}
				}
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 218;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext functionDecl() {
			return GetRuleContext<FunctionDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext methodDecl() {
			return GetRuleContext<MethodDeclContext>(0);
		}
		public TopLevelDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTopLevelDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTopLevelDecl(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelDeclContext topLevelDecl() {
		TopLevelDeclContext _localctx = new TopLevelDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_topLevelDecl);
		try {
			State = 223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 220;
				declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 221;
				functionDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 222;
				methodDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageClauseContext : ParserRuleContext {
		public IToken packageName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(GoParser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public PackageClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterPackageClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitPackageClause(this);
		}
	}

	[RuleVersion(0)]
	public PackageClauseContext packageClause() {
		PackageClauseContext _localctx = new PackageClauseContext(Context, State);
		EnterRule(_localctx, 4, RULE_packageClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			Match(PACKAGE);
			State = 226;
			_localctx.packageName = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(GoParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportSpecContext[] importSpec() {
			return GetRuleContexts<ImportSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportSpecContext importSpec(int i) {
			return GetRuleContext<ImportSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ImportDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterImportDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitImportDecl(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclContext importDecl() {
		ImportDeclContext _localctx = new ImportDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_importDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(IMPORT);
			State = 240;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
			case DOT:
			case RAW_STRING_LIT:
			case INTERPRETED_STRING_LIT:
				{
				State = 229;
				importSpec();
				}
				break;
			case L_PAREN:
				{
				State = 230;
				Match(L_PAREN);
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 27)) & ~0x3f) == 0 && ((1L << (_la - 27)) & ((1L << (IDENTIFIER - 27)) | (1L << (DOT - 27)) | (1L << (RAW_STRING_LIT - 27)) | (1L << (INTERPRETED_STRING_LIT - 27)))) != 0)) {
					{
					{
					State = 231;
					importSpec();
					State = 232;
					eos();
					}
					}
					State = 238;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 239;
				Match(R_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportSpecContext : ParserRuleContext {
		public IToken alias;
		[System.Diagnostics.DebuggerNonUserCode] public ImportPathContext importPath() {
			return GetRuleContext<ImportPathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(GoParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public ImportSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterImportSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitImportSpec(this);
		}
	}

	[RuleVersion(0)]
	public ImportSpecContext importSpec() {
		ImportSpecContext _localctx = new ImportSpecContext(Context, State);
		EnterRule(_localctx, 8, RULE_importSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER || _la==DOT) {
				{
				State = 242;
				_localctx.alias = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==IDENTIFIER || _la==DOT) ) {
					_localctx.alias = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 245;
			importPath();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportPathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public String_Context string_() {
			return GetRuleContext<String_Context>(0);
		}
		public ImportPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importPath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterImportPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitImportPath(this);
		}
	}

	[RuleVersion(0)]
	public ImportPathContext importPath() {
		ImportPathContext _localctx = new ImportPathContext(Context, State);
		EnterRule(_localctx, 10, RULE_importPath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			string_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstDeclContext constDecl() {
			return GetRuleContext<ConstDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclContext typeDecl() {
			return GetRuleContext<TypeDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_declaration);
		try {
			State = 252;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 249;
				constDecl();
				}
				break;
			case TYPE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 250;
				typeDecl();
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 251;
				varDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(GoParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstSpecContext[] constSpec() {
			return GetRuleContexts<ConstSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstSpecContext constSpec(int i) {
			return GetRuleContext<ConstSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ConstDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterConstDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitConstDecl(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclContext constDecl() {
		ConstDeclContext _localctx = new ConstDeclContext(Context, State);
		EnterRule(_localctx, 14, RULE_constDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			Match(CONST);
			State = 266;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 255;
				constSpec();
				}
				break;
			case L_PAREN:
				{
				State = 256;
				Match(L_PAREN);
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IDENTIFIER) {
					{
					{
					State = 257;
					constSpec();
					State = 258;
					eos();
					}
					}
					State = 264;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 265;
				Match(R_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GoParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ConstSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterConstSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitConstSpec(this);
		}
	}

	[RuleVersion(0)]
	public ConstSpecContext constSpec() {
		ConstSpecContext _localctx = new ConstSpecContext(Context, State);
		EnterRule(_localctx, 16, RULE_constSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			identifierList();
			State = 274;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << STAR) | (1L << RECEIVE))) != 0)) {
					{
					State = 269;
					type_();
					}
				}

				State = 272;
				Match(ASSIGN);
				State = 273;
				expressionList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(GoParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GoParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GoParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GoParser.COMMA, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 18, RULE_identifierList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(IDENTIFIER);
			State = 281;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 277;
					Match(COMMA);
					State = 278;
					Match(IDENTIFIER);
					}
					} 
				}
				State = 283;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GoParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GoParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 20, RULE_expressionList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			expression(0);
			State = 289;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 285;
					Match(COMMA);
					State = 286;
					expression(0);
					}
					} 
				}
				State = 291;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(GoParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecContext[] typeSpec() {
			return GetRuleContexts<TypeSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecContext typeSpec(int i) {
			return GetRuleContext<TypeSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public TypeDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeDecl(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclContext typeDecl() {
		TypeDeclContext _localctx = new TypeDeclContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			Match(TYPE);
			State = 304;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 293;
				typeSpec();
				}
				break;
			case L_PAREN:
				{
				State = 294;
				Match(L_PAREN);
				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IDENTIFIER) {
					{
					{
					State = 295;
					typeSpec();
					State = 296;
					eos();
					}
					}
					State = 302;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 303;
				Match(R_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GoParser.ASSIGN, 0); }
		public TypeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeSpec(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecContext typeSpec() {
		TypeSpecContext _localctx = new TypeSpecContext(Context, State);
		EnterRule(_localctx, 24, RULE_typeSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			Match(IDENTIFIER);
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 307;
				Match(ASSIGN);
				}
			}

			State = 310;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(GoParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(Context, State);
		EnterRule(_localctx, 26, RULE_functionDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			Match(FUNC);
			State = 313;
			Match(IDENTIFIER);
			{
			State = 314;
			signature();
			State = 316;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 315;
				block();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(GoParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReceiverContext receiver() {
			return GetRuleContext<ReceiverContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitMethodDecl(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 28, RULE_methodDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			Match(FUNC);
			State = 319;
			receiver();
			State = 320;
			Match(IDENTIFIER);
			{
			State = 321;
			signature();
			State = 323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 322;
				block();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReceiverContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public ReceiverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receiver; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterReceiver(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitReceiver(this);
		}
	}

	[RuleVersion(0)]
	public ReceiverContext receiver() {
		ReceiverContext _localctx = new ReceiverContext(Context, State);
		EnterRule(_localctx, 30, RULE_receiver);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			parameters();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(GoParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarSpecContext[] varSpec() {
			return GetRuleContexts<VarSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarSpecContext varSpec(int i) {
			return GetRuleContext<VarSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 32, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			Match(VAR);
			State = 339;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 328;
				varSpec();
				}
				break;
			case L_PAREN:
				{
				State = 329;
				Match(L_PAREN);
				State = 335;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IDENTIFIER) {
					{
					{
					State = 330;
					varSpec();
					State = 331;
					eos();
					}
					}
					State = 337;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 338;
				Match(R_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GoParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public VarSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterVarSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitVarSpec(this);
		}
	}

	[RuleVersion(0)]
	public VarSpecContext varSpec() {
		VarSpecContext _localctx = new VarSpecContext(Context, State);
		EnterRule(_localctx, 34, RULE_varSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			identifierList();
			State = 349;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNC:
			case INTERFACE:
			case MAP:
			case STRUCT:
			case CHAN:
			case IDENTIFIER:
			case L_PAREN:
			case L_BRACKET:
			case STAR:
			case RECEIVE:
				{
				State = 342;
				type_();
				State = 345;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 343;
					Match(ASSIGN);
					State = 344;
					expressionList();
					}
					break;
				}
				}
				break;
			case ASSIGN:
				{
				State = 347;
				Match(ASSIGN);
				State = 348;
				expressionList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(GoParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(GoParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 36, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			Match(L_CURLY);
			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BREAK) | (1L << FUNC) | (1L << INTERFACE) | (1L << SELECT) | (1L << DEFER) | (1L << GO) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << GOTO) | (1L << SWITCH) | (1L << CONST) | (1L << FALLTHROUGH) | (1L << IF) | (1L << TYPE) | (1L << CONTINUE) | (1L << FOR) | (1L << RETURN) | (1L << VAR) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_CURLY) | (1L << L_BRACKET) | (1L << SEMI) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
				{
				State = 352;
				statementList();
				}
			}

			State = 355;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 38, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 357;
				statement();
				State = 358;
				eos();
				}
				}
				State = 362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BREAK) | (1L << FUNC) | (1L << INTERFACE) | (1L << SELECT) | (1L << DEFER) | (1L << GO) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << GOTO) | (1L << SWITCH) | (1L << CONST) | (1L << FALLTHROUGH) | (1L << IF) | (1L << TYPE) | (1L << CONTINUE) | (1L << FOR) | (1L << RETURN) | (1L << VAR) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_CURLY) | (1L << L_BRACKET) | (1L << SEMI) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabeledStmtContext labeledStmt() {
			return GetRuleContext<LabeledStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStmtContext simpleStmt() {
			return GetRuleContext<SimpleStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GoStmtContext goStmt() {
			return GetRuleContext<GoStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStmtContext breakStmt() {
			return GetRuleContext<BreakStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStmtContext continueStmt() {
			return GetRuleContext<ContinueStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStmtContext gotoStmt() {
			return GetRuleContext<GotoStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FallthroughStmtContext fallthroughStmt() {
			return GetRuleContext<FallthroughStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStmtContext switchStmt() {
			return GetRuleContext<SwitchStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStmtContext selectStmt() {
			return GetRuleContext<SelectStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStmtContext forStmt() {
			return GetRuleContext<ForStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeferStmtContext deferStmt() {
			return GetRuleContext<DeferStmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_statement);
		try {
			State = 379;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 364;
				declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 365;
				labeledStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 366;
				simpleStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 367;
				goStmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 368;
				returnStmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 369;
				breakStmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 370;
				continueStmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 371;
				gotoStmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 372;
				fallthroughStmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 373;
				block();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 374;
				ifStmt();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 375;
				switchStmt();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 376;
				selectStmt();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 377;
				forStmt();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 378;
				deferStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SendStmtContext sendStmt() {
			return GetRuleContext<SendStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStmtContext expressionStmt() {
			return GetRuleContext<ExpressionStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncDecStmtContext incDecStmt() {
			return GetRuleContext<IncDecStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortVarDeclContext shortVarDecl() {
			return GetRuleContext<ShortVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStmtContext emptyStmt() {
			return GetRuleContext<EmptyStmtContext>(0);
		}
		public SimpleStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterSimpleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitSimpleStmt(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStmtContext simpleStmt() {
		SimpleStmtContext _localctx = new SimpleStmtContext(Context, State);
		EnterRule(_localctx, 42, RULE_simpleStmt);
		try {
			State = 387;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 381;
				sendStmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 382;
				expressionStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 383;
				incDecStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 384;
				assignment();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 385;
				shortVarDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 386;
				emptyStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterExpressionStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitExpressionStmt(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStmtContext expressionStmt() {
		ExpressionStmtContext _localctx = new ExpressionStmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_expressionStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SendStmtContext : ParserRuleContext {
		public ExpressionContext channel;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECEIVE() { return GetToken(GoParser.RECEIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SendStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sendStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterSendStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitSendStmt(this);
		}
	}

	[RuleVersion(0)]
	public SendStmtContext sendStmt() {
		SendStmtContext _localctx = new SendStmtContext(Context, State);
		EnterRule(_localctx, 46, RULE_sendStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			_localctx.channel = expression(0);
			State = 392;
			Match(RECEIVE);
			State = 393;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncDecStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_PLUS() { return GetToken(GoParser.PLUS_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_MINUS() { return GetToken(GoParser.MINUS_MINUS, 0); }
		public IncDecStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incDecStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterIncDecStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitIncDecStmt(this);
		}
	}

	[RuleVersion(0)]
	public IncDecStmtContext incDecStmt() {
		IncDecStmtContext _localctx = new IncDecStmtContext(Context, State);
		EnterRule(_localctx, 48, RULE_incDecStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			expression(0);
			State = 396;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS_PLUS || _la==MINUS_MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext[] expressionList() {
			return GetRuleContexts<ExpressionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList(int i) {
			return GetRuleContext<ExpressionListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_opContext assign_op() {
			return GetRuleContext<Assign_opContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 50, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			expressionList();
			State = 399;
			assign_op();
			State = 400;
			expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GoParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(GoParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(GoParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(GoParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(GoParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(GoParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(GoParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(GoParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT() { return GetToken(GoParser.LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSHIFT() { return GetToken(GoParser.RSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(GoParser.AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_CLEAR() { return GetToken(GoParser.BIT_CLEAR, 0); }
		public Assign_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterAssign_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitAssign_op(this);
		}
	}

	[RuleVersion(0)]
	public Assign_opContext assign_op() {
		Assign_opContext _localctx = new Assign_opContext(Context, State);
		EnterRule(_localctx, 52, RULE_assign_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OR) | (1L << DIV) | (1L << MOD) | (1L << LSHIFT) | (1L << RSHIFT) | (1L << BIT_CLEAR) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND))) != 0)) {
				{
				State = 402;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OR) | (1L << DIV) | (1L << MOD) | (1L << LSHIFT) | (1L << RSHIFT) | (1L << BIT_CLEAR) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 405;
			Match(ASSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_ASSIGN() { return GetToken(GoParser.DECLARE_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ShortVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterShortVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitShortVarDecl(this);
		}
	}

	[RuleVersion(0)]
	public ShortVarDeclContext shortVarDecl() {
		ShortVarDeclContext _localctx = new ShortVarDeclContext(Context, State);
		EnterRule(_localctx, 54, RULE_shortVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			identifierList();
			State = 408;
			Match(DECLARE_ASSIGN);
			State = 409;
			expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(GoParser.SEMI, 0); }
		public EmptyStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterEmptyStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitEmptyStmt(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStmtContext emptyStmt() {
		EmptyStmtContext _localctx = new EmptyStmtContext(Context, State);
		EnterRule(_localctx, 56, RULE_emptyStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GoParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabeledStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterLabeledStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitLabeledStmt(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStmtContext labeledStmt() {
		LabeledStmtContext _localctx = new LabeledStmtContext(Context, State);
		EnterRule(_localctx, 58, RULE_labeledStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			Match(IDENTIFIER);
			State = 414;
			Match(COLON);
			State = 416;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 415;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(GoParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 60, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			Match(RETURN);
			State = 420;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 419;
				expressionList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(GoParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public BreakStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterBreakStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitBreakStmt(this);
		}
	}

	[RuleVersion(0)]
	public BreakStmtContext breakStmt() {
		BreakStmtContext _localctx = new BreakStmtContext(Context, State);
		EnterRule(_localctx, 62, RULE_breakStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			Match(BREAK);
			State = 424;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 423;
				Match(IDENTIFIER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(GoParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public ContinueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterContinueStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitContinueStmt(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStmtContext continueStmt() {
		ContinueStmtContext _localctx = new ContinueStmtContext(Context, State);
		EnterRule(_localctx, 64, RULE_continueStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			Match(CONTINUE);
			State = 428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 427;
				Match(IDENTIFIER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(GoParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public GotoStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterGotoStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitGotoStmt(this);
		}
	}

	[RuleVersion(0)]
	public GotoStmtContext gotoStmt() {
		GotoStmtContext _localctx = new GotoStmtContext(Context, State);
		EnterRule(_localctx, 66, RULE_gotoStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			Match(GOTO);
			State = 431;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FallthroughStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALLTHROUGH() { return GetToken(GoParser.FALLTHROUGH, 0); }
		public FallthroughStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fallthroughStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterFallthroughStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitFallthroughStmt(this);
		}
	}

	[RuleVersion(0)]
	public FallthroughStmtContext fallthroughStmt() {
		FallthroughStmtContext _localctx = new FallthroughStmtContext(Context, State);
		EnterRule(_localctx, 68, RULE_fallthroughStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			Match(FALLTHROUGH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeferStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFER() { return GetToken(GoParser.DEFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeferStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deferStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterDeferStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitDeferStmt(this);
		}
	}

	[RuleVersion(0)]
	public DeferStmtContext deferStmt() {
		DeferStmtContext _localctx = new DeferStmtContext(Context, State);
		EnterRule(_localctx, 70, RULE_deferStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			Match(DEFER);
			State = 436;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(GoParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStmtContext simpleStmt() {
			return GetRuleContext<SimpleStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(GoParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(GoParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 72, RULE_ifStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			Match(IF);
			State = 442;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 439;
				simpleStmt();
				State = 440;
				Match(SEMI);
				}
				break;
			}
			State = 444;
			expression(0);
			State = 445;
			block();
			State = 451;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 446;
				Match(ELSE);
				State = 449;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IF:
					{
					State = 447;
					ifStmt();
					}
					break;
				case L_CURLY:
					{
					State = 448;
					block();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprSwitchStmtContext exprSwitchStmt() {
			return GetRuleContext<ExprSwitchStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSwitchStmtContext typeSwitchStmt() {
			return GetRuleContext<TypeSwitchStmtContext>(0);
		}
		public SwitchStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitSwitchStmt(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStmtContext switchStmt() {
		SwitchStmtContext _localctx = new SwitchStmtContext(Context, State);
		EnterRule(_localctx, 74, RULE_switchStmt);
		try {
			State = 455;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 453;
				exprSwitchStmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 454;
				typeSwitchStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprSwitchStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(GoParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(GoParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(GoParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStmtContext simpleStmt() {
			return GetRuleContext<SimpleStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(GoParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprCaseClauseContext[] exprCaseClause() {
			return GetRuleContexts<ExprCaseClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprCaseClauseContext exprCaseClause(int i) {
			return GetRuleContext<ExprCaseClauseContext>(i);
		}
		public ExprSwitchStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprSwitchStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterExprSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitExprSwitchStmt(this);
		}
	}

	[RuleVersion(0)]
	public ExprSwitchStmtContext exprSwitchStmt() {
		ExprSwitchStmtContext _localctx = new ExprSwitchStmtContext(Context, State);
		EnterRule(_localctx, 76, RULE_exprSwitchStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457;
			Match(SWITCH);
			State = 461;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 458;
				simpleStmt();
				State = 459;
				Match(SEMI);
				}
				break;
			}
			State = 464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
				{
				State = 463;
				expression(0);
				}
			}

			State = 466;
			Match(L_CURLY);
			State = 470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFAULT || _la==CASE) {
				{
				{
				State = 467;
				exprCaseClause();
				}
				}
				State = 472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 473;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprCaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprSwitchCaseContext exprSwitchCase() {
			return GetRuleContext<ExprSwitchCaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GoParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ExprCaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprCaseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterExprCaseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitExprCaseClause(this);
		}
	}

	[RuleVersion(0)]
	public ExprCaseClauseContext exprCaseClause() {
		ExprCaseClauseContext _localctx = new ExprCaseClauseContext(Context, State);
		EnterRule(_localctx, 78, RULE_exprCaseClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			exprSwitchCase();
			State = 476;
			Match(COLON);
			State = 478;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BREAK) | (1L << FUNC) | (1L << INTERFACE) | (1L << SELECT) | (1L << DEFER) | (1L << GO) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << GOTO) | (1L << SWITCH) | (1L << CONST) | (1L << FALLTHROUGH) | (1L << IF) | (1L << TYPE) | (1L << CONTINUE) | (1L << FOR) | (1L << RETURN) | (1L << VAR) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_CURLY) | (1L << L_BRACKET) | (1L << SEMI) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
				{
				State = 477;
				statementList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprSwitchCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(GoParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(GoParser.DEFAULT, 0); }
		public ExprSwitchCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprSwitchCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterExprSwitchCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitExprSwitchCase(this);
		}
	}

	[RuleVersion(0)]
	public ExprSwitchCaseContext exprSwitchCase() {
		ExprSwitchCaseContext _localctx = new ExprSwitchCaseContext(Context, State);
		EnterRule(_localctx, 80, RULE_exprSwitchCase);
		try {
			State = 483;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 480;
				Match(CASE);
				State = 481;
				expressionList();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 482;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSwitchStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(GoParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSwitchGuardContext typeSwitchGuard() {
			return GetRuleContext<TypeSwitchGuardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(GoParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(GoParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStmtContext simpleStmt() {
			return GetRuleContext<SimpleStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(GoParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeCaseClauseContext[] typeCaseClause() {
			return GetRuleContexts<TypeCaseClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeCaseClauseContext typeCaseClause(int i) {
			return GetRuleContext<TypeCaseClauseContext>(i);
		}
		public TypeSwitchStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSwitchStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeSwitchStmt(this);
		}
	}

	[RuleVersion(0)]
	public TypeSwitchStmtContext typeSwitchStmt() {
		TypeSwitchStmtContext _localctx = new TypeSwitchStmtContext(Context, State);
		EnterRule(_localctx, 82, RULE_typeSwitchStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			Match(SWITCH);
			State = 489;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 486;
				simpleStmt();
				State = 487;
				Match(SEMI);
				}
				break;
			}
			State = 491;
			typeSwitchGuard();
			State = 492;
			Match(L_CURLY);
			State = 496;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFAULT || _la==CASE) {
				{
				{
				State = 493;
				typeCaseClause();
				}
				}
				State = 498;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 499;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSwitchGuardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(GoParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(GoParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_ASSIGN() { return GetToken(GoParser.DECLARE_ASSIGN, 0); }
		public TypeSwitchGuardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSwitchGuard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeSwitchGuard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeSwitchGuard(this);
		}
	}

	[RuleVersion(0)]
	public TypeSwitchGuardContext typeSwitchGuard() {
		TypeSwitchGuardContext _localctx = new TypeSwitchGuardContext(Context, State);
		EnterRule(_localctx, 84, RULE_typeSwitchGuard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 501;
				Match(IDENTIFIER);
				State = 502;
				Match(DECLARE_ASSIGN);
				}
				break;
			}
			State = 505;
			primaryExpr(0);
			State = 506;
			Match(DOT);
			State = 507;
			Match(L_PAREN);
			State = 508;
			Match(TYPE);
			State = 509;
			Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeCaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSwitchCaseContext typeSwitchCase() {
			return GetRuleContext<TypeSwitchCaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GoParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public TypeCaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeCaseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeCaseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeCaseClause(this);
		}
	}

	[RuleVersion(0)]
	public TypeCaseClauseContext typeCaseClause() {
		TypeCaseClauseContext _localctx = new TypeCaseClauseContext(Context, State);
		EnterRule(_localctx, 86, RULE_typeCaseClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			typeSwitchCase();
			State = 512;
			Match(COLON);
			State = 514;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BREAK) | (1L << FUNC) | (1L << INTERFACE) | (1L << SELECT) | (1L << DEFER) | (1L << GO) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << GOTO) | (1L << SWITCH) | (1L << CONST) | (1L << FALLTHROUGH) | (1L << IF) | (1L << TYPE) | (1L << CONTINUE) | (1L << FOR) | (1L << RETURN) | (1L << VAR) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_CURLY) | (1L << L_BRACKET) | (1L << SEMI) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
				{
				State = 513;
				statementList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSwitchCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(GoParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(GoParser.DEFAULT, 0); }
		public TypeSwitchCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSwitchCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeSwitchCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeSwitchCase(this);
		}
	}

	[RuleVersion(0)]
	public TypeSwitchCaseContext typeSwitchCase() {
		TypeSwitchCaseContext _localctx = new TypeSwitchCaseContext(Context, State);
		EnterRule(_localctx, 88, RULE_typeSwitchCase);
		try {
			State = 519;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 516;
				Match(CASE);
				State = 517;
				typeList();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 518;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context[] type_() {
			return GetRuleContexts<Type_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_(int i) {
			return GetRuleContext<Type_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NIL_LIT() { return GetTokens(GoParser.NIL_LIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL_LIT(int i) {
			return GetToken(GoParser.NIL_LIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GoParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GoParser.COMMA, i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeList(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(Context, State);
		EnterRule(_localctx, 90, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNC:
			case INTERFACE:
			case MAP:
			case STRUCT:
			case CHAN:
			case IDENTIFIER:
			case L_PAREN:
			case L_BRACKET:
			case STAR:
			case RECEIVE:
				{
				State = 521;
				type_();
				}
				break;
			case NIL_LIT:
				{
				State = 522;
				Match(NIL_LIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 532;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 525;
				Match(COMMA);
				State = 528;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FUNC:
				case INTERFACE:
				case MAP:
				case STRUCT:
				case CHAN:
				case IDENTIFIER:
				case L_PAREN:
				case L_BRACKET:
				case STAR:
				case RECEIVE:
					{
					State = 526;
					type_();
					}
					break;
				case NIL_LIT:
					{
					State = 527;
					Match(NIL_LIT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 534;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(GoParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(GoParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(GoParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommClauseContext[] commClause() {
			return GetRuleContexts<CommClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommClauseContext commClause(int i) {
			return GetRuleContext<CommClauseContext>(i);
		}
		public SelectStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterSelectStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitSelectStmt(this);
		}
	}

	[RuleVersion(0)]
	public SelectStmtContext selectStmt() {
		SelectStmtContext _localctx = new SelectStmtContext(Context, State);
		EnterRule(_localctx, 92, RULE_selectStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			Match(SELECT);
			State = 536;
			Match(L_CURLY);
			State = 540;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFAULT || _la==CASE) {
				{
				{
				State = 537;
				commClause();
				}
				}
				State = 542;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 543;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommCaseContext commCase() {
			return GetRuleContext<CommCaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GoParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CommClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterCommClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitCommClause(this);
		}
	}

	[RuleVersion(0)]
	public CommClauseContext commClause() {
		CommClauseContext _localctx = new CommClauseContext(Context, State);
		EnterRule(_localctx, 94, RULE_commClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			commCase();
			State = 546;
			Match(COLON);
			State = 548;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BREAK) | (1L << FUNC) | (1L << INTERFACE) | (1L << SELECT) | (1L << DEFER) | (1L << GO) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << GOTO) | (1L << SWITCH) | (1L << CONST) | (1L << FALLTHROUGH) | (1L << IF) | (1L << TYPE) | (1L << CONTINUE) | (1L << FOR) | (1L << RETURN) | (1L << VAR) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_CURLY) | (1L << L_BRACKET) | (1L << SEMI) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
				{
				State = 547;
				statementList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(GoParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SendStmtContext sendStmt() {
			return GetRuleContext<SendStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecvStmtContext recvStmt() {
			return GetRuleContext<RecvStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(GoParser.DEFAULT, 0); }
		public CommCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterCommCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitCommCase(this);
		}
	}

	[RuleVersion(0)]
	public CommCaseContext commCase() {
		CommCaseContext _localctx = new CommCaseContext(Context, State);
		EnterRule(_localctx, 96, RULE_commCase);
		try {
			State = 556;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 550;
				Match(CASE);
				State = 553;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
				case 1:
					{
					State = 551;
					sendStmt();
					}
					break;
				case 2:
					{
					State = 552;
					recvStmt();
					}
					break;
				}
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 555;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecvStmtContext : ParserRuleContext {
		public ExpressionContext recvExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GoParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_ASSIGN() { return GetToken(GoParser.DECLARE_ASSIGN, 0); }
		public RecvStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recvStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterRecvStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitRecvStmt(this);
		}
	}

	[RuleVersion(0)]
	public RecvStmtContext recvStmt() {
		RecvStmtContext _localctx = new RecvStmtContext(Context, State);
		EnterRule(_localctx, 98, RULE_recvStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 564;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 558;
				expressionList();
				State = 559;
				Match(ASSIGN);
				}
				break;
			case 2:
				{
				State = 561;
				identifierList();
				State = 562;
				Match(DECLARE_ASSIGN);
				}
				break;
			}
			State = 566;
			_localctx.recvExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(GoParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForClauseContext forClause() {
			return GetRuleContext<ForClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeClauseContext rangeClause() {
			return GetRuleContext<RangeClauseContext>(0);
		}
		public ForStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitForStmt(this);
		}
	}

	[RuleVersion(0)]
	public ForStmtContext forStmt() {
		ForStmtContext _localctx = new ForStmtContext(Context, State);
		EnterRule(_localctx, 100, RULE_forStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			Match(FOR);
			State = 572;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 569;
				expression(0);
				}
				break;
			case 2:
				{
				State = 570;
				forClause();
				}
				break;
			case 3:
				{
				State = 571;
				rangeClause();
				}
				break;
			}
			State = 574;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForClauseContext : ParserRuleContext {
		public SimpleStmtContext initStmt;
		public SimpleStmtContext postStmt;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(GoParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(GoParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStmtContext[] simpleStmt() {
			return GetRuleContexts<SimpleStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStmtContext simpleStmt(int i) {
			return GetRuleContext<SimpleStmtContext>(i);
		}
		public ForClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterForClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitForClause(this);
		}
	}

	[RuleVersion(0)]
	public ForClauseContext forClause() {
		ForClauseContext _localctx = new ForClauseContext(Context, State);
		EnterRule(_localctx, 102, RULE_forClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 576;
				_localctx.initStmt = simpleStmt();
				}
				break;
			}
			State = 579;
			Match(SEMI);
			State = 581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
				{
				State = 580;
				expression(0);
				}
			}

			State = 583;
			Match(SEMI);
			State = 585;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << SEMI) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
				{
				State = 584;
				_localctx.postStmt = simpleStmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(GoParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GoParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_ASSIGN() { return GetToken(GoParser.DECLARE_ASSIGN, 0); }
		public RangeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterRangeClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitRangeClause(this);
		}
	}

	[RuleVersion(0)]
	public RangeClauseContext rangeClause() {
		RangeClauseContext _localctx = new RangeClauseContext(Context, State);
		EnterRule(_localctx, 104, RULE_rangeClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 587;
				expressionList();
				State = 588;
				Match(ASSIGN);
				}
				break;
			case 2:
				{
				State = 590;
				identifierList();
				State = 591;
				Match(DECLARE_ASSIGN);
				}
				break;
			}
			State = 595;
			Match(RANGE);
			State = 596;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(GoParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GoStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterGoStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitGoStmt(this);
		}
	}

	[RuleVersion(0)]
	public GoStmtContext goStmt() {
		GoStmtContext _localctx = new GoStmtContext(Context, State);
		EnterRule(_localctx, 106, RULE_goStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			Match(GO);
			State = 599;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeLitContext typeLit() {
			return GetRuleContext<TypeLitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		public Type_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitType_(this);
		}
	}

	[RuleVersion(0)]
	public Type_Context type_() {
		Type_Context _localctx = new Type_Context(Context, State);
		EnterRule(_localctx, 108, RULE_type_);
		try {
			State = 607;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 601;
				typeName();
				}
				break;
			case FUNC:
			case INTERFACE:
			case MAP:
			case STRUCT:
			case CHAN:
			case L_BRACKET:
			case STAR:
			case RECEIVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 602;
				typeLit();
				}
				break;
			case L_PAREN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 603;
				Match(L_PAREN);
				State = 604;
				type_();
				State = 605;
				Match(R_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentContext qualifiedIdent() {
			return GetRuleContext<QualifiedIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 110, RULE_typeName);
		try {
			State = 611;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 609;
				qualifiedIdent();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 610;
				Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeLitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeContext structType() {
			return GetRuleContext<StructTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerTypeContext pointerType() {
			return GetRuleContext<PointerTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeContext interfaceType() {
			return GetRuleContext<InterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceTypeContext sliceType() {
			return GetRuleContext<SliceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapTypeContext mapType() {
			return GetRuleContext<MapTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelTypeContext channelType() {
			return GetRuleContext<ChannelTypeContext>(0);
		}
		public TypeLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeLit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeLit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeLit(this);
		}
	}

	[RuleVersion(0)]
	public TypeLitContext typeLit() {
		TypeLitContext _localctx = new TypeLitContext(Context, State);
		EnterRule(_localctx, 112, RULE_typeLit);
		try {
			State = 621;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 613;
				arrayType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 614;
				structType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 615;
				pointerType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 616;
				functionType();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 617;
				interfaceType();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 618;
				sliceType();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 619;
				mapType();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 620;
				channelType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(GoParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLengthContext arrayLength() {
			return GetRuleContext<ArrayLengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(GoParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementTypeContext elementType() {
			return GetRuleContext<ElementTypeContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 114, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623;
			Match(L_BRACKET);
			State = 624;
			arrayLength();
			State = 625;
			Match(R_BRACKET);
			State = 626;
			elementType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterArrayLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitArrayLength(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLengthContext arrayLength() {
		ArrayLengthContext _localctx = new ArrayLengthContext(Context, State);
		EnterRule(_localctx, 116, RULE_arrayLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ElementTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterElementType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitElementType(this);
		}
	}

	[RuleVersion(0)]
	public ElementTypeContext elementType() {
		ElementTypeContext _localctx = new ElementTypeContext(Context, State);
		EnterRule(_localctx, 118, RULE_elementType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(GoParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public PointerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterPointerType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitPointerType(this);
		}
	}

	[RuleVersion(0)]
	public PointerTypeContext pointerType() {
		PointerTypeContext _localctx = new PointerTypeContext(Context, State);
		EnterRule(_localctx, 120, RULE_pointerType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			Match(STAR);
			State = 633;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(GoParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(GoParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(GoParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodSpecContext[] methodSpec() {
			return GetRuleContexts<MethodSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodSpecContext methodSpec(int i) {
			return GetRuleContext<MethodSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		public InterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeContext interfaceType() {
		InterfaceTypeContext _localctx = new InterfaceTypeContext(Context, State);
		EnterRule(_localctx, 122, RULE_interfaceType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 635;
			Match(INTERFACE);
			State = 636;
			Match(L_CURLY);
			State = 645;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 639;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
					case 1:
						{
						State = 637;
						methodSpec();
						}
						break;
					case 2:
						{
						State = 638;
						typeName();
						}
						break;
					}
					State = 641;
					eos();
					}
					} 
				}
				State = 647;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			State = 648;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(GoParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(GoParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementTypeContext elementType() {
			return GetRuleContext<ElementTypeContext>(0);
		}
		public SliceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterSliceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitSliceType(this);
		}
	}

	[RuleVersion(0)]
	public SliceTypeContext sliceType() {
		SliceTypeContext _localctx = new SliceTypeContext(Context, State);
		EnterRule(_localctx, 124, RULE_sliceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 650;
			Match(L_BRACKET);
			State = 651;
			Match(R_BRACKET);
			State = 652;
			elementType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAP() { return GetToken(GoParser.MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(GoParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(GoParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementTypeContext elementType() {
			return GetRuleContext<ElementTypeContext>(0);
		}
		public MapTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterMapType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitMapType(this);
		}
	}

	[RuleVersion(0)]
	public MapTypeContext mapType() {
		MapTypeContext _localctx = new MapTypeContext(Context, State);
		EnterRule(_localctx, 126, RULE_mapType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654;
			Match(MAP);
			State = 655;
			Match(L_BRACKET);
			State = 656;
			type_();
			State = 657;
			Match(R_BRACKET);
			State = 658;
			elementType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementTypeContext elementType() {
			return GetRuleContext<ElementTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAN() { return GetToken(GoParser.CHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECEIVE() { return GetToken(GoParser.RECEIVE, 0); }
		public ChannelTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channelType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterChannelType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitChannelType(this);
		}
	}

	[RuleVersion(0)]
	public ChannelTypeContext channelType() {
		ChannelTypeContext _localctx = new ChannelTypeContext(Context, State);
		EnterRule(_localctx, 128, RULE_channelType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 665;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 660;
				Match(CHAN);
				}
				break;
			case 2:
				{
				State = 661;
				Match(CHAN);
				State = 662;
				Match(RECEIVE);
				}
				break;
			case 3:
				{
				State = 663;
				Match(RECEIVE);
				State = 664;
				Match(CHAN);
				}
				break;
			}
			State = 667;
			elementType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResultContext result() {
			return GetRuleContext<ResultContext>(0);
		}
		public MethodSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterMethodSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitMethodSpec(this);
		}
	}

	[RuleVersion(0)]
	public MethodSpecContext methodSpec() {
		MethodSpecContext _localctx = new MethodSpecContext(Context, State);
		EnterRule(_localctx, 130, RULE_methodSpec);
		try {
			State = 676;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 669;
				if (!(noTerminatorAfterParams(2))) throw new FailedPredicateException(this, "noTerminatorAfterParams(2)");
				State = 670;
				Match(IDENTIFIER);
				State = 671;
				parameters();
				State = 672;
				result();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 674;
				Match(IDENTIFIER);
				State = 675;
				parameters();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(GoParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 132, RULE_functionType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			Match(FUNC);
			State = 679;
			signature();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResultContext result() {
			return GetRuleContext<ResultContext>(0);
		}
		public SignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitSignature(this);
		}
	}

	[RuleVersion(0)]
	public SignatureContext signature() {
		SignatureContext _localctx = new SignatureContext(Context, State);
		EnterRule(_localctx, 134, RULE_signature);
		try {
			State = 686;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 681;
				if (!(noTerminatorAfterParams(1))) throw new FailedPredicateException(this, "noTerminatorAfterParams(1)");
				State = 682;
				parameters();
				State = 683;
				result();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 685;
				parameters();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ResultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterResult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitResult(this);
		}
	}

	[RuleVersion(0)]
	public ResultContext result() {
		ResultContext _localctx = new ResultContext(Context, State);
		EnterRule(_localctx, 136, RULE_result);
		try {
			State = 690;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 688;
				parameters();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 689;
				type_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclContext[] parameterDecl() {
			return GetRuleContexts<ParameterDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclContext parameterDecl(int i) {
			return GetRuleContext<ParameterDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GoParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GoParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 138, RULE_parameters);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 692;
			Match(L_PAREN);
			State = 704;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << ELLIPSIS) | (1L << STAR) | (1L << RECEIVE))) != 0)) {
				{
				State = 693;
				parameterDecl();
				State = 698;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 694;
						Match(COMMA);
						State = 695;
						parameterDecl();
						}
						} 
					}
					State = 700;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
				}
				State = 702;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 701;
					Match(COMMA);
					}
				}

				}
			}

			State = 706;
			Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(GoParser.ELLIPSIS, 0); }
		public ParameterDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterParameterDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitParameterDecl(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclContext parameterDecl() {
		ParameterDeclContext _localctx = new ParameterDeclContext(Context, State);
		EnterRule(_localctx, 140, RULE_parameterDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 709;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 708;
				identifierList();
				}
				break;
			}
			State = 712;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELLIPSIS) {
				{
				State = 711;
				Match(ELLIPSIS);
				}
			}

			State = 714;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken mul_op;
		public IToken add_op;
		public IToken rel_op;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(GoParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(GoParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(GoParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT() { return GetToken(GoParser.LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSHIFT() { return GetToken(GoParser.RSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(GoParser.AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_CLEAR() { return GetToken(GoParser.BIT_CLEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(GoParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(GoParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(GoParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(GoParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(GoParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(GoParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(GoParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(GoParser.LESS_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(GoParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(GoParser.GREATER_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_AND() { return GetToken(GoParser.LOGICAL_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_OR() { return GetToken(GoParser.LOGICAL_OR, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 142;
		EnterRecursionRule(_localctx, 142, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 719;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 717;
				primaryExpr(0);
				}
				break;
			case 2:
				{
				State = 718;
				unaryExpr();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 738;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 736;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 721;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 722;
						_localctx.mul_op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DIV) | (1L << MOD) | (1L << LSHIFT) | (1L << RSHIFT) | (1L << BIT_CLEAR) | (1L << STAR) | (1L << AMPERSAND))) != 0)) ) {
							_localctx.mul_op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 723;
						expression(6);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 724;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 725;
						_localctx.add_op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OR) | (1L << PLUS) | (1L << MINUS) | (1L << CARET))) != 0)) ) {
							_localctx.add_op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 726;
						expression(5);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 727;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 728;
						_localctx.rel_op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUALS) | (1L << NOT_EQUALS) | (1L << LESS) | (1L << LESS_OR_EQUALS) | (1L << GREATER) | (1L << GREATER_OR_EQUALS))) != 0)) ) {
							_localctx.rel_op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 729;
						expression(4);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 730;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 731;
						Match(LOGICAL_AND);
						State = 732;
						expression(3);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 733;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 734;
						Match(LOGICAL_OR);
						State = 735;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 740;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConversionContext conversion() {
			return GetRuleContext<ConversionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodExprContext methodExpr() {
			return GetRuleContext<MethodExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Slice_Context slice_() {
			return GetRuleContext<Slice_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAssertionContext typeAssertion() {
			return GetRuleContext<TypeAssertionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(GoParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public PrimaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExpr(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExprContext primaryExpr() {
		return primaryExpr(0);
	}

	private PrimaryExprContext primaryExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryExprContext _localctx = new PrimaryExprContext(Context, _parentState);
		PrimaryExprContext _prevctx = _localctx;
		int _startState = 144;
		EnterRecursionRule(_localctx, 144, RULE_primaryExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				State = 742;
				operand();
				}
				break;
			case 2:
				{
				State = 743;
				conversion();
				}
				break;
			case 3:
				{
				State = 744;
				methodExpr();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 758;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PrimaryExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_primaryExpr);
					State = 747;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 754;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
					case 1:
						{
						{
						State = 748;
						Match(DOT);
						State = 749;
						Match(IDENTIFIER);
						}
						}
						break;
					case 2:
						{
						State = 750;
						index();
						}
						break;
					case 3:
						{
						State = 751;
						slice_();
						}
						break;
					case 4:
						{
						State = 752;
						typeAssertion();
						}
						break;
					case 5:
						{
						State = 753;
						arguments();
						}
						break;
					}
					}
					} 
				}
				State = 760;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExprContext : ParserRuleContext {
		public IToken unary_op;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(GoParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(GoParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION() { return GetToken(GoParser.EXCLAMATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(GoParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(GoParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(GoParser.AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECEIVE() { return GetToken(GoParser.RECEIVE, 0); }
		public UnaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprContext unaryExpr() {
		UnaryExprContext _localctx = new UnaryExprContext(Context, State);
		EnterRule(_localctx, 146, RULE_unaryExpr);
		int _la;
		try {
			State = 764;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 761;
				primaryExpr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 762;
				_localctx.unary_op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0)) ) {
					_localctx.unary_op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 763;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(GoParser.COMMA, 0); }
		public ConversionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterConversion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitConversion(this);
		}
	}

	[RuleVersion(0)]
	public ConversionContext conversion() {
		ConversionContext _localctx = new ConversionContext(Context, State);
		EnterRule(_localctx, 148, RULE_conversion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 766;
			type_();
			State = 767;
			Match(L_PAREN);
			State = 768;
			expression(0);
			State = 770;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 769;
				Match(COMMA);
				}
			}

			State = 772;
			Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandNameContext operandName() {
			return GetRuleContext<OperandNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 150, RULE_operand);
		try {
			State = 780;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 774;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 775;
				operandName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 776;
				Match(L_PAREN);
				State = 777;
				expression(0);
				State = 778;
				Match(R_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicLitContext basicLit() {
			return GetRuleContext<BasicLitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompositeLitContext compositeLit() {
			return GetRuleContext<CompositeLitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionLitContext functionLit() {
			return GetRuleContext<FunctionLitContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 152, RULE_literal);
		try {
			State = 785;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NIL_LIT:
			case DECIMAL_LIT:
			case BINARY_LIT:
			case OCTAL_LIT:
			case HEX_LIT:
			case FLOAT_LIT:
			case IMAGINARY_LIT:
			case RUNE_LIT:
			case RAW_STRING_LIT:
			case INTERPRETED_STRING_LIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 782;
				basicLit();
				}
				break;
			case MAP:
			case STRUCT:
			case IDENTIFIER:
			case L_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 783;
				compositeLit();
				}
				break;
			case FUNC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 784;
				functionLit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicLitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL_LIT() { return GetToken(GoParser.NIL_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_Context string_() {
			return GetRuleContext<String_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LIT() { return GetToken(GoParser.FLOAT_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGINARY_LIT() { return GetToken(GoParser.IMAGINARY_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE_LIT() { return GetToken(GoParser.RUNE_LIT, 0); }
		public BasicLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicLit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterBasicLit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitBasicLit(this);
		}
	}

	[RuleVersion(0)]
	public BasicLitContext basicLit() {
		BasicLitContext _localctx = new BasicLitContext(Context, State);
		EnterRule(_localctx, 154, RULE_basicLit);
		try {
			State = 793;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 787;
				Match(NIL_LIT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 788;
				integer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 789;
				string_();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 790;
				Match(FLOAT_LIT);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 791;
				Match(IMAGINARY_LIT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 792;
				Match(RUNE_LIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LIT() { return GetToken(GoParser.DECIMAL_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_LIT() { return GetToken(GoParser.BINARY_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTAL_LIT() { return GetToken(GoParser.OCTAL_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_LIT() { return GetToken(GoParser.HEX_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGINARY_LIT() { return GetToken(GoParser.IMAGINARY_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE_LIT() { return GetToken(GoParser.RUNE_LIT, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 156, RULE_integer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 795;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentContext qualifiedIdent() {
			return GetRuleContext<QualifiedIdentContext>(0);
		}
		public OperandNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operandName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterOperandName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitOperandName(this);
		}
	}

	[RuleVersion(0)]
	public OperandNameContext operandName() {
		OperandNameContext _localctx = new OperandNameContext(Context, State);
		EnterRule(_localctx, 158, RULE_operandName);
		try {
			State = 799;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 797;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 798;
				qualifiedIdent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(GoParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GoParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(GoParser.DOT, 0); }
		public QualifiedIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterQualifiedIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitQualifiedIdent(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentContext qualifiedIdent() {
		QualifiedIdentContext _localctx = new QualifiedIdentContext(Context, State);
		EnterRule(_localctx, 160, RULE_qualifiedIdent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 801;
			Match(IDENTIFIER);
			State = 802;
			Match(DOT);
			State = 803;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeLitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralTypeContext literalType() {
			return GetRuleContext<LiteralTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public CompositeLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeLit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterCompositeLit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitCompositeLit(this);
		}
	}

	[RuleVersion(0)]
	public CompositeLitContext compositeLit() {
		CompositeLitContext _localctx = new CompositeLitContext(Context, State);
		EnterRule(_localctx, 162, RULE_compositeLit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 805;
			literalType();
			State = 806;
			literalValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeContext structType() {
			return GetRuleContext<StructTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(GoParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(GoParser.ELLIPSIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(GoParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementTypeContext elementType() {
			return GetRuleContext<ElementTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceTypeContext sliceType() {
			return GetRuleContext<SliceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapTypeContext mapType() {
			return GetRuleContext<MapTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public LiteralTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterLiteralType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitLiteralType(this);
		}
	}

	[RuleVersion(0)]
	public LiteralTypeContext literalType() {
		LiteralTypeContext _localctx = new LiteralTypeContext(Context, State);
		EnterRule(_localctx, 164, RULE_literalType);
		try {
			State = 817;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 808;
				structType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 809;
				arrayType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 810;
				Match(L_BRACKET);
				State = 811;
				Match(ELLIPSIS);
				State = 812;
				Match(R_BRACKET);
				State = 813;
				elementType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 814;
				sliceType();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 815;
				mapType();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 816;
				typeName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(GoParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(GoParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementListContext elementList() {
			return GetRuleContext<ElementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(GoParser.COMMA, 0); }
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterLiteralValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitLiteralValue(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(Context, State);
		EnterRule(_localctx, 166, RULE_literalValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 819;
			Match(L_CURLY);
			State = 824;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_CURLY) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
				{
				State = 820;
				elementList();
				State = 822;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 821;
					Match(COMMA);
					}
				}

				}
			}

			State = 826;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyedElementContext[] keyedElement() {
			return GetRuleContexts<KeyedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyedElementContext keyedElement(int i) {
			return GetRuleContext<KeyedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GoParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GoParser.COMMA, i);
		}
		public ElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterElementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitElementList(this);
		}
	}

	[RuleVersion(0)]
	public ElementListContext elementList() {
		ElementListContext _localctx = new ElementListContext(Context, State);
		EnterRule(_localctx, 168, RULE_elementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 828;
			keyedElement();
			State = 833;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 829;
					Match(COMMA);
					State = 830;
					keyedElement();
					}
					} 
				}
				State = 835;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyedElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GoParser.COLON, 0); }
		public KeyedElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyedElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterKeyedElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitKeyedElement(this);
		}
	}

	[RuleVersion(0)]
	public KeyedElementContext keyedElement() {
		KeyedElementContext _localctx = new KeyedElementContext(Context, State);
		EnterRule(_localctx, 170, RULE_keyedElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 839;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 836;
				key();
				State = 837;
				Match(COLON);
				}
				break;
			}
			State = 841;
			element();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitKey(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(Context, State);
		EnterRule(_localctx, 172, RULE_key);
		try {
			State = 846;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 843;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 844;
				expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 845;
				literalValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 174, RULE_element);
		try {
			State = 850;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNC:
			case INTERFACE:
			case MAP:
			case STRUCT:
			case CHAN:
			case NIL_LIT:
			case IDENTIFIER:
			case L_PAREN:
			case L_BRACKET:
			case EXCLAMATION:
			case PLUS:
			case MINUS:
			case CARET:
			case STAR:
			case AMPERSAND:
			case RECEIVE:
			case DECIMAL_LIT:
			case BINARY_LIT:
			case OCTAL_LIT:
			case HEX_LIT:
			case FLOAT_LIT:
			case IMAGINARY_LIT:
			case RUNE_LIT:
			case RAW_STRING_LIT:
			case INTERPRETED_STRING_LIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 848;
				expression(0);
				}
				break;
			case L_CURLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 849;
				literalValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(GoParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(GoParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(GoParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclContext[] fieldDecl() {
			return GetRuleContexts<FieldDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclContext fieldDecl(int i) {
			return GetRuleContext<FieldDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StructTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterStructType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitStructType(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeContext structType() {
		StructTypeContext _localctx = new StructTypeContext(Context, State);
		EnterRule(_localctx, 176, RULE_structType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 852;
			Match(STRUCT);
			State = 853;
			Match(L_CURLY);
			State = 859;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 854;
					fieldDecl();
					State = 855;
					eos();
					}
					} 
				}
				State = 861;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			}
			State = 862;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclContext : ParserRuleContext {
		public String_Context tag;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnonymousFieldContext anonymousField() {
			return GetRuleContext<AnonymousFieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_Context string_() {
			return GetRuleContext<String_Context>(0);
		}
		public FieldDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterFieldDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitFieldDecl(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclContext fieldDecl() {
		FieldDeclContext _localctx = new FieldDeclContext(Context, State);
		EnterRule(_localctx, 178, RULE_fieldDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 869;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				{
				State = 864;
				if (!(noTerminatorBetween(2))) throw new FailedPredicateException(this, "noTerminatorBetween(2)");
				State = 865;
				identifierList();
				State = 866;
				type_();
				}
				break;
			case 2:
				{
				State = 868;
				anonymousField();
				}
				break;
			}
			State = 872;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				{
				State = 871;
				_localctx.tag = string_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAW_STRING_LIT() { return GetToken(GoParser.RAW_STRING_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPRETED_STRING_LIT() { return GetToken(GoParser.INTERPRETED_STRING_LIT, 0); }
		public String_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterString_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitString_(this);
		}
	}

	[RuleVersion(0)]
	public String_Context string_() {
		String_Context _localctx = new String_Context(Context, State);
		EnterRule(_localctx, 180, RULE_string_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 874;
			_la = TokenStream.LA(1);
			if ( !(_la==RAW_STRING_LIT || _la==INTERPRETED_STRING_LIT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(GoParser.STAR, 0); }
		public AnonymousFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterAnonymousField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitAnonymousField(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousFieldContext anonymousField() {
		AnonymousFieldContext _localctx = new AnonymousFieldContext(Context, State);
		EnterRule(_localctx, 182, RULE_anonymousField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 877;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STAR) {
				{
				State = 876;
				Match(STAR);
				}
			}

			State = 879;
			typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionLitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(GoParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionLit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterFunctionLit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitFunctionLit(this);
		}
	}

	[RuleVersion(0)]
	public FunctionLitContext functionLit() {
		FunctionLitContext _localctx = new FunctionLitContext(Context, State);
		EnterRule(_localctx, 184, RULE_functionLit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 881;
			Match(FUNC);
			State = 882;
			signature();
			State = 883;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(GoParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(GoParser.R_BRACKET, 0); }
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitIndex(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 186, RULE_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 885;
			Match(L_BRACKET);
			State = 886;
			expression(0);
			State = 887;
			Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Slice_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(GoParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(GoParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(GoParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(GoParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Slice_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slice_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterSlice_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitSlice_(this);
		}
	}

	[RuleVersion(0)]
	public Slice_Context slice_() {
		Slice_Context _localctx = new Slice_Context(Context, State);
		EnterRule(_localctx, 188, RULE_slice_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 889;
			Match(L_BRACKET);
			State = 905;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				{
				State = 891;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
					{
					State = 890;
					expression(0);
					}
				}

				State = 893;
				Match(COLON);
				State = 895;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
					{
					State = 894;
					expression(0);
					}
				}

				}
				break;
			case 2:
				{
				State = 898;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
					{
					State = 897;
					expression(0);
					}
				}

				State = 900;
				Match(COLON);
				State = 901;
				expression(0);
				State = 902;
				Match(COLON);
				State = 903;
				expression(0);
				}
				break;
			}
			State = 907;
			Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAssertionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(GoParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		public TypeAssertionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAssertion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeAssertion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeAssertion(this);
		}
	}

	[RuleVersion(0)]
	public TypeAssertionContext typeAssertion() {
		TypeAssertionContext _localctx = new TypeAssertionContext(Context, State);
		EnterRule(_localctx, 190, RULE_typeAssertion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 909;
			Match(DOT);
			State = 910;
			Match(L_PAREN);
			State = 911;
			type_();
			State = 912;
			Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(GoParser.ELLIPSIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GoParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GoParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 192, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 914;
			Match(L_PAREN);
			State = 929;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
				{
				State = 921;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
				case 1:
					{
					State = 915;
					expressionList();
					}
					break;
				case 2:
					{
					State = 916;
					type_();
					State = 919;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
					case 1:
						{
						State = 917;
						Match(COMMA);
						State = 918;
						expressionList();
						}
						break;
					}
					}
					break;
				}
				State = 924;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELLIPSIS) {
					{
					State = 923;
					Match(ELLIPSIS);
					}
				}

				State = 927;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 926;
					Match(COMMA);
					}
				}

				}
			}

			State = 931;
			Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReceiverTypeContext receiverType() {
			return GetRuleContext<ReceiverTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(GoParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public MethodExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterMethodExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitMethodExpr(this);
		}
	}

	[RuleVersion(0)]
	public MethodExprContext methodExpr() {
		MethodExprContext _localctx = new MethodExprContext(Context, State);
		EnterRule(_localctx, 194, RULE_methodExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 933;
			receiverType();
			State = 934;
			Match(DOT);
			State = 935;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReceiverTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(GoParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReceiverTypeContext receiverType() {
			return GetRuleContext<ReceiverTypeContext>(0);
		}
		public ReceiverTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receiverType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterReceiverType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitReceiverType(this);
		}
	}

	[RuleVersion(0)]
	public ReceiverTypeContext receiverType() {
		ReceiverTypeContext _localctx = new ReceiverTypeContext(Context, State);
		EnterRule(_localctx, 196, RULE_receiverType);
		try {
			State = 946;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 937;
				typeName();
				}
				break;
			case L_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 938;
				Match(L_PAREN);
				State = 942;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STAR:
					{
					State = 939;
					Match(STAR);
					State = 940;
					typeName();
					}
					break;
				case IDENTIFIER:
				case L_PAREN:
					{
					State = 941;
					receiverType();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 944;
				Match(R_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(GoParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GoParser.Eof, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 198, RULE_eos);
		try {
			State = 953;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 948;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 949;
				Match(Eof);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 950;
				if (!(lineTerminatorAhead())) throw new FailedPredicateException(this, "lineTerminatorAhead()");
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 951;
				if (!(checkPreviousTokenText("}"))) throw new FailedPredicateException(this, "checkPreviousTokenText(\"}\")");
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 952;
				if (!(checkPreviousTokenText(")"))) throw new FailedPredicateException(this, "checkPreviousTokenText(\")\")");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 65: return methodSpec_sempred((MethodSpecContext)_localctx, predIndex);
		case 67: return signature_sempred((SignatureContext)_localctx, predIndex);
		case 71: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 72: return primaryExpr_sempred((PrimaryExprContext)_localctx, predIndex);
		case 89: return fieldDecl_sempred((FieldDeclContext)_localctx, predIndex);
		case 99: return eos_sempred((EosContext)_localctx, predIndex);
		}
		return true;
	}
	private bool methodSpec_sempred(MethodSpecContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return noTerminatorAfterParams(2);
		}
		return true;
	}
	private bool signature_sempred(SignatureContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return noTerminatorAfterParams(1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool primaryExpr_sempred(PrimaryExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool fieldDecl_sempred(FieldDeclContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return noTerminatorBetween(2);
		}
		return true;
	}
	private bool eos_sempred(EosContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return lineTerminatorAhead();
		case 10: return checkPreviousTokenText("}");
		case 11: return checkPreviousTokenText(")");
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'U', '\x3BE', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\xD0', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', '\xD3', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\a', '\x2', '\xD8', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\xDB', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\xE2', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\xED', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '\xF0', '\v', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\xF3', '\n', '\x5', '\x3', '\x6', '\x5', '\x6', '\xF6', '\n', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', '\xFF', '\n', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 
		'\x107', '\n', '\t', '\f', '\t', '\xE', '\t', '\x10A', '\v', '\t', '\x3', 
		'\t', '\x5', '\t', '\x10D', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', '\x111', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x115', 
		'\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x11A', 
		'\n', '\v', '\f', '\v', '\xE', '\v', '\x11D', '\v', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\a', '\f', '\x122', '\n', '\f', '\f', '\f', 
		'\xE', '\f', '\x125', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x12D', '\n', '\r', 
		'\f', '\r', '\xE', '\r', '\x130', '\v', '\r', '\x3', '\r', '\x5', '\r', 
		'\x133', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x137', 
		'\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\x13F', '\n', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\x146', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', 
		'\x12', '\x150', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\x153', '\v', 
		'\x12', '\x3', '\x12', '\x5', '\x12', '\x156', '\n', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x15C', '\n', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x160', '\n', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x164', '\n', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x6', 
		'\x15', '\x16B', '\n', '\x15', '\r', '\x15', '\xE', '\x15', '\x16C', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', 
		'\x16', '\x17E', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x186', '\n', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x5', 
		'\x1C', '\x196', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1A3', '\n', 
		'\x1F', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x1A7', '\n', ' ', '\x3', 
		'!', '\x3', '!', '\x5', '!', '\x1AB', '\n', '!', '\x3', '\"', '\x3', '\"', 
		'\x5', '\"', '\x1AF', '\n', '\"', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x1BD', '\n', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x1C4', 
		'\n', '&', '\x5', '&', '\x1C6', '\n', '&', '\x3', '\'', '\x3', '\'', '\x5', 
		'\'', '\x1CA', '\n', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x5', '(', '\x1D0', '\n', '(', '\x3', '(', '\x5', '(', '\x1D3', 
		'\n', '(', '\x3', '(', '\x3', '(', '\a', '(', '\x1D7', '\n', '(', '\f', 
		'(', '\xE', '(', '\x1DA', '\v', '(', '\x3', '(', '\x3', '(', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x5', ')', '\x1E1', '\n', ')', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x5', '*', '\x1E6', '\n', '*', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x5', '+', '\x1EC', '\n', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\a', '+', '\x1F1', '\n', '+', '\f', '+', '\xE', '+', 
		'\x1F4', '\v', '+', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x5', 
		',', '\x1FA', '\n', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', 
		'\x205', '\n', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x20A', 
		'\n', '.', '\x3', '/', '\x3', '/', '\x5', '/', '\x20E', '\n', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x5', '/', '\x213', '\n', '/', '\a', '/', 
		'\x215', '\n', '/', '\f', '/', '\xE', '/', '\x218', '\v', '/', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\a', '\x30', '\x21D', '\n', '\x30', 
		'\f', '\x30', '\xE', '\x30', '\x220', '\v', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x227', 
		'\n', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', 
		'\x22C', '\n', '\x32', '\x3', '\x32', '\x5', '\x32', '\x22F', '\n', '\x32', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x5', '\x33', '\x237', '\n', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', 
		'\x34', '\x23F', '\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', 
		'\x5', '\x35', '\x244', '\n', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', 
		'\x35', '\x248', '\n', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', 
		'\x24C', '\n', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x254', '\n', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x262', '\n', '\x38', '\x3', 
		'\x39', '\x3', '\x39', '\x5', '\x39', '\x266', '\n', '\x39', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x3', ':', '\x5', ':', '\x270', '\n', ':', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', '\x3', '=', '\x3', 
		'=', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '?', '\x3', '?', '\x3', 
		'?', '\x3', '?', '\x5', '?', '\x282', '\n', '?', '\x3', '?', '\x3', '?', 
		'\a', '?', '\x286', '\n', '?', '\f', '?', '\xE', '?', '\x289', '\v', '?', 
		'\x3', '?', '\x3', '?', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', 
		'\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x5', '\x42', '\x29C', '\n', '\x42', '\x3', '\x42', '\x3', 
		'\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x2A7', '\n', '\x43', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x2B1', '\n', 
		'\x45', '\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x2B5', '\n', '\x46', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\a', 'G', '\x2BB', '\n', 
		'G', '\f', 'G', '\xE', 'G', '\x2BE', '\v', 'G', '\x3', 'G', '\x5', 'G', 
		'\x2C1', '\n', 'G', '\x5', 'G', '\x2C3', '\n', 'G', '\x3', 'G', '\x3', 
		'G', '\x3', 'H', '\x5', 'H', '\x2C8', '\n', 'H', '\x3', 'H', '\x5', 'H', 
		'\x2CB', '\n', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', '\x3', 
		'I', '\x5', 'I', '\x2D2', '\n', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', 
		'\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', 
		'\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', 
		'\a', 'I', '\x2E3', '\n', 'I', '\f', 'I', '\xE', 'I', '\x2E6', '\v', 'I', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', '\x2EC', '\n', 
		'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 
		'J', '\x3', 'J', '\x5', 'J', '\x2F5', '\n', 'J', '\a', 'J', '\x2F7', '\n', 
		'J', '\f', 'J', '\xE', 'J', '\x2FA', '\v', 'J', '\x3', 'K', '\x3', 'K', 
		'\x3', 'K', '\x5', 'K', '\x2FF', '\n', 'K', '\x3', 'L', '\x3', 'L', '\x3', 
		'L', '\x3', 'L', '\x5', 'L', '\x305', '\n', 'L', '\x3', 'L', '\x3', 'L', 
		'\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', 
		'\x5', 'M', '\x30F', '\n', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x5', 
		'N', '\x314', '\n', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', 
		'\x3', 'O', '\x3', 'O', '\x5', 'O', '\x31C', '\n', 'O', '\x3', 'P', '\x3', 
		'P', '\x3', 'Q', '\x3', 'Q', '\x5', 'Q', '\x322', '\n', 'Q', '\x3', 'R', 
		'\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'S', '\x3', 'S', '\x3', 'S', 
		'\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', 
		'\x3', 'T', '\x3', 'T', '\x3', 'T', '\x5', 'T', '\x334', '\n', 'T', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x5', 'U', '\x339', '\n', 'U', '\x5', 'U', 
		'\x33B', '\n', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\a', 'V', '\x342', '\n', 'V', '\f', 'V', '\xE', 'V', '\x345', '\v', 
		'V', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x5', 'W', '\x34A', '\n', 'W', 
		'\x3', 'W', '\x3', 'W', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', 
		'\x351', '\n', 'X', '\x3', 'Y', '\x3', 'Y', '\x5', 'Y', '\x355', '\n', 
		'Y', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\a', 
		'Z', '\x35C', '\n', 'Z', '\f', 'Z', '\xE', 'Z', '\x35F', '\v', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', 
		'[', '\x5', '[', '\x368', '\n', '[', '\x3', '[', '\x5', '[', '\x36B', 
		'\n', '[', '\x3', '\\', '\x3', '\\', '\x3', ']', '\x5', ']', '\x370', 
		'\n', ']', '\x3', ']', '\x3', ']', '\x3', '^', '\x3', '^', '\x3', '^', 
		'\x3', '^', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '`', 
		'\x3', '`', '\x5', '`', '\x37E', '\n', '`', '\x3', '`', '\x3', '`', '\x5', 
		'`', '\x382', '\n', '`', '\x3', '`', '\x5', '`', '\x385', '\n', '`', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x5', '`', '\x38C', 
		'\n', '`', '\x3', '`', '\x3', '`', '\x3', '\x61', '\x3', '\x61', '\x3', 
		'\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x62', '\x3', '\x62', '\x3', 
		'\x62', '\x3', '\x62', '\x3', '\x62', '\x5', '\x62', '\x39A', '\n', '\x62', 
		'\x5', '\x62', '\x39C', '\n', '\x62', '\x3', '\x62', '\x5', '\x62', '\x39F', 
		'\n', '\x62', '\x3', '\x62', '\x5', '\x62', '\x3A2', '\n', '\x62', '\x5', 
		'\x62', '\x3A4', '\n', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x63', 
		'\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x64', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x5', '\x64', '\x3B1', '\n', 
		'\x64', '\x3', '\x64', '\x3', '\x64', '\x5', '\x64', '\x3B5', '\n', '\x64', 
		'\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', 
		'\x5', '\x65', '\x3BC', '\n', '\x65', '\x3', '\x65', '\x2', '\x4', '\x90', 
		'\x92', '\x66', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 
		'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 
		'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', 
		'\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', '\x98', 
		'\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', '\xAA', 
		'\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', '\xBA', '\xBC', 
		'\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\x2', '\v', '\x4', '\x2', 
		'\x1D', '\x1D', '(', '(', '\x3', '\x2', ')', '*', '\x4', '\x2', '\x35', 
		':', '<', '@', '\x4', '\x2', '\x36', ':', '?', '@', '\x4', '\x2', '\x35', 
		'\x35', '<', '>', '\x3', '\x2', '/', '\x34', '\x3', '\x2', ';', '\x41', 
		'\x4', '\x2', '\x42', '\x45', 'I', 'J', '\x3', '\x2', 'P', 'Q', '\x2', 
		'\x3F8', '\x2', '\xCA', '\x3', '\x2', '\x2', '\x2', '\x4', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\xE3', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\n', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xE', '\xFE', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x100', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x10E', '\x3', '\x2', '\x2', '\x2', '\x14', '\x116', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x18', '\x126', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x134', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x13A', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x140', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x147', '\x3', '\x2', '\x2', '\x2', '\"', '\x149', '\x3', 
		'\x2', '\x2', '\x2', '$', '\x157', '\x3', '\x2', '\x2', '\x2', '&', '\x161', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x16A', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x17D', '\x3', '\x2', '\x2', '\x2', ',', '\x185', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x187', '\x3', '\x2', '\x2', '\x2', '\x30', '\x189', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x190', '\x3', '\x2', '\x2', '\x2', '\x36', '\x195', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x199', '\x3', '\x2', '\x2', '\x2', ':', '\x19D', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x19F', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x1A4', '\x3', '\x2', '\x2', '\x2', '@', '\x1A8', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1B0', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x1B3', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x1B5', '\x3', '\x2', '\x2', '\x2', 'J', '\x1B8', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x1C9', '\x3', '\x2', '\x2', '\x2', 'N', '\x1CB', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x1DD', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x1E5', '\x3', '\x2', '\x2', '\x2', 'T', '\x1E7', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x1F9', '\x3', '\x2', '\x2', '\x2', 'X', '\x201', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x209', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x20D', '\x3', '\x2', '\x2', '\x2', '^', '\x219', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x223', '\x3', '\x2', '\x2', '\x2', '\x62', '\x22E', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x236', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x23A', '\x3', '\x2', '\x2', '\x2', 'h', '\x243', '\x3', '\x2', 
		'\x2', '\x2', 'j', '\x253', '\x3', '\x2', '\x2', '\x2', 'l', '\x258', 
		'\x3', '\x2', '\x2', '\x2', 'n', '\x261', '\x3', '\x2', '\x2', '\x2', 
		'p', '\x265', '\x3', '\x2', '\x2', '\x2', 'r', '\x26F', '\x3', '\x2', 
		'\x2', '\x2', 't', '\x271', '\x3', '\x2', '\x2', '\x2', 'v', '\x276', 
		'\x3', '\x2', '\x2', '\x2', 'x', '\x278', '\x3', '\x2', '\x2', '\x2', 
		'z', '\x27A', '\x3', '\x2', '\x2', '\x2', '|', '\x27D', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x28C', '\x3', '\x2', '\x2', '\x2', '\x80', '\x290', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x29B', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x2A6', '\x3', '\x2', '\x2', '\x2', '\x86', '\x2A8', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x2B0', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x2B4', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x2B6', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x2C7', '\x3', '\x2', '\x2', '\x2', '\x90', '\x2D1', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x2EB', '\x3', '\x2', '\x2', '\x2', '\x94', '\x2FE', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x300', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x30E', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x313', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x31B', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x31D', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\x321', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\x323', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x327', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\x333', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x335', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\x33E', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\x349', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x350', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\x354', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x356', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\x367', '\x3', '\x2', '\x2', '\x2', 
		'\xB6', '\x36C', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x36F', '\x3', '\x2', 
		'\x2', '\x2', '\xBA', '\x373', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x377', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '\x37B', '\x3', '\x2', '\x2', '\x2', 
		'\xC0', '\x38F', '\x3', '\x2', '\x2', '\x2', '\xC2', '\x394', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\x3A7', '\x3', '\x2', '\x2', '\x2', '\xC6', '\x3B4', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '\x3BB', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\xCB', '\x5', '\x6', '\x4', '\x2', '\xCB', '\xD1', '\x5', '\xC8', 
		'\x65', '\x2', '\xCC', '\xCD', '\x5', '\b', '\x5', '\x2', '\xCD', '\xCE', 
		'\x5', '\xC8', '\x65', '\x2', '\xCE', '\xD0', '\x3', '\x2', '\x2', '\x2', 
		'\xCF', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', 
		'\x3', '\x2', '\x2', '\x2', '\xD2', '\xD9', '\x3', '\x2', '\x2', '\x2', 
		'\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\x5', '\x4', 
		'\x3', '\x2', '\xD5', '\xD6', '\x5', '\xC8', '\x65', '\x2', '\xD6', '\xD8', 
		'\x3', '\x2', '\x2', '\x2', '\xD7', '\xD4', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xD7', '\x3', '\x2', 
		'\x2', '\x2', '\xD9', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDC', 
		'\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', '\x2', '\x2', '\x2', 
		'\xDC', '\xDD', '\a', '\x2', '\x2', '\x3', '\xDD', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\xDE', '\xE2', '\x5', '\xE', '\b', '\x2', '\xDF', '\xE2', 
		'\x5', '\x1C', '\xF', '\x2', '\xE0', '\xE2', '\x5', '\x1E', '\x10', '\x2', 
		'\xE1', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xDF', '\x3', '\x2', 
		'\x2', '\x2', '\xE1', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE2', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\a', '\x10', '\x2', '\x2', 
		'\xE4', '\xE5', '\a', '\x1D', '\x2', '\x2', '\xE5', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\xE6', '\xF2', '\a', '\x19', '\x2', '\x2', '\xE7', '\xF3', 
		'\x5', '\n', '\x6', '\x2', '\xE8', '\xEE', '\a', '\x1E', '\x2', '\x2', 
		'\xE9', '\xEA', '\x5', '\n', '\x6', '\x2', '\xEA', '\xEB', '\x5', '\xC8', 
		'\x65', '\x2', '\xEB', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xE9', 
		'\x3', '\x2', '\x2', '\x2', '\xED', '\xF0', '\x3', '\x2', '\x2', '\x2', 
		'\xEE', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\x3', '\x2', 
		'\x2', '\x2', '\xEF', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEE', 
		'\x3', '\x2', '\x2', '\x2', '\xF1', '\xF3', '\a', '\x1F', '\x2', '\x2', 
		'\xF2', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xE8', '\x3', '\x2', 
		'\x2', '\x2', '\xF3', '\t', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF6', 
		'\t', '\x2', '\x2', '\x2', '\xF5', '\xF4', '\x3', '\x2', '\x2', '\x2', 
		'\xF5', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\x3', '\x2', 
		'\x2', '\x2', '\xF7', '\xF8', '\x5', '\f', '\a', '\x2', '\xF8', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\x5', '\xB6', '\\', '\x2', 
		'\xFA', '\r', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFF', '\x5', '\x10', 
		'\t', '\x2', '\xFC', '\xFF', '\x5', '\x18', '\r', '\x2', '\xFD', '\xFF', 
		'\x5', '\"', '\x12', '\x2', '\xFE', '\xFB', '\x3', '\x2', '\x2', '\x2', 
		'\xFE', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFD', '\x3', '\x2', 
		'\x2', '\x2', '\xFF', '\xF', '\x3', '\x2', '\x2', '\x2', '\x100', '\x10C', 
		'\a', '\x12', '\x2', '\x2', '\x101', '\x10D', '\x5', '\x12', '\n', '\x2', 
		'\x102', '\x108', '\a', '\x1E', '\x2', '\x2', '\x103', '\x104', '\x5', 
		'\x12', '\n', '\x2', '\x104', '\x105', '\x5', '\xC8', '\x65', '\x2', '\x105', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\x106', '\x103', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x108', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x109', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x108', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '\x10D', '\a', '\x1F', '\x2', '\x2', '\x10C', 
		'\x101', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x102', '\x3', '\x2', '\x2', 
		'\x2', '\x10D', '\x11', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x114', 
		'\x5', '\x14', '\v', '\x2', '\x10F', '\x111', '\x5', 'n', '\x38', '\x2', 
		'\x110', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x110', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x111', '\x112', '\x3', '\x2', '\x2', '\x2', '\x112', 
		'\x113', '\a', '$', '\x2', '\x2', '\x113', '\x115', '\x5', '\x16', '\f', 
		'\x2', '\x114', '\x110', '\x3', '\x2', '\x2', '\x2', '\x114', '\x115', 
		'\x3', '\x2', '\x2', '\x2', '\x115', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x116', '\x11B', '\a', '\x1D', '\x2', '\x2', '\x117', '\x118', '\a', 
		'%', '\x2', '\x2', '\x118', '\x11A', '\a', '\x1D', '\x2', '\x2', '\x119', 
		'\x117', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '\x11B', '\x119', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', 
		'\x3', '\x2', '\x2', '\x2', '\x11C', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x11D', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x123', '\x5', 
		'\x90', 'I', '\x2', '\x11F', '\x120', '\a', '%', '\x2', '\x2', '\x120', 
		'\x122', '\x5', '\x90', 'I', '\x2', '\x121', '\x11F', '\x3', '\x2', '\x2', 
		'\x2', '\x122', '\x125', '\x3', '\x2', '\x2', '\x2', '\x123', '\x121', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\x17', '\x3', '\x2', '\x2', '\x2', '\x125', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '\x132', '\a', '\x16', '\x2', '\x2', '\x127', 
		'\x133', '\x5', '\x1A', '\xE', '\x2', '\x128', '\x12E', '\a', '\x1E', 
		'\x2', '\x2', '\x129', '\x12A', '\x5', '\x1A', '\xE', '\x2', '\x12A', 
		'\x12B', '\x5', '\xC8', '\x65', '\x2', '\x12B', '\x12D', '\x3', '\x2', 
		'\x2', '\x2', '\x12C', '\x129', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x130', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x12C', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x130', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x131', 
		'\x133', '\a', '\x1F', '\x2', '\x2', '\x132', '\x127', '\x3', '\x2', '\x2', 
		'\x2', '\x132', '\x128', '\x3', '\x2', '\x2', '\x2', '\x133', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x134', '\x136', '\a', '\x1D', '\x2', '\x2', 
		'\x135', '\x137', '\a', '$', '\x2', '\x2', '\x136', '\x135', '\x3', '\x2', 
		'\x2', '\x2', '\x136', '\x137', '\x3', '\x2', '\x2', '\x2', '\x137', '\x138', 
		'\x3', '\x2', '\x2', '\x2', '\x138', '\x139', '\x5', 'n', '\x38', '\x2', 
		'\x139', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', '\a', '\x5', 
		'\x2', '\x2', '\x13B', '\x13C', '\a', '\x1D', '\x2', '\x2', '\x13C', '\x13E', 
		'\x5', '\x88', '\x45', '\x2', '\x13D', '\x13F', '\x5', '&', '\x14', '\x2', 
		'\x13E', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13F', '\x3', 
		'\x2', '\x2', '\x2', '\x13F', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x140', 
		'\x141', '\a', '\x5', '\x2', '\x2', '\x141', '\x142', '\x5', ' ', '\x11', 
		'\x2', '\x142', '\x143', '\a', '\x1D', '\x2', '\x2', '\x143', '\x145', 
		'\x5', '\x88', '\x45', '\x2', '\x144', '\x146', '\x5', '&', '\x14', '\x2', 
		'\x145', '\x144', '\x3', '\x2', '\x2', '\x2', '\x145', '\x146', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x147', 
		'\x148', '\x5', '\x8C', 'G', '\x2', '\x148', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x149', '\x155', '\a', '\x1B', '\x2', '\x2', '\x14A', '\x156', 
		'\x5', '$', '\x13', '\x2', '\x14B', '\x151', '\a', '\x1E', '\x2', '\x2', 
		'\x14C', '\x14D', '\x5', '$', '\x13', '\x2', '\x14D', '\x14E', '\x5', 
		'\xC8', '\x65', '\x2', '\x14E', '\x150', '\x3', '\x2', '\x2', '\x2', '\x14F', 
		'\x14C', '\x3', '\x2', '\x2', '\x2', '\x150', '\x153', '\x3', '\x2', '\x2', 
		'\x2', '\x151', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', 
		'\x3', '\x2', '\x2', '\x2', '\x152', '\x154', '\x3', '\x2', '\x2', '\x2', 
		'\x153', '\x151', '\x3', '\x2', '\x2', '\x2', '\x154', '\x156', '\a', 
		'\x1F', '\x2', '\x2', '\x155', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x155', 
		'\x14B', '\x3', '\x2', '\x2', '\x2', '\x156', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x157', '\x15F', '\x5', '\x14', '\v', '\x2', '\x158', '\x15B', 
		'\x5', 'n', '\x38', '\x2', '\x159', '\x15A', '\a', '$', '\x2', '\x2', 
		'\x15A', '\x15C', '\x5', '\x16', '\f', '\x2', '\x15B', '\x159', '\x3', 
		'\x2', '\x2', '\x2', '\x15B', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15C', 
		'\x160', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15E', '\a', '$', '\x2', 
		'\x2', '\x15E', '\x160', '\x5', '\x16', '\f', '\x2', '\x15F', '\x158', 
		'\x3', '\x2', '\x2', '\x2', '\x15F', '\x15D', '\x3', '\x2', '\x2', '\x2', 
		'\x160', '%', '\x3', '\x2', '\x2', '\x2', '\x161', '\x163', '\a', ' ', 
		'\x2', '\x2', '\x162', '\x164', '\x5', '(', '\x15', '\x2', '\x163', '\x162', 
		'\x3', '\x2', '\x2', '\x2', '\x163', '\x164', '\x3', '\x2', '\x2', '\x2', 
		'\x164', '\x165', '\x3', '\x2', '\x2', '\x2', '\x165', '\x166', '\a', 
		'!', '\x2', '\x2', '\x166', '\'', '\x3', '\x2', '\x2', '\x2', '\x167', 
		'\x168', '\x5', '*', '\x16', '\x2', '\x168', '\x169', '\x5', '\xC8', '\x65', 
		'\x2', '\x169', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x167', 
		'\x3', '\x2', '\x2', '\x2', '\x16B', '\x16C', '\x3', '\x2', '\x2', '\x2', 
		'\x16C', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', '\x3', 
		'\x2', '\x2', '\x2', '\x16D', ')', '\x3', '\x2', '\x2', '\x2', '\x16E', 
		'\x17E', '\x5', '\xE', '\b', '\x2', '\x16F', '\x17E', '\x5', '<', '\x1F', 
		'\x2', '\x170', '\x17E', '\x5', ',', '\x17', '\x2', '\x171', '\x17E', 
		'\x5', 'l', '\x37', '\x2', '\x172', '\x17E', '\x5', '>', ' ', '\x2', '\x173', 
		'\x17E', '\x5', '@', '!', '\x2', '\x174', '\x17E', '\x5', '\x42', '\"', 
		'\x2', '\x175', '\x17E', '\x5', '\x44', '#', '\x2', '\x176', '\x17E', 
		'\x5', '\x46', '$', '\x2', '\x177', '\x17E', '\x5', '&', '\x14', '\x2', 
		'\x178', '\x17E', '\x5', 'J', '&', '\x2', '\x179', '\x17E', '\x5', 'L', 
		'\'', '\x2', '\x17A', '\x17E', '\x5', '^', '\x30', '\x2', '\x17B', '\x17E', 
		'\x5', '\x66', '\x34', '\x2', '\x17C', '\x17E', '\x5', 'H', '%', '\x2', 
		'\x17D', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x16F', '\x3', 
		'\x2', '\x2', '\x2', '\x17D', '\x170', '\x3', '\x2', '\x2', '\x2', '\x17D', 
		'\x171', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x172', '\x3', '\x2', '\x2', 
		'\x2', '\x17D', '\x173', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x174', 
		'\x3', '\x2', '\x2', '\x2', '\x17D', '\x175', '\x3', '\x2', '\x2', '\x2', 
		'\x17D', '\x176', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x177', '\x3', 
		'\x2', '\x2', '\x2', '\x17D', '\x178', '\x3', '\x2', '\x2', '\x2', '\x17D', 
		'\x179', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17A', '\x3', '\x2', '\x2', 
		'\x2', '\x17D', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', '\x17E', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x17F', '\x186', '\x5', '\x30', '\x19', '\x2', '\x180', '\x186', '\x5', 
		'.', '\x18', '\x2', '\x181', '\x186', '\x5', '\x32', '\x1A', '\x2', '\x182', 
		'\x186', '\x5', '\x34', '\x1B', '\x2', '\x183', '\x186', '\x5', '\x38', 
		'\x1D', '\x2', '\x184', '\x186', '\x5', ':', '\x1E', '\x2', '\x185', '\x17F', 
		'\x3', '\x2', '\x2', '\x2', '\x185', '\x180', '\x3', '\x2', '\x2', '\x2', 
		'\x185', '\x181', '\x3', '\x2', '\x2', '\x2', '\x185', '\x182', '\x3', 
		'\x2', '\x2', '\x2', '\x185', '\x183', '\x3', '\x2', '\x2', '\x2', '\x185', 
		'\x184', '\x3', '\x2', '\x2', '\x2', '\x186', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x187', '\x188', '\x5', '\x90', 'I', '\x2', '\x188', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x189', '\x18A', '\x5', '\x90', 'I', '\x2', '\x18A', 
		'\x18B', '\a', '\x41', '\x2', '\x2', '\x18B', '\x18C', '\x5', '\x90', 
		'I', '\x2', '\x18C', '\x31', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18E', 
		'\x5', '\x90', 'I', '\x2', '\x18E', '\x18F', '\t', '\x3', '\x2', '\x2', 
		'\x18F', '\x33', '\x3', '\x2', '\x2', '\x2', '\x190', '\x191', '\x5', 
		'\x16', '\f', '\x2', '\x191', '\x192', '\x5', '\x36', '\x1C', '\x2', '\x192', 
		'\x193', '\x5', '\x16', '\f', '\x2', '\x193', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x194', '\x196', '\t', '\x4', '\x2', '\x2', '\x195', '\x194', 
		'\x3', '\x2', '\x2', '\x2', '\x195', '\x196', '\x3', '\x2', '\x2', '\x2', 
		'\x196', '\x197', '\x3', '\x2', '\x2', '\x2', '\x197', '\x198', '\a', 
		'$', '\x2', '\x2', '\x198', '\x37', '\x3', '\x2', '\x2', '\x2', '\x199', 
		'\x19A', '\x5', '\x14', '\v', '\x2', '\x19A', '\x19B', '\a', '+', '\x2', 
		'\x2', '\x19B', '\x19C', '\x5', '\x16', '\f', '\x2', '\x19C', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x19D', '\x19E', '\a', '&', '\x2', '\x2', 
		'\x19E', ';', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A0', '\a', '\x1D', 
		'\x2', '\x2', '\x1A0', '\x1A2', '\a', '\'', '\x2', '\x2', '\x1A1', '\x1A3', 
		'\x5', '*', '\x16', '\x2', '\x1A2', '\x1A1', '\x3', '\x2', '\x2', '\x2', 
		'\x1A2', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A3', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x1A4', '\x1A6', '\a', '\x1A', '\x2', '\x2', '\x1A5', '\x1A7', 
		'\x5', '\x16', '\f', '\x2', '\x1A6', '\x1A5', '\x3', '\x2', '\x2', '\x2', 
		'\x1A6', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A7', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x1A8', '\x1AA', '\a', '\x3', '\x2', '\x2', '\x1A9', '\x1AB', 
		'\a', '\x1D', '\x2', '\x2', '\x1AA', '\x1A9', '\x3', '\x2', '\x2', '\x2', 
		'\x1AA', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x1AC', '\x1AE', '\a', '\x17', '\x2', '\x2', '\x1AD', 
		'\x1AF', '\a', '\x1D', '\x2', '\x2', '\x1AE', '\x1AD', '\x3', '\x2', '\x2', 
		'\x2', '\x1AE', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B1', '\a', '\xF', '\x2', '\x2', 
		'\x1B1', '\x1B2', '\a', '\x1D', '\x2', '\x2', '\x1B2', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x1B3', '\x1B4', '\a', '\x13', '\x2', '\x2', '\x1B4', 
		'G', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B6', '\a', '\t', '\x2', 
		'\x2', '\x1B6', '\x1B7', '\x5', '\x90', 'I', '\x2', '\x1B7', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x1B8', '\x1BC', '\a', '\x14', '\x2', '\x2', '\x1B9', 
		'\x1BA', '\x5', ',', '\x17', '\x2', '\x1BA', '\x1BB', '\a', '&', '\x2', 
		'\x2', '\x1BB', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1B9', 
		'\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BD', '\x3', '\x2', '\x2', '\x2', 
		'\x1BD', '\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BF', '\x5', 
		'\x90', 'I', '\x2', '\x1BF', '\x1C5', '\x5', '&', '\x14', '\x2', '\x1C0', 
		'\x1C3', '\a', '\xE', '\x2', '\x2', '\x1C1', '\x1C4', '\x5', 'J', '&', 
		'\x2', '\x1C2', '\x1C4', '\x5', '&', '\x14', '\x2', '\x1C3', '\x1C1', 
		'\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C2', '\x3', '\x2', '\x2', '\x2', 
		'\x1C4', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C0', '\x3', 
		'\x2', '\x2', '\x2', '\x1C5', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C6', 
		'K', '\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1CA', '\x5', 'N', '(', '\x2', 
		'\x1C8', '\x1CA', '\x5', 'T', '+', '\x2', '\x1C9', '\x1C7', '\x3', '\x2', 
		'\x2', '\x2', '\x1C9', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1CA', 'M', 
		'\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1CF', '\a', '\x11', '\x2', '\x2', 
		'\x1CC', '\x1CD', '\x5', ',', '\x17', '\x2', '\x1CD', '\x1CE', '\a', '&', 
		'\x2', '\x2', '\x1CE', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1CC', 
		'\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1D0', '\x3', '\x2', '\x2', '\x2', 
		'\x1D0', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D3', '\x5', 
		'\x90', 'I', '\x2', '\x1D2', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D2', 
		'\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D4', '\x3', '\x2', '\x2', 
		'\x2', '\x1D4', '\x1D8', '\a', ' ', '\x2', '\x2', '\x1D5', '\x1D7', '\x5', 
		'P', ')', '\x2', '\x1D6', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D7', 
		'\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1D6', '\x3', '\x2', '\x2', 
		'\x2', '\x1D8', '\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DB', 
		'\x3', '\x2', '\x2', '\x2', '\x1DA', '\x1D8', '\x3', '\x2', '\x2', '\x2', 
		'\x1DB', '\x1DC', '\a', '!', '\x2', '\x2', '\x1DC', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x1DD', '\x1DE', '\x5', 'R', '*', '\x2', '\x1DE', '\x1E0', 
		'\a', '\'', '\x2', '\x2', '\x1DF', '\x1E1', '\x5', '(', '\x15', '\x2', 
		'\x1E0', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E1', '\x3', 
		'\x2', '\x2', '\x2', '\x1E1', 'Q', '\x3', '\x2', '\x2', '\x2', '\x1E2', 
		'\x1E3', '\a', '\b', '\x2', '\x2', '\x1E3', '\x1E6', '\x5', '\x16', '\f', 
		'\x2', '\x1E4', '\x1E6', '\a', '\x4', '\x2', '\x2', '\x1E5', '\x1E2', 
		'\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1E4', '\x3', '\x2', '\x2', '\x2', 
		'\x1E6', 'S', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1EB', '\a', '\x11', 
		'\x2', '\x2', '\x1E8', '\x1E9', '\x5', ',', '\x17', '\x2', '\x1E9', '\x1EA', 
		'\a', '&', '\x2', '\x2', '\x1EA', '\x1EC', '\x3', '\x2', '\x2', '\x2', 
		'\x1EB', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1EC', '\x3', 
		'\x2', '\x2', '\x2', '\x1EC', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1ED', 
		'\x1EE', '\x5', 'V', ',', '\x2', '\x1EE', '\x1F2', '\a', ' ', '\x2', '\x2', 
		'\x1EF', '\x1F1', '\x5', 'X', '-', '\x2', '\x1F0', '\x1EF', '\x3', '\x2', 
		'\x2', '\x2', '\x1F1', '\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F0', 
		'\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F3', '\x3', '\x2', '\x2', '\x2', 
		'\x1F3', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1F4', '\x1F2', '\x3', 
		'\x2', '\x2', '\x2', '\x1F5', '\x1F6', '\a', '!', '\x2', '\x2', '\x1F6', 
		'U', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F8', '\a', '\x1D', '\x2', 
		'\x2', '\x1F8', '\x1FA', '\a', '+', '\x2', '\x2', '\x1F9', '\x1F7', '\x3', 
		'\x2', '\x2', '\x2', '\x1F9', '\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1FA', 
		'\x1FB', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FC', '\x5', '\x92', 
		'J', '\x2', '\x1FC', '\x1FD', '\a', '(', '\x2', '\x2', '\x1FD', '\x1FE', 
		'\a', '\x1E', '\x2', '\x2', '\x1FE', '\x1FF', '\a', '\x16', '\x2', '\x2', 
		'\x1FF', '\x200', '\a', '\x1F', '\x2', '\x2', '\x200', 'W', '\x3', '\x2', 
		'\x2', '\x2', '\x201', '\x202', '\x5', 'Z', '.', '\x2', '\x202', '\x204', 
		'\a', '\'', '\x2', '\x2', '\x203', '\x205', '\x5', '(', '\x15', '\x2', 
		'\x204', '\x203', '\x3', '\x2', '\x2', '\x2', '\x204', '\x205', '\x3', 
		'\x2', '\x2', '\x2', '\x205', 'Y', '\x3', '\x2', '\x2', '\x2', '\x206', 
		'\x207', '\a', '\b', '\x2', '\x2', '\x207', '\x20A', '\x5', '\\', '/', 
		'\x2', '\x208', '\x20A', '\a', '\x4', '\x2', '\x2', '\x209', '\x206', 
		'\x3', '\x2', '\x2', '\x2', '\x209', '\x208', '\x3', '\x2', '\x2', '\x2', 
		'\x20A', '[', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x20E', '\x5', 'n', 
		'\x38', '\x2', '\x20C', '\x20E', '\a', '\x1C', '\x2', '\x2', '\x20D', 
		'\x20B', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x20C', '\x3', '\x2', '\x2', 
		'\x2', '\x20E', '\x216', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x212', 
		'\a', '%', '\x2', '\x2', '\x210', '\x213', '\x5', 'n', '\x38', '\x2', 
		'\x211', '\x213', '\a', '\x1C', '\x2', '\x2', '\x212', '\x210', '\x3', 
		'\x2', '\x2', '\x2', '\x212', '\x211', '\x3', '\x2', '\x2', '\x2', '\x213', 
		'\x215', '\x3', '\x2', '\x2', '\x2', '\x214', '\x20F', '\x3', '\x2', '\x2', 
		'\x2', '\x215', '\x218', '\x3', '\x2', '\x2', '\x2', '\x216', '\x214', 
		'\x3', '\x2', '\x2', '\x2', '\x216', '\x217', '\x3', '\x2', '\x2', '\x2', 
		'\x217', ']', '\x3', '\x2', '\x2', '\x2', '\x218', '\x216', '\x3', '\x2', 
		'\x2', '\x2', '\x219', '\x21A', '\a', '\a', '\x2', '\x2', '\x21A', '\x21E', 
		'\a', ' ', '\x2', '\x2', '\x21B', '\x21D', '\x5', '`', '\x31', '\x2', 
		'\x21C', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x220', '\x3', 
		'\x2', '\x2', '\x2', '\x21E', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x21E', 
		'\x21F', '\x3', '\x2', '\x2', '\x2', '\x21F', '\x221', '\x3', '\x2', '\x2', 
		'\x2', '\x220', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x221', '\x222', 
		'\a', '!', '\x2', '\x2', '\x222', '_', '\x3', '\x2', '\x2', '\x2', '\x223', 
		'\x224', '\x5', '\x62', '\x32', '\x2', '\x224', '\x226', '\a', '\'', '\x2', 
		'\x2', '\x225', '\x227', '\x5', '(', '\x15', '\x2', '\x226', '\x225', 
		'\x3', '\x2', '\x2', '\x2', '\x226', '\x227', '\x3', '\x2', '\x2', '\x2', 
		'\x227', '\x61', '\x3', '\x2', '\x2', '\x2', '\x228', '\x22B', '\a', '\b', 
		'\x2', '\x2', '\x229', '\x22C', '\x5', '\x30', '\x19', '\x2', '\x22A', 
		'\x22C', '\x5', '\x64', '\x33', '\x2', '\x22B', '\x229', '\x3', '\x2', 
		'\x2', '\x2', '\x22B', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x22F', 
		'\x3', '\x2', '\x2', '\x2', '\x22D', '\x22F', '\a', '\x4', '\x2', '\x2', 
		'\x22E', '\x228', '\x3', '\x2', '\x2', '\x2', '\x22E', '\x22D', '\x3', 
		'\x2', '\x2', '\x2', '\x22F', '\x63', '\x3', '\x2', '\x2', '\x2', '\x230', 
		'\x231', '\x5', '\x16', '\f', '\x2', '\x231', '\x232', '\a', '$', '\x2', 
		'\x2', '\x232', '\x237', '\x3', '\x2', '\x2', '\x2', '\x233', '\x234', 
		'\x5', '\x14', '\v', '\x2', '\x234', '\x235', '\a', '+', '\x2', '\x2', 
		'\x235', '\x237', '\x3', '\x2', '\x2', '\x2', '\x236', '\x230', '\x3', 
		'\x2', '\x2', '\x2', '\x236', '\x233', '\x3', '\x2', '\x2', '\x2', '\x236', 
		'\x237', '\x3', '\x2', '\x2', '\x2', '\x237', '\x238', '\x3', '\x2', '\x2', 
		'\x2', '\x238', '\x239', '\x5', '\x90', 'I', '\x2', '\x239', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x23A', '\x23E', '\a', '\x18', '\x2', '\x2', '\x23B', 
		'\x23F', '\x5', '\x90', 'I', '\x2', '\x23C', '\x23F', '\x5', 'h', '\x35', 
		'\x2', '\x23D', '\x23F', '\x5', 'j', '\x36', '\x2', '\x23E', '\x23B', 
		'\x3', '\x2', '\x2', '\x2', '\x23E', '\x23C', '\x3', '\x2', '\x2', '\x2', 
		'\x23E', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x23E', '\x23F', '\x3', 
		'\x2', '\x2', '\x2', '\x23F', '\x240', '\x3', '\x2', '\x2', '\x2', '\x240', 
		'\x241', '\x5', '&', '\x14', '\x2', '\x241', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x242', '\x244', '\x5', ',', '\x17', '\x2', '\x243', '\x242', 
		'\x3', '\x2', '\x2', '\x2', '\x243', '\x244', '\x3', '\x2', '\x2', '\x2', 
		'\x244', '\x245', '\x3', '\x2', '\x2', '\x2', '\x245', '\x247', '\a', 
		'&', '\x2', '\x2', '\x246', '\x248', '\x5', '\x90', 'I', '\x2', '\x247', 
		'\x246', '\x3', '\x2', '\x2', '\x2', '\x247', '\x248', '\x3', '\x2', '\x2', 
		'\x2', '\x248', '\x249', '\x3', '\x2', '\x2', '\x2', '\x249', '\x24B', 
		'\a', '&', '\x2', '\x2', '\x24A', '\x24C', '\x5', ',', '\x17', '\x2', 
		'\x24B', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x24B', '\x24C', '\x3', 
		'\x2', '\x2', '\x2', '\x24C', 'i', '\x3', '\x2', '\x2', '\x2', '\x24D', 
		'\x24E', '\x5', '\x16', '\f', '\x2', '\x24E', '\x24F', '\a', '$', '\x2', 
		'\x2', '\x24F', '\x254', '\x3', '\x2', '\x2', '\x2', '\x250', '\x251', 
		'\x5', '\x14', '\v', '\x2', '\x251', '\x252', '\a', '+', '\x2', '\x2', 
		'\x252', '\x254', '\x3', '\x2', '\x2', '\x2', '\x253', '\x24D', '\x3', 
		'\x2', '\x2', '\x2', '\x253', '\x250', '\x3', '\x2', '\x2', '\x2', '\x253', 
		'\x254', '\x3', '\x2', '\x2', '\x2', '\x254', '\x255', '\x3', '\x2', '\x2', 
		'\x2', '\x255', '\x256', '\a', '\x15', '\x2', '\x2', '\x256', '\x257', 
		'\x5', '\x90', 'I', '\x2', '\x257', 'k', '\x3', '\x2', '\x2', '\x2', '\x258', 
		'\x259', '\a', '\n', '\x2', '\x2', '\x259', '\x25A', '\x5', '\x90', 'I', 
		'\x2', '\x25A', 'm', '\x3', '\x2', '\x2', '\x2', '\x25B', '\x262', '\x5', 
		'p', '\x39', '\x2', '\x25C', '\x262', '\x5', 'r', ':', '\x2', '\x25D', 
		'\x25E', '\a', '\x1E', '\x2', '\x2', '\x25E', '\x25F', '\x5', 'n', '\x38', 
		'\x2', '\x25F', '\x260', '\a', '\x1F', '\x2', '\x2', '\x260', '\x262', 
		'\x3', '\x2', '\x2', '\x2', '\x261', '\x25B', '\x3', '\x2', '\x2', '\x2', 
		'\x261', '\x25C', '\x3', '\x2', '\x2', '\x2', '\x261', '\x25D', '\x3', 
		'\x2', '\x2', '\x2', '\x262', 'o', '\x3', '\x2', '\x2', '\x2', '\x263', 
		'\x266', '\x5', '\xA2', 'R', '\x2', '\x264', '\x266', '\a', '\x1D', '\x2', 
		'\x2', '\x265', '\x263', '\x3', '\x2', '\x2', '\x2', '\x265', '\x264', 
		'\x3', '\x2', '\x2', '\x2', '\x266', 'q', '\x3', '\x2', '\x2', '\x2', 
		'\x267', '\x270', '\x5', 't', ';', '\x2', '\x268', '\x270', '\x5', '\xB2', 
		'Z', '\x2', '\x269', '\x270', '\x5', 'z', '>', '\x2', '\x26A', '\x270', 
		'\x5', '\x86', '\x44', '\x2', '\x26B', '\x270', '\x5', '|', '?', '\x2', 
		'\x26C', '\x270', '\x5', '~', '@', '\x2', '\x26D', '\x270', '\x5', '\x80', 
		'\x41', '\x2', '\x26E', '\x270', '\x5', '\x82', '\x42', '\x2', '\x26F', 
		'\x267', '\x3', '\x2', '\x2', '\x2', '\x26F', '\x268', '\x3', '\x2', '\x2', 
		'\x2', '\x26F', '\x269', '\x3', '\x2', '\x2', '\x2', '\x26F', '\x26A', 
		'\x3', '\x2', '\x2', '\x2', '\x26F', '\x26B', '\x3', '\x2', '\x2', '\x2', 
		'\x26F', '\x26C', '\x3', '\x2', '\x2', '\x2', '\x26F', '\x26D', '\x3', 
		'\x2', '\x2', '\x2', '\x26F', '\x26E', '\x3', '\x2', '\x2', '\x2', '\x270', 
		's', '\x3', '\x2', '\x2', '\x2', '\x271', '\x272', '\a', '\"', '\x2', 
		'\x2', '\x272', '\x273', '\x5', 'v', '<', '\x2', '\x273', '\x274', '\a', 
		'#', '\x2', '\x2', '\x274', '\x275', '\x5', 'x', '=', '\x2', '\x275', 
		'u', '\x3', '\x2', '\x2', '\x2', '\x276', '\x277', '\x5', '\x90', 'I', 
		'\x2', '\x277', 'w', '\x3', '\x2', '\x2', '\x2', '\x278', '\x279', '\x5', 
		'n', '\x38', '\x2', '\x279', 'y', '\x3', '\x2', '\x2', '\x2', '\x27A', 
		'\x27B', '\a', '?', '\x2', '\x2', '\x27B', '\x27C', '\x5', 'n', '\x38', 
		'\x2', '\x27C', '{', '\x3', '\x2', '\x2', '\x2', '\x27D', '\x27E', '\a', 
		'\x6', '\x2', '\x2', '\x27E', '\x287', '\a', ' ', '\x2', '\x2', '\x27F', 
		'\x282', '\x5', '\x84', '\x43', '\x2', '\x280', '\x282', '\x5', 'p', '\x39', 
		'\x2', '\x281', '\x27F', '\x3', '\x2', '\x2', '\x2', '\x281', '\x280', 
		'\x3', '\x2', '\x2', '\x2', '\x282', '\x283', '\x3', '\x2', '\x2', '\x2', 
		'\x283', '\x284', '\x5', '\xC8', '\x65', '\x2', '\x284', '\x286', '\x3', 
		'\x2', '\x2', '\x2', '\x285', '\x281', '\x3', '\x2', '\x2', '\x2', '\x286', 
		'\x289', '\x3', '\x2', '\x2', '\x2', '\x287', '\x285', '\x3', '\x2', '\x2', 
		'\x2', '\x287', '\x288', '\x3', '\x2', '\x2', '\x2', '\x288', '\x28A', 
		'\x3', '\x2', '\x2', '\x2', '\x289', '\x287', '\x3', '\x2', '\x2', '\x2', 
		'\x28A', '\x28B', '\a', '!', '\x2', '\x2', '\x28B', '}', '\x3', '\x2', 
		'\x2', '\x2', '\x28C', '\x28D', '\a', '\"', '\x2', '\x2', '\x28D', '\x28E', 
		'\a', '#', '\x2', '\x2', '\x28E', '\x28F', '\x5', 'x', '=', '\x2', '\x28F', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x290', '\x291', '\a', '\v', '\x2', 
		'\x2', '\x291', '\x292', '\a', '\"', '\x2', '\x2', '\x292', '\x293', '\x5', 
		'n', '\x38', '\x2', '\x293', '\x294', '\a', '#', '\x2', '\x2', '\x294', 
		'\x295', '\x5', 'x', '=', '\x2', '\x295', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x296', '\x29C', '\a', '\r', '\x2', '\x2', '\x297', '\x298', '\a', 
		'\r', '\x2', '\x2', '\x298', '\x29C', '\a', '\x41', '\x2', '\x2', '\x299', 
		'\x29A', '\a', '\x41', '\x2', '\x2', '\x29A', '\x29C', '\a', '\r', '\x2', 
		'\x2', '\x29B', '\x296', '\x3', '\x2', '\x2', '\x2', '\x29B', '\x297', 
		'\x3', '\x2', '\x2', '\x2', '\x29B', '\x299', '\x3', '\x2', '\x2', '\x2', 
		'\x29C', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x29D', '\x29E', '\x5', 
		'x', '=', '\x2', '\x29E', '\x83', '\x3', '\x2', '\x2', '\x2', '\x29F', 
		'\x2A0', '\x6', '\x43', '\x2', '\x2', '\x2A0', '\x2A1', '\a', '\x1D', 
		'\x2', '\x2', '\x2A1', '\x2A2', '\x5', '\x8C', 'G', '\x2', '\x2A2', '\x2A3', 
		'\x5', '\x8A', '\x46', '\x2', '\x2A3', '\x2A7', '\x3', '\x2', '\x2', '\x2', 
		'\x2A4', '\x2A5', '\a', '\x1D', '\x2', '\x2', '\x2A5', '\x2A7', '\x5', 
		'\x8C', 'G', '\x2', '\x2A6', '\x29F', '\x3', '\x2', '\x2', '\x2', '\x2A6', 
		'\x2A4', '\x3', '\x2', '\x2', '\x2', '\x2A7', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x2A8', '\x2A9', '\a', '\x5', '\x2', '\x2', '\x2A9', '\x2AA', 
		'\x5', '\x88', '\x45', '\x2', '\x2AA', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x2AB', '\x2AC', '\x6', '\x45', '\x3', '\x2', '\x2AC', '\x2AD', '\x5', 
		'\x8C', 'G', '\x2', '\x2AD', '\x2AE', '\x5', '\x8A', '\x46', '\x2', '\x2AE', 
		'\x2B1', '\x3', '\x2', '\x2', '\x2', '\x2AF', '\x2B1', '\x5', '\x8C', 
		'G', '\x2', '\x2B0', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x2B0', '\x2AF', 
		'\x3', '\x2', '\x2', '\x2', '\x2B1', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x2B2', '\x2B5', '\x5', '\x8C', 'G', '\x2', '\x2B3', '\x2B5', '\x5', 
		'n', '\x38', '\x2', '\x2B4', '\x2B2', '\x3', '\x2', '\x2', '\x2', '\x2B4', 
		'\x2B3', '\x3', '\x2', '\x2', '\x2', '\x2B5', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x2B6', '\x2C2', '\a', '\x1E', '\x2', '\x2', '\x2B7', '\x2BC', 
		'\x5', '\x8E', 'H', '\x2', '\x2B8', '\x2B9', '\a', '%', '\x2', '\x2', 
		'\x2B9', '\x2BB', '\x5', '\x8E', 'H', '\x2', '\x2BA', '\x2B8', '\x3', 
		'\x2', '\x2', '\x2', '\x2BB', '\x2BE', '\x3', '\x2', '\x2', '\x2', '\x2BC', 
		'\x2BA', '\x3', '\x2', '\x2', '\x2', '\x2BC', '\x2BD', '\x3', '\x2', '\x2', 
		'\x2', '\x2BD', '\x2C0', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2BC', 
		'\x3', '\x2', '\x2', '\x2', '\x2BF', '\x2C1', '\a', '%', '\x2', '\x2', 
		'\x2C0', '\x2BF', '\x3', '\x2', '\x2', '\x2', '\x2C0', '\x2C1', '\x3', 
		'\x2', '\x2', '\x2', '\x2C1', '\x2C3', '\x3', '\x2', '\x2', '\x2', '\x2C2', 
		'\x2B7', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2C3', '\x3', '\x2', '\x2', 
		'\x2', '\x2C3', '\x2C4', '\x3', '\x2', '\x2', '\x2', '\x2C4', '\x2C5', 
		'\a', '\x1F', '\x2', '\x2', '\x2C5', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x2C6', '\x2C8', '\x5', '\x14', '\v', '\x2', '\x2C7', '\x2C6', '\x3', 
		'\x2', '\x2', '\x2', '\x2C7', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2C8', 
		'\x2CA', '\x3', '\x2', '\x2', '\x2', '\x2C9', '\x2CB', '\a', ',', '\x2', 
		'\x2', '\x2CA', '\x2C9', '\x3', '\x2', '\x2', '\x2', '\x2CA', '\x2CB', 
		'\x3', '\x2', '\x2', '\x2', '\x2CB', '\x2CC', '\x3', '\x2', '\x2', '\x2', 
		'\x2CC', '\x2CD', '\x5', 'n', '\x38', '\x2', '\x2CD', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', '\x2CE', '\x2CF', '\b', 'I', '\x1', '\x2', '\x2CF', '\x2D2', 
		'\x5', '\x92', 'J', '\x2', '\x2D0', '\x2D2', '\x5', '\x94', 'K', '\x2', 
		'\x2D1', '\x2CE', '\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2D0', '\x3', 
		'\x2', '\x2', '\x2', '\x2D2', '\x2E4', '\x3', '\x2', '\x2', '\x2', '\x2D3', 
		'\x2D4', '\f', '\a', '\x2', '\x2', '\x2D4', '\x2D5', '\t', '\x5', '\x2', 
		'\x2', '\x2D5', '\x2E3', '\x5', '\x90', 'I', '\b', '\x2D6', '\x2D7', '\f', 
		'\x6', '\x2', '\x2', '\x2D7', '\x2D8', '\t', '\x6', '\x2', '\x2', '\x2D8', 
		'\x2E3', '\x5', '\x90', 'I', '\a', '\x2D9', '\x2DA', '\f', '\x5', '\x2', 
		'\x2', '\x2DA', '\x2DB', '\t', '\a', '\x2', '\x2', '\x2DB', '\x2E3', '\x5', 
		'\x90', 'I', '\x6', '\x2DC', '\x2DD', '\f', '\x4', '\x2', '\x2', '\x2DD', 
		'\x2DE', '\a', '.', '\x2', '\x2', '\x2DE', '\x2E3', '\x5', '\x90', 'I', 
		'\x5', '\x2DF', '\x2E0', '\f', '\x3', '\x2', '\x2', '\x2E0', '\x2E1', 
		'\a', '-', '\x2', '\x2', '\x2E1', '\x2E3', '\x5', '\x90', 'I', '\x4', 
		'\x2E2', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x2E2', '\x2D6', '\x3', 
		'\x2', '\x2', '\x2', '\x2E2', '\x2D9', '\x3', '\x2', '\x2', '\x2', '\x2E2', 
		'\x2DC', '\x3', '\x2', '\x2', '\x2', '\x2E2', '\x2DF', '\x3', '\x2', '\x2', 
		'\x2', '\x2E3', '\x2E6', '\x3', '\x2', '\x2', '\x2', '\x2E4', '\x2E2', 
		'\x3', '\x2', '\x2', '\x2', '\x2E4', '\x2E5', '\x3', '\x2', '\x2', '\x2', 
		'\x2E5', '\x91', '\x3', '\x2', '\x2', '\x2', '\x2E6', '\x2E4', '\x3', 
		'\x2', '\x2', '\x2', '\x2E7', '\x2E8', '\b', 'J', '\x1', '\x2', '\x2E8', 
		'\x2EC', '\x5', '\x98', 'M', '\x2', '\x2E9', '\x2EC', '\x5', '\x96', 'L', 
		'\x2', '\x2EA', '\x2EC', '\x5', '\xC4', '\x63', '\x2', '\x2EB', '\x2E7', 
		'\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2E9', '\x3', '\x2', '\x2', '\x2', 
		'\x2EB', '\x2EA', '\x3', '\x2', '\x2', '\x2', '\x2EC', '\x2F8', '\x3', 
		'\x2', '\x2', '\x2', '\x2ED', '\x2F4', '\f', '\x3', '\x2', '\x2', '\x2EE', 
		'\x2EF', '\a', '(', '\x2', '\x2', '\x2EF', '\x2F5', '\a', '\x1D', '\x2', 
		'\x2', '\x2F0', '\x2F5', '\x5', '\xBC', '_', '\x2', '\x2F1', '\x2F5', 
		'\x5', '\xBE', '`', '\x2', '\x2F2', '\x2F5', '\x5', '\xC0', '\x61', '\x2', 
		'\x2F3', '\x2F5', '\x5', '\xC2', '\x62', '\x2', '\x2F4', '\x2EE', '\x3', 
		'\x2', '\x2', '\x2', '\x2F4', '\x2F0', '\x3', '\x2', '\x2', '\x2', '\x2F4', 
		'\x2F1', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2F2', '\x3', '\x2', '\x2', 
		'\x2', '\x2F4', '\x2F3', '\x3', '\x2', '\x2', '\x2', '\x2F5', '\x2F7', 
		'\x3', '\x2', '\x2', '\x2', '\x2F6', '\x2ED', '\x3', '\x2', '\x2', '\x2', 
		'\x2F7', '\x2FA', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2F6', '\x3', 
		'\x2', '\x2', '\x2', '\x2F8', '\x2F9', '\x3', '\x2', '\x2', '\x2', '\x2F9', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x2FA', '\x2F8', '\x3', '\x2', '\x2', 
		'\x2', '\x2FB', '\x2FF', '\x5', '\x92', 'J', '\x2', '\x2FC', '\x2FD', 
		'\t', '\b', '\x2', '\x2', '\x2FD', '\x2FF', '\x5', '\x90', 'I', '\x2', 
		'\x2FE', '\x2FB', '\x3', '\x2', '\x2', '\x2', '\x2FE', '\x2FC', '\x3', 
		'\x2', '\x2', '\x2', '\x2FF', '\x95', '\x3', '\x2', '\x2', '\x2', '\x300', 
		'\x301', '\x5', 'n', '\x38', '\x2', '\x301', '\x302', '\a', '\x1E', '\x2', 
		'\x2', '\x302', '\x304', '\x5', '\x90', 'I', '\x2', '\x303', '\x305', 
		'\a', '%', '\x2', '\x2', '\x304', '\x303', '\x3', '\x2', '\x2', '\x2', 
		'\x304', '\x305', '\x3', '\x2', '\x2', '\x2', '\x305', '\x306', '\x3', 
		'\x2', '\x2', '\x2', '\x306', '\x307', '\a', '\x1F', '\x2', '\x2', '\x307', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x308', '\x30F', '\x5', '\x9A', 'N', 
		'\x2', '\x309', '\x30F', '\x5', '\xA0', 'Q', '\x2', '\x30A', '\x30B', 
		'\a', '\x1E', '\x2', '\x2', '\x30B', '\x30C', '\x5', '\x90', 'I', '\x2', 
		'\x30C', '\x30D', '\a', '\x1F', '\x2', '\x2', '\x30D', '\x30F', '\x3', 
		'\x2', '\x2', '\x2', '\x30E', '\x308', '\x3', '\x2', '\x2', '\x2', '\x30E', 
		'\x309', '\x3', '\x2', '\x2', '\x2', '\x30E', '\x30A', '\x3', '\x2', '\x2', 
		'\x2', '\x30F', '\x99', '\x3', '\x2', '\x2', '\x2', '\x310', '\x314', 
		'\x5', '\x9C', 'O', '\x2', '\x311', '\x314', '\x5', '\xA4', 'S', '\x2', 
		'\x312', '\x314', '\x5', '\xBA', '^', '\x2', '\x313', '\x310', '\x3', 
		'\x2', '\x2', '\x2', '\x313', '\x311', '\x3', '\x2', '\x2', '\x2', '\x313', 
		'\x312', '\x3', '\x2', '\x2', '\x2', '\x314', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x315', '\x31C', '\a', '\x1C', '\x2', '\x2', '\x316', '\x31C', 
		'\x5', '\x9E', 'P', '\x2', '\x317', '\x31C', '\x5', '\xB6', '\\', '\x2', 
		'\x318', '\x31C', '\a', '\x46', '\x2', '\x2', '\x319', '\x31C', '\a', 
		'I', '\x2', '\x2', '\x31A', '\x31C', '\a', 'J', '\x2', '\x2', '\x31B', 
		'\x315', '\x3', '\x2', '\x2', '\x2', '\x31B', '\x316', '\x3', '\x2', '\x2', 
		'\x2', '\x31B', '\x317', '\x3', '\x2', '\x2', '\x2', '\x31B', '\x318', 
		'\x3', '\x2', '\x2', '\x2', '\x31B', '\x319', '\x3', '\x2', '\x2', '\x2', 
		'\x31B', '\x31A', '\x3', '\x2', '\x2', '\x2', '\x31C', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x31D', '\x31E', '\t', '\t', '\x2', '\x2', '\x31E', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x322', '\a', '\x1D', '\x2', 
		'\x2', '\x320', '\x322', '\x5', '\xA2', 'R', '\x2', '\x321', '\x31F', 
		'\x3', '\x2', '\x2', '\x2', '\x321', '\x320', '\x3', '\x2', '\x2', '\x2', 
		'\x322', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x323', '\x324', '\a', '\x1D', 
		'\x2', '\x2', '\x324', '\x325', '\a', '(', '\x2', '\x2', '\x325', '\x326', 
		'\a', '\x1D', '\x2', '\x2', '\x326', '\xA3', '\x3', '\x2', '\x2', '\x2', 
		'\x327', '\x328', '\x5', '\xA6', 'T', '\x2', '\x328', '\x329', '\x5', 
		'\xA8', 'U', '\x2', '\x329', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x32A', 
		'\x334', '\x5', '\xB2', 'Z', '\x2', '\x32B', '\x334', '\x5', 't', ';', 
		'\x2', '\x32C', '\x32D', '\a', '\"', '\x2', '\x2', '\x32D', '\x32E', '\a', 
		',', '\x2', '\x2', '\x32E', '\x32F', '\a', '#', '\x2', '\x2', '\x32F', 
		'\x334', '\x5', 'x', '=', '\x2', '\x330', '\x334', '\x5', '~', '@', '\x2', 
		'\x331', '\x334', '\x5', '\x80', '\x41', '\x2', '\x332', '\x334', '\x5', 
		'p', '\x39', '\x2', '\x333', '\x32A', '\x3', '\x2', '\x2', '\x2', '\x333', 
		'\x32B', '\x3', '\x2', '\x2', '\x2', '\x333', '\x32C', '\x3', '\x2', '\x2', 
		'\x2', '\x333', '\x330', '\x3', '\x2', '\x2', '\x2', '\x333', '\x331', 
		'\x3', '\x2', '\x2', '\x2', '\x333', '\x332', '\x3', '\x2', '\x2', '\x2', 
		'\x334', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x335', '\x33A', '\a', ' ', 
		'\x2', '\x2', '\x336', '\x338', '\x5', '\xAA', 'V', '\x2', '\x337', '\x339', 
		'\a', '%', '\x2', '\x2', '\x338', '\x337', '\x3', '\x2', '\x2', '\x2', 
		'\x338', '\x339', '\x3', '\x2', '\x2', '\x2', '\x339', '\x33B', '\x3', 
		'\x2', '\x2', '\x2', '\x33A', '\x336', '\x3', '\x2', '\x2', '\x2', '\x33A', 
		'\x33B', '\x3', '\x2', '\x2', '\x2', '\x33B', '\x33C', '\x3', '\x2', '\x2', 
		'\x2', '\x33C', '\x33D', '\a', '!', '\x2', '\x2', '\x33D', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\x33E', '\x343', '\x5', '\xAC', 'W', '\x2', '\x33F', 
		'\x340', '\a', '%', '\x2', '\x2', '\x340', '\x342', '\x5', '\xAC', 'W', 
		'\x2', '\x341', '\x33F', '\x3', '\x2', '\x2', '\x2', '\x342', '\x345', 
		'\x3', '\x2', '\x2', '\x2', '\x343', '\x341', '\x3', '\x2', '\x2', '\x2', 
		'\x343', '\x344', '\x3', '\x2', '\x2', '\x2', '\x344', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\x345', '\x343', '\x3', '\x2', '\x2', '\x2', '\x346', 
		'\x347', '\x5', '\xAE', 'X', '\x2', '\x347', '\x348', '\a', '\'', '\x2', 
		'\x2', '\x348', '\x34A', '\x3', '\x2', '\x2', '\x2', '\x349', '\x346', 
		'\x3', '\x2', '\x2', '\x2', '\x349', '\x34A', '\x3', '\x2', '\x2', '\x2', 
		'\x34A', '\x34B', '\x3', '\x2', '\x2', '\x2', '\x34B', '\x34C', '\x5', 
		'\xB0', 'Y', '\x2', '\x34C', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x351', '\a', '\x1D', '\x2', '\x2', '\x34E', '\x351', '\x5', '\x90', 
		'I', '\x2', '\x34F', '\x351', '\x5', '\xA8', 'U', '\x2', '\x350', '\x34D', 
		'\x3', '\x2', '\x2', '\x2', '\x350', '\x34E', '\x3', '\x2', '\x2', '\x2', 
		'\x350', '\x34F', '\x3', '\x2', '\x2', '\x2', '\x351', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\x352', '\x355', '\x5', '\x90', 'I', '\x2', '\x353', 
		'\x355', '\x5', '\xA8', 'U', '\x2', '\x354', '\x352', '\x3', '\x2', '\x2', 
		'\x2', '\x354', '\x353', '\x3', '\x2', '\x2', '\x2', '\x355', '\xB1', 
		'\x3', '\x2', '\x2', '\x2', '\x356', '\x357', '\a', '\f', '\x2', '\x2', 
		'\x357', '\x35D', '\a', ' ', '\x2', '\x2', '\x358', '\x359', '\x5', '\xB4', 
		'[', '\x2', '\x359', '\x35A', '\x5', '\xC8', '\x65', '\x2', '\x35A', '\x35C', 
		'\x3', '\x2', '\x2', '\x2', '\x35B', '\x358', '\x3', '\x2', '\x2', '\x2', 
		'\x35C', '\x35F', '\x3', '\x2', '\x2', '\x2', '\x35D', '\x35B', '\x3', 
		'\x2', '\x2', '\x2', '\x35D', '\x35E', '\x3', '\x2', '\x2', '\x2', '\x35E', 
		'\x360', '\x3', '\x2', '\x2', '\x2', '\x35F', '\x35D', '\x3', '\x2', '\x2', 
		'\x2', '\x360', '\x361', '\a', '!', '\x2', '\x2', '\x361', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\x362', '\x363', '\x6', '[', '\n', '\x2', '\x363', 
		'\x364', '\x5', '\x14', '\v', '\x2', '\x364', '\x365', '\x5', 'n', '\x38', 
		'\x2', '\x365', '\x368', '\x3', '\x2', '\x2', '\x2', '\x366', '\x368', 
		'\x5', '\xB8', ']', '\x2', '\x367', '\x362', '\x3', '\x2', '\x2', '\x2', 
		'\x367', '\x366', '\x3', '\x2', '\x2', '\x2', '\x368', '\x36A', '\x3', 
		'\x2', '\x2', '\x2', '\x369', '\x36B', '\x5', '\xB6', '\\', '\x2', '\x36A', 
		'\x369', '\x3', '\x2', '\x2', '\x2', '\x36A', '\x36B', '\x3', '\x2', '\x2', 
		'\x2', '\x36B', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x36C', '\x36D', 
		'\t', '\n', '\x2', '\x2', '\x36D', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\x36E', '\x370', '\a', '?', '\x2', '\x2', '\x36F', '\x36E', '\x3', '\x2', 
		'\x2', '\x2', '\x36F', '\x370', '\x3', '\x2', '\x2', '\x2', '\x370', '\x371', 
		'\x3', '\x2', '\x2', '\x2', '\x371', '\x372', '\x5', 'p', '\x39', '\x2', 
		'\x372', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x373', '\x374', '\a', '\x5', 
		'\x2', '\x2', '\x374', '\x375', '\x5', '\x88', '\x45', '\x2', '\x375', 
		'\x376', '\x5', '&', '\x14', '\x2', '\x376', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\x377', '\x378', '\a', '\"', '\x2', '\x2', '\x378', '\x379', '\x5', 
		'\x90', 'I', '\x2', '\x379', '\x37A', '\a', '#', '\x2', '\x2', '\x37A', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\x37B', '\x38B', '\a', '\"', '\x2', 
		'\x2', '\x37C', '\x37E', '\x5', '\x90', 'I', '\x2', '\x37D', '\x37C', 
		'\x3', '\x2', '\x2', '\x2', '\x37D', '\x37E', '\x3', '\x2', '\x2', '\x2', 
		'\x37E', '\x37F', '\x3', '\x2', '\x2', '\x2', '\x37F', '\x381', '\a', 
		'\'', '\x2', '\x2', '\x380', '\x382', '\x5', '\x90', 'I', '\x2', '\x381', 
		'\x380', '\x3', '\x2', '\x2', '\x2', '\x381', '\x382', '\x3', '\x2', '\x2', 
		'\x2', '\x382', '\x38C', '\x3', '\x2', '\x2', '\x2', '\x383', '\x385', 
		'\x5', '\x90', 'I', '\x2', '\x384', '\x383', '\x3', '\x2', '\x2', '\x2', 
		'\x384', '\x385', '\x3', '\x2', '\x2', '\x2', '\x385', '\x386', '\x3', 
		'\x2', '\x2', '\x2', '\x386', '\x387', '\a', '\'', '\x2', '\x2', '\x387', 
		'\x388', '\x5', '\x90', 'I', '\x2', '\x388', '\x389', '\a', '\'', '\x2', 
		'\x2', '\x389', '\x38A', '\x5', '\x90', 'I', '\x2', '\x38A', '\x38C', 
		'\x3', '\x2', '\x2', '\x2', '\x38B', '\x37D', '\x3', '\x2', '\x2', '\x2', 
		'\x38B', '\x384', '\x3', '\x2', '\x2', '\x2', '\x38C', '\x38D', '\x3', 
		'\x2', '\x2', '\x2', '\x38D', '\x38E', '\a', '#', '\x2', '\x2', '\x38E', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\x38F', '\x390', '\a', '(', '\x2', 
		'\x2', '\x390', '\x391', '\a', '\x1E', '\x2', '\x2', '\x391', '\x392', 
		'\x5', 'n', '\x38', '\x2', '\x392', '\x393', '\a', '\x1F', '\x2', '\x2', 
		'\x393', '\xC1', '\x3', '\x2', '\x2', '\x2', '\x394', '\x3A3', '\a', '\x1E', 
		'\x2', '\x2', '\x395', '\x39C', '\x5', '\x16', '\f', '\x2', '\x396', '\x399', 
		'\x5', 'n', '\x38', '\x2', '\x397', '\x398', '\a', '%', '\x2', '\x2', 
		'\x398', '\x39A', '\x5', '\x16', '\f', '\x2', '\x399', '\x397', '\x3', 
		'\x2', '\x2', '\x2', '\x399', '\x39A', '\x3', '\x2', '\x2', '\x2', '\x39A', 
		'\x39C', '\x3', '\x2', '\x2', '\x2', '\x39B', '\x395', '\x3', '\x2', '\x2', 
		'\x2', '\x39B', '\x396', '\x3', '\x2', '\x2', '\x2', '\x39C', '\x39E', 
		'\x3', '\x2', '\x2', '\x2', '\x39D', '\x39F', '\a', ',', '\x2', '\x2', 
		'\x39E', '\x39D', '\x3', '\x2', '\x2', '\x2', '\x39E', '\x39F', '\x3', 
		'\x2', '\x2', '\x2', '\x39F', '\x3A1', '\x3', '\x2', '\x2', '\x2', '\x3A0', 
		'\x3A2', '\a', '%', '\x2', '\x2', '\x3A1', '\x3A0', '\x3', '\x2', '\x2', 
		'\x2', '\x3A1', '\x3A2', '\x3', '\x2', '\x2', '\x2', '\x3A2', '\x3A4', 
		'\x3', '\x2', '\x2', '\x2', '\x3A3', '\x39B', '\x3', '\x2', '\x2', '\x2', 
		'\x3A3', '\x3A4', '\x3', '\x2', '\x2', '\x2', '\x3A4', '\x3A5', '\x3', 
		'\x2', '\x2', '\x2', '\x3A5', '\x3A6', '\a', '\x1F', '\x2', '\x2', '\x3A6', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\x3A7', '\x3A8', '\x5', '\xC6', '\x64', 
		'\x2', '\x3A8', '\x3A9', '\a', '(', '\x2', '\x2', '\x3A9', '\x3AA', '\a', 
		'\x1D', '\x2', '\x2', '\x3AA', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x3AB', 
		'\x3B5', '\x5', 'p', '\x39', '\x2', '\x3AC', '\x3B0', '\a', '\x1E', '\x2', 
		'\x2', '\x3AD', '\x3AE', '\a', '?', '\x2', '\x2', '\x3AE', '\x3B1', '\x5', 
		'p', '\x39', '\x2', '\x3AF', '\x3B1', '\x5', '\xC6', '\x64', '\x2', '\x3B0', 
		'\x3AD', '\x3', '\x2', '\x2', '\x2', '\x3B0', '\x3AF', '\x3', '\x2', '\x2', 
		'\x2', '\x3B1', '\x3B2', '\x3', '\x2', '\x2', '\x2', '\x3B2', '\x3B3', 
		'\a', '\x1F', '\x2', '\x2', '\x3B3', '\x3B5', '\x3', '\x2', '\x2', '\x2', 
		'\x3B4', '\x3AB', '\x3', '\x2', '\x2', '\x2', '\x3B4', '\x3AC', '\x3', 
		'\x2', '\x2', '\x2', '\x3B5', '\xC7', '\x3', '\x2', '\x2', '\x2', '\x3B6', 
		'\x3BC', '\a', '&', '\x2', '\x2', '\x3B7', '\x3BC', '\a', '\x2', '\x2', 
		'\x3', '\x3B8', '\x3BC', '\x6', '\x65', '\v', '\x2', '\x3B9', '\x3BC', 
		'\x6', '\x65', '\f', '\x2', '\x3BA', '\x3BC', '\x6', '\x65', '\r', '\x2', 
		'\x3BB', '\x3B6', '\x3', '\x2', '\x2', '\x2', '\x3BB', '\x3B7', '\x3', 
		'\x2', '\x2', '\x2', '\x3BB', '\x3B8', '\x3', '\x2', '\x2', '\x2', '\x3BB', 
		'\x3B9', '\x3', '\x2', '\x2', '\x2', '\x3BB', '\x3BA', '\x3', '\x2', '\x2', 
		'\x2', '\x3BC', '\xC9', '\x3', '\x2', '\x2', '\x2', 'm', '\xD1', '\xD9', 
		'\xE1', '\xEE', '\xF2', '\xF5', '\xFE', '\x108', '\x10C', '\x110', '\x114', 
		'\x11B', '\x123', '\x12E', '\x132', '\x136', '\x13E', '\x145', '\x151', 
		'\x155', '\x15B', '\x15F', '\x163', '\x16C', '\x17D', '\x185', '\x195', 
		'\x1A2', '\x1A6', '\x1AA', '\x1AE', '\x1BC', '\x1C3', '\x1C5', '\x1C9', 
		'\x1CF', '\x1D2', '\x1D8', '\x1E0', '\x1E5', '\x1EB', '\x1F2', '\x1F9', 
		'\x204', '\x209', '\x20D', '\x212', '\x216', '\x21E', '\x226', '\x22B', 
		'\x22E', '\x236', '\x23E', '\x243', '\x247', '\x24B', '\x253', '\x261', 
		'\x265', '\x26F', '\x281', '\x287', '\x29B', '\x2A6', '\x2B0', '\x2B4', 
		'\x2BC', '\x2C0', '\x2C2', '\x2C7', '\x2CA', '\x2D1', '\x2E2', '\x2E4', 
		'\x2EB', '\x2F4', '\x2F8', '\x2FE', '\x304', '\x30E', '\x313', '\x31B', 
		'\x321', '\x333', '\x338', '\x33A', '\x343', '\x349', '\x350', '\x354', 
		'\x35D', '\x367', '\x36A', '\x36F', '\x37D', '\x381', '\x384', '\x38B', 
		'\x399', '\x39B', '\x39E', '\x3A1', '\x3A3', '\x3B0', '\x3B4', '\x3BB',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
