<# // This template creates a <PackageName>_<StructName>Struct.cs file #>
<#@ template debug="false" hostspecific="false" language="C#" inherits="TemplateBase" #>
<#@ assembly name="$(SolutionDir)go2cs.Common\$(OutDir)go2cs.Common.dll" #>
<#@ assembly name="netstandard" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="go2cs" #>
<#@ import namespace="go2cs.Metadata" #>
<#@ output extension=".cs" #>
//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on <#=GeneratedTime#>
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
<#=string.Join(Environment.NewLine, UsingStatements)#>
<#if (!NamespacePrefix.Equals("go")) {#>
using go;
<#}#>

#nullable enable

<#=NamespaceHeader#>
    public static partial class <#=PackageName#>_package
    {
        [<#=GeneratedCodeAttribute#>]<#
        foreach (string promotedStruct in PromotedStructs)
        {
            if (!string.IsNullOrEmpty(promotedStruct))
            {
        #>

        [PromotedStruct(typeof(<#=promotedStruct#>))]<#
            }
        }#>

        <#=Scope#> partial struct <#=StructName#>
        {<#
            foreach (KeyValuePair<string, List<FunctionSignature>> kvp in PromotedFunctions)
            {
                foreach (var decl in kvp.Value)
                {
                    #><#=new StructFuncDeclTemplate
                    {
                        PromotedField = kvp.Key,
                        FunctionName = decl.Name,
                        Scope = "public",
                        ParameterSignature = decl.Signature.GenerateParametersSignature(),
                        ParameterNames = GetParameterNames(decl),
                        ParameterTypes = GetParameterTypeNames(decl),
                        ResultType = decl.Signature.GenerateResultSignature()
                    }
                    .TransformText()#><#
                }
            }

            foreach (KeyValuePair<string, List<FieldInfo>> kvp in PromotedFields)
            {

                FieldInfo promotedStruct = GetPromotedStruct(kvp.Key);
                bool isPointer = promotedStruct?.Type is PointerTypeInfo;
            #>

            // <#=kvp.Key#> structure promotion - sourced from <#=isPointer ? "pointer" : "value copy"#>
            private readonly ptr<<#=kvp.Key#>> m_<#=kvp.Key#>Ref;

            private ref <#=kvp.Key#> <#=kvp.Key#>_<#=isPointer ? "ptr" : "val"#> => ref m_<#=kvp.Key#>Ref.Value;
<#

                foreach (var decl in kvp.Value)
                {
                #>

            public ref <#=decl.Type.TypeName#> <#=decl.Name#> => ref m_<#=kvp.Key#>Ref.Value.<#=decl.Name#>;
<#
                }
            }
            
            if (PromotedFunctions.Count > 0)
            {
            #>
            
            [DebuggerStepperBoundary]
            static <#=StructName#>()
            {
                Type targetType = typeof(<#=StructName#>);
                MethodInfo extensionMethod;<#

                foreach (KeyValuePair<string, List<FunctionSignature>> kvp in PromotedFunctions)
                {
                    foreach (var decl in kvp.Value)
                    {
                        #><#=new StructFuncInitTemplate
                        {
                            FunctionName = decl.Name
                        }
                        .TransformText()#><#
                    }
                }#>

            }
<#
            
            }#>

            // Constructors
            public <#=StructName#>(NilType _)
            {<#
            foreach (var decl in StructFields)
            {
                if (PromotedStructs.Contains(decl.Type.TypeName))
                {
                    // Promoted struct #>

                this.m_<#=decl.Name#>Ref = new ptr<<#=decl.Type.TypeName#>>(new <#=decl.Type.TypeName#>(nil));<#
                }
                else
                {
                    // Promoted interface or normal struct field #>

                this.<#=decl.Name#> = default;<#
                }
            }#>

            }<# 
            
            if (StructFields.Length > 0)
            {#>


            public <#=StructName#>(<#=string.Join(", ", StructFields.Select(field => $"{(field.Type is PointerTypeInfo ? "ref " : "")}{field.Type.TypeName} {field.Name} = default"))#>)
            {<#
            foreach (var decl in StructFields)
            {
                if (PromotedStructs.Contains(decl.Type.TypeName))
                {
                    // Promoted struct #>

                this.m_<#=decl.Name#>Ref = new ptr<<#=decl.Type.TypeName#>>(<#=decl.Type is PointerTypeInfo ? "ref " : ""#><#=decl.Name#>);<#
                }
                else
                {
                    // Promoted interface or normal struct field #>

                this.<#=decl.Name#> = <#=decl.Name#>;<#
                }
            }#>

            }
<#
            }#>

            // Enable comparisons between nil and <#=StructName#> struct
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(<#=StructName#> value, NilType nil) => value.Equals(default(<#=StructName#>));

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(<#=StructName#> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, <#=StructName#> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, <#=StructName#> value) => value != nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static implicit operator <#=StructName#>(NilType nil) => default(<#=StructName#>);
        }

        [<#=GeneratedCodeAttribute#>]
        <#=Scope#> static <#=StructName#> <#=StructName#>_cast(dynamic value)
        {
            return new <#=StructName#>(<#=GetConstructorParameterNames()#>);
        }
    }
<#=NamespaceFooter#><#+
// Template Parameters
public string NamespacePrefix;
public string NamespaceHeader;
public string NamespaceFooter;
public string PackageName;
public string StructName;
public string Scope;
public FieldInfo[] StructFields;
public HashSet<string> PromotedStructs;
public Dictionary<string, List<FunctionSignature>> PromotedFunctions;
public Dictionary<string, List<FieldInfo>> PromotedFields;
public IEnumerable<string> UsingStatements;

private string GetParameterNames(FunctionSignature function)
{
    string parameterNames = function.GetParameterNames();

    if (parameterNames.Length > 0)
        parameterNames = ", " + parameterNames;

    return parameterNames;
}

private string GetConstructorParameterNames()
{
    return string.Join(", ", StructFields.Select(field => $"{(field.Type is PointerTypeInfo ? "ref " : "")}value.{field.Name}"));
}

private string GetParameterTypeNames(FunctionSignature function)
{
    string parameterTypes = function.GetParameterTypeNames();

    if (parameterTypes.Length > 0)
        parameterTypes = ", " + parameterTypes;

    return parameterTypes;
}

private FieldInfo GetPromotedStruct(string fieldName)
{
    foreach (FieldInfo field in StructFields)
    {
        if (field.Name.Equals(fieldName, StringComparison.Ordinal))
            return field;
    }

    return null;
}
#>
