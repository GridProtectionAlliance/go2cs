<# // This template creates a <PackageName>_<InterfaceName>Interface.cs file #>
<#@ template debug="false" hostspecific="false" language="C#" inherits="TemplateBase" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="go2cs.Metadata" #>
<#@ output extension=".cs" #>
//---------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool. Changes to this
//     file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generated on <#=GeneratedTime#>
// </auto-generated>
//---------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
<#=string.Join(Environment.NewLine, UsingStatements)#>
<#if (!NamespacePrefix.Equals("go")) {#>
using go;
<#}#>

#nullable enable
#pragma warning disable CS0660, CS0661

<#=NamespaceHeader#>
    public static partial class <#=PackageName#>_package
    {
        [<#=GeneratedCodeAttribute#>]
        <#=Scope#> partial interface <#=InterfaceName#>
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static <#=InterfaceName#> As<T>(in T target) => (<#=InterfaceName#><T>)target!;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static <#=InterfaceName#> As<T>(ptr<T> target_ptr) => (<#=InterfaceName#><T>)target_ptr;

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static <#=InterfaceName#>? As(object target) =>
                typeof(<#=InterfaceName#><>).CreateInterfaceHandler<<#=InterfaceName#>>(target);
        }

        [<#=GeneratedCodeAttribute#>]
        <#=Scope#> class <#=InterfaceName#><T> : <#=InterfaceName#>
        {
            private T m_target = default!;
            private readonly ptr<T>? m_target_ptr;
            private readonly bool m_target_is_ptr;

            public ref T Target
            {
                get
                {
                    if (m_target_is_ptr && m_target_ptr is not null)
                        return ref m_target_ptr.val;

                    return ref m_target;
                }
            }

            public <#=InterfaceName#>(in T target) => m_target = target;

            public <#=InterfaceName#>(ptr<T> target_ptr)
            {
                m_target_ptr = target_ptr;
                m_target_is_ptr = true;
            }<#
        
            foreach (var decl in Functions)
            {
                #><#=new InterfaceFuncDeclTemplate
                {
                    FunctionName = decl.Name,
                    Scope = "public",
                    ParameterSignature = decl.Signature.GenerateParametersSignature(),
                    ParameterNames = GetParameterNames(decl),
                    ParameterTypes = GetParameterTypeNames(decl),
                    ResultType = decl.Signature.GenerateResultSignature()
                }
                .TransformText()#><#
            }#>

            
            public string ToString(string? format, IFormatProvider? formatProvider) => format ?? GetGoTypeName(typeof(T));

            [DebuggerStepperBoundary]
            static <#=InterfaceName#>()
            {
                Type targetType = typeof(T);
                Type targetTypeByPtr = typeof(ptr<T>);
                MethodInfo? extensionMethod;<#
                
                foreach (var decl in Functions)
                {
                    #><#=new InterfaceFuncInitTemplate
                    {
                        FunctionName = decl.Name,
                        InterfaceName = InterfaceName
                    }
                    .TransformText()#><#
                }#>

            }

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator <#=InterfaceName#><T>(in ptr<T> target_ptr) => new <#=InterfaceName#><T>(target_ptr);

            [MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
            public static explicit operator <#=InterfaceName#><T>(in T target) => new <#=InterfaceName#><T>(target);

            // Enable comparisons between nil and <#=InterfaceName#><T> interface instance
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(<#=InterfaceName#><T> value, NilType nil) => Activator.CreateInstance<<#=InterfaceName#><T>>().Equals(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(<#=InterfaceName#><T> value, NilType nil) => !(value == nil);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator ==(NilType nil, <#=InterfaceName#><T> value) => value == nil;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static bool operator !=(NilType nil, <#=InterfaceName#><T> value) => value != nil;
        }
    }
<#=NamespaceFooter#>

namespace go
{
    public static class <#=PackageName#>_<#=InterfaceName#>Extensions
    {
        private static readonly ConcurrentDictionary<Type, MethodInfo> s_conversionOperators = new ConcurrentDictionary<Type, MethodInfo>();

        [<#=GeneratedCodeAttribute#>, MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static T _<T>(this <#=NamespacePrefix#>.<#=PackageName#>_package.<#=InterfaceName#> target)
        {
            try
            {
                return ((<#=NamespacePrefix#>.<#=PackageName#>_package.<#=InterfaceName#><T>)target).Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(typeof(T))}: missing method {ex.InnerException?.Message}");
            }
        }

        [<#=GeneratedCodeAttribute#>, MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _<T>(this <#=NamespacePrefix#>.<#=PackageName#>_package.<#=InterfaceName#> target, out T result)
        {
            try
            {
                result = target._<T>();
                return true;
            }
            catch (PanicException)
            {
                result = default!;
                return false;
            }
        }

        [<#=GeneratedCodeAttribute#>, MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static object? _(this <#=NamespacePrefix#>.<#=PackageName#>_package.<#=InterfaceName#> target, Type type)
        {
            try
            {
                MethodInfo? conversionOperator = s_conversionOperators.GetOrAdd(type, _ => typeof(<#=NamespacePrefix#>.<#=PackageName#>_package.<#=InterfaceName#><>).GetExplicitGenericConversionOperator(type));

                if (conversionOperator is null)
                    throw new PanicException($"interface conversion: failed to create converter for {GetGoTypeName(target.GetType())} to {GetGoTypeName(type)}");

                dynamic? result = conversionOperator.Invoke(null, new object[] { target });
                return result?.Target;
            }
            catch (NotImplementedException ex)
            {
                throw new PanicException($"interface conversion: {GetGoTypeName(target.GetType())} is not {GetGoTypeName(type)}: missing method {ex.InnerException?.Message}");
            }
        }

        [<#=GeneratedCodeAttribute#>, MethodImpl(MethodImplOptions.AggressiveInlining), DebuggerNonUserCode]
        public static bool _(this <#=NamespacePrefix#>.<#=PackageName#>_package.<#=InterfaceName#> target, Type type, out object? result)
        {
            try
            {
                result = target._(type);
                return true;
            }
            catch (PanicException)
            {
                result = type.IsValueType ? Activator.CreateInstance(type) : null;
                return false;
            }
        }
    }
}<#+
// Template Parameters
public string NamespacePrefix;
public string NamespaceHeader;
public string NamespaceFooter;
public string PackageName;
public string InterfaceName;
public string Scope;
public InterfaceInfo Interface;
public IEnumerable<FunctionSignature> Functions;
public IEnumerable<string> UsingStatements;

private string GetParameterNames(FunctionSignature function)
{
    string parameterNames = function.GetParameterNames();

    if (parameterNames.Length > 0)
        parameterNames = ", " + parameterNames;

    return parameterNames;
}

private string GetParameterTypeNames(FunctionSignature function)
{
    string parameterTypes = function.GetParameterTypeNames();

    if (parameterTypes.Length > 0)
        parameterTypes = ", " + parameterTypes;

    return parameterTypes;
}
#>
