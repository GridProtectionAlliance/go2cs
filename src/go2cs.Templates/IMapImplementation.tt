<# // This template creates an inherited type, e.g., type MyFloat float64 in a <PackageName>_<StructName>StructOf(<GoTypeName>).cs file #>
<#@ template debug="false" hostspecific="false" language="C#" inherits="TemplateBase" #>
<#@ output extension=".cs" #>

            public nint Length => ((IMap)m_value).Length;

            object? IMap.this[object key]
            {
                get => ((IMap)m_value)[key];
                set => ((IMap)m_value)[key] = value;
            }

            public <#=TypeName#> this[<#=KeyName#> key]
            {
                get => m_value[key];
            
                set => m_value[key] = value;
            }

            public (<#=TypeName#>, bool) this[<#=KeyName#> key, bool _]
            {
                get => m_value.TryGetValue(key, out <#=TypeName#> value) ? (value!, true) : (default!, false);
            }
<#+
// Template Parameters
public string KeyName;
public string TypeName;
#>
