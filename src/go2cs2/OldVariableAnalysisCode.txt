	addFunctionParams := func(funcDecl *ast.FuncDecl, signature *types.Signature) {
		// Add all function parameters to the current scope
		parameters := getParameters(signature, false)

		for i := 0; i < parameters.Len(); i++ {
			param := parameters.At(i)
			name := param.Name()

			if len(name) == 0 || name == "_" {
				continue
			}

			if len(funcDecl.Type.Params.List[i].Names) == 0 {
				// Anonymous parameter
				continue
			}

			varNames[param] = name

			// Get identifier for the parameter
			ident := funcDecl.Type.Params.List[i].Names[0]
			v.identNames[ident] = name
			v.isReassigned[ident] = false

			declareVar(param.Name(), param)
		}

		// Add receiver parameter to the current scope
		if signature.Recv() != nil {
			recv := signature.Recv()
			recvName := recv.Name()

			if len(recvName) > 0 && recvName != "_" && len(funcDecl.Recv.List[0].Names) > 0 {
				varNames[recv] = recvName

				// Get identifier for the receiver
				ident := funcDecl.Recv.List[0].Names[0]
				v.identNames[ident] = recvName
				v.isReassigned[ident] = false

				declareVar(recvName, recv)
			}
		}

		// Add named result parameters to the current scope
		results := signature.Results()

		for i := 0; i < results.Len(); i++ {
			result := results.At(i)
			name := result.Name()

			if len(name) == 0 || name == "_" || len(funcDecl.Type.Results.List[i].Names) == 0 {
				continue
			}

			varNames[result] = name
			ident := funcDecl.Type.Results.List[i].Names[0]

			v.identNames[ident] = name
			v.isReassigned[ident] = false

			declareVar(name, result)
		}
	}
