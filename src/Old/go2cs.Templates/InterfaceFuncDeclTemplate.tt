<# // This template creates the function declarations in a <PackageName>_<InterfaceName>Interface.cs file #>
<#@ template debug="false" hostspecific="false" language="C#" #>


            private delegate <#=ResultType#> <#=FunctionName#>ByPtr(ptr<T> value<#=PrefixedParameterSignature#>);
            private delegate <#=ResultType#> <#=FunctionName#>ByVal(T value<#=PrefixedParameterSignature#>);

            private static readonly <#=FunctionName#>ByPtr? s_<#=FunctionName#>ByPtr;
            private static readonly <#=FunctionName#>ByVal? s_<#=FunctionName#>ByVal;

            [DebuggerNonUserCode, MethodImpl(MethodImplOptions.AggressiveInlining)]
            <#=Scope#> <#=ResultType#> <#=FunctionName#>(<#=ParameterSignature#>)
            {
                T target = m_target;

                if (m_target_is_ptr && m_target_ptr is not null)
                    target = m_target_ptr.val;<#
                
            if (ResultType == "void"){#>


                if (s_<#=FunctionName#>ByPtr is null || !m_target_is_ptr)
                {
                    s_<#=FunctionName#>ByVal!(target<#=ParameterNames#>);
                    return;
                }

                s_<#=FunctionName#>ByPtr(m_target_ptr!<#=ParameterNames#>);
                return;<#
            }
            else {#>


                if (s_<#=FunctionName#>ByPtr is null || !m_target_is_ptr)
                    return s_<#=FunctionName#>ByVal!(target<#=ParameterNames#>);

                return s_<#=FunctionName#>ByPtr(m_target_ptr!<#=ParameterNames#>);<#
            }#>

            }<#+
// Template Parameters
public string FunctionName;
public string Scope;
public string ParameterSignature; // e.g.: "double p0, string p1"
public string ParameterNames;     // (comma prefixed), e.g.: ", p0, p1" -- do not prefix for 0 parameters
public string ParameterTypes;     // (comma prefixed), e.g.: ", double, string" -- do not prefix for 0 parameters
public string ResultType;

private string PrefixedParameterSignature => string.IsNullOrEmpty(ParameterSignature) ? "" : $", {ParameterSignature}";
#>
